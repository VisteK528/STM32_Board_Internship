
MyBoardFLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1fc  0800b1fc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b204  0800b204  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b208  0800b208  0001b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  20000168  0800b374  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20002030  0800b374  00022030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfd9  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b27  00000000  00000000  0003d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ae  00000000  00000000  00043570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bc22  00000000  00000000  0004481e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021324  00000000  00000000  00070440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5d51  00000000  00000000  00091764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c44  00000000  00000000  001874b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0018e0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b114 	.word	0x0800b114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800b114 	.word	0x0800b114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x60>)
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_CAN1_Init+0x60>)
 8000578:	2220      	movs	r2, #32
 800057a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_CAN1_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_CAN1_Init+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x60>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x60>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x60>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x60>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x60>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x60>)
 80005ba:	f001 f881 	bl	80016c0 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80005c4:	f000 fa3c 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000184 	.word	0x20000184
 80005d0:	40006400 	.word	0x40006400

080005d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <HAL_CAN_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_CAN_MspInit+0x80>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000638:	2309      	movs	r3, #9
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000644:	f001 fa88 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40006400 	.word	0x40006400
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b40      	ldr	r3, [pc, #256]	; (8000774 <MX_GPIO_Init+0x118>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a3f      	ldr	r2, [pc, #252]	; (8000774 <MX_GPIO_Init+0x118>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <MX_GPIO_Init+0x118>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <MX_GPIO_Init+0x118>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a39      	ldr	r2, [pc, #228]	; (8000774 <MX_GPIO_Init+0x118>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <MX_GPIO_Init+0x118>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <MX_GPIO_Init+0x118>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a33      	ldr	r2, [pc, #204]	; (8000774 <MX_GPIO_Init+0x118>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <MX_GPIO_Init+0x118>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MX_GPIO_Init+0x118>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a2d      	ldr	r2, [pc, #180]	; (8000774 <MX_GPIO_Init+0x118>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_GPIO_Init+0x118>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_RESET_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2111      	movs	r1, #17
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 fcdb 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	4824      	ldr	r0, [pc, #144]	; (8000778 <MX_GPIO_Init+0x11c>)
 80006e6:	f001 fcd5 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PUSHBUTTON_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481f      	ldr	r0, [pc, #124]	; (800077c <MX_GPIO_Init+0x120>)
 8000700:	f001 fa2a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FLASH_RESET_Pin|FLASH_CS_Pin;
 8000704:	2311      	movs	r3, #17
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fa1b 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <MX_GPIO_Init+0x11c>)
 800073c:	f001 fa0c 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000744:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <MX_GPIO_Init+0x11c>)
 8000756:	f001 f9ff 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2017      	movs	r0, #23
 8000760:	f001 f985 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000764:	2017      	movs	r0, #23
 8000766:	f001 f99e 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007bc:	f001 fca5 	bl	800210a <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 f93b 	bl	8000a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007ce:	f001 fd37 	bl	8002240 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f932 	bl	8000a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007e0:	f001 fd79 	bl	80022d6 <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f929 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001ac 	.word	0x200001ac
 80007f8:	40005400 	.word	0x40005400
 80007fc:	10909cec 	.word	0x10909cec

08000800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	; 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2288      	movs	r2, #136	; 0x88
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f009 fe58 	bl	800a4d6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_I2C_MspInit+0xb0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13a      	bne.n	80008a6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f004 faad 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f000 f8fa 	bl	8000a40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000864:	23c0      	movs	r3, #192	; 0xc0
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086a:	2312      	movs	r3, #18
 800086c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087c:	2304      	movs	r3, #4
 800087e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_I2C_MspInit+0xb8>)
 800088a:	f001 f965 	bl	8001b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_I2C_MspInit+0xb4>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	37b0      	adds	r7, #176	; 0xb0
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	f008 ff5e 	bl	8009790 <CDC_Transmit_FS>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_write+0x40>)
 80008da:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_write+0x40>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d0f1      	beq.n	80008c8 <_write+0xc>

    if (USBD_FAIL == rc) {
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <_write+0x40>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d101      	bne.n	80008f0 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	e000      	b.n	80008f2 <_write+0x36>
    }
    return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000200 	.word	0x20000200

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 fe42 	bl	800158e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f837 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f7ff fea5 	bl	800065c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000912:	f7ff ff35 	bl	8000780 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000916:	f7ff fe29 	bl	800056c <MX_CAN1_Init>
  MX_QUADSPI_Init();
 800091a:	f000 f897 	bl	8000a4c <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 800091e:	f000 fd81 	bl	8001424 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000922:	f008 fe77 	bl	8009614 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 uint8_t data = 76;
 8000926:	234c      	movs	r3, #76	; 0x4c
 8000928:	71bb      	strb	r3, [r7, #6]
 uint8_t received = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	717b      	strb	r3, [r7, #5]

 HAL_StatusTypeDef status;
 HAL_GPIO_WritePin(FLASH_RESET_GPIO_Port, FLASH_RESET_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 fbad 	bl	8002094 <HAL_GPIO_WritePin>
 status = CSP_QUADSPI_Init();
 800093a:	f000 f933 	bl	8000ba4 <CSP_QUADSPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]

 status = CSP_QSPI_WriteMemory(&data, 0x00, sizeof(data));
 8000942:	1dbb      	adds	r3, r7, #6
 8000944:	2201      	movs	r2, #1
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fad1 	bl	8000ef0 <CSP_QSPI_WriteMemory>
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
 HAL_Delay(1000);
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f000 fe8f 	bl	8001678 <HAL_Delay>
 status = CSP_QSPI_Read(&received, 0x00, sizeof(data));
 800095a:	1d7b      	adds	r3, r7, #5
 800095c:	2201      	movs	r2, #1
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fc53 	bl	800120c <CSP_QSPI_Read>
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
	  printf("Received: %d\n", received);
 800096a:	797b      	ldrb	r3, [r7, #5]
 800096c:	4619      	mov	r1, r3
 800096e:	4802      	ldr	r0, [pc, #8]	; (8000978 <main+0x78>)
 8000970:	f009 fd5c 	bl	800a42c <iprintf>
 8000974:	e7f9      	b.n	800096a <main+0x6a>
 8000976:	bf00      	nop
 8000978:	0800b12c 	.word	0x0800b12c

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2244      	movs	r2, #68	; 0x44
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f009 fda3 	bl	800a4d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800099e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009a2:	f002 fea9 	bl	80036f8 <HAL_PWREx_ControlVoltageScaling>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ac:	f000 f848 	bl	8000a40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009b0:	f002 fe84 	bl	80036bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <SystemClock_Config+0xc0>)
 80009b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <SystemClock_Config+0xc0>)
 80009bc:	f023 0318 	bic.w	r3, r3, #24
 80009c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009c4:	2314      	movs	r3, #20
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d4:	2360      	movs	r3, #96	; 0x60
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009dc:	2301      	movs	r3, #1
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009e4:	2328      	movs	r3, #40	; 0x28
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e8:	2307      	movs	r3, #7
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fbcf 	bl	800419c <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f81c 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 ff97 	bl	8004954 <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a2c:	f000 f808 	bl	8000a40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a30:	f004 fc9e 	bl	8005370 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a34:	bf00      	nop
 8000a36:	3758      	adds	r7, #88	; 0x58
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <MX_QUADSPI_Init+0x48>)
 8000a54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a64:	2210      	movs	r2, #16
 8000a66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a6a:	2219      	movs	r2, #25
 8000a6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_QUADSPI_Init+0x44>)
 8000a7c:	f002 fea2 	bl	80037c4 <HAL_QSPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a86:	f7ff ffdb 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000204 	.word	0x20000204
 8000a94:	a0001000 	.word	0xa0001000

08000a98 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_QSPI_MspInit+0xb8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d145      	bne.n	8000b46 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000abe:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac4:	6513      	str	r3, [r2, #80]	; 0x50
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_QSPI_MspInit+0xbc>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b02:	23c0      	movs	r3, #192	; 0xc0
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b12:	230a      	movs	r3, #10
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 f81a 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000b24:	f640 4303 	movw	r3, #3075	; 0xc03
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b36:	230a      	movs	r3, #10
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_QSPI_MspInit+0xc0>)
 8000b42:	f001 f809 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	a0001000 	.word	0xa0001000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400

08000b5c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_QSPI_MspDeInit+0x3c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10f      	bne.n	8000b8e <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_QSPI_MspDeInit+0x40>)
 8000b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_QSPI_MspDeInit+0x40>)
 8000b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b78:	6513      	str	r3, [r2, #80]	; 0x50
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8000b7a:	21c0      	movs	r1, #192	; 0xc0
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f001 f994 	bl	8001eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11);
 8000b84:	f640 4103 	movw	r1, #3075	; 0xc03
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_QSPI_MspDeInit+0x44>)
 8000b8a:	f001 f98f 	bl	8001eac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	a0001000 	.word	0xa0001000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <CSP_QUADSPI_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <CSP_QUADSPI_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <CSP_QUADSPI_Init+0x64>)
 8000bb0:	f002 fe7e 	bl	80038b0 <HAL_QSPI_DeInit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e021      	b.n	8000c02 <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 8000bbe:	f7ff ff45 	bl	8000a4c <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000bc2:	f000 fa21 	bl	8001008 <QSPI_ResetChip>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e018      	b.n	8000c02 <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 fd51 	bl	8001678 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000bd6:	f000 f81b 	bl	8000c10 <QSPI_AutoPollingMemReady>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00e      	b.n	8000c02 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000be4:	f000 f84c 	bl	8000c80 <QSPI_WriteEnable>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e007      	b.n	8000c02 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8000bf2:	f000 f88f 	bl	8000d14 <QSPI_Configuration>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000204 	.word	0x20000204
 8000c0c:	a0001000 	.word	0xa0001000

08000c10 <QSPI_AutoPollingMemReady>:
			}

	return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
 8000c14:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c36:	2300      	movs	r3, #0
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c56:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000c58:	463a      	mov	r2, r7
 8000c5a:	f107 0118 	add.w	r1, r7, #24
 8000c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <QSPI_AutoPollingMemReady+0x6c>)
 8000c64:	f002 ffdf 	bl	8003c26 <HAL_QSPI_AutoPolling>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000204 	.word	0x20000204

08000c80 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4816      	ldr	r0, [pc, #88]	; (8000d10 <QSPI_WriteEnable+0x90>)
 8000cb8:	f002 fe1e 	bl	80038f8 <HAL_QSPI_Command>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e01f      	b.n	8000d06 <QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cde:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000cea:	463a      	mov	r2, r7
 8000cec:	f107 0118 	add.w	r1, r7, #24
 8000cf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <QSPI_WriteEnable+0x90>)
 8000cf6:	f002 ff96 	bl	8003c26 <HAL_QSPI_AutoPolling>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000204 	.word	0x20000204

08000d14 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	; 0x40
 8000d18:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000d24:	2305      	movs	r3, #5
 8000d26:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d52:	4619      	mov	r1, r3
 8000d54:	4843      	ldr	r0, [pc, #268]	; (8000e64 <QSPI_Configuration+0x150>)
 8000d56:	f002 fdcf 	bl	80038f8 <HAL_QSPI_Command>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e07a      	b.n	8000e5a <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483d      	ldr	r0, [pc, #244]	; (8000e64 <QSPI_Configuration+0x150>)
 8000d6e:	f002 feb8 	bl	8003ae2 <HAL_QSPI_Receive>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e06e      	b.n	8000e5a <QSPI_Configuration+0x146>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 8000d82:	2315      	movs	r3, #21
 8000d84:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db0:	4619      	mov	r1, r3
 8000db2:	482c      	ldr	r0, [pc, #176]	; (8000e64 <QSPI_Configuration+0x150>)
 8000db4:	f002 fda0 	bl	80038f8 <HAL_QSPI_Command>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e04b      	b.n	8000e5a <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4825      	ldr	r0, [pc, #148]	; (8000e64 <QSPI_Configuration+0x150>)
 8000dce:	f002 fe88 	bl	8003ae2 <HAL_QSPI_Receive>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e03e      	b.n	8000e5a <QSPI_Configuration+0x146>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8000ddc:	793b      	ldrb	r3, [r7, #4]
 8000dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8000de6:	797b      	ldrb	r3, [r7, #5]
 8000de8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df4:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <QSPI_Configuration+0x150>)
 8000e2e:	f002 fd63 	bl	80038f8 <HAL_QSPI_Command>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <QSPI_Configuration+0x128>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e00e      	b.n	8000e5a <QSPI_Configuration+0x146>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <QSPI_Configuration+0x150>)
 8000e46:	f002 fdb5 	bl	80039b4 <HAL_QSPI_Transmit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <QSPI_Configuration+0x144>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000e50:	f7ff fdf6 	bl	8000a40 <Error_Handler>
		return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <QSPI_Configuration+0x146>
	}
	return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3740      	adds	r7, #64	; 0x40
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000204 	.word	0x20000204

08000e68 <QSPI_Read>:

int32_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  int32_t ret = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8000e7e:	23eb      	movs	r3, #235	; 0xeb
 8000e80:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000e88:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.DummyCycles       = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	623b      	str	r3, [r7, #32]
  s_command.Address           = ReadAddr;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.NbData            = Size;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000eac:	2300      	movs	r3, #0
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <QSPI_Read+0x84>)
 8000ebc:	f002 fd1c 	bl	80038f8 <HAL_QSPI_Command>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <QSPI_Read+0x62>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00b      	b.n	8000ee2 <QSPI_Read+0x7a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ece:	68f9      	ldr	r1, [r7, #12]
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <QSPI_Read+0x84>)
 8000ed2:	f002 fe06 	bl	8003ae2 <HAL_QSPI_Receive>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <QSPI_Read+0x78>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <QSPI_Read+0x7a>
  }

  /* Return BSP status */
  return ret;
 8000ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3750      	adds	r7, #80	; 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000204 	.word	0x20000204

08000ef0 <CSP_QSPI_WriteMemory>:
	}

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
 8000f00:	e003      	b.n	8000f0a <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8000f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f08:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 8000f0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d9f7      	bls.n	8000f02 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8000f12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8000f1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d901      	bls.n	8000f26 <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000f4e:	2338      	movs	r3, #56	; 0x38
 8000f50:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000f58:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8000f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f6c:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8000f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 8000f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e03f      	b.n	8000ffc <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8000f7c:	f7ff fe80 	bl	8000c80 <QSPI_WriteEnable>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e038      	b.n	8000ffc <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f92:	4619      	mov	r1, r3
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <CSP_QSPI_WriteMemory+0x114>)
 8000f96:	f002 fcaf 	bl	80038f8 <HAL_QSPI_Command>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e02b      	b.n	8000ffc <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <CSP_QSPI_WriteMemory+0x114>)
 8000fac:	f002 fd02 	bl	80039b4 <HAL_QSPI_Transmit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e020      	b.n	8000ffc <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000fba:	f7ff fe29 	bl	8000c10 <QSPI_AutoPollingMemReady>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e019      	b.n	8000ffc <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8000fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	4413      	add	r3, r2
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd4:	4413      	add	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8000fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fda:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d203      	bcs.n	8000fec <CSP_QSPI_WriteMemory+0xfc>
 8000fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	e001      	b.n	8000ff0 <CSP_QSPI_WriteMemory+0x100>
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 8000ff0:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 8000ff2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d9b7      	bls.n	8000f6a <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 8000ffa:	2300      	movs	r3, #0

}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3758      	adds	r7, #88	; 0x58
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000204 	.word	0x20000204

08001008 <QSPI_ResetChip>:
		return HAL_ERROR;
	}
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b090      	sub	sp, #64	; 0x40
 800100c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800102e:	2366      	movs	r3, #102	; 0x66
 8001030:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	f241 3288 	movw	r2, #5000	; 0x1388
 8001048:	4619      	mov	r1, r3
 800104a:	486f      	ldr	r0, [pc, #444]	; (8001208 <QSPI_ResetChip+0x200>)
 800104c:	f002 fc54 	bl	80038f8 <HAL_QSPI_Command>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0d2      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800105e:	e003      	b.n	8001068 <QSPI_ResetChip+0x60>
		__NOP();
 8001060:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001064:	3301      	adds	r3, #1
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106a:	2b2e      	cmp	r3, #46	; 0x2e
 800106c:	d9f8      	bls.n	8001060 <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 800108a:	2399      	movs	r3, #153	; 0x99
 800108c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4619      	mov	r1, r3
 80010a6:	4858      	ldr	r0, [pc, #352]	; (8001208 <QSPI_ResetChip+0x200>)
 80010a8:	f002 fc26 	bl	80038f8 <HAL_QSPI_Command>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0a4      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 80010d2:	2366      	movs	r3, #102	; 0x66
 80010d4:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4619      	mov	r1, r3
 80010ee:	4846      	ldr	r0, [pc, #280]	; (8001208 <QSPI_ResetChip+0x200>)
 80010f0:	f002 fc02 	bl	80038f8 <HAL_QSPI_Command>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <QSPI_ResetChip+0xf6>
			!= HAL_OK) {
		return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e080      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001102:	e003      	b.n	800110c <QSPI_ResetChip+0x104>
		__NOP();
 8001104:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001108:	3301      	adds	r3, #1
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800110c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110e:	2b2e      	cmp	r3, #46	; 0x2e
 8001110:	d9f8      	bls.n	8001104 <QSPI_ResetChip+0xfc>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 800112e:	2399      	movs	r3, #153	; 0x99
 8001130:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4619      	mov	r1, r3
 800114a:	482f      	ldr	r0, [pc, #188]	; (8001208 <QSPI_ResetChip+0x200>)
 800114c:	f002 fbd4 	bl	80038f8 <HAL_QSPI_Command>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <QSPI_ResetChip+0x152>
			!= HAL_OK) {
		return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e052      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8001176:	2366      	movs	r3, #102	; 0x66
 8001178:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4619      	mov	r1, r3
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <QSPI_ResetChip+0x200>)
 8001194:	f002 fbb0 	bl	80038f8 <HAL_QSPI_Command>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <QSPI_ResetChip+0x19a>
			!= HAL_OK) {
		return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e02e      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a6:	e003      	b.n	80011b0 <QSPI_ResetChip+0x1a8>
		__NOP();
 80011a8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	3301      	adds	r3, #1
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b2:	2b2e      	cmp	r3, #46	; 0x2e
 80011b4:	d9f8      	bls.n	80011a8 <QSPI_ResetChip+0x1a0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 80011d2:	2399      	movs	r3, #153	; 0x99
 80011d4:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <QSPI_ResetChip+0x200>)
 80011f0:	f002 fb82 	bl	80038f8 <HAL_QSPI_Command>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <QSPI_ResetChip+0x1f6>
			!= HAL_OK) {
		return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <QSPI_ResetChip+0x1f8>
	}

	return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3740      	adds	r7, #64	; 0x40
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000204 	.word	0x20000204

0800120c <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	return QSPI_Read(pData, ReadAddr, Size);
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff fe23 	bl	8000e68 <QSPI_Read>
 8001222:	4603      	mov	r3, r0
 8001224:	b2db      	uxtb	r3, r3
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x44>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x44>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x44>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6593      	str	r3, [r2, #88]	; 0x58
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f9b8 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80012d0:	2020      	movs	r0, #32
 80012d2:	f000 fef7 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <OTG_FS_IRQHandler+0x10>)
 80012e2:	f001 f997 	bl	8002614 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200017b8 	.word	0x200017b8

080012f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:
  }
  return len;
}

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f009 f8d6 	bl	800a574 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20018000 	.word	0x20018000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000248 	.word	0x20000248
 80013fc:	20002030 	.word	0x20002030

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART2_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <MX_USART2_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x58>)
 8001468:	f004 f964 	bl	8005734 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f7ff fae5 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000024c 	.word	0x2000024c
 8001480:	40004400 	.word	0x40004400

08001484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ac      	sub	sp, #176	; 0xb0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2288      	movs	r2, #136	; 0x88
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f009 f816 	bl	800a4d6 <memset>
  if(uartHandle->Instance==USART2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_UART_MspInit+0xb0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d13b      	bne.n	800152c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fc6b 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014cc:	f7ff fab8 	bl	8000a40 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6593      	str	r3, [r2, #88]	; 0x58
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_UART_MspInit+0xb4>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001500:	230c      	movs	r3, #12
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f000 fb16 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800152c:	bf00      	nop
 800152e:	37b0      	adds	r7, #176	; 0xb0
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40004400 	.word	0x40004400
 8001538:	40021000 	.word	0x40021000

0800153c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001540:	f7ff ff5e 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156a:	f009 f809 	bl	800a580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800156e:	f7ff f9c7 	bl	8000900 <main>

08001572 <LoopForever>:

LoopForever:
    b LoopForever
 8001572:	e7fe      	b.n	8001572 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001574:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001580:	0800b20c 	.word	0x0800b20c
  ldr r2, =_sbss
 8001584:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001588:	20002030 	.word	0x20002030

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>

0800158e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fa5d 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f80e 	bl	80015c0 <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	e001      	b.n	80015b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b0:	f7ff fe3e 	bl	8001230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_InitTick+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_InitTick+0x6c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fa69 	bl	8001ac2 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 fa33 	bl	8001a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_InitTick+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	200002d4 	.word	0x200002d4

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200002d4 	.word	0x200002d4

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0ed      	b.n	80018ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7fe ff78 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff ffb4 	bl	8001660 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016fa:	e012      	b.n	8001722 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016fc:	f7ff ffb0 	bl	8001660 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d90b      	bls.n	8001722 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0c5      	b.n	80018ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0e5      	beq.n	80016fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0202 	bic.w	r2, r2, #2
 800173e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001740:	f7ff ff8e 	bl	8001660 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001746:	e012      	b.n	800176e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001748:	f7ff ff8a 	bl	8001660 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b0a      	cmp	r3, #10
 8001754:	d90b      	bls.n	800176e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2205      	movs	r2, #5
 8001766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e09f      	b.n	80018ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e5      	bne.n	8001748 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7e5b      	ldrb	r3, [r3, #25]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e9b      	ldrb	r3, [r3, #26]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e007      	b.n	80017fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0220 	bic.w	r2, r2, #32
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7edb      	ldrb	r3, [r3, #27]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0210 	bic.w	r2, r2, #16
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0210 	orr.w	r2, r2, #16
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7f1b      	ldrb	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e007      	b.n	800184e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0208 	bic.w	r2, r2, #8
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7f5b      	ldrb	r3, [r3, #29]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0204 	orr.w	r2, r2, #4
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e007      	b.n	8001878 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0204 	bic.w	r2, r2, #4
 8001876:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	ea42 0103 	orr.w	r1, r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff3e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff31 	bl	800191c <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2204      	movs	r2, #4
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e022      	b.n	8001b4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f003 021c 	and.w	r2, r3, #28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e17f      	b.n	8001e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8171 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d005      	beq.n	8001b98 <HAL_GPIO_Init+0x40>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d130      	bne.n	8001bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 0201 	and.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d118      	bne.n	8001c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	6939      	ldr	r1, [r7, #16]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ac 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x242>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dac:	4937      	ldr	r1, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f47f ae78 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	48001800 	.word	0x48001800
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001eba:	e0cd      	b.n	8002058 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80c0 	beq.w	8002052 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001ed2:	4a68      	ldr	r2, [pc, #416]	; (8002074 <HAL_GPIO_DeInit+0x1c8>)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001efa:	d025      	beq.n	8001f48 <HAL_GPIO_DeInit+0x9c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_GPIO_DeInit+0x1cc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01f      	beq.n	8001f44 <HAL_GPIO_DeInit+0x98>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a5d      	ldr	r2, [pc, #372]	; (800207c <HAL_GPIO_DeInit+0x1d0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d019      	beq.n	8001f40 <HAL_GPIO_DeInit+0x94>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_GPIO_DeInit+0x1d4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_GPIO_DeInit+0x90>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_GPIO_DeInit+0x1d8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00d      	beq.n	8001f38 <HAL_GPIO_DeInit+0x8c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_GPIO_DeInit+0x1dc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <HAL_GPIO_DeInit+0x88>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a59      	ldr	r2, [pc, #356]	; (800208c <HAL_GPIO_DeInit+0x1e0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_GPIO_DeInit+0x84>
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	e00c      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f30:	2307      	movs	r3, #7
 8001f32:	e00a      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f34:	2305      	movs	r3, #5
 8001f36:	e008      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_DeInit+0x9e>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d132      	bne.n	8001fc0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	494b      	ldr	r1, [pc, #300]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4947      	ldr	r1, [pc, #284]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4944      	ldr	r1, [pc, #272]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4940      	ldr	r1, [pc, #256]	; (8002090 <HAL_GPIO_DeInit+0x1e4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_GPIO_DeInit+0x1c8>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	4830      	ldr	r0, [pc, #192]	; (8002074 <HAL_GPIO_DeInit+0x1c8>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	400a      	ands	r2, r1
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2103      	movs	r1, #3
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	08d2      	lsrs	r2, r2, #3
 8001ff4:	4019      	ands	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2103      	movs	r1, #3
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2101      	movs	r1, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2103      	movs	r1, #3
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	2101      	movs	r1, #1
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f af2b 	bne.w	8001ebc <HAL_GPIO_DeInit+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40010000 	.word	0x40010000
 8002078:	48000400 	.word	0x48000400
 800207c:	48000800 	.word	0x48000800
 8002080:	48000c00 	.word	0x48000c00
 8002084:	48001000 	.word	0x48001000
 8002088:	48001400 	.word	0x48001400
 800208c:	48001800 	.word	0x48001800
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f806 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e08d      	b.n	8002238 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe fb65 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2224      	movs	r2, #36	; 0x24
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800215a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e006      	b.n	8002192 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002190:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d108      	bne.n	80021ac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e007      	b.n	80021bc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69d9      	ldr	r1, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b20      	cmp	r3, #32
 8002254:	d138      	bne.n	80022c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002260:	2302      	movs	r3, #2
 8002262:	e032      	b.n	80022ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002292:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d139      	bne.n	8002360 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e033      	b.n	8002362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2224      	movs	r2, #36	; 0x24
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002328:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800236e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002370:	b08f      	sub	sp, #60	; 0x3c
 8002372:	af0a      	add	r7, sp, #40	; 0x28
 8002374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e116      	b.n	80025ae <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f007 fb52 	bl	8009a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2203      	movs	r2, #3
 80023a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 ffad 	bl	800631e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	687e      	ldr	r6, [r7, #4]
 80023cc:	466d      	mov	r5, sp
 80023ce:	f106 0410 	add.w	r4, r6, #16
 80023d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023de:	e885 0003 	stmia.w	r5, {r0, r1}
 80023e2:	1d33      	adds	r3, r6, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f003 febf 	bl	800616a <USB_CoreInit>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0d7      	b.n	80025ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f003 ff9b 	bl	8006340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e04a      	b.n	80024a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333d      	adds	r3, #61	; 0x3d
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	333c      	adds	r3, #60	; 0x3c
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	b298      	uxth	r0, r3
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3356      	adds	r3, #86	; 0x56
 800244c:	4602      	mov	r2, r0
 800244e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3340      	adds	r3, #64	; 0x40
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3344      	adds	r3, #68	; 0x44
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3348      	adds	r3, #72	; 0x48
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	334c      	adds	r3, #76	; 0x4c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	3301      	adds	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3af      	bcc.n	8002410 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e044      	b.n	8002540 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3b5      	bcc.n	80024b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	687e      	ldr	r6, [r7, #4]
 8002552:	466d      	mov	r5, sp
 8002554:	f106 0410 	add.w	r4, r6, #16
 8002558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002564:	e885 0003 	stmia.w	r5, {r0, r1}
 8002568:	1d33      	adds	r3, r6, #4
 800256a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f003 ff33 	bl	80063d8 <USB_DevInit>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e014      	b.n	80025ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 f869 	bl	8003674 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fee1 	bl	800736e <USB_DevDisconnect>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_Start+0x1c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e01c      	b.n	800260c <HAL_PCD_Start+0x56>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fe82 	bl	80062fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 fe95 	bl	800732c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b08d      	sub	sp, #52	; 0x34
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 ff53 	bl	80074d6 <USB_GetMode>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 847e 	bne.w	8002f34 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 feb7 	bl	80073b0 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8474 	beq.w	8002f32 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fea4 	bl	80073b0 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 0202 	and.w	r2, r2, #2
 8002680:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fe92 	bl	80073b0 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b10      	cmp	r3, #16
 8002694:	d161      	bne.n	800275a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0210 	bic.w	r2, r2, #16
 80026a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	0c5b      	lsrs	r3, r3, #17
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d124      	bne.n	800271c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d035      	beq.n	800274a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	6a38      	ldr	r0, [r7, #32]
 80026f2:	f004 fcc9 	bl	8007088 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002702:	441a      	add	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002714:	441a      	add	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	e016      	b.n	800274a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	0c5b      	lsrs	r3, r3, #17
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	2b06      	cmp	r3, #6
 8002726:	d110      	bne.n	800274a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800272e:	2208      	movs	r2, #8
 8002730:	4619      	mov	r1, r3
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	f004 fca8 	bl	8007088 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002744:	441a      	add	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0210 	orr.w	r2, r2, #16
 8002758:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fe26 	bl	80073b0 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800276e:	f040 80a7 	bne.w	80028c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fe2b 	bl	80073d6 <USB_ReadDevAllOutEpInterrupt>
 8002780:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002782:	e099      	b.n	80028b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 808e 	beq.w	80028ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fe4f 	bl	800743e <USB_ReadDevOutEPInterrupt>
 80027a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00c      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	461a      	mov	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fe7d 	bl	80034c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	2308      	movs	r3, #8
 80027e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 feb9 	bl	800355c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	2310      	movs	r3, #16
 8002804:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d030      	beq.n	8002872 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d109      	bne.n	8002830 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	78db      	ldrb	r3, [r3, #3]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f007 fa46 	bl	8009cec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	461a      	mov	r2, r3
 800286e:	2302      	movs	r3, #2
 8002870:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	2320      	movs	r3, #32
 800288c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3301      	adds	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f af62 	bne.w	8002784 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fd73 	bl	80073b0 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d4:	f040 80a4 	bne.w	8002a20 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fd94 	bl	800740a <USB_ReadDevAllInEpInterrupt>
 80028e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028e8:	e096      	b.n	8002a18 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 808b 	beq.w	8002a0c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fdba 	bl	800747a <USB_ReadDevInEPInterrupt>
 8002906:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d020      	beq.n	8002954 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	2201      	movs	r2, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	69f9      	ldr	r1, [r7, #28]
 800292e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002932:	4013      	ands	r3, r2
 8002934:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002942:	461a      	mov	r2, r3
 8002944:	2301      	movs	r3, #1
 8002946:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f007 f937 	bl	8009bc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2308      	movs	r3, #8
 800296e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	2310      	movs	r3, #16
 800298a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a2:	461a      	mov	r2, r3
 80029a4:	2340      	movs	r3, #64	; 0x40
 80029a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d023      	beq.n	80029fa <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b4:	6a38      	ldr	r0, [r7, #32]
 80029b6:	f003 fe51 	bl	800665c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d108      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f007 f994 	bl	8009d10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f4:	461a      	mov	r2, r3
 80029f6:	2302      	movs	r3, #2
 80029f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fcd2 	bl	80033b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	3301      	adds	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f af65 	bne.w	80028ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fcc3 	bl	80073b0 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a34:	d122      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f007 fbc8 	bl	800a1f4 <HAL_PCDEx_LPM_Callback>
 8002a64:	e002      	b.n	8002a6c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f007 f918 	bl	8009c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fc95 	bl	80073b0 <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a90:	d112      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f007 f8d4 	bl	8009c50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fc77 	bl	80073b0 <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002acc:	d121      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002adc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f007 fb75 	bl	800a1f4 <HAL_PCDEx_LPM_Callback>
 8002b0a:	e002      	b.n	8002b12 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f007 f89f 	bl	8009c50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 fc4a 	bl	80073b0 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	f040 80b5 	bne.w	8002c94 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2110      	movs	r1, #16
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fd89 	bl	800665c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	e046      	b.n	8002bde <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba8:	0151      	lsls	r1, r2, #5
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	440a      	add	r2, r1
 8002bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	3301      	adds	r3, #1
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3b3      	bcc.n	8002b50 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c14:	f043 030b 	orr.w	r3, r3, #11
 8002c18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2a:	f043 030b 	orr.w	r3, r3, #11
 8002c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c30:	e015      	b.n	8002c5e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c58:	f043 030b 	orr.w	r3, r3, #11
 8002c5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f004 fc5a 	bl	8007538 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 fb89 	bl	80073b0 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca8:	d124      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fc1f 	bl	80074f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fd4c 	bl	8006756 <USB_GetDevSpeed>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681c      	ldr	r4, [r3, #0]
 8002cca:	f001 ffcf 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8002cce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f003 fa73 	bl	80061c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 ff97 	bl	8009c12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fb59 	bl	80073b0 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d10a      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f006 ff74 	bl	8009bf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 0208 	and.w	r2, r2, #8
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 fb44 	bl	80073b0 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	d122      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3e:	2301      	movs	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e014      	b.n	8002d6e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 faf3 	bl	800334e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3e5      	bcc.n	8002d44 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 fb17 	bl	80073b0 <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8c:	d13b      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e02b      	b.n	8002dec <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3340      	adds	r3, #64	; 0x40
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d115      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da12      	bge.n	8002de6 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	333f      	adds	r3, #63	; 0x3f
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fab4 	bl	800334e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	3301      	adds	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d3ce      	bcc.n	8002d94 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fad0 	bl	80073b0 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1a:	d155      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e045      	b.n	8002eae <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d12e      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da2b      	bge.n	8002ea8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d121      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea4:	6053      	str	r3, [r2, #4]
            break;
 8002ea6:	e007      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	3301      	adds	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3b4      	bcc.n	8002e22 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 fa6f 	bl	80073b0 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d10a      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 ff28 	bl	8009d34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fa59 	bl	80073b0 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d115      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f006 ff18 	bl	8009d50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	e000      	b.n	8002f34 <HAL_PCD_IRQHandler+0x920>
      return;
 8002f32:	bf00      	nop
    }
  }
}
 8002f34:	3734      	adds	r7, #52	; 0x34
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}

08002f3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_PCD_SetAddress+0x1a>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e013      	b.n	8002f7c <HAL_PCD_SetAddress+0x42>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 f9b7 	bl	80072e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	70fb      	strb	r3, [r7, #3]
 8002f96:	460b      	mov	r3, r1
 8002f98:	803b      	strh	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da0f      	bge.n	8002fca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	3338      	adds	r3, #56	; 0x38
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	705a      	strb	r2, [r3, #1]
 8002fc8:	e00f      	b.n	8002fea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ff6:	883a      	ldrh	r2, [r7, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	78ba      	ldrb	r2, [r7, #2]
 8003000:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003014:	78bb      	ldrb	r3, [r7, #2]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d102      	bne.n	8003020 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_PCD_EP_Open+0xaa>
 800302a:	2302      	movs	r3, #2
 800302c:	e00e      	b.n	800304c <HAL_PCD_EP_Open+0xc8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fba9 	bl	8006794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800304a:	7afb      	ldrb	r3, [r7, #11]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	da0f      	bge.n	8003088 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3338      	adds	r3, #56	; 0x38
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	705a      	strb	r2, [r3, #1]
 8003086:	e00f      	b.n	80030a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_PCD_EP_Close+0x6e>
 80030be:	2302      	movs	r3, #2
 80030c0:	e00e      	b.n	80030e0 <HAL_PCD_EP_Close+0x8c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fbe7 	bl	80068a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	460b      	mov	r3, r1
 80030f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	b2da      	uxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fc8d 	bl	8006a5c <USB_EPStartXfer>

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fc44 	bl	8006a5c <USB_EPStartXfer>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d901      	bls.n	80031fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e04e      	b.n	800329a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da0f      	bge.n	8003224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00d      	b.n	8003240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_EP_SetStall+0x82>
 800325c:	2302      	movs	r3, #2
 800325e:	e01c      	b.n	800329a <HAL_PCD_EP_SetStall+0xbc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f003 ff62 	bl	8007138 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f004 f954 	bl	8007538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d901      	bls.n	80032c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e042      	b.n	8003346 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da0f      	bge.n	80032e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3338      	adds	r3, #56	; 0x38
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
 80032e6:	e00f      	b.n	8003308 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	3304      	adds	r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_PCD_EP_ClrStall+0x86>
 8003324:	2302      	movs	r3, #2
 8003326:	e00e      	b.n	8003346 <HAL_PCD_EP_ClrStall+0xa4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 ff6c 	bl	8007214 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0c      	bge.n	800337c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e00c      	b.n	8003396 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fd8f 	bl	8006ec0 <USB_EPStopXfer>
 80033a2:	4603      	mov	r3, r0
 80033a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033a6:	7afb      	ldrb	r3, [r7, #11]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d901      	bls.n	80033e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e067      	b.n	80034b8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d902      	bls.n	8003404 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3303      	adds	r3, #3
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800340c:	e026      	b.n	800345c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	d902      	bls.n	800342a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3303      	adds	r3, #3
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	b29b      	uxth	r3, r3
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f003 fde8 	bl	8007014 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d809      	bhi.n	8003486 <PCD_WriteEmptyTxFifo+0xd6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800347a:	429a      	cmp	r2, r3
 800347c:	d203      	bcs.n	8003486 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1c3      	bne.n	800340e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	d811      	bhi.n	80034b6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2201      	movs	r2, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b2:	4013      	ands	r3, r2
 80034b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	333c      	adds	r3, #60	; 0x3c
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <PCD_EP_OutXfrComplete_int+0x98>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d124      	bne.n	8003540 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e01a      	b.n	800354c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f006 fb27 	bl	8009b8c <HAL_PCD_DataOutStageCallback>
 800353e:	e005      	b.n	800354c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f006 fb20 	bl	8009b8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	4f54310a 	.word	0x4f54310a

0800355c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	333c      	adds	r3, #60	; 0x3c
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <PCD_EP_OutSetupPacket_int+0x64>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90e      	bls.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f006 fad9 	bl	8009b68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	4f54300a 	.word	0x4f54300a

080035c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
 80035d0:	4613      	mov	r3, r2
 80035d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035e2:	883b      	ldrh	r3, [r7, #0]
 80035e4:	0419      	lsls	r1, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
 80035f0:	e028      	b.n	8003644 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e00d      	b.n	8003622 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	3b01      	subs	r3, #1
 8003628:	429a      	cmp	r2, r3
 800362a:	d3ec      	bcc.n	8003606 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800362c:	883b      	ldrh	r3, [r7, #0]
 800362e:	0418      	lsls	r0, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	3b01      	subs	r3, #1
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4302      	orrs	r2, r0
 800363c:	3340      	adds	r3, #64	; 0x40
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	f043 0303 	orr.w	r3, r3, #3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40007000 	.word	0x40007000

080036f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003706:	d130      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003708:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d038      	beq.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2232      	movs	r2, #50	; 0x32
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373c:	e002      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b01      	subs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d102      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f2      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d110      	bne.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00f      	b.n	800378a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d007      	beq.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40007000 	.word	0x40007000
 800379c:	20000000 	.word	0x20000000
 80037a0:	431bde83 	.word	0x431bde83

080037a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b2:	6053      	str	r3, [r2, #4]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037cc:	f7fd ff48 	bl	8001660 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e063      	b.n	80038a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd f951 	bl	8000a98 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fb03 	bl	8003e06 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	3b01      	subs	r3, #1
 8003810:	021a      	lsls	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	2120      	movs	r1, #32
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fafb 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003830:	7afb      	ldrb	r3, [r7, #11]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d131      	bne.n	800389a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003840:	f023 0310 	bic.w	r3, r3, #16
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6852      	ldr	r2, [r2, #4]
 8003848:	0611      	lsls	r1, r2, #24
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	4311      	orrs	r1, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_QSPI_Init+0xe8>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6912      	ldr	r2, [r2, #16]
 8003866:	0411      	lsls	r1, r2, #16
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6952      	ldr	r2, [r2, #20]
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6992      	ldr	r2, [r2, #24]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80038a2:	7afb      	ldrb	r3, [r7, #11]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	ffe0f8fe 	.word	0xffe0f8fe

080038b0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e016      	b.n	80038f0 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd f942 	bl	8000b5c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7fd feac 	bl	8001660 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_QSPI_Command+0x22>
 8003916:	2302      	movs	r3, #2
 8003918:	e048      	b.n	80039ac <HAL_QSPI_Command+0xb4>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d137      	bne.n	800399e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2200      	movs	r2, #0
 8003944:	2120      	movs	r1, #32
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa6b 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d125      	bne.n	80039a2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003956:	2200      	movs	r2, #0
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa98 	bl	8003e90 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2201      	movs	r2, #1
 8003970:	2102      	movs	r1, #2
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa55 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003992:	e006      	b.n	80039a2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800399c:	e001      	b.n	80039a2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7fd fe4c 	bl	8001660 <HAL_GetTick>
 80039c8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3320      	adds	r3, #32
 80039d0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_QSPI_Transmit+0x2e>
 80039de:	2302      	movs	r3, #2
 80039e0:	e07b      	b.n	8003ada <HAL_QSPI_Transmit+0x126>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d16a      	bne.n	8003acc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d05b      	beq.n	8003aba <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2212      	movs	r2, #18
 8003a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a36:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003a38:	e01b      	b.n	8003a72 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2201      	movs	r2, #1
 8003a42:	2104      	movs	r1, #4
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9ec 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d113      	bne.n	8003a7c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1df      	bne.n	8003a3a <HAL_QSPI_Transmit+0x86>
 8003a7a:	e000      	b.n	8003a7e <HAL_QSPI_Transmit+0xca>
          break;
 8003a7c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d115      	bne.n	8003ab0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f9c7 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f934 	bl	8003d14 <HAL_QSPI_Abort>
 8003aac:	4603      	mov	r3, r0
 8003aae:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003ab8:	e00a      	b.n	8003ad0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e001      	b.n	8003ad0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08a      	sub	sp, #40	; 0x28
 8003ae6:	af02      	add	r7, sp, #8
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7fd fdb5 	bl	8001660 <HAL_GetTick>
 8003af6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3320      	adds	r3, #32
 8003b06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_QSPI_Receive+0x36>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e082      	b.n	8003c1e <HAL_QSPI_Receive+0x13c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d171      	bne.n	8003c10 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d062      	beq.n	8003bfe <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b70:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003b7a:	e01c      	b.n	8003bb6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2201      	movs	r2, #1
 8003b84:	2106      	movs	r1, #6
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f94b 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003b90:	7ffb      	ldrb	r3, [r7, #31]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1de      	bne.n	8003b7c <HAL_QSPI_Receive+0x9a>
 8003bbe:	e000      	b.n	8003bc2 <HAL_QSPI_Receive+0xe0>
          break;
 8003bc0:	bf00      	nop
      }

      if (status == HAL_OK)
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d115      	bne.n	8003bf4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f925 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f892 	bl	8003d14 <HAL_QSPI_Abort>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003bfc:	e00a      	b.n	8003c14 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e001      	b.n	8003c14 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
 8003c12:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7fd fd14 	bl	8001660 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_QSPI_AutoPolling+0x24>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e060      	b.n	8003d0c <HAL_QSPI_AutoPolling+0xe6>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d14f      	bne.n	8003cfe <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2242      	movs	r2, #66	; 0x42
 8003c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2120      	movs	r1, #32
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f8d3 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13d      	bne.n	8003d02 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003cbc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f8df 	bl	8003e90 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2108      	movs	r1, #8
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f8a0 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003cfc:	e001      	b.n	8003d02 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7fd fc9e 	bl	8001660 <HAL_GetTick>
 8003d24:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d062      	beq.n	8003dfc <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd feba 	bl	8001ada <HAL_DMA_Abort>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d034      	beq.n	8003df4 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0202 	orr.w	r2, r2, #2
 8003d98:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2201      	movs	r2, #1
 8003da4:	2102      	movs	r1, #2
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f83b 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2120      	movs	r1, #32
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f829 	bl	8003e22 <QSPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d110      	bne.n	8003dfc <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003de8:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003df2:	e003      	b.n	8003dfc <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e32:	e01a      	b.n	8003e6a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d016      	beq.n	8003e6a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fd fc10 	bl	8001660 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2204      	movs	r2, #4
 8003e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00e      	b.n	8003e88 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d1d6      	bne.n	8003e34 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <QSPI_Config+0x28>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003eaa:	d005      	beq.n	8003eb8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80b9 	beq.w	8004034 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d05f      	beq.n	8003f8a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d031      	beq.n	8003f40 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	049b      	lsls	r3, r3, #18
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f30:	f000 812e 	beq.w	8004190 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	6852      	ldr	r2, [r2, #4]
 8003f3c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003f3e:	e127      	b.n	8004190 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	049b      	lsls	r3, r3, #18
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	ea42 0103 	orr.w	r1, r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	615a      	str	r2, [r3, #20]
}
 8003f88:	e102      	b.n	8004190 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02e      	beq.n	8003ff0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	049b      	lsls	r3, r3, #18
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fe0:	f000 80d6 	beq.w	8004190 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	6852      	ldr	r2, [r2, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	e0cf      	b.n	8004190 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	431a      	orrs	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	049b      	lsls	r3, r3, #18
 800400c:	431a      	orrs	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	431a      	orrs	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	431a      	orrs	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	431a      	orrs	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	ea42 0103 	orr.w	r1, r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	430a      	orrs	r2, r1
 8004030:	615a      	str	r2, [r3, #20]
}
 8004032:	e0ad      	b.n	8004190 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d058      	beq.n	80040ee <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02d      	beq.n	80040aa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	431a      	orrs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	431a      	orrs	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	431a      	orrs	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	049b      	lsls	r3, r3, #18
 800406a:	431a      	orrs	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	431a      	orrs	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	431a      	orrs	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	ea42 0103 	orr.w	r1, r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	430a      	orrs	r2, r1
 8004094:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800409c:	d078      	beq.n	8004190 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	6852      	ldr	r2, [r2, #4]
 80040a6:	619a      	str	r2, [r3, #24]
}
 80040a8:	e072      	b.n	8004190 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	431a      	orrs	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	049b      	lsls	r3, r3, #18
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	ea42 0103 	orr.w	r1, r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	615a      	str	r2, [r3, #20]
}
 80040ec:	e050      	b.n	8004190 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02a      	beq.n	800414c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	431a      	orrs	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	431a      	orrs	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	431a      	orrs	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	049b      	lsls	r3, r3, #18
 8004112:	431a      	orrs	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	431a      	orrs	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	431a      	orrs	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	431a      	orrs	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	ea42 0103 	orr.w	r1, r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	430a      	orrs	r2, r1
 8004136:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800413e:	d027      	beq.n	8004190 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	619a      	str	r2, [r3, #24]
}
 800414a:	e021      	b.n	8004190 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01d      	beq.n	8004190 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	431a      	orrs	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	431a      	orrs	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	049b      	lsls	r3, r3, #18
 8004170:	431a      	orrs	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	431a      	orrs	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	431a      	orrs	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	ea42 0103 	orr.w	r1, r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	430a      	orrs	r2, r1
 800418e:	615a      	str	r2, [r3, #20]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e3ca      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	4b97      	ldr	r3, [pc, #604]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b8:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80e4 	beq.w	8004398 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4a>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b0c      	cmp	r3, #12
 80041da:	f040 808b 	bne.w	80042f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 8087 	bne.w	80042f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041e6:	4b89      	ldr	r3, [pc, #548]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x62>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e3a2      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_RCC_OscConfig+0x7c>
 800420e:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004216:	e005      	b.n	8004224 <HAL_RCC_OscConfig+0x88>
 8004218:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004224:	4293      	cmp	r3, r2
 8004226:	d223      	bcs.n	8004270 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fd55 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e383      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423c:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a72      	ldr	r2, [pc, #456]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004242:	f043 0308 	orr.w	r3, r3, #8
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	496d      	ldr	r1, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	4968      	ldr	r1, [pc, #416]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
 800426e:	e025      	b.n	80042bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004276:	f043 0308 	orr.w	r3, r3, #8
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4960      	ldr	r1, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428e:	4b5f      	ldr	r3, [pc, #380]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	495b      	ldr	r1, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd15 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e343      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042bc:	f000 fc4a 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b52      	ldr	r3, [pc, #328]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	4950      	ldr	r1, [pc, #320]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_RCC_OscConfig+0x278>)
 80042da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042dc:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <HAL_RCC_OscConfig+0x27c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd f96d 	bl	80015c0 <HAL_InitTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d052      	beq.n	8004396 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	e327      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d032      	beq.n	8004362 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042fc:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004308:	f7fd f9aa 	bl	8001660 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004310:	f7fd f9a6 	bl	8001660 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e310      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004322:	4b3a      	ldr	r3, [pc, #232]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a36      	ldr	r2, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4931      	ldr	r1, [pc, #196]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434c:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	492c      	ldr	r1, [pc, #176]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	e01a      	b.n	8004398 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800436e:	f7fd f977 	bl	8001660 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004376:	f7fd f973 	bl	8001660 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e2dd      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_OscConfig+0x270>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x1da>
 8004394:	e000      	b.n	8004398 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004396:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d074      	beq.n	800448e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x21a>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d10e      	bne.n	80043ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d10b      	bne.n	80043ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d064      	beq.n	800448c <HAL_RCC_OscConfig+0x2f0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d160      	bne.n	800448c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e2ba      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x24a>
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0b      	ldr	r2, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e026      	b.n	8004434 <HAL_RCC_OscConfig+0x298>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ee:	d115      	bne.n	800441c <HAL_RCC_OscConfig+0x280>
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a05      	ldr	r2, [pc, #20]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a02      	ldr	r2, [pc, #8]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e014      	b.n	8004434 <HAL_RCC_OscConfig+0x298>
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	0800b180 	.word	0x0800b180
 8004414:	20000000 	.word	0x20000000
 8004418:	20000004 	.word	0x20000004
 800441c:	4ba0      	ldr	r3, [pc, #640]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a9f      	ldr	r2, [pc, #636]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b9d      	ldr	r3, [pc, #628]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a9c      	ldr	r2, [pc, #624]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd f910 	bl	8001660 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd f90c 	bl	8001660 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e276      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004456:	4b92      	ldr	r3, [pc, #584]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x2a8>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd f8fc 	bl	8001660 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fd f8f8 	bl	8001660 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e262      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447e:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x2d0>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d060      	beq.n	800455c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d005      	beq.n	80044ac <HAL_RCC_OscConfig+0x310>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d119      	bne.n	80044da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d116      	bne.n	80044da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	4b7c      	ldr	r3, [pc, #496]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x328>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e23f      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	4973      	ldr	r1, [pc, #460]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d8:	e040      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d023      	beq.n	800452a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e2:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd f8b7 	bl	8001660 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fd f8b3 	bl	8001660 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e21d      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	495f      	ldr	r1, [pc, #380]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
 8004528:	e018      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452a:	4b5d      	ldr	r3, [pc, #372]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd f893 	bl	8001660 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453e:	f7fd f88f 	bl	8001660 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1f9      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004550:	4b53      	ldr	r3, [pc, #332]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d03c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004576:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd f86e 	bl	8001660 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004588:	f7fd f86a 	bl	8001660 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1d4      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800459a:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ef      	beq.n	8004588 <HAL_RCC_OscConfig+0x3ec>
 80045a8:	e01b      	b.n	80045e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045aa:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b0:	4a3b      	ldr	r2, [pc, #236]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd f851 	bl	8001660 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fd f84d 	bl	8001660 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e1b7      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d4:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1ef      	bne.n	80045c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a6 	beq.w	800473c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6593      	str	r3, [r2, #88]	; 0x58
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004618:	2301      	movs	r3, #1
 800461a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_OscConfig+0x508>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d118      	bne.n	800465a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCC_OscConfig+0x508>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_RCC_OscConfig+0x508>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004634:	f7fd f814 	bl	8001660 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463c:	f7fd f810 	bl	8001660 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e17a      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_RCC_OscConfig+0x508>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d108      	bne.n	8004674 <HAL_RCC_OscConfig+0x4d8>
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004672:	e029      	b.n	80046c8 <HAL_RCC_OscConfig+0x52c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d115      	bne.n	80046a8 <HAL_RCC_OscConfig+0x50c>
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <HAL_RCC_OscConfig+0x504>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x52c>
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40007000 	.word	0x40007000
 80046a8:	4b9c      	ldr	r3, [pc, #624]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	4a9b      	ldr	r2, [pc, #620]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b8:	4b98      	ldr	r3, [pc, #608]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	4a97      	ldr	r2, [pc, #604]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d016      	beq.n	80046fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fc ffc6 	bl	8001660 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fc ffc2 	bl	8001660 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e12a      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ee:	4b8b      	ldr	r3, [pc, #556]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ed      	beq.n	80046d8 <HAL_RCC_OscConfig+0x53c>
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fc ffaf 	bl	8001660 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fc ffab 	bl	8001660 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e113      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471c:	4b7f      	ldr	r3, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x780>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ed      	bne.n	8004706 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472a:	7ffb      	ldrb	r3, [r7, #31]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b7a      	ldr	r3, [pc, #488]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a79      	ldr	r2, [pc, #484]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80fe 	beq.w	8004942 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	2b02      	cmp	r3, #2
 800474c:	f040 80d0 	bne.w	80048f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004750:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	429a      	cmp	r2, r3
 8004762:	d130      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	3b01      	subs	r3, #1
 8004770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d127      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d11f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004790:	2a07      	cmp	r2, #7
 8004792:	bf14      	ite	ne
 8004794:	2201      	movne	r2, #1
 8004796:	2200      	moveq	r2, #0
 8004798:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800479a:	4293      	cmp	r3, r2
 800479c:	d113      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d06e      	beq.n	80048a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d069      	beq.n	80048a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0ad      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80047ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047f4:	f7fc ff34 	bl	8001660 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fc ff30 	bl	8001660 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e09a      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480e:	4b43      	ldr	r3, [pc, #268]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481a:	4b40      	ldr	r3, [pc, #256]	; (800491c <HAL_RCC_OscConfig+0x780>)
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	4b40      	ldr	r3, [pc, #256]	; (8004920 <HAL_RCC_OscConfig+0x784>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800482a:	3a01      	subs	r2, #1
 800482c:	0112      	lsls	r2, r2, #4
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004834:	0212      	lsls	r2, r2, #8
 8004836:	4311      	orrs	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800483c:	0852      	lsrs	r2, r2, #1
 800483e:	3a01      	subs	r2, #1
 8004840:	0552      	lsls	r2, r2, #21
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004848:	0852      	lsrs	r2, r2, #1
 800484a:	3a01      	subs	r2, #1
 800484c:	0652      	lsls	r2, r2, #25
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004854:	0912      	lsrs	r2, r2, #4
 8004856:	0452      	lsls	r2, r2, #17
 8004858:	430a      	orrs	r2, r1
 800485a:	4930      	ldr	r1, [pc, #192]	; (800491c <HAL_RCC_OscConfig+0x780>)
 800485c:	4313      	orrs	r3, r2
 800485e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004860:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2d      	ldr	r2, [pc, #180]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x780>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004878:	f7fc fef2 	bl	8001660 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fc feee 	bl	8001660 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e058      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004892:	4b22      	ldr	r3, [pc, #136]	; (800491c <HAL_RCC_OscConfig+0x780>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800489e:	e050      	b.n	8004942 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e04f      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d148      	bne.n	8004942 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c8:	f7fc feca 	bl	8001660 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fc fec6 	bl	8001660 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e030      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x734>
 80048ee:	e028      	b.n	8004942 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d023      	beq.n	800493e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <HAL_RCC_OscConfig+0x780>)
 80048fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fc fead 	bl	8001660 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	e00c      	b.n	8004924 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fc fea9 	bl	8001660 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d905      	bls.n	8004924 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e013      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
 800491c:	40021000 	.word	0x40021000
 8004920:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCC_OscConfig+0x7b0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ec      	bne.n	800490a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x7b0>)
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	4905      	ldr	r1, [pc, #20]	; (800494c <HAL_RCC_OscConfig+0x7b0>)
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_OscConfig+0x7b4>)
 8004938:	4013      	ands	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
 800493c:	e001      	b.n	8004942 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000
 8004950:	feeefffc 	.word	0xfeeefffc

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0e7      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b75      	ldr	r3, [pc, #468]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d910      	bls.n	8004998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 0207 	bic.w	r2, r3, #7
 800497e:	4970      	ldr	r1, [pc, #448]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0cf      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4960      	ldr	r1, [pc, #384]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04c      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049da:	4b5a      	ldr	r3, [pc, #360]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d121      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0a6      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f2:	4b54      	ldr	r3, [pc, #336]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e09a      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e08e      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e086      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4943      	ldr	r1, [pc, #268]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fe10 	bl	8001660 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fc fe0c 	bl	8001660 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e06e      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d208      	bcs.n	8004a9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	492b      	ldr	r1, [pc, #172]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d210      	bcs.n	8004aca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 0207 	bic.w	r2, r3, #7
 8004ab0:	4923      	ldr	r1, [pc, #140]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <HAL_RCC_ClockConfig+0x1ec>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e036      	b.n	8004b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4918      	ldr	r1, [pc, #96]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4910      	ldr	r1, [pc, #64]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b08:	f000 f824 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	490b      	ldr	r1, [pc, #44]	; (8004b48 <HAL_RCC_ClockConfig+0x1f4>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1f8>)
 8004b26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1fc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fc fd47 	bl	80015c0 <HAL_InitTick>
 8004b32:	4603      	mov	r3, r0
 8004b34:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b36:	7afb      	ldrb	r3, [r7, #11]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800b180 	.word	0x0800b180
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	20000004 	.word	0x20000004

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6c:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d121      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d11e      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b88:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b94:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	e005      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bb0:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bcc:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e004      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd8:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d134      	bne.n	8004c4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0xa6>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0xac>
 8004bf8:	e005      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bfc:	617b      	str	r3, [r7, #20]
      break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c02:	617b      	str	r3, [r7, #20]
      break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	617b      	str	r3, [r7, #20]
      break;
 8004c0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	3301      	adds	r3, #1
 8004c18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	fb03 f202 	mul.w	r2, r3, r2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	0e5b      	lsrs	r3, r3, #25
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3724      	adds	r7, #36	; 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800b198 	.word	0x0800b198
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	017d7840 	.word	0x017d7840

08004c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800b190 	.word	0x0800b190

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb4:	f7ff ffda 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0adb      	lsrs	r3, r3, #11
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800b190 	.word	0x0800b190

08004cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf4:	f7fe fcf2 	bl	80036dc <HAL_PWREx_GetVoltageRange>
 8004cf8:	6178      	str	r0, [r7, #20]
 8004cfa:	e014      	b.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6593      	str	r3, [r2, #88]	; 0x58
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d14:	f7fe fce2 	bl	80036dc <HAL_PWREx_GetVoltageRange>
 8004d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d10b      	bne.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d919      	bls.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2ba0      	cmp	r3, #160	; 0xa0
 8004d38:	d902      	bls.n	8004d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e013      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d40:	2301      	movs	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e010      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d902      	bls.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e00a      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b80      	cmp	r3, #128	; 0x80
 8004d56:	d102      	bne.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d58:	2302      	movs	r3, #2
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e004      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d101      	bne.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d64:	2301      	movs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 0207 	bic.w	r2, r3, #7
 8004d70:	4909      	ldr	r1, [pc, #36]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004da4:	2300      	movs	r3, #0
 8004da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004da8:	2300      	movs	r3, #0
 8004daa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d041      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dc0:	d02a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dc6:	d824      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dcc:	d008      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd2:	d81e      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ddc:	d010      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dde:	e018      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004de0:	4b86      	ldr	r3, [pc, #536]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a85      	ldr	r2, [pc, #532]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dec:	e015      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 facb 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dfe:	e00c      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3320      	adds	r3, #32
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbb6 	bl	8005578 <RCCEx_PLLSAI2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e10:	e003      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	74fb      	strb	r3, [r7, #19]
      break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e20:	4b76      	ldr	r3, [pc, #472]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2e:	4973      	ldr	r1, [pc, #460]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e36:	e001      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d041      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e50:	d02a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e56:	d824      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e62:	d81e      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6c:	d010      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e6e:	e018      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e70:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a61      	ldr	r2, [pc, #388]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e7c:	e015      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fa83 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e8e:	e00c      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3320      	adds	r3, #32
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fb6e 	bl	8005578 <RCCEx_PLLSAI2_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eb0:	4b52      	ldr	r3, [pc, #328]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebe:	494f      	ldr	r1, [pc, #316]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ec6:	e001      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
 8004eca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80a0 	beq.w	800501a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eda:	2300      	movs	r3, #0
 8004edc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ede:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6593      	str	r3, [r2, #88]	; 0x58
 8004f00:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f1c:	f7fc fba0 	bl	8001660 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f22:	e009      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f24:	f7fc fb9c 	bl	8001660 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d902      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	74fb      	strb	r3, [r7, #19]
        break;
 8004f36:	e005      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ef      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d15c      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01f      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d019      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f74:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fc fb5b 	bl	8001660 <HAL_GetTick>
 8004faa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fac:	e00b      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fc fb57 	bl	8001660 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	74fb      	strb	r3, [r7, #19]
            break;
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ec      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	4904      	ldr	r1, [pc, #16]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ff2:	e009      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	74bb      	strb	r3, [r7, #18]
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005008:	7c7b      	ldrb	r3, [r7, #17]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500e:	4b9e      	ldr	r3, [pc, #632]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	4a9d      	ldr	r2, [pc, #628]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005018:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005026:	4b98      	ldr	r3, [pc, #608]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502c:	f023 0203 	bic.w	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	4994      	ldr	r1, [pc, #592]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005048:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 020c 	bic.w	r2, r3, #12
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	498c      	ldr	r1, [pc, #560]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800506a:	4b87      	ldr	r3, [pc, #540]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005070:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	4983      	ldr	r1, [pc, #524]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800508c:	4b7e      	ldr	r3, [pc, #504]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	497b      	ldr	r1, [pc, #492]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ae:	4b76      	ldr	r3, [pc, #472]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050bc:	4972      	ldr	r1, [pc, #456]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050d0:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050de:	496a      	ldr	r1, [pc, #424]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050f2:	4b65      	ldr	r3, [pc, #404]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	4961      	ldr	r1, [pc, #388]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005114:	4b5c      	ldr	r3, [pc, #368]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	4959      	ldr	r1, [pc, #356]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005136:	4b54      	ldr	r3, [pc, #336]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	4950      	ldr	r1, [pc, #320]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005158:	4b4b      	ldr	r3, [pc, #300]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	4948      	ldr	r1, [pc, #288]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800517a:	4b43      	ldr	r3, [pc, #268]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	493f      	ldr	r1, [pc, #252]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d028      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800519c:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051aa:	4937      	ldr	r1, [pc, #220]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ba:	d106      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051bc:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a31      	ldr	r2, [pc, #196]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c6:	60d3      	str	r3, [r2, #12]
 80051c8:	e011      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d2:	d10c      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	2101      	movs	r1, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f8d8 	bl	8005390 <RCCEx_PLLSAI1_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d028      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051fa:	4b23      	ldr	r3, [pc, #140]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	491f      	ldr	r1, [pc, #124]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005218:	d106      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005224:	60d3      	str	r3, [r2, #12]
 8005226:	e011      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005230:	d10c      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f8a9 	bl	8005390 <RCCEx_PLLSAI1_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005266:	4908      	ldr	r1, [pc, #32]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a02      	ldr	r2, [pc, #8]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
 8005284:	e014      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f877 	bl	8005390 <RCCEx_PLLSAI1_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02f      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ca:	4928      	ldr	r1, [pc, #160]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052da:	d10d      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f854 	bl	8005390 <RCCEx_PLLSAI1_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d014      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	74bb      	strb	r3, [r7, #18]
 80052f6:	e011      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005300:	d10c      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3320      	adds	r3, #32
 8005306:	2102      	movs	r1, #2
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f935 	bl	8005578 <RCCEx_PLLSAI2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005336:	490d      	ldr	r1, [pc, #52]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005362:	7cbb      	ldrb	r3, [r7, #18]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000

08005370 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000

08005390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800539e:	4b75      	ldr	r3, [pc, #468]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d018      	beq.n	80053dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0203 	and.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d10d      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
       ||
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053c2:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
       ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d047      	beq.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e044      	b.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d018      	beq.n	8005416 <RCCEx_PLLSAI1_Config+0x86>
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d825      	bhi.n	8005434 <RCCEx_PLLSAI1_Config+0xa4>
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d002      	beq.n	80053f2 <RCCEx_PLLSAI1_Config+0x62>
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d009      	beq.n	8005404 <RCCEx_PLLSAI1_Config+0x74>
 80053f0:	e020      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053f2:	4b60      	ldr	r3, [pc, #384]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d11d      	bne.n	800543a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005402:	e01a      	b.n	800543a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005404:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d116      	bne.n	800543e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005414:	e013      	b.n	800543e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005416:	4b57      	ldr	r3, [pc, #348]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005422:	4b54      	ldr	r3, [pc, #336]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005432:	e006      	b.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e004      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005442:	bf00      	nop
    }

    if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800544a:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	430b      	orrs	r3, r1
 8005460:	4944      	ldr	r1, [pc, #272]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d17d      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800546c:	4b41      	ldr	r3, [pc, #260]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a40      	ldr	r2, [pc, #256]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fc f8f2 	bl	8001660 <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800547e:	e009      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005480:	f7fc f8ee 	bl	8001660 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	73fb      	strb	r3, [r7, #15]
        break;
 8005492:	e005      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005494:	4b37      	ldr	r3, [pc, #220]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ef      	bne.n	8005480 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d160      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6892      	ldr	r2, [r2, #8]
 80054bc:	0211      	lsls	r1, r2, #8
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0912      	lsrs	r2, r2, #4
 80054c4:	0452      	lsls	r2, r2, #17
 80054c6:	430a      	orrs	r2, r1
 80054c8:	492a      	ldr	r1, [pc, #168]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	610b      	str	r3, [r1, #16]
 80054ce:	e027      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d112      	bne.n	80054fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	0211      	lsls	r1, r2, #8
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6912      	ldr	r2, [r2, #16]
 80054ec:	0852      	lsrs	r2, r2, #1
 80054ee:	3a01      	subs	r2, #1
 80054f0:	0552      	lsls	r2, r2, #21
 80054f2:	430a      	orrs	r2, r1
 80054f4:	491f      	ldr	r1, [pc, #124]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	610b      	str	r3, [r1, #16]
 80054fa:	e011      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	0211      	lsls	r1, r2, #8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6952      	ldr	r2, [r2, #20]
 8005512:	0852      	lsrs	r2, r2, #1
 8005514:	3a01      	subs	r2, #1
 8005516:	0652      	lsls	r2, r2, #25
 8005518:	430a      	orrs	r2, r1
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fc f898 	bl	8001660 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005534:	f7fc f894 	bl	8001660 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
          break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4904      	ldr	r1, [pc, #16]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000

08005578 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005586:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005592:	4b67      	ldr	r3, [pc, #412]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0203 	and.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d10d      	bne.n	80055be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
       ||
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055aa:	4b61      	ldr	r3, [pc, #388]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
       ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d047      	beq.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e044      	b.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d018      	beq.n	80055fe <RCCEx_PLLSAI2_Config+0x86>
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d825      	bhi.n	800561c <RCCEx_PLLSAI2_Config+0xa4>
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d002      	beq.n	80055da <RCCEx_PLLSAI2_Config+0x62>
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d009      	beq.n	80055ec <RCCEx_PLLSAI2_Config+0x74>
 80055d8:	e020      	b.n	800561c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055da:	4b55      	ldr	r3, [pc, #340]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11d      	bne.n	8005622 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ea:	e01a      	b.n	8005622 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055fc:	e013      	b.n	8005626 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055fe:	4b4c      	ldr	r3, [pc, #304]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800560a:	4b49      	ldr	r3, [pc, #292]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800561a:	e006      	b.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	e004      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005622:	bf00      	nop
 8005624:	e002      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800562a:	bf00      	nop
    }

    if(status == HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005632:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	430b      	orrs	r3, r1
 8005648:	4939      	ldr	r1, [pc, #228]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564a:	4313      	orrs	r3, r2
 800564c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d167      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005654:	4b36      	ldr	r3, [pc, #216]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a35      	ldr	r2, [pc, #212]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fb fffe 	bl	8001660 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005668:	f7fb fffa 	bl	8001660 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
        break;
 800567a:	e005      	b.n	8005688 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800567c:	4b2c      	ldr	r3, [pc, #176]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1ef      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d14a      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d111      	bne.n	80056b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005694:	4b26      	ldr	r3, [pc, #152]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	0211      	lsls	r1, r2, #8
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68d2      	ldr	r2, [r2, #12]
 80056aa:	0912      	lsrs	r2, r2, #4
 80056ac:	0452      	lsls	r2, r2, #17
 80056ae:	430a      	orrs	r2, r1
 80056b0:	491f      	ldr	r1, [pc, #124]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	614b      	str	r3, [r1, #20]
 80056b6:	e011      	b.n	80056dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6912      	ldr	r2, [r2, #16]
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	3a01      	subs	r2, #1
 80056d2:	0652      	lsls	r2, r2, #25
 80056d4:	430a      	orrs	r2, r1
 80056d6:	4916      	ldr	r1, [pc, #88]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056dc:	4b14      	ldr	r3, [pc, #80]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fb ffba 	bl	8001660 <HAL_GetTick>
 80056ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ee:	e009      	b.n	8005704 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056f0:	f7fb ffb6 	bl	8001660 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d902      	bls.n	8005704 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	73fb      	strb	r3, [r7, #15]
          break;
 8005702:	e005      	b.n	8005710 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ef      	beq.n	80056f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	4904      	ldr	r1, [pc, #16]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005720:	4313      	orrs	r3, r2
 8005722:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e040      	b.n	80057c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb fe94 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fae0 	bl	8005d40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f825 	bl	80057d0 <UART_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e01b      	b.n	80057c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb5f 	bl	8005e84 <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d4:	b08a      	sub	sp, #40	; 0x28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4ba4      	ldr	r3, [pc, #656]	; (8005a90 <UART_SetConfig+0x2c0>)
 8005800:	4013      	ands	r3, r2
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a99      	ldr	r2, [pc, #612]	; (8005a94 <UART_SetConfig+0x2c4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	4313      	orrs	r3, r2
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a90      	ldr	r2, [pc, #576]	; (8005a98 <UART_SetConfig+0x2c8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d126      	bne.n	80058a8 <UART_SetConfig+0xd8>
 800585a:	4b90      	ldr	r3, [pc, #576]	; (8005a9c <UART_SetConfig+0x2cc>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d81b      	bhi.n	80058a0 <UART_SetConfig+0xd0>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0xa0>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005891 	.word	0x08005891
 8005878:	08005889 	.word	0x08005889
 800587c:	08005899 	.word	0x08005899
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005886:	e116      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588e:	e112      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e10e      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e10a      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e106      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7c      	ldr	r2, [pc, #496]	; (8005aa0 <UART_SetConfig+0x2d0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d138      	bne.n	8005924 <UART_SetConfig+0x154>
 80058b2:	4b7a      	ldr	r3, [pc, #488]	; (8005a9c <UART_SetConfig+0x2cc>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d82d      	bhi.n	800591c <UART_SetConfig+0x14c>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0xf8>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058fd 	.word	0x080058fd
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	08005905 	.word	0x08005905
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e0d8      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e0d4      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e0d0      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e0cc      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e0c8      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5e      	ldr	r2, [pc, #376]	; (8005aa4 <UART_SetConfig+0x2d4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d125      	bne.n	800597a <UART_SetConfig+0x1aa>
 800592e:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <UART_SetConfig+0x2cc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d016      	beq.n	800596a <UART_SetConfig+0x19a>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d818      	bhi.n	8005972 <UART_SetConfig+0x1a2>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d00a      	beq.n	800595a <UART_SetConfig+0x18a>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d814      	bhi.n	8005972 <UART_SetConfig+0x1a2>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <UART_SetConfig+0x182>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d008      	beq.n	8005962 <UART_SetConfig+0x192>
 8005950:	e00f      	b.n	8005972 <UART_SetConfig+0x1a2>
 8005952:	2300      	movs	r3, #0
 8005954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005958:	e0ad      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 800595a:	2302      	movs	r3, #2
 800595c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005960:	e0a9      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005962:	2304      	movs	r3, #4
 8005964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005968:	e0a5      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 800596a:	2308      	movs	r3, #8
 800596c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005970:	e0a1      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005972:	2310      	movs	r3, #16
 8005974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005978:	e09d      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4a      	ldr	r2, [pc, #296]	; (8005aa8 <UART_SetConfig+0x2d8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d125      	bne.n	80059d0 <UART_SetConfig+0x200>
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <UART_SetConfig+0x2cc>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800598e:	2bc0      	cmp	r3, #192	; 0xc0
 8005990:	d016      	beq.n	80059c0 <UART_SetConfig+0x1f0>
 8005992:	2bc0      	cmp	r3, #192	; 0xc0
 8005994:	d818      	bhi.n	80059c8 <UART_SetConfig+0x1f8>
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d00a      	beq.n	80059b0 <UART_SetConfig+0x1e0>
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d814      	bhi.n	80059c8 <UART_SetConfig+0x1f8>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <UART_SetConfig+0x1d8>
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d008      	beq.n	80059b8 <UART_SetConfig+0x1e8>
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x1f8>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e082      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e07e      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e07a      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e076      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e072      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a35      	ldr	r2, [pc, #212]	; (8005aac <UART_SetConfig+0x2dc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d12a      	bne.n	8005a30 <UART_SetConfig+0x260>
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <UART_SetConfig+0x2cc>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e8:	d01a      	beq.n	8005a20 <UART_SetConfig+0x250>
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d81b      	bhi.n	8005a28 <UART_SetConfig+0x258>
 80059f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f4:	d00c      	beq.n	8005a10 <UART_SetConfig+0x240>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	d815      	bhi.n	8005a28 <UART_SetConfig+0x258>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <UART_SetConfig+0x238>
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d008      	beq.n	8005a18 <UART_SetConfig+0x248>
 8005a06:	e00f      	b.n	8005a28 <UART_SetConfig+0x258>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e052      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a10:	2302      	movs	r3, #2
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e04e      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e04a      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a26:	e046      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e042      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <UART_SetConfig+0x2c4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d13a      	bne.n	8005ab0 <UART_SetConfig+0x2e0>
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <UART_SetConfig+0x2cc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d01a      	beq.n	8005a80 <UART_SetConfig+0x2b0>
 8005a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4e:	d81b      	bhi.n	8005a88 <UART_SetConfig+0x2b8>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d00c      	beq.n	8005a70 <UART_SetConfig+0x2a0>
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d815      	bhi.n	8005a88 <UART_SetConfig+0x2b8>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0x298>
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d008      	beq.n	8005a78 <UART_SetConfig+0x2a8>
 8005a66:	e00f      	b.n	8005a88 <UART_SetConfig+0x2b8>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6e:	e022      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e01e      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e01a      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e016      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e012      	b.n	8005ab6 <UART_SetConfig+0x2e6>
 8005a90:	efff69f3 	.word	0xefff69f3
 8005a94:	40008000 	.word	0x40008000
 8005a98:	40013800 	.word	0x40013800
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40004400 	.word	0x40004400
 8005aa4:	40004800 	.word	0x40004800
 8005aa8:	40004c00 	.word	0x40004c00
 8005aac:	40005000 	.word	0x40005000
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a9f      	ldr	r2, [pc, #636]	; (8005d38 <UART_SetConfig+0x568>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d17a      	bne.n	8005bb6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d824      	bhi.n	8005b12 <UART_SetConfig+0x342>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <UART_SetConfig+0x300>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b03 	.word	0x08005b03
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b13 	.word	0x08005b13
 8005aec:	08005b13 	.word	0x08005b13
 8005af0:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af4:	f7ff f8c6 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8005af8:	61f8      	str	r0, [r7, #28]
        break;
 8005afa:	e010      	b.n	8005b1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b8f      	ldr	r3, [pc, #572]	; (8005d3c <UART_SetConfig+0x56c>)
 8005afe:	61fb      	str	r3, [r7, #28]
        break;
 8005b00:	e00d      	b.n	8005b1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7ff f827 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8005b06:	61f8      	str	r0, [r7, #28]
        break;
 8005b08:	e009      	b.n	8005b1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	61fb      	str	r3, [r7, #28]
        break;
 8005b10:	e005      	b.n	8005b1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80fb 	beq.w	8005d1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d305      	bcc.n	8005b42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d903      	bls.n	8005b4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b48:	e0e8      	b.n	8005d1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	461c      	mov	r4, r3
 8005b50:	4615      	mov	r5, r2
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	022b      	lsls	r3, r5, #8
 8005b5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b60:	0222      	lsls	r2, r4, #8
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	6849      	ldr	r1, [r1, #4]
 8005b66:	0849      	lsrs	r1, r1, #1
 8005b68:	2000      	movs	r0, #0
 8005b6a:	4688      	mov	r8, r1
 8005b6c:	4681      	mov	r9, r0
 8005b6e:	eb12 0a08 	adds.w	sl, r2, r8
 8005b72:	eb43 0b09 	adc.w	fp, r3, r9
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b84:	4650      	mov	r0, sl
 8005b86:	4659      	mov	r1, fp
 8005b88:	f7fa fb72 	bl	8000270 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9a:	d308      	bcc.n	8005bae <UART_SetConfig+0x3de>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba2:	d204      	bcs.n	8005bae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	e0b6      	b.n	8005d1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bb4:	e0b2      	b.n	8005d1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	d15e      	bne.n	8005c7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d828      	bhi.n	8005c1a <UART_SetConfig+0x44a>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x400>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7ff f846 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61f8      	str	r0, [r7, #28]
        break;
 8005bfa:	e014      	b.n	8005c26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7ff f858 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8005c00:	61f8      	str	r0, [r7, #28]
        break;
 8005c02:	e010      	b.n	8005c26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b4d      	ldr	r3, [pc, #308]	; (8005d3c <UART_SetConfig+0x56c>)
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe ffa3 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61f8      	str	r0, [r7, #28]
        break;
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e005      	b.n	8005c26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d077      	beq.n	8005d1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005a      	lsls	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d916      	bls.n	8005c76 <UART_SetConfig+0x4a6>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d212      	bcs.n	8005c76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f023 030f 	bic.w	r3, r3, #15
 8005c58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	8afa      	ldrh	r2, [r7, #22]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e052      	b.n	8005d1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c7c:	e04e      	b.n	8005d1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d827      	bhi.n	8005cd6 <UART_SetConfig+0x506>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <UART_SetConfig+0x4bc>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe ffe8 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	61f8      	str	r0, [r7, #28]
        break;
 8005cb6:	e014      	b.n	8005ce2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fe fffa 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
        break;
 8005cbe:	e010      	b.n	8005ce2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <UART_SetConfig+0x56c>)
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e00d      	b.n	8005ce2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe ff45 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8005cca:	61f8      	str	r0, [r7, #28]
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	085a      	lsrs	r2, r3, #1
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d909      	bls.n	8005d16 <UART_SetConfig+0x546>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d205      	bcs.n	8005d16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60da      	str	r2, [r3, #12]
 8005d14:	e002      	b.n	8005d1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40008000 	.word	0x40008000
 8005d3c:	00f42400 	.word	0x00f42400

08005d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3e:	d10a      	bne.n	8005e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b098      	sub	sp, #96	; 0x60
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e94:	f7fb fbe4 	bl	8001660 <HAL_GetTick>
 8005e98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d12e      	bne.n	8005f06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f88c 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d021      	beq.n	8005f06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e062      	b.n	8005fcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d149      	bne.n	8005fa8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f856 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03c      	beq.n	8005fa8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f80:	61fa      	str	r2, [r7, #28]
 8005f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69b9      	ldr	r1, [r7, #24]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e011      	b.n	8005fcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3758      	adds	r7, #88	; 0x58
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe4:	e049      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d045      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fb fb37 	bl	8001660 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e048      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d031      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d110      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2208      	movs	r2, #8
 800602a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f838 	bl	80060a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2208      	movs	r2, #8
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e029      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006054:	d111      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f81e 	bl	80060a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e00f      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	bf0c      	ite	eq
 800608a:	2301      	moveq	r3, #1
 800608c:	2300      	movne	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	429a      	cmp	r2, r3
 8006096:	d0a6      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b095      	sub	sp, #84	; 0x54
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
 80060ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e6      	bne.n	80060aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3308      	adds	r3, #8
 80060fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	2b01      	cmp	r3, #1
 8006116:	d118      	bne.n	800614a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	60bb      	str	r3, [r7, #8]
   return(result);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	613b      	str	r3, [r7, #16]
   return(result);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800615e:	bf00      	nop
 8006160:	3754      	adds	r7, #84	; 0x54
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800616a:	b084      	sub	sp, #16
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	f107 001c 	add.w	r0, r7, #28
 8006178:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fa1d 	bl	80075c8 <USB_CoreReset>
 800618e:	4603      	mov	r3, r0
 8006190:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
 80061a4:	e005      	b.n	80061b2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061be:	b004      	add	sp, #16
 80061c0:	4770      	bx	lr
	...

080061c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d165      	bne.n	80062a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a3e      	ldr	r2, [pc, #248]	; (80062d4 <USB_SetTurnaroundTime+0x110>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d906      	bls.n	80061ee <USB_SetTurnaroundTime+0x2a>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4a3d      	ldr	r2, [pc, #244]	; (80062d8 <USB_SetTurnaroundTime+0x114>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d202      	bcs.n	80061ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061e8:	230f      	movs	r3, #15
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e05c      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a39      	ldr	r2, [pc, #228]	; (80062d8 <USB_SetTurnaroundTime+0x114>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d306      	bcc.n	8006204 <USB_SetTurnaroundTime+0x40>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a38      	ldr	r2, [pc, #224]	; (80062dc <USB_SetTurnaroundTime+0x118>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d202      	bcs.n	8006204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061fe:	230e      	movs	r3, #14
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	e051      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4a35      	ldr	r2, [pc, #212]	; (80062dc <USB_SetTurnaroundTime+0x118>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d306      	bcc.n	800621a <USB_SetTurnaroundTime+0x56>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <USB_SetTurnaroundTime+0x11c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d202      	bcs.n	800621a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006214:	230d      	movs	r3, #13
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e046      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a30      	ldr	r2, [pc, #192]	; (80062e0 <USB_SetTurnaroundTime+0x11c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d306      	bcc.n	8006230 <USB_SetTurnaroundTime+0x6c>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <USB_SetTurnaroundTime+0x120>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d802      	bhi.n	8006230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800622a:	230c      	movs	r3, #12
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e03b      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4a2c      	ldr	r2, [pc, #176]	; (80062e4 <USB_SetTurnaroundTime+0x120>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d906      	bls.n	8006246 <USB_SetTurnaroundTime+0x82>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4a2b      	ldr	r2, [pc, #172]	; (80062e8 <USB_SetTurnaroundTime+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d802      	bhi.n	8006246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006240:	230b      	movs	r3, #11
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e030      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <USB_SetTurnaroundTime+0x124>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d906      	bls.n	800625c <USB_SetTurnaroundTime+0x98>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a26      	ldr	r2, [pc, #152]	; (80062ec <USB_SetTurnaroundTime+0x128>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d802      	bhi.n	800625c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006256:	230a      	movs	r3, #10
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e025      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a23      	ldr	r2, [pc, #140]	; (80062ec <USB_SetTurnaroundTime+0x128>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d906      	bls.n	8006272 <USB_SetTurnaroundTime+0xae>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <USB_SetTurnaroundTime+0x12c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d202      	bcs.n	8006272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800626c:	2309      	movs	r3, #9
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e01a      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <USB_SetTurnaroundTime+0x12c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d306      	bcc.n	8006288 <USB_SetTurnaroundTime+0xc4>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <USB_SetTurnaroundTime+0x130>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d802      	bhi.n	8006288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006282:	2308      	movs	r3, #8
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e00f      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <USB_SetTurnaroundTime+0x130>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d906      	bls.n	800629e <USB_SetTurnaroundTime+0xda>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <USB_SetTurnaroundTime+0x134>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d202      	bcs.n	800629e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006298:	2307      	movs	r3, #7
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e004      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800629e:	2306      	movs	r3, #6
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e001      	b.n	80062a8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062a4:	2309      	movs	r3, #9
 80062a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	00d8acbf 	.word	0x00d8acbf
 80062d8:	00e4e1c0 	.word	0x00e4e1c0
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	01067380 	.word	0x01067380
 80062e4:	011a499f 	.word	0x011a499f
 80062e8:	01312cff 	.word	0x01312cff
 80062ec:	014ca43f 	.word	0x014ca43f
 80062f0:	016e3600 	.word	0x016e3600
 80062f4:	01a6ab1f 	.word	0x01a6ab1f
 80062f8:	01e84800 	.word	0x01e84800

080062fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d115      	bne.n	800638e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800636e:	2001      	movs	r0, #1
 8006370:	f7fb f982 	bl	8001678 <HAL_Delay>
      ms++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 f8ab 	bl	80074d6 <USB_GetMode>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d01e      	beq.n	80063c4 <USB_SetCurrentMode+0x84>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b31      	cmp	r3, #49	; 0x31
 800638a:	d9f0      	bls.n	800636e <USB_SetCurrentMode+0x2e>
 800638c:	e01a      	b.n	80063c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d115      	bne.n	80063c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063a0:	2001      	movs	r0, #1
 80063a2:	f7fb f969 	bl	8001678 <HAL_Delay>
      ms++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 f892 	bl	80074d6 <USB_GetMode>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <USB_SetCurrentMode+0x84>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b31      	cmp	r3, #49	; 0x31
 80063bc:	d9f0      	bls.n	80063a0 <USB_SetCurrentMode+0x60>
 80063be:	e001      	b.n	80063c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e005      	b.n	80063d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b32      	cmp	r3, #50	; 0x32
 80063c8:	d101      	bne.n	80063ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063d8:	b084      	sub	sp, #16
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e009      	b.n	800640c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3340      	adds	r3, #64	; 0x40
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	2200      	movs	r2, #0
 8006404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b0e      	cmp	r3, #14
 8006410:	d9f2      	bls.n	80063f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11c      	bne.n	8006452 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e005      	b.n	800645e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800646a:	2103      	movs	r1, #3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f959 	bl	8006724 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006472:	2110      	movs	r1, #16
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8f1 	bl	800665c <USB_FlushTxFifo>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f91d 	bl	80066c4 <USB_FlushRxFifo>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	461a      	mov	r2, r3
 800649c:	2300      	movs	r3, #0
 800649e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	e043      	b.n	8006546 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d4:	d118      	bne.n	8006508 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	461a      	mov	r2, r3
 80064ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e013      	b.n	800651a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	461a      	mov	r2, r3
 8006500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e008      	b.n	800651a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	461a      	mov	r2, r3
 8006516:	2300      	movs	r3, #0
 8006518:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	461a      	mov	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	461a      	mov	r2, r3
 800653a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800653e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3301      	adds	r3, #1
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d3b7      	bcc.n	80064be <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e043      	b.n	80065dc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656a:	d118      	bne.n	800659e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e013      	b.n	80065b0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	461a      	mov	r2, r3
 8006596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e008      	b.n	80065b0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d3b7      	bcc.n	8006554 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006604:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f043 0210 	orr.w	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <USB_DevInit+0x280>)
 8006618:	4313      	orrs	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f043 0208 	orr.w	r2, r3, #8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006652:	b004      	add	sp, #16
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	803c3800 	.word	0x803c3800

0800665c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <USB_FlushTxFifo+0x64>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e01b      	b.n	80066b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	daf2      	bge.n	800666a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	019b      	lsls	r3, r3, #6
 800668c:	f043 0220 	orr.w	r2, r3, #32
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <USB_FlushTxFifo+0x64>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e006      	b.n	80066b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d0f0      	beq.n	8006694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	00030d40 	.word	0x00030d40

080066c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <USB_FlushRxFifo+0x5c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e018      	b.n	8006714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	daf2      	bge.n	80066d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2210      	movs	r2, #16
 80066f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a08      	ldr	r2, [pc, #32]	; (8006720 <USB_FlushRxFifo+0x5c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e006      	b.n	8006714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d0f0      	beq.n	80066f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	00030d40 	.word	0x00030d40

08006724 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006744:	4313      	orrs	r3, r2
 8006746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0306 	and.w	r3, r3, #6
 800676e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d002      	beq.n	800677c <USB_GetDevSpeed+0x26>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b06      	cmp	r3, #6
 800677a:	d102      	bne.n	8006782 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800677c:	2302      	movs	r3, #2
 800677e:	75fb      	strb	r3, [r7, #23]
 8006780:	e001      	b.n	8006786 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006782:	230f      	movs	r3, #15
 8006784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d13a      	bne.n	8006826 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d155      	bne.n	8006894 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	791b      	ldrb	r3, [r3, #4]
 8006802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	059b      	lsls	r3, r3, #22
 800680a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800680c:	4313      	orrs	r3, r2
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e036      	b.n	8006894 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	2101      	movs	r1, #1
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006844:	4313      	orrs	r3, r2
 8006846:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11a      	bne.n	8006894 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800687a:	430b      	orrs	r3, r1
 800687c:	4313      	orrs	r3, r2
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d161      	bne.n	8006984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d6:	d11f      	bne.n	8006918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	440a      	add	r2, r1
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f303 	lsl.w	r3, r1, r3
 800692e:	b29b      	uxth	r3, r3
 8006930:	43db      	mvns	r3, r3
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006938:	4013      	ands	r3, r2
 800693a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f303 	lsl.w	r3, r1, r3
 8006952:	b29b      	uxth	r3, r3
 8006954:	43db      	mvns	r3, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800695c:	4013      	ands	r3, r2
 800695e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	0159      	lsls	r1, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	440b      	add	r3, r1
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	4619      	mov	r1, r3
 800697c:	4b35      	ldr	r3, [pc, #212]	; (8006a54 <USB_DeactivateEndpoint+0x1b0>)
 800697e:	4013      	ands	r3, r2
 8006980:	600b      	str	r3, [r1, #0]
 8006982:	e060      	b.n	8006a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800699a:	d11f      	bne.n	80069dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	43db      	mvns	r3, r3
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fc:	4013      	ands	r3, r2
 80069fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	2101      	movs	r1, #1
 8006a12:	fa01 f303 	lsl.w	r3, r1, r3
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a20:	4013      	ands	r3, r2
 8006a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	0159      	lsls	r1, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	440b      	add	r3, r1
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <USB_DeactivateEndpoint+0x1b4>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	ec337800 	.word	0xec337800
 8006a58:	eff37800 	.word	0xeff37800

08006a5c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 8128 	bne.w	8006cca <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d132      	bne.n	8006ae8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae0:	0cdb      	lsrs	r3, r3, #19
 8006ae2:	04db      	lsls	r3, r3, #19
 8006ae4:	6113      	str	r3, [r2, #16]
 8006ae6:	e092      	b.n	8006c0e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b02:	0cdb      	lsrs	r3, r3, #19
 8006b04:	04db      	lsls	r3, r3, #19
 8006b06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b2a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d11a      	bne.n	8006b68 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d903      	bls.n	8006b46 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b64:	6113      	str	r3, [r2, #16]
 8006b66:	e01b      	b.n	8006ba0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6919      	ldr	r1, [r3, #16]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	440b      	add	r3, r1
 8006b80:	1e59      	subs	r1, r3, #1
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b8a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b8c:	4b8d      	ldr	r3, [pc, #564]	; (8006dc4 <USB_EPStartXfer+0x368>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	6939      	ldr	r1, [r7, #16]
 8006b92:	0148      	lsls	r0, r1, #5
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	4401      	add	r1, r0
 8006b98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb6:	6939      	ldr	r1, [r7, #16]
 8006bb8:	0148      	lsls	r0, r1, #5
 8006bba:	6979      	ldr	r1, [r7, #20]
 8006bbc:	4401      	add	r1, r0
 8006bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	791b      	ldrb	r3, [r3, #4]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d11f      	bne.n	8006c0e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c0c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c2c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	791b      	ldrb	r3, [r3, #4]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d015      	beq.n	8006c62 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8139 	beq.w	8006eb2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	634b      	str	r3, [r1, #52]	; 0x34
 8006c60:	e127      	b.n	8006eb2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d110      	bne.n	8006c94 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e00f      	b.n	8006cb4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68d9      	ldr	r1, [r3, #12]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9a6 	bl	8007014 <USB_WritePacket>
 8006cc8:	e0f3      	b.n	8006eb2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	0cdb      	lsrs	r3, r3, #19
 8006ce6:	04db      	lsls	r3, r3, #19
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d0c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d12f      	bne.n	8006d74 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d42:	6939      	ldr	r1, [r7, #16]
 8006d44:	0148      	lsls	r0, r1, #5
 8006d46:	6979      	ldr	r1, [r7, #20]
 8006d48:	4401      	add	r1, r0
 8006d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d70:	6113      	str	r3, [r2, #16]
 8006d72:	e061      	b.n	8006e38 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d125      	bne.n	8006dc8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d92:	6939      	ldr	r1, [r7, #16]
 8006d94:	0148      	lsls	r0, r1, #5
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	4401      	add	r1, r0
 8006d9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dc0:	6113      	str	r3, [r2, #16]
 8006dc2:	e039      	b.n	8006e38 <USB_EPStartXfer+0x3dc>
 8006dc4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	1e5a      	subs	r2, r3, #1
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	89fa      	ldrh	r2, [r7, #14]
 8006de4:	fb03 f202 	mul.w	r2, r3, r2
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	691a      	ldr	r2, [r3, #16]
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
 8006dfc:	04d9      	lsls	r1, r3, #19
 8006dfe:	4b2f      	ldr	r3, [pc, #188]	; (8006ebc <USB_EPStartXfer+0x460>)
 8006e00:	400b      	ands	r3, r1
 8006e02:	6939      	ldr	r1, [r7, #16]
 8006e04:	0148      	lsls	r0, r1, #5
 8006e06:	6979      	ldr	r1, [r7, #20]
 8006e08:	4401      	add	r1, r0
 8006e0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e28:	6939      	ldr	r1, [r7, #16]
 8006e2a:	0148      	lsls	r0, r1, #5
 8006e2c:	6979      	ldr	r1, [r7, #20]
 8006e2e:	4401      	add	r1, r0
 8006e30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e34:	4313      	orrs	r3, r2
 8006e36:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	791b      	ldrb	r3, [r3, #4]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d128      	bne.n	8006e92 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d110      	bne.n	8006e72 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e00f      	b.n	8006e92 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e90:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	1ff80000 	.word	0x1ff80000

08006ec0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d14a      	bne.n	8006f74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef6:	f040 8086 	bne.w	8007006 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d902      	bls.n	8006f58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
          break;
 8006f56:	e056      	b.n	8007006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f70:	d0e7      	beq.n	8006f42 <USB_EPStopXfer+0x82>
 8006f72:	e048      	b.n	8007006 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f8c:	d13b      	bne.n	8007006 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d902      	bls.n	8006fec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fea:	e00c      	b.n	8007006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007004:	d0e7      	beq.n	8006fd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
}
 8007008:	4618      	mov	r0, r3
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4611      	mov	r1, r2
 8007020:	461a      	mov	r2, r3
 8007022:	460b      	mov	r3, r1
 8007024:	71fb      	strb	r3, [r7, #7]
 8007026:	4613      	mov	r3, r2
 8007028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007032:	88bb      	ldrh	r3, [r7, #4]
 8007034:	3303      	adds	r3, #3
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800703a:	2300      	movs	r3, #0
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	e018      	b.n	8007072 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	031a      	lsls	r2, r3, #12
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	4413      	add	r3, r2
 8007048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704c:	461a      	mov	r2, r3
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	3301      	adds	r3, #1
 8007064:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	3301      	adds	r3, #1
 800706a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3301      	adds	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d3e2      	bcc.n	8007040 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3724      	adds	r7, #36	; 0x24
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007088:	b480      	push	{r7}
 800708a:	b08b      	sub	sp, #44	; 0x2c
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	089b      	lsrs	r3, r3, #2
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	623b      	str	r3, [r7, #32]
 80070b2:	e014      	b.n	80070de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	601a      	str	r2, [r3, #0]
    pDest++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	3301      	adds	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	3301      	adds	r3, #1
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	3301      	adds	r3, #1
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3e6      	bcc.n	80070b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070e6:	8bfb      	ldrh	r3, [r7, #30]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01e      	beq.n	800712a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	461a      	mov	r2, r3
 80070f8:	f107 0310 	add.w	r3, r7, #16
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	b2da      	uxtb	r2, r3
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	701a      	strb	r2, [r3, #0]
      i++;
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	3301      	adds	r3, #1
 8007116:	623b      	str	r3, [r7, #32]
      pDest++;
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	3301      	adds	r3, #1
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800711e:	8bfb      	ldrh	r3, [r7, #30]
 8007120:	3b01      	subs	r3, #1
 8007122:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007124:	8bfb      	ldrh	r3, [r7, #30]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1ea      	bne.n	8007100 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800712c:	4618      	mov	r0, r3
 800712e:	372c      	adds	r7, #44	; 0x2c
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d12c      	bne.n	80071ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	db12      	blt.n	800718c <USB_EPSetStall+0x54>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00f      	beq.n	800718c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800718a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	e02b      	b.n	8007206 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	db12      	blt.n	80071e6 <USB_EPSetStall+0xae>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00f      	beq.n	80071e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d128      	bne.n	8007282 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800724e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	791b      	ldrb	r3, [r3, #4]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d003      	beq.n	8007260 <USB_EPClearStall+0x4c>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d138      	bne.n	80072d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	e027      	b.n	80072d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800729c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	791b      	ldrb	r3, [r3, #4]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d003      	beq.n	80072b2 <USB_EPClearStall+0x9e>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d10f      	bne.n	80072d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007302:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f023 0302 	bic.w	r3, r3, #2
 800735e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007388:	f023 0303 	bic.w	r3, r3, #3
 800738c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073c8:	68fb      	ldr	r3, [r7, #12]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	0c1b      	lsrs	r3, r3, #16
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	b29b      	uxth	r3, r3
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4013      	ands	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800746c:	68bb      	ldr	r3, [r7, #8]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800747a:	b480      	push	{r7}
 800747c:	b087      	sub	sp, #28
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	01db      	lsls	r3, r3, #7
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4013      	ands	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074c8:	68bb      	ldr	r3, [r7, #8]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0301 	and.w	r3, r3, #1
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007510:	f023 0307 	bic.w	r3, r3, #7
 8007514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	333c      	adds	r3, #60	; 0x3c
 800754a:	3304      	adds	r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <USB_EP0_OutStart+0x8c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d90a      	bls.n	800756e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007568:	d101      	bne.n	800756e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e024      	b.n	80075b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	461a      	mov	r2, r3
 8007576:	2300      	movs	r3, #0
 8007578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800758c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759c:	f043 0318 	orr.w	r3, r3, #24
 80075a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80075b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	4f54300a 	.word	0x4f54300a

080075c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a13      	ldr	r2, [pc, #76]	; (800762c <USB_CoreReset+0x64>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e01b      	b.n	800761e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf2      	bge.n	80075d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f043 0201 	orr.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4a09      	ldr	r2, [pc, #36]	; (800762c <USB_CoreReset+0x64>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d901      	bls.n	8007610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	d0f0      	beq.n	80075fe <USB_CoreReset+0x36>

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	00030d40 	.word	0x00030d40

08007630 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800763c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007640:	f002 fe26 	bl	800a290 <USBD_static_malloc>
 8007644:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32b0      	adds	r2, #176	; 0xb0
 8007656:	2100      	movs	r1, #0
 8007658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800765c:	2302      	movs	r3, #2
 800765e:	e0d4      	b.n	800780a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007660:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007664:	2100      	movs	r1, #0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f002 ff35 	bl	800a4d6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32b0      	adds	r2, #176	; 0xb0
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	32b0      	adds	r2, #176	; 0xb0
 8007686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	7c1b      	ldrb	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d138      	bne.n	800770a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007698:	4b5e      	ldr	r3, [pc, #376]	; (8007814 <USBD_CDC_Init+0x1e4>)
 800769a:	7819      	ldrb	r1, [r3, #0]
 800769c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a0:	2202      	movs	r2, #2
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f002 fbe0 	bl	8009e68 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076a8:	4b5a      	ldr	r3, [pc, #360]	; (8007814 <USBD_CDC_Init+0x1e4>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f003 020f 	and.w	r2, r3, #15
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	3324      	adds	r3, #36	; 0x24
 80076be:	2201      	movs	r2, #1
 80076c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076c2:	4b55      	ldr	r3, [pc, #340]	; (8007818 <USBD_CDC_Init+0x1e8>)
 80076c4:	7819      	ldrb	r1, [r3, #0]
 80076c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ca:	2202      	movs	r2, #2
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f002 fbcb 	bl	8009e68 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076d2:	4b51      	ldr	r3, [pc, #324]	; (8007818 <USBD_CDC_Init+0x1e8>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 020f 	and.w	r2, r3, #15
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076ea:	2201      	movs	r2, #1
 80076ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076ee:	4b4b      	ldr	r3, [pc, #300]	; (800781c <USBD_CDC_Init+0x1ec>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3326      	adds	r3, #38	; 0x26
 8007704:	2210      	movs	r2, #16
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e035      	b.n	8007776 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800770a:	4b42      	ldr	r3, [pc, #264]	; (8007814 <USBD_CDC_Init+0x1e4>)
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	2202      	movs	r2, #2
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f002 fba8 	bl	8009e68 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007718:	4b3e      	ldr	r3, [pc, #248]	; (8007814 <USBD_CDC_Init+0x1e4>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	3324      	adds	r3, #36	; 0x24
 800772e:	2201      	movs	r2, #1
 8007730:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <USBD_CDC_Init+0x1e8>)
 8007734:	7819      	ldrb	r1, [r3, #0]
 8007736:	2340      	movs	r3, #64	; 0x40
 8007738:	2202      	movs	r2, #2
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f002 fb94 	bl	8009e68 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <USBD_CDC_Init+0x1e8>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	f003 020f 	and.w	r2, r3, #15
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007758:	2201      	movs	r2, #1
 800775a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800775c:	4b2f      	ldr	r3, [pc, #188]	; (800781c <USBD_CDC_Init+0x1ec>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f003 020f 	and.w	r2, r3, #15
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	3326      	adds	r3, #38	; 0x26
 8007772:	2210      	movs	r2, #16
 8007774:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <USBD_CDC_Init+0x1ec>)
 8007778:	7819      	ldrb	r1, [r3, #0]
 800777a:	2308      	movs	r3, #8
 800777c:	2203      	movs	r2, #3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f002 fb72 	bl	8009e68 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007784:	4b25      	ldr	r3, [pc, #148]	; (800781c <USBD_CDC_Init+0x1ec>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	2201      	movs	r2, #1
 800779c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	33b0      	adds	r3, #176	; 0xb0
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077d4:	2302      	movs	r3, #2
 80077d6:	e018      	b.n	800780a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7c1b      	ldrb	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e0:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <USBD_CDC_Init+0x1e8>)
 80077e2:	7819      	ldrb	r1, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f002 fcb4 	bl	800a15c <USBD_LL_PrepareReceive>
 80077f4:	e008      	b.n	8007808 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <USBD_CDC_Init+0x1e8>)
 80077f8:	7819      	ldrb	r1, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f002 fcaa 	bl	800a15c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000093 	.word	0x20000093
 8007818:	20000094 	.word	0x20000094
 800781c:	20000095 	.word	0x20000095

08007820 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800782c:	4b3a      	ldr	r3, [pc, #232]	; (8007918 <USBD_CDC_DeInit+0xf8>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f002 fb56 	bl	8009ee4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007838:	4b37      	ldr	r3, [pc, #220]	; (8007918 <USBD_CDC_DeInit+0xf8>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 020f 	and.w	r2, r3, #15
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	3324      	adds	r3, #36	; 0x24
 800784e:	2200      	movs	r2, #0
 8007850:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007852:	4b32      	ldr	r3, [pc, #200]	; (800791c <USBD_CDC_DeInit+0xfc>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 fb43 	bl	8009ee4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800785e:	4b2f      	ldr	r3, [pc, #188]	; (800791c <USBD_CDC_DeInit+0xfc>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007876:	2200      	movs	r2, #0
 8007878:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <USBD_CDC_DeInit+0x100>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 fb2f 	bl	8009ee4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <USBD_CDC_DeInit+0x100>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	2200      	movs	r2, #0
 800789e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80078a0:	4b1f      	ldr	r3, [pc, #124]	; (8007920 <USBD_CDC_DeInit+0x100>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	3326      	adds	r3, #38	; 0x26
 80078b6:	2200      	movs	r2, #0
 80078b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	32b0      	adds	r2, #176	; 0xb0
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01f      	beq.n	800790c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	33b0      	adds	r3, #176	; 0xb0
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32b0      	adds	r2, #176	; 0xb0
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 fcdc 	bl	800a2ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32b0      	adds	r2, #176	; 0xb0
 80078fe:	2100      	movs	r1, #0
 8007900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000093 	.word	0x20000093
 800791c:	20000094 	.word	0x20000094
 8007920:	20000095 	.word	0x20000095

08007924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	32b0      	adds	r2, #176	; 0xb0
 8007938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	e0bf      	b.n	8007ad4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800795c:	2b00      	cmp	r3, #0
 800795e:	d050      	beq.n	8007a02 <USBD_CDC_Setup+0xde>
 8007960:	2b20      	cmp	r3, #32
 8007962:	f040 80af 	bne.w	8007ac4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	88db      	ldrh	r3, [r3, #6]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d03a      	beq.n	80079e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b25b      	sxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	da1b      	bge.n	80079b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	33b0      	adds	r3, #176	; 0xb0
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800798e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	88d2      	ldrh	r2, [r2, #6]
 8007994:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b07      	cmp	r3, #7
 800799c:	bf28      	it	cs
 800799e:	2307      	movcs	r3, #7
 80079a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	89fa      	ldrh	r2, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fdb3 	bl	8009514 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80079ae:	e090      	b.n	8007ad2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	785a      	ldrb	r2, [r3, #1]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b3f      	cmp	r3, #63	; 0x3f
 80079c0:	d803      	bhi.n	80079ca <USBD_CDC_Setup+0xa6>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	e000      	b.n	80079cc <USBD_CDC_Setup+0xa8>
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079d2:	6939      	ldr	r1, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079da:	461a      	mov	r2, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fdc5 	bl	800956c <USBD_CtlPrepareRx>
      break;
 80079e2:	e076      	b.n	8007ad2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	33b0      	adds	r3, #176	; 0xb0
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	7850      	ldrb	r0, [r2, #1]
 80079fa:	2200      	movs	r2, #0
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	4798      	blx	r3
      break;
 8007a00:	e067      	b.n	8007ad2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	d851      	bhi.n	8007aae <USBD_CDC_Setup+0x18a>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <USBD_CDC_Setup+0xec>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007abd 	.word	0x08007abd
 8007a18:	08007aaf 	.word	0x08007aaf
 8007a1c:	08007aaf 	.word	0x08007aaf
 8007a20:	08007aaf 	.word	0x08007aaf
 8007a24:	08007aaf 	.word	0x08007aaf
 8007a28:	08007aaf 	.word	0x08007aaf
 8007a2c:	08007aaf 	.word	0x08007aaf
 8007a30:	08007aaf 	.word	0x08007aaf
 8007a34:	08007aaf 	.word	0x08007aaf
 8007a38:	08007a6b 	.word	0x08007a6b
 8007a3c:	08007a95 	.word	0x08007a95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d107      	bne.n	8007a5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a4c:	f107 030a 	add.w	r3, r7, #10
 8007a50:	2202      	movs	r2, #2
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fd5d 	bl	8009514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a5a:	e032      	b.n	8007ac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fce7 	bl	8009432 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	75fb      	strb	r3, [r7, #23]
          break;
 8007a68:	e02b      	b.n	8007ac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d107      	bne.n	8007a86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a76:	f107 030d 	add.w	r3, r7, #13
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fd48 	bl	8009514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a84:	e01d      	b.n	8007ac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fcd2 	bl	8009432 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	75fb      	strb	r3, [r7, #23]
          break;
 8007a92:	e016      	b.n	8007ac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d00f      	beq.n	8007ac0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fcc5 	bl	8009432 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007aac:	e008      	b.n	8007ac0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fcbe 	bl	8009432 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aba:	e002      	b.n	8007ac2 <USBD_CDC_Setup+0x19e>
          break;
 8007abc:	bf00      	nop
 8007abe:	e008      	b.n	8007ad2 <USBD_CDC_Setup+0x1ae>
          break;
 8007ac0:	bf00      	nop
      }
      break;
 8007ac2:	e006      	b.n	8007ad2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fcb3 	bl	8009432 <USBD_CtlError>
      ret = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32b0      	adds	r2, #176	; 0xb0
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e065      	b.n	8007bd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	32b0      	adds	r2, #176	; 0xb0
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3318      	adds	r3, #24
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d02f      	beq.n	8007b90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	3318      	adds	r3, #24
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 010f 	and.w	r1, r3, #15
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4403      	add	r3, r0
 8007b58:	3344      	adds	r3, #68	; 0x44
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d112      	bne.n	8007b90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3318      	adds	r3, #24
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b82:	78f9      	ldrb	r1, [r7, #3]
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f002 faaf 	bl	800a0ec <USBD_LL_Transmit>
 8007b8e:	e01f      	b.n	8007bd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	33b0      	adds	r3, #176	; 0xb0
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	33b0      	adds	r3, #176	; 0xb0
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	; 0xb0
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	32b0      	adds	r2, #176	; 0xb0
 8007c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e01a      	b.n	8007c42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f002 fadb 	bl	800a1cc <USBD_LL_GetRxDataSize>
 8007c16:	4602      	mov	r2, r0
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	33b0      	adds	r3, #176	; 0xb0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	32b0      	adds	r2, #176	; 0xb0
 8007c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e025      	b.n	8007cb8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	33b0      	adds	r3, #176	; 0xb0
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01a      	beq.n	8007cb6 <USBD_CDC_EP0_RxReady+0x6c>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c86:	2bff      	cmp	r3, #255	; 0xff
 8007c88:	d015      	beq.n	8007cb6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	33b0      	adds	r3, #176	; 0xb0
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007ca2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007caa:	b292      	uxth	r2, r2
 8007cac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cc8:	2182      	movs	r1, #130	; 0x82
 8007cca:	4818      	ldr	r0, [pc, #96]	; (8007d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ccc:	f000 fd4f 	bl	800876e <USBD_GetEpDesc>
 8007cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	4815      	ldr	r0, [pc, #84]	; (8007d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cd6:	f000 fd4a 	bl	800876e <USBD_GetEpDesc>
 8007cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cdc:	2181      	movs	r1, #129	; 0x81
 8007cde:	4813      	ldr	r0, [pc, #76]	; (8007d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ce0:	f000 fd45 	bl	800876e <USBD_GetEpDesc>
 8007ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d00:	711a      	strb	r2, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d006      	beq.n	8007d1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d14:	711a      	strb	r2, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2243      	movs	r2, #67	; 0x43
 8007d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000050 	.word	0x20000050

08007d30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d38:	2182      	movs	r1, #130	; 0x82
 8007d3a:	4818      	ldr	r0, [pc, #96]	; (8007d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d3c:	f000 fd17 	bl	800876e <USBD_GetEpDesc>
 8007d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d42:	2101      	movs	r1, #1
 8007d44:	4815      	ldr	r0, [pc, #84]	; (8007d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d46:	f000 fd12 	bl	800876e <USBD_GetEpDesc>
 8007d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d4c:	2181      	movs	r1, #129	; 0x81
 8007d4e:	4813      	ldr	r0, [pc, #76]	; (8007d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d50:	f000 fd0d 	bl	800876e <USBD_GetEpDesc>
 8007d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d006      	beq.n	8007d76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	711a      	strb	r2, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f042 0202 	orr.w	r2, r2, #2
 8007d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	711a      	strb	r2, [r3, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f042 0202 	orr.w	r2, r2, #2
 8007d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2243      	movs	r2, #67	; 0x43
 8007d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000050 	.word	0x20000050

08007da0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007da8:	2182      	movs	r1, #130	; 0x82
 8007daa:	4818      	ldr	r0, [pc, #96]	; (8007e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dac:	f000 fcdf 	bl	800876e <USBD_GetEpDesc>
 8007db0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007db2:	2101      	movs	r1, #1
 8007db4:	4815      	ldr	r0, [pc, #84]	; (8007e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007db6:	f000 fcda 	bl	800876e <USBD_GetEpDesc>
 8007dba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dbc:	2181      	movs	r1, #129	; 0x81
 8007dbe:	4813      	ldr	r0, [pc, #76]	; (8007e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dc0:	f000 fcd5 	bl	800876e <USBD_GetEpDesc>
 8007dc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d006      	beq.n	8007de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de0:	711a      	strb	r2, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007df4:	711a      	strb	r2, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2243      	movs	r2, #67	; 0x43
 8007dfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000050 	.word	0x20000050

08007e10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e1e:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	2000000c 	.word	0x2000000c

08007e30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e009      	b.n	8007e58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	33b0      	adds	r3, #176	; 0xb0
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	32b0      	adds	r2, #176	; 0xb0
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e008      	b.n	8007e9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32b0      	adds	r2, #176	; 0xb0
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e004      	b.n	8007ed6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
	...

08007ee4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	32b0      	adds	r2, #176	; 0xb0
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e025      	b.n	8007f56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11f      	bne.n	8007f54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f1c:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <USBD_CDC_TransmitPacket+0x7c>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4403      	add	r3, r0
 8007f36:	3318      	adds	r3, #24
 8007f38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f3a:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <USBD_CDC_TransmitPacket+0x7c>)
 8007f3c:	7819      	ldrb	r1, [r3, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f002 f8ce 	bl	800a0ec <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000093 	.word	0x20000093

08007f64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	32b0      	adds	r2, #176	; 0xb0
 8007f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	32b0      	adds	r2, #176	; 0xb0
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e018      	b.n	8007fc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7c1b      	ldrb	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <USBD_CDC_ReceivePacket+0x68>)
 8007f9c:	7819      	ldrb	r1, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f002 f8d7 	bl	800a15c <USBD_LL_PrepareReceive>
 8007fae:	e008      	b.n	8007fc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <USBD_CDC_ReceivePacket+0x68>)
 8007fb2:	7819      	ldrb	r1, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f002 f8cd 	bl	800a15c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000094 	.word	0x20000094

08007fd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e01f      	b.n	8008028 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	79fa      	ldrb	r2, [r7, #7]
 800801a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f001 fea5 	bl	8009d6c <USBD_LL_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008044:	2303      	movs	r3, #3
 8008046:	e025      	b.n	8008094 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32ae      	adds	r2, #174	; 0xae
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00f      	beq.n	8008084 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32ae      	adds	r2, #174	; 0xae
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f107 020e 	add.w	r2, r7, #14
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	4602      	mov	r2, r0
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fead 	bl	8009e04 <USBD_LL_Start>
 80080aa:	4603      	mov	r3, r0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	4611      	mov	r1, r2
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	4611      	mov	r1, r2
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f001 f938 	bl	80093be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800816a:	f003 031f 	and.w	r3, r3, #31
 800816e:	2b02      	cmp	r3, #2
 8008170:	d01a      	beq.n	80081a8 <USBD_LL_SetupStage+0x72>
 8008172:	2b02      	cmp	r3, #2
 8008174:	d822      	bhi.n	80081bc <USBD_LL_SetupStage+0x86>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <USBD_LL_SetupStage+0x4a>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d00a      	beq.n	8008194 <USBD_LL_SetupStage+0x5e>
 800817e:	e01d      	b.n	80081bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb65 	bl	8008858 <USBD_StdDevReq>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
      break;
 8008192:	e020      	b.n	80081d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fbcd 	bl	800893c <USBD_StdItfReq>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
      break;
 80081a6:	e016      	b.n	80081d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc2f 	bl	8008a14 <USBD_StdEPReq>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ba:	e00c      	b.n	80081d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fec0 	bl	8009f50 <USBD_LL_StallEP>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
      break;
 80081d4:	bf00      	nop
  }

  return ret;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	460b      	mov	r3, r1
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d16e      	bne.n	80082d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008206:	2b03      	cmp	r3, #3
 8008208:	f040 8098 	bne.w	800833c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	429a      	cmp	r2, r3
 8008216:	d913      	bls.n	8008240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4293      	cmp	r3, r2
 8008230:	bf28      	it	cs
 8008232:	4613      	movcs	r3, r2
 8008234:	461a      	mov	r2, r3
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f001 f9b4 	bl	80095a6 <USBD_CtlContinueRx>
 800823e:	e07d      	b.n	800833c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2b02      	cmp	r3, #2
 800824c:	d014      	beq.n	8008278 <USBD_LL_DataOutStage+0x98>
 800824e:	2b02      	cmp	r3, #2
 8008250:	d81d      	bhi.n	800828e <USBD_LL_DataOutStage+0xae>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <USBD_LL_DataOutStage+0x7c>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d003      	beq.n	8008262 <USBD_LL_DataOutStage+0x82>
 800825a:	e018      	b.n	800828e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	75bb      	strb	r3, [r7, #22]
            break;
 8008260:	e018      	b.n	8008294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008268:	b2db      	uxtb	r3, r3
 800826a:	4619      	mov	r1, r3
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fa64 	bl	800873a <USBD_CoreFindIF>
 8008272:	4603      	mov	r3, r0
 8008274:	75bb      	strb	r3, [r7, #22]
            break;
 8008276:	e00d      	b.n	8008294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 fa66 	bl	8008754 <USBD_CoreFindEP>
 8008288:	4603      	mov	r3, r0
 800828a:	75bb      	strb	r3, [r7, #22]
            break;
 800828c:	e002      	b.n	8008294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	75bb      	strb	r3, [r7, #22]
            break;
 8008292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008294:	7dbb      	ldrb	r3, [r7, #22]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d119      	bne.n	80082ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d113      	bne.n	80082ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082a6:	7dba      	ldrb	r2, [r7, #22]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	32ae      	adds	r2, #174	; 0xae
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80082b6:	7dba      	ldrb	r2, [r7, #22]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082be:	7dba      	ldrb	r2, [r7, #22]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	32ae      	adds	r2, #174	; 0xae
 80082c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f001 f97a 	bl	80095c8 <USBD_CtlSendStatus>
 80082d4:	e032      	b.n	800833c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	4619      	mov	r1, r3
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fa37 	bl	8008754 <USBD_CoreFindEP>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082ea:	7dbb      	ldrb	r3, [r7, #22]
 80082ec:	2bff      	cmp	r3, #255	; 0xff
 80082ee:	d025      	beq.n	800833c <USBD_LL_DataOutStage+0x15c>
 80082f0:	7dbb      	ldrb	r3, [r7, #22]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d122      	bne.n	800833c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d117      	bne.n	8008332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008302:	7dba      	ldrb	r2, [r7, #22]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	32ae      	adds	r2, #174	; 0xae
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00f      	beq.n	8008332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008312:	7dba      	ldrb	r2, [r7, #22]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800831a:	7dba      	ldrb	r2, [r7, #22]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	32ae      	adds	r2, #174	; 0xae
 8008320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	7afa      	ldrb	r2, [r7, #11]
 8008328:	4611      	mov	r1, r2
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	e000      	b.n	800833e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	460b      	mov	r3, r1
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d16f      	bne.n	800843a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3314      	adds	r3, #20
 800835e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008366:	2b02      	cmp	r3, #2
 8008368:	d15a      	bne.n	8008420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	429a      	cmp	r2, r3
 8008374:	d914      	bls.n	80083a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	461a      	mov	r2, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f001 f8dc 	bl	800954a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008392:	2300      	movs	r3, #0
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f001 fedf 	bl	800a15c <USBD_LL_PrepareReceive>
 800839e:	e03f      	b.n	8008420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d11c      	bne.n	80083e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d316      	bcc.n	80083e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d20f      	bcs.n	80083e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f001 f8bd 	bl	800954a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d8:	2300      	movs	r3, #0
 80083da:	2200      	movs	r2, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f001 febc 	bl	800a15c <USBD_LL_PrepareReceive>
 80083e4:	e01c      	b.n	8008420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d10f      	bne.n	8008412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f001 fd9b 	bl	8009f50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f001 f8e7 	bl	80095ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d03a      	beq.n	80084a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fe42 	bl	80080b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008438:	e032      	b.n	80084a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f985 	bl	8008754 <USBD_CoreFindEP>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	2bff      	cmp	r3, #255	; 0xff
 8008452:	d025      	beq.n	80084a0 <USBD_LL_DataInStage+0x15a>
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d122      	bne.n	80084a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d11c      	bne.n	80084a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008466:	7dfa      	ldrb	r2, [r7, #23]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	32ae      	adds	r2, #174	; 0xae
 800846c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d014      	beq.n	80084a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008476:	7dfa      	ldrb	r2, [r7, #23]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800847e:	7dfa      	ldrb	r2, [r7, #23]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	32ae      	adds	r2, #174	; 0xae
 8008484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	7afa      	ldrb	r2, [r7, #11]
 800848c:	4611      	mov	r1, r2
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008496:	7dbb      	ldrb	r3, [r7, #22]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800849c:	7dbb      	ldrb	r3, [r7, #22]
 800849e:	e000      	b.n	80084a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d014      	beq.n	8008510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00e      	beq.n	8008510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6852      	ldr	r2, [r2, #4]
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	4611      	mov	r1, r2
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008510:	2340      	movs	r3, #64	; 0x40
 8008512:	2200      	movs	r2, #0
 8008514:	2100      	movs	r1, #0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fca6 	bl	8009e68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2240      	movs	r2, #64	; 0x40
 8008528:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800852c:	2340      	movs	r3, #64	; 0x40
 800852e:	2200      	movs	r2, #0
 8008530:	2180      	movs	r1, #128	; 0x80
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fc98 	bl	8009e68 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2240      	movs	r2, #64	; 0x40
 8008542:	621a      	str	r2, [r3, #32]

  return ret;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b04      	cmp	r3, #4
 8008580:	d006      	beq.n	8008590 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008588:	b2da      	uxtb	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2204      	movs	r2, #4
 8008594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d106      	bne.n	80085c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d110      	bne.n	800860c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	32ae      	adds	r2, #174	; 0xae
 800862c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008634:	2303      	movs	r3, #3
 8008636:	e01c      	b.n	8008672 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b03      	cmp	r3, #3
 8008642:	d115      	bne.n	8008670 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	32ae      	adds	r2, #174	; 0xae
 800864e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	32ae      	adds	r2, #174	; 0xae
 8008662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	4611      	mov	r1, r2
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	32ae      	adds	r2, #174	; 0xae
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	e01c      	b.n	80086d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d115      	bne.n	80086d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32ae      	adds	r2, #174	; 0xae
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	32ae      	adds	r2, #174	; 0xae
 80086c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	4611      	mov	r1, r2
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00e      	beq.n	8008730 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6852      	ldr	r2, [r2, #4]
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	4611      	mov	r1, r2
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800872c:	2303      	movs	r3, #3
 800872e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	429a      	cmp	r2, r3
 8008794:	d920      	bls.n	80087d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800879e:	e013      	b.n	80087c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087a0:	f107 030a 	add.w	r3, r7, #10
 80087a4:	4619      	mov	r1, r3
 80087a6:	6978      	ldr	r0, [r7, #20]
 80087a8:	f000 f81b 	bl	80087e2 <USBD_GetNextDesc>
 80087ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d108      	bne.n	80087c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	789b      	ldrb	r3, [r3, #2]
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d008      	beq.n	80087d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	885b      	ldrh	r3, [r3, #2]
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	897b      	ldrh	r3, [r7, #10]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d8e5      	bhi.n	80087a0 <USBD_GetEpDesc+0x32>
 80087d4:	e000      	b.n	80087d8 <USBD_GetEpDesc+0x6a>
          break;
 80087d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80087d8:	693b      	ldr	r3, [r7, #16]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	4413      	add	r3, r2
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800880e:	68fb      	ldr	r3, [r7, #12]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	3301      	adds	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800883a:	8a3b      	ldrh	r3, [r7, #16]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	b21a      	sxth	r2, r3
 8008840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008844:	4313      	orrs	r3, r2
 8008846:	b21b      	sxth	r3, r3
 8008848:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800884a:	89fb      	ldrh	r3, [r7, #14]
}
 800884c:	4618      	mov	r0, r3
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	d005      	beq.n	800887e <USBD_StdDevReq+0x26>
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d857      	bhi.n	8008926 <USBD_StdDevReq+0xce>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00f      	beq.n	800889a <USBD_StdDevReq+0x42>
 800887a:	2b20      	cmp	r3, #32
 800887c:	d153      	bne.n	8008926 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32ae      	adds	r2, #174	; 0xae
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	4798      	blx	r3
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]
      break;
 8008898:	e04a      	b.n	8008930 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d83b      	bhi.n	800891a <USBD_StdDevReq+0xc2>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USBD_StdDevReq+0x50>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008911 	.word	0x08008911
 80088b0:	0800891b 	.word	0x0800891b
 80088b4:	08008907 	.word	0x08008907
 80088b8:	0800891b 	.word	0x0800891b
 80088bc:	080088db 	.word	0x080088db
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	0800891b 	.word	0x0800891b
 80088c8:	080088f3 	.word	0x080088f3
 80088cc:	080088e5 	.word	0x080088e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa3c 	bl	8008d50 <USBD_GetDescriptor>
          break;
 80088d8:	e024      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fbcb 	bl	8009078 <USBD_SetAddress>
          break;
 80088e2:	e01f      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fc0a 	bl	8009100 <USBD_SetConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
          break;
 80088f0:	e018      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fcad 	bl	8009254 <USBD_GetConfig>
          break;
 80088fa:	e013      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fcde 	bl	80092c0 <USBD_GetStatus>
          break;
 8008904:	e00e      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fd0d 	bl	8009328 <USBD_SetFeature>
          break;
 800890e:	e009      	b.n	8008924 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fd31 	bl	800937a <USBD_ClrFeature>
          break;
 8008918:	e004      	b.n	8008924 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fd88 	bl	8009432 <USBD_CtlError>
          break;
 8008922:	bf00      	nop
      }
      break;
 8008924:	e004      	b.n	8008930 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fd82 	bl	8009432 <USBD_CtlError>
      break;
 800892e:	bf00      	nop
  }

  return ret;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop

0800893c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	d005      	beq.n	8008962 <USBD_StdItfReq+0x26>
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	d852      	bhi.n	8008a00 <USBD_StdItfReq+0xc4>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <USBD_StdItfReq+0x26>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d14e      	bne.n	8008a00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008968:	b2db      	uxtb	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	2b02      	cmp	r3, #2
 800896e:	d840      	bhi.n	80089f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	889b      	ldrh	r3, [r3, #4]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b01      	cmp	r3, #1
 8008978:	d836      	bhi.n	80089e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fed9 	bl	800873a <USBD_CoreFindIF>
 8008988:	4603      	mov	r3, r0
 800898a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2bff      	cmp	r3, #255	; 0xff
 8008990:	d01d      	beq.n	80089ce <USBD_StdItfReq+0x92>
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11a      	bne.n	80089ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008998:	7bba      	ldrb	r2, [r7, #14]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	32ae      	adds	r2, #174	; 0xae
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80089a8:	7bba      	ldrb	r2, [r7, #14]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089b0:	7bba      	ldrb	r2, [r7, #14]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	32ae      	adds	r2, #174	; 0xae
 80089b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089c6:	e004      	b.n	80089d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80089c8:	2303      	movs	r3, #3
 80089ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089cc:	e001      	b.n	80089d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80089ce:	2303      	movs	r3, #3
 80089d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88db      	ldrh	r3, [r3, #6]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d110      	bne.n	80089fc <USBD_StdItfReq+0xc0>
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10d      	bne.n	80089fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fdf1 	bl	80095c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089e6:	e009      	b.n	80089fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fd21 	bl	8009432 <USBD_CtlError>
          break;
 80089f0:	e004      	b.n	80089fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fd1c 	bl	8009432 <USBD_CtlError>
          break;
 80089fa:	e000      	b.n	80089fe <USBD_StdItfReq+0xc2>
          break;
 80089fc:	bf00      	nop
      }
      break;
 80089fe:	e004      	b.n	8008a0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fd15 	bl	8009432 <USBD_CtlError>
      break;
 8008a08:	bf00      	nop
  }

  return ret;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	889b      	ldrh	r3, [r3, #4]
 8008a26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d007      	beq.n	8008a44 <USBD_StdEPReq+0x30>
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	f200 817f 	bhi.w	8008d38 <USBD_StdEPReq+0x324>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d02a      	beq.n	8008a94 <USBD_StdEPReq+0x80>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	f040 817a 	bne.w	8008d38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff fe83 	bl	8008754 <USBD_CoreFindEP>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a52:	7b7b      	ldrb	r3, [r7, #13]
 8008a54:	2bff      	cmp	r3, #255	; 0xff
 8008a56:	f000 8174 	beq.w	8008d42 <USBD_StdEPReq+0x32e>
 8008a5a:	7b7b      	ldrb	r3, [r7, #13]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 8170 	bne.w	8008d42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008a62:	7b7a      	ldrb	r2, [r7, #13]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a6a:	7b7a      	ldrb	r2, [r7, #13]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	32ae      	adds	r2, #174	; 0xae
 8008a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8163 	beq.w	8008d42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a7c:	7b7a      	ldrb	r2, [r7, #13]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	; 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	4798      	blx	r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a92:	e156      	b.n	8008d42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d008      	beq.n	8008aae <USBD_StdEPReq+0x9a>
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	f300 8145 	bgt.w	8008d2c <USBD_StdEPReq+0x318>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 809b 	beq.w	8008bde <USBD_StdEPReq+0x1ca>
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d03c      	beq.n	8008b26 <USBD_StdEPReq+0x112>
 8008aac:	e13e      	b.n	8008d2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d002      	beq.n	8008ac0 <USBD_StdEPReq+0xac>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d016      	beq.n	8008aec <USBD_StdEPReq+0xd8>
 8008abe:	e02c      	b.n	8008b1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <USBD_StdEPReq+0xce>
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d00a      	beq.n	8008ae2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 fa3d 	bl	8009f50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ad6:	2180      	movs	r1, #128	; 0x80
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fa39 	bl	8009f50 <USBD_LL_StallEP>
 8008ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae0:	e020      	b.n	8008b24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fca4 	bl	8009432 <USBD_CtlError>
              break;
 8008aea:	e01b      	b.n	8008b24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	885b      	ldrh	r3, [r3, #2]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10e      	bne.n	8008b12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <USBD_StdEPReq+0xfe>
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b80      	cmp	r3, #128	; 0x80
 8008afe:	d008      	beq.n	8008b12 <USBD_StdEPReq+0xfe>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	88db      	ldrh	r3, [r3, #6]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fa1f 	bl	8009f50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fd58 	bl	80095c8 <USBD_CtlSendStatus>

              break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fc88 	bl	8009432 <USBD_CtlError>
              break;
 8008b22:	bf00      	nop
          }
          break;
 8008b24:	e107      	b.n	8008d36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d002      	beq.n	8008b38 <USBD_StdEPReq+0x124>
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d016      	beq.n	8008b64 <USBD_StdEPReq+0x150>
 8008b36:	e04b      	b.n	8008bd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00d      	beq.n	8008b5a <USBD_StdEPReq+0x146>
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b80      	cmp	r3, #128	; 0x80
 8008b42:	d00a      	beq.n	8008b5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 fa01 	bl	8009f50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b4e:	2180      	movs	r1, #128	; 0x80
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f9fd 	bl	8009f50 <USBD_LL_StallEP>
 8008b56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b58:	e040      	b.n	8008bdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc68 	bl	8009432 <USBD_CtlError>
              break;
 8008b62:	e03b      	b.n	8008bdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d136      	bne.n	8008bda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d004      	beq.n	8008b80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fa1e 	bl	8009fbc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fd21 	bl	80095c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff fde2 	bl	8008754 <USBD_CoreFindEP>
 8008b90:	4603      	mov	r3, r0
 8008b92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b94:	7b7b      	ldrb	r3, [r7, #13]
 8008b96:	2bff      	cmp	r3, #255	; 0xff
 8008b98:	d01f      	beq.n	8008bda <USBD_StdEPReq+0x1c6>
 8008b9a:	7b7b      	ldrb	r3, [r7, #13]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11c      	bne.n	8008bda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ba0:	7b7a      	ldrb	r2, [r7, #13]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ba8:	7b7a      	ldrb	r2, [r7, #13]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32ae      	adds	r2, #174	; 0xae
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bb8:	7b7a      	ldrb	r2, [r7, #13]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32ae      	adds	r2, #174	; 0xae
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008bce:	e004      	b.n	8008bda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fc2d 	bl	8009432 <USBD_CtlError>
              break;
 8008bd8:	e000      	b.n	8008bdc <USBD_StdEPReq+0x1c8>
              break;
 8008bda:	bf00      	nop
          }
          break;
 8008bdc:	e0ab      	b.n	8008d36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d002      	beq.n	8008bf0 <USBD_StdEPReq+0x1dc>
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d032      	beq.n	8008c54 <USBD_StdEPReq+0x240>
 8008bee:	e097      	b.n	8008d20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <USBD_StdEPReq+0x1f2>
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b80      	cmp	r3, #128	; 0x80
 8008bfa:	d004      	beq.n	8008c06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fc17 	bl	8009432 <USBD_CtlError>
                break;
 8008c04:	e091      	b.n	8008d2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da0b      	bge.n	8008c26 <USBD_StdEPReq+0x212>
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	3310      	adds	r3, #16
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	3304      	adds	r3, #4
 8008c24:	e00b      	b.n	8008c3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc61 	bl	8009514 <USBD_CtlSendData>
              break;
 8008c52:	e06a      	b.n	8008d2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	da11      	bge.n	8008c80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 020f 	and.w	r2, r3, #15
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3324      	adds	r3, #36	; 0x24
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d117      	bne.n	8008ca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fbda 	bl	8009432 <USBD_CtlError>
                  break;
 8008c7e:	e054      	b.n	8008d2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 020f 	and.w	r2, r3, #15
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fbc7 	bl	8009432 <USBD_CtlError>
                  break;
 8008ca4:	e041      	b.n	8008d2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da0b      	bge.n	8008cc6 <USBD_StdEPReq+0x2b2>
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	3310      	adds	r3, #16
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	e00b      	b.n	8008cde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4413      	add	r3, r2
 8008cdc:	3304      	adds	r3, #4
 8008cde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <USBD_StdEPReq+0x2d8>
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b80      	cmp	r3, #128	; 0x80
 8008cea:	d103      	bne.n	8008cf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	e00e      	b.n	8008d12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f995 	bl	800a028 <USBD_LL_IsStallEP>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2201      	movs	r2, #1
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2202      	movs	r2, #2
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fbfb 	bl	8009514 <USBD_CtlSendData>
              break;
 8008d1e:	e004      	b.n	8008d2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fb85 	bl	8009432 <USBD_CtlError>
              break;
 8008d28:	bf00      	nop
          }
          break;
 8008d2a:	e004      	b.n	8008d36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb7f 	bl	8009432 <USBD_CtlError>
          break;
 8008d34:	bf00      	nop
      }
      break;
 8008d36:	e005      	b.n	8008d44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fb79 	bl	8009432 <USBD_CtlError>
      break;
 8008d40:	e000      	b.n	8008d44 <USBD_StdEPReq+0x330>
      break;
 8008d42:	bf00      	nop
  }

  return ret;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	2b0e      	cmp	r3, #14
 8008d72:	f200 8152 	bhi.w	800901a <USBD_GetDescriptor+0x2ca>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBD_GetDescriptor+0x2c>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008e05 	.word	0x08008e05
 8008d84:	08008e45 	.word	0x08008e45
 8008d88:	0800901b 	.word	0x0800901b
 8008d8c:	0800901b 	.word	0x0800901b
 8008d90:	08008fbb 	.word	0x08008fbb
 8008d94:	08008fe7 	.word	0x08008fe7
 8008d98:	0800901b 	.word	0x0800901b
 8008d9c:	0800901b 	.word	0x0800901b
 8008da0:	0800901b 	.word	0x0800901b
 8008da4:	0800901b 	.word	0x0800901b
 8008da8:	0800901b 	.word	0x0800901b
 8008dac:	0800901b 	.word	0x0800901b
 8008db0:	0800901b 	.word	0x0800901b
 8008db4:	08008db9 	.word	0x08008db9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dda:	e126      	b.n	800902a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fb27 	bl	8009432 <USBD_CtlError>
        err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
      break;
 8008dea:	e11e      	b.n	800902a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	7c12      	ldrb	r2, [r2, #16]
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	60f8      	str	r0, [r7, #12]
      break;
 8008e02:	e112      	b.n	800902a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7c1b      	ldrb	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e14:	f107 0208 	add.w	r2, r7, #8
 8008e18:	4610      	mov	r0, r2
 8008e1a:	4798      	blx	r3
 8008e1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	2202      	movs	r2, #2
 8008e24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e26:	e100      	b.n	800902a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	f107 0208 	add.w	r2, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
      break;
 8008e42:	e0f2      	b.n	800902a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	885b      	ldrh	r3, [r3, #2]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	f200 80ac 	bhi.w	8008fa8 <USBD_GetDescriptor+0x258>
 8008e50:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USBD_GetDescriptor+0x108>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ed9 	.word	0x08008ed9
 8008e64:	08008f0d 	.word	0x08008f0d
 8008e68:	08008f41 	.word	0x08008f41
 8008e6c:	08008f75 	.word	0x08008f75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e92:	e091      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 facb 	bl	8009432 <USBD_CtlError>
            err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea2:	e089      	b.n	8008fb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7c12      	ldrb	r2, [r2, #16]
 8008ebc:	f107 0108 	add.w	r1, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec6:	e077      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fab1 	bl	8009432 <USBD_CtlError>
            err++;
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed6:	e06f      	b.n	8008fb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efa:	e05d      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa97 	bl	8009432 <USBD_CtlError>
            err++;
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	3301      	adds	r3, #1
 8008f08:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0a:	e055      	b.n	8008fb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	7c12      	ldrb	r2, [r2, #16]
 8008f24:	f107 0108 	add.w	r1, r7, #8
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4798      	blx	r3
 8008f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f2e:	e043      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa7d 	bl	8009432 <USBD_CtlError>
            err++;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f3e:	e03b      	b.n	8008fb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7c12      	ldrb	r2, [r2, #16]
 8008f58:	f107 0108 	add.w	r1, r7, #8
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4798      	blx	r3
 8008f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f62:	e029      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa63 	bl	8009432 <USBD_CtlError>
            err++;
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	72fb      	strb	r3, [r7, #11]
          break;
 8008f72:	e021      	b.n	8008fb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	7c12      	ldrb	r2, [r2, #16]
 8008f8c:	f107 0108 	add.w	r1, r7, #8
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f96:	e00f      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa49 	bl	8009432 <USBD_CtlError>
            err++;
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fa6:	e007      	b.n	8008fb8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa41 	bl	8009432 <USBD_CtlError>
          err++;
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008fb6:	bf00      	nop
      }
      break;
 8008fb8:	e037      	b.n	800902a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	7c1b      	ldrb	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	f107 0208 	add.w	r2, r7, #8
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4798      	blx	r3
 8008fd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fd4:	e029      	b.n	800902a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa2a 	bl	8009432 <USBD_CtlError>
        err++;
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe4:	e021      	b.n	800902a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7c1b      	ldrb	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10d      	bne.n	800900a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f107 0208 	add.w	r2, r7, #8
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4798      	blx	r3
 8008ffe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	2207      	movs	r2, #7
 8009006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009008:	e00f      	b.n	800902a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fa10 	bl	8009432 <USBD_CtlError>
        err++;
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	3301      	adds	r3, #1
 8009016:	72fb      	strb	r3, [r7, #11]
      break;
 8009018:	e007      	b.n	800902a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa08 	bl	8009432 <USBD_CtlError>
      err++;
 8009022:	7afb      	ldrb	r3, [r7, #11]
 8009024:	3301      	adds	r3, #1
 8009026:	72fb      	strb	r3, [r7, #11]
      break;
 8009028:	bf00      	nop
  }

  if (err != 0U)
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d11e      	bne.n	800906e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	88db      	ldrh	r3, [r3, #6]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d016      	beq.n	8009066 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009038:	893b      	ldrh	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00e      	beq.n	800905c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	88da      	ldrh	r2, [r3, #6]
 8009042:	893b      	ldrh	r3, [r7, #8]
 8009044:	4293      	cmp	r3, r2
 8009046:	bf28      	it	cs
 8009048:	4613      	movcs	r3, r2
 800904a:	b29b      	uxth	r3, r3
 800904c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800904e:	893b      	ldrh	r3, [r7, #8]
 8009050:	461a      	mov	r2, r3
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa5d 	bl	8009514 <USBD_CtlSendData>
 800905a:	e009      	b.n	8009070 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f9e7 	bl	8009432 <USBD_CtlError>
 8009064:	e004      	b.n	8009070 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 faae 	bl	80095c8 <USBD_CtlSendStatus>
 800906c:	e000      	b.n	8009070 <USBD_GetDescriptor+0x320>
    return;
 800906e:	bf00      	nop
  }
}
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop

08009078 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d131      	bne.n	80090ee <USBD_SetAddress+0x76>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88db      	ldrh	r3, [r3, #6]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d12d      	bne.n	80090ee <USBD_SetAddress+0x76>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	885b      	ldrh	r3, [r3, #2]
 8009096:	2b7f      	cmp	r3, #127	; 0x7f
 8009098:	d829      	bhi.n	80090ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	885b      	ldrh	r3, [r3, #2]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d104      	bne.n	80090bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f9bc 	bl	8009432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ba:	e01d      	b.n	80090f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7bfa      	ldrb	r2, [r7, #15]
 80090c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 ffd9 	bl	800a080 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa7a 	bl	80095c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d004      	beq.n	80090e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e2:	e009      	b.n	80090f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ec:	e004      	b.n	80090f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f99e 	bl	8009432 <USBD_CtlError>
  }
}
 80090f6:	bf00      	nop
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	885b      	ldrh	r3, [r3, #2]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	4b4e      	ldr	r3, [pc, #312]	; (8009250 <USBD_SetConfig+0x150>)
 8009116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009118:	4b4d      	ldr	r3, [pc, #308]	; (8009250 <USBD_SetConfig+0x150>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d905      	bls.n	800912c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f985 	bl	8009432 <USBD_CtlError>
    return USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	e08c      	b.n	8009246 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d002      	beq.n	800913e <USBD_SetConfig+0x3e>
 8009138:	2b03      	cmp	r3, #3
 800913a:	d029      	beq.n	8009190 <USBD_SetConfig+0x90>
 800913c:	e075      	b.n	800922a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800913e:	4b44      	ldr	r3, [pc, #272]	; (8009250 <USBD_SetConfig+0x150>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009146:	4b42      	ldr	r3, [pc, #264]	; (8009250 <USBD_SetConfig+0x150>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009150:	4b3f      	ldr	r3, [pc, #252]	; (8009250 <USBD_SetConfig+0x150>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7fe ffb7 	bl	80080ca <USBD_SetClassConfig>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f962 	bl	8009432 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009176:	e065      	b.n	8009244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa25 	bl	80095c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2203      	movs	r2, #3
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009186:	e05d      	b.n	8009244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa1d 	bl	80095c8 <USBD_CtlSendStatus>
      break;
 800918e:	e059      	b.n	8009244 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009190:	4b2f      	ldr	r3, [pc, #188]	; (8009250 <USBD_SetConfig+0x150>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d112      	bne.n	80091be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091a0:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <USBD_SetConfig+0x150>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091aa:	4b29      	ldr	r3, [pc, #164]	; (8009250 <USBD_SetConfig+0x150>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7fe ffa6 	bl	8008102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa06 	bl	80095c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091bc:	e042      	b.n	8009244 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80091be:	4b24      	ldr	r3, [pc, #144]	; (8009250 <USBD_SetConfig+0x150>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d02a      	beq.n	8009222 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7fe ff94 	bl	8008102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091da:	4b1d      	ldr	r3, [pc, #116]	; (8009250 <USBD_SetConfig+0x150>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091e4:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <USBD_SetConfig+0x150>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe ff6d 	bl	80080ca <USBD_SetClassConfig>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00f      	beq.n	800921a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f918 	bl	8009432 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe ff79 	bl	8008102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009218:	e014      	b.n	8009244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9d4 	bl	80095c8 <USBD_CtlSendStatus>
      break;
 8009220:	e010      	b.n	8009244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9d0 	bl	80095c8 <USBD_CtlSendStatus>
      break;
 8009228:	e00c      	b.n	8009244 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f900 	bl	8009432 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <USBD_SetConfig+0x150>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe ff62 	bl	8008102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	73fb      	strb	r3, [r7, #15]
      break;
 8009242:	bf00      	nop
  }

  return ret;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200002d8 	.word	0x200002d8

08009254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	88db      	ldrh	r3, [r3, #6]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d004      	beq.n	8009270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8e2 	bl	8009432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800926e:	e023      	b.n	80092b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	dc02      	bgt.n	8009282 <USBD_GetConfig+0x2e>
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc03      	bgt.n	8009288 <USBD_GetConfig+0x34>
 8009280:	e015      	b.n	80092ae <USBD_GetConfig+0x5a>
 8009282:	2b03      	cmp	r3, #3
 8009284:	d00b      	beq.n	800929e <USBD_GetConfig+0x4a>
 8009286:	e012      	b.n	80092ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	3308      	adds	r3, #8
 8009292:	2201      	movs	r2, #1
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f93c 	bl	8009514 <USBD_CtlSendData>
        break;
 800929c:	e00c      	b.n	80092b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3304      	adds	r3, #4
 80092a2:	2201      	movs	r2, #1
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f934 	bl	8009514 <USBD_CtlSendData>
        break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f8be 	bl	8009432 <USBD_CtlError>
        break;
 80092b6:	bf00      	nop
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d81e      	bhi.n	8009316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d004      	beq.n	80092ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f8a5 	bl	8009432 <USBD_CtlError>
        break;
 80092e8:	e01a      	b.n	8009320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f043 0202 	orr.w	r2, r3, #2
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	330c      	adds	r3, #12
 800930a:	2202      	movs	r2, #2
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f900 	bl	8009514 <USBD_CtlSendData>
      break;
 8009314:	e004      	b.n	8009320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f88a 	bl	8009432 <USBD_CtlError>
      break;
 800931e:	bf00      	nop
  }
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	885b      	ldrh	r3, [r3, #2]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d107      	bne.n	800934a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f940 	bl	80095c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009348:	e013      	b.n	8009372 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	885b      	ldrh	r3, [r3, #2]
 800934e:	2b02      	cmp	r3, #2
 8009350:	d10b      	bne.n	800936a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	889b      	ldrh	r3, [r3, #4]
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	b29b      	uxth	r3, r3
 800935a:	b2da      	uxtb	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f930 	bl	80095c8 <USBD_CtlSendStatus>
}
 8009368:	e003      	b.n	8009372 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f860 	bl	8009432 <USBD_CtlError>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938a:	b2db      	uxtb	r3, r3
 800938c:	3b01      	subs	r3, #1
 800938e:	2b02      	cmp	r3, #2
 8009390:	d80b      	bhi.n	80093aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d10c      	bne.n	80093b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f910 	bl	80095c8 <USBD_CtlSendStatus>
      }
      break;
 80093a8:	e004      	b.n	80093b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f840 	bl	8009432 <USBD_CtlError>
      break;
 80093b2:	e000      	b.n	80093b6 <USBD_ClrFeature+0x3c>
      break;
 80093b4:	bf00      	nop
  }
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3301      	adds	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	781a      	ldrb	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff fa17 	bl	800881c <SWAPBYTE>
 80093ee:	4603      	mov	r3, r0
 80093f0:	461a      	mov	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fa0a 	bl	800881c <SWAPBYTE>
 8009408:	4603      	mov	r3, r0
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff f9fd 	bl	800881c <SWAPBYTE>
 8009422:	4603      	mov	r3, r0
 8009424:	461a      	mov	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	80da      	strh	r2, [r3, #6]
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800943c:	2180      	movs	r1, #128	; 0x80
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fd86 	bl	8009f50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fd82 	bl	8009f50 <USBD_LL_StallEP>
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d036      	beq.n	80094d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800946e:	6938      	ldr	r0, [r7, #16]
 8009470:	f000 f836 	bl	80094e0 <USBD_GetLen>
 8009474:	4603      	mov	r3, r0
 8009476:	3301      	adds	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	4413      	add	r3, r2
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	701a      	strb	r2, [r3, #0]
  idx++;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	3301      	adds	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	2203      	movs	r2, #3
 800949c:	701a      	strb	r2, [r3, #0]
  idx++;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	3301      	adds	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094a4:	e013      	b.n	80094ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	3301      	adds	r3, #1
 80094b6:	613b      	str	r3, [r7, #16]
    idx++;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	3301      	adds	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	4413      	add	r3, r2
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	3301      	adds	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e7      	bne.n	80094a6 <USBD_GetString+0x52>
 80094d6:	e000      	b.n	80094da <USBD_GetString+0x86>
    return;
 80094d8:	bf00      	nop
  }
}
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094f0:	e005      	b.n	80094fe <USBD_GetLen+0x1e>
  {
    len++;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	3301      	adds	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f5      	bne.n	80094f2 <USBD_GetLen+0x12>
  }

  return len;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2202      	movs	r2, #2
 8009524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	2100      	movs	r1, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fdd6 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	2100      	movs	r1, #0
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 fdc5 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2203      	movs	r2, #3
 800957c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fde0 	bl	800a15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	2100      	movs	r1, #0
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fdcf 	bl	800a15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095d8:	2300      	movs	r3, #0
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fd84 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2205      	movs	r2, #5
 80095fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fda9 	bl	800a15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009618:	2200      	movs	r2, #0
 800961a:	4912      	ldr	r1, [pc, #72]	; (8009664 <MX_USB_DEVICE_Init+0x50>)
 800961c:	4812      	ldr	r0, [pc, #72]	; (8009668 <MX_USB_DEVICE_Init+0x54>)
 800961e:	f7fe fcd7 	bl	8007fd0 <USBD_Init>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009628:	f7f7 fa0a 	bl	8000a40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800962c:	490f      	ldr	r1, [pc, #60]	; (800966c <MX_USB_DEVICE_Init+0x58>)
 800962e:	480e      	ldr	r0, [pc, #56]	; (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009630:	f7fe fcfe 	bl	8008030 <USBD_RegisterClass>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800963a:	f7f7 fa01 	bl	8000a40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800963e:	490c      	ldr	r1, [pc, #48]	; (8009670 <MX_USB_DEVICE_Init+0x5c>)
 8009640:	4809      	ldr	r0, [pc, #36]	; (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009642:	f7fe fbf5 	bl	8007e30 <USBD_CDC_RegisterInterface>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800964c:	f7f7 f9f8 	bl	8000a40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009650:	4805      	ldr	r0, [pc, #20]	; (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009652:	f7fe fd23 	bl	800809c <USBD_Start>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800965c:	f7f7 f9f0 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009660:	bf00      	nop
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200000ac 	.word	0x200000ac
 8009668:	200002dc 	.word	0x200002dc
 800966c:	20000018 	.word	0x20000018
 8009670:	20000098 	.word	0x20000098

08009674 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009678:	2200      	movs	r2, #0
 800967a:	4905      	ldr	r1, [pc, #20]	; (8009690 <CDC_Init_FS+0x1c>)
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <CDC_Init_FS+0x20>)
 800967e:	f7fe fbf1 	bl	8007e64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009682:	4905      	ldr	r1, [pc, #20]	; (8009698 <CDC_Init_FS+0x24>)
 8009684:	4803      	ldr	r0, [pc, #12]	; (8009694 <CDC_Init_FS+0x20>)
 8009686:	f7fe fc0f 	bl	8007ea8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800968a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800968c:	4618      	mov	r0, r3
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000db8 	.word	0x20000db8
 8009694:	200002dc 	.word	0x200002dc
 8009698:	200005b8 	.word	0x200005b8

0800969c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
 80096b8:	4613      	mov	r3, r2
 80096ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b23      	cmp	r3, #35	; 0x23
 80096c0:	d84a      	bhi.n	8009758 <CDC_Control_FS+0xac>
 80096c2:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <CDC_Control_FS+0x1c>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	08009759 	.word	0x08009759
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009759 	.word	0x08009759
 80096d4:	08009759 	.word	0x08009759
 80096d8:	08009759 	.word	0x08009759
 80096dc:	08009759 	.word	0x08009759
 80096e0:	08009759 	.word	0x08009759
 80096e4:	08009759 	.word	0x08009759
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009759 	.word	0x08009759
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009759 	.word	0x08009759
 80096fc:	08009759 	.word	0x08009759
 8009700:	08009759 	.word	0x08009759
 8009704:	08009759 	.word	0x08009759
 8009708:	08009759 	.word	0x08009759
 800970c:	08009759 	.word	0x08009759
 8009710:	08009759 	.word	0x08009759
 8009714:	08009759 	.word	0x08009759
 8009718:	08009759 	.word	0x08009759
 800971c:	08009759 	.word	0x08009759
 8009720:	08009759 	.word	0x08009759
 8009724:	08009759 	.word	0x08009759
 8009728:	08009759 	.word	0x08009759
 800972c:	08009759 	.word	0x08009759
 8009730:	08009759 	.word	0x08009759
 8009734:	08009759 	.word	0x08009759
 8009738:	08009759 	.word	0x08009759
 800973c:	08009759 	.word	0x08009759
 8009740:	08009759 	.word	0x08009759
 8009744:	08009759 	.word	0x08009759
 8009748:	08009759 	.word	0x08009759
 800974c:	08009759 	.word	0x08009759
 8009750:	08009759 	.word	0x08009759
 8009754:	08009759 	.word	0x08009759
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009758:	bf00      	nop
  }

  return (USBD_OK);
 800975a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4805      	ldr	r0, [pc, #20]	; (800978c <CDC_Receive_FS+0x24>)
 8009776:	f7fe fb97 	bl	8007ea8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800977a:	4804      	ldr	r0, [pc, #16]	; (800978c <CDC_Receive_FS+0x24>)
 800977c:	f7fe fbf2 	bl	8007f64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009780:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200002dc 	.word	0x200002dc

08009790 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097a0:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <CDC_Transmit_FS+0x48>)
 80097a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e00b      	b.n	80097ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80097b6:	887b      	ldrh	r3, [r7, #2]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	4806      	ldr	r0, [pc, #24]	; (80097d8 <CDC_Transmit_FS+0x48>)
 80097be:	f7fe fb51 	bl	8007e64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80097c2:	4805      	ldr	r0, [pc, #20]	; (80097d8 <CDC_Transmit_FS+0x48>)
 80097c4:	f7fe fb8e 	bl	8007ee4 <USBD_CDC_TransmitPacket>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200002dc 	.word	0x200002dc

080097dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2212      	movs	r2, #18
 8009810:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	200000cc 	.word	0x200000cc

08009824 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2204      	movs	r2, #4
 8009834:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009836:	4b03      	ldr	r3, [pc, #12]	; (8009844 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	200000ec 	.word	0x200000ec

08009848 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d105      	bne.n	8009866 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4907      	ldr	r1, [pc, #28]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
 800985e:	4808      	ldr	r0, [pc, #32]	; (8009880 <USBD_FS_ProductStrDescriptor+0x38>)
 8009860:	f7ff fdf8 	bl	8009454 <USBD_GetString>
 8009864:	e004      	b.n	8009870 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4904      	ldr	r1, [pc, #16]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
 800986a:	4805      	ldr	r0, [pc, #20]	; (8009880 <USBD_FS_ProductStrDescriptor+0x38>)
 800986c:	f7ff fdf2 	bl	8009454 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	200015b8 	.word	0x200015b8
 8009880:	0800b13c 	.word	0x0800b13c

08009884 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	4904      	ldr	r1, [pc, #16]	; (80098a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009894:	4804      	ldr	r0, [pc, #16]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009896:	f7ff fddd 	bl	8009454 <USBD_GetString>
  return USBD_StrDesc;
 800989a:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	200015b8 	.word	0x200015b8
 80098a8:	0800b150 	.word	0x0800b150

080098ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	221a      	movs	r2, #26
 80098bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098be:	f000 f855 	bl	800996c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098c2:	4b02      	ldr	r3, [pc, #8]	; (80098cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200000f0 	.word	0x200000f0

080098d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	4907      	ldr	r1, [pc, #28]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098e6:	4808      	ldr	r0, [pc, #32]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098e8:	f7ff fdb4 	bl	8009454 <USBD_GetString>
 80098ec:	e004      	b.n	80098f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	4904      	ldr	r1, [pc, #16]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098f2:	4805      	ldr	r0, [pc, #20]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098f4:	f7ff fdae 	bl	8009454 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098f8:	4b02      	ldr	r3, [pc, #8]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	200015b8 	.word	0x200015b8
 8009908:	0800b164 	.word	0x0800b164

0800990c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	6039      	str	r1, [r7, #0]
 8009916:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4907      	ldr	r1, [pc, #28]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009922:	4808      	ldr	r0, [pc, #32]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009924:	f7ff fd96 	bl	8009454 <USBD_GetString>
 8009928:	e004      	b.n	8009934 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	4904      	ldr	r1, [pc, #16]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800992e:	4805      	ldr	r0, [pc, #20]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009930:	f7ff fd90 	bl	8009454 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	200015b8 	.word	0x200015b8
 8009944:	0800b170 	.word	0x0800b170

08009948 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	6039      	str	r1, [r7, #0]
 8009952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	220c      	movs	r2, #12
 8009958:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800995a:	4b03      	ldr	r3, [pc, #12]	; (8009968 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	200000e0 	.word	0x200000e0

0800996c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <Get_SerialNum+0x44>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009978:	4b0e      	ldr	r3, [pc, #56]	; (80099b4 <Get_SerialNum+0x48>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800997e:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <Get_SerialNum+0x4c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4413      	add	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009992:	2208      	movs	r2, #8
 8009994:	4909      	ldr	r1, [pc, #36]	; (80099bc <Get_SerialNum+0x50>)
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f814 	bl	80099c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800999c:	2204      	movs	r2, #4
 800999e:	4908      	ldr	r1, [pc, #32]	; (80099c0 <Get_SerialNum+0x54>)
 80099a0:	68b8      	ldr	r0, [r7, #8]
 80099a2:	f000 f80f 	bl	80099c4 <IntToUnicode>
  }
}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	1fff7590 	.word	0x1fff7590
 80099b4:	1fff7594 	.word	0x1fff7594
 80099b8:	1fff7598 	.word	0x1fff7598
 80099bc:	200000f2 	.word	0x200000f2
 80099c0:	20000102 	.word	0x20000102

080099c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
 80099da:	e027      	b.n	8009a2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	0f1b      	lsrs	r3, r3, #28
 80099e0:	2b09      	cmp	r3, #9
 80099e2:	d80b      	bhi.n	80099fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	0f1b      	lsrs	r3, r3, #28
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	440b      	add	r3, r1
 80099f4:	3230      	adds	r2, #48	; 0x30
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	e00a      	b.n	8009a12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	0f1b      	lsrs	r3, r3, #28
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	4619      	mov	r1, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	440b      	add	r3, r1
 8009a0c:	3237      	adds	r2, #55	; 0x37
 8009a0e:	b2d2      	uxtb	r2, r2
 8009a10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	75fb      	strb	r3, [r7, #23]
 8009a2c:	7dfa      	ldrb	r2, [r7, #23]
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3d3      	bcc.n	80099dc <IntToUnicode+0x18>
  }
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
	...

08009a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b0ac      	sub	sp, #176	; 0xb0
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	605a      	str	r2, [r3, #4]
 8009a56:	609a      	str	r2, [r3, #8]
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a5c:	f107 0314 	add.w	r3, r7, #20
 8009a60:	2288      	movs	r2, #136	; 0x88
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fd36 	bl	800a4d6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a72:	d173      	bne.n	8009b5c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a78:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009a7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009a86:	2301      	movs	r3, #1
 8009a88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009a8a:	2318      	movs	r3, #24
 8009a8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009a8e:	2307      	movs	r3, #7
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009a92:	2302      	movs	r3, #2
 8009a94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009a96:	2302      	movs	r3, #2
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009a9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009aa0:	f107 0314 	add.w	r3, r7, #20
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fb f979 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009ab0:	f7f6 ffc6 	bl	8000a40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009acc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ae6:	230a      	movs	r3, #10
 8009ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009af0:	4619      	mov	r1, r3
 8009af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009af6:	f7f8 f82f 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009afa:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b06:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b12:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d114      	bne.n	8009b48 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b1e:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b22:	4a10      	ldr	r2, [pc, #64]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b28:	6593      	str	r3, [r2, #88]	; 0x58
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b32:	60bb      	str	r3, [r7, #8]
 8009b34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009b36:	f7f9 fe35 	bl	80037a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3e:	4a09      	ldr	r2, [pc, #36]	; (8009b64 <HAL_PCD_MspInit+0x120>)
 8009b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b44:	6593      	str	r3, [r2, #88]	; 0x58
 8009b46:	e001      	b.n	8009b4c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009b48:	f7f9 fe2c 	bl	80037a4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	2043      	movs	r0, #67	; 0x43
 8009b52:	f7f7 ff8c 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b56:	2043      	movs	r0, #67	; 0x43
 8009b58:	f7f7 ffa5 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	37b0      	adds	r7, #176	; 0xb0
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40021000 	.word	0x40021000

08009b68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fe fad9 	bl	8008136 <USBD_LL_SetupStage>
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f7fe fb13 	bl	80081e0 <USBD_LL_DataOutStage>
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	3348      	adds	r3, #72	; 0x48
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7fe fbac 	bl	8008346 <USBD_LL_DataInStage>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fce6 	bl	80085d6 <USBD_LL_SOF>
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d001      	beq.n	8009c2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c26:	f7f6 ff0b 	bl	8000a40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c30:	7bfa      	ldrb	r2, [r7, #15]
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fc8a 	bl	800854e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fc32 	bl	80084aa <USBD_LL_Reset>
}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fc79 	bl	800856e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <HAL_PCD_SuspendCallback+0x48>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4a03      	ldr	r2, [pc, #12]	; (8009c98 <HAL_PCD_SuspendCallback+0x48>)
 8009c8a:	f043 0306 	orr.w	r3, r3, #6
 8009c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed00 	.word	0xe000ed00

08009c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cb6:	f023 0301 	bic.w	r3, r3, #1
 8009cba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cc4:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <HAL_PCD_ResumeCallback+0x4c>)
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <HAL_PCD_ResumeCallback+0x4c>)
 8009cca:	f023 0306 	bic.w	r3, r3, #6
 8009cce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009cd0:	f000 faf6 	bl	800a2c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fc63 	bl	80085a6 <USBD_LL_Resume>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fcb9 	bl	800867a <USBD_LL_IsoOUTIncomplete>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fc75 	bl	8008616 <USBD_LL_IsoINIncomplete>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fccb 	bl	80086de <USBD_LL_DevConnected>
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fcc8 	bl	80086f4 <USBD_LL_DevDisconnected>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d13c      	bne.n	8009df6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d7c:	4a20      	ldr	r2, [pc, #128]	; (8009e00 <USBD_LL_Init+0x94>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1e      	ldr	r2, [pc, #120]	; (8009e00 <USBD_LL_Init+0x94>)
 8009d88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d8c:	4b1c      	ldr	r3, [pc, #112]	; (8009e00 <USBD_LL_Init+0x94>)
 8009d8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d94:	4b1a      	ldr	r3, [pc, #104]	; (8009e00 <USBD_LL_Init+0x94>)
 8009d96:	2206      	movs	r2, #6
 8009d98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d9a:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <USBD_LL_Init+0x94>)
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009da0:	4b17      	ldr	r3, [pc, #92]	; (8009e00 <USBD_LL_Init+0x94>)
 8009da2:	2202      	movs	r2, #2
 8009da4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009da6:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <USBD_LL_Init+0x94>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dac:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009db2:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <USBD_LL_Init+0x94>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009db8:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dbe:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dca:	480d      	ldr	r0, [pc, #52]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dcc:	f7f8 facf 	bl	800236e <HAL_PCD_Init>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dd6:	f7f6 fe33 	bl	8000a40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	4808      	ldr	r0, [pc, #32]	; (8009e00 <USBD_LL_Init+0x94>)
 8009dde:	f7f9 fc38 	bl	8003652 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009de2:	2240      	movs	r2, #64	; 0x40
 8009de4:	2100      	movs	r1, #0
 8009de6:	4806      	ldr	r0, [pc, #24]	; (8009e00 <USBD_LL_Init+0x94>)
 8009de8:	f7f9 fbec 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dec:	2280      	movs	r2, #128	; 0x80
 8009dee:	2101      	movs	r1, #1
 8009df0:	4803      	ldr	r0, [pc, #12]	; (8009e00 <USBD_LL_Init+0x94>)
 8009df2:	f7f9 fbe7 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200017b8 	.word	0x200017b8

08009e04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f8 fbcb 	bl	80025b6 <HAL_PCD_Start>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d816      	bhi.n	8009e58 <USBD_LL_Start+0x54>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_LL_Start+0x2c>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e41 	.word	0x08009e41
 8009e34:	08009e47 	.word	0x08009e47
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e53 	.word	0x08009e53
    case HAL_OK :
      usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
    break;
 8009e44:	e00b      	b.n	8009e5e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4a:	e008      	b.n	8009e5e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e50:	e005      	b.n	8009e5e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e002      	b.n	8009e5e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5c:	bf00      	nop
  }
  return usb_status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	4608      	mov	r0, r1
 8009e72:	4611      	mov	r1, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	70fb      	strb	r3, [r7, #3]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70bb      	strb	r3, [r7, #2]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e90:	78bb      	ldrb	r3, [r7, #2]
 8009e92:	883a      	ldrh	r2, [r7, #0]
 8009e94:	78f9      	ldrb	r1, [r7, #3]
 8009e96:	f7f9 f875 	bl	8002f84 <HAL_PCD_EP_Open>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d817      	bhi.n	8009ed4 <USBD_LL_OpenEP+0x6c>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USBD_LL_OpenEP+0x44>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ec3 	.word	0x08009ec3
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009ecf 	.word	0x08009ecf
    case HAL_OK :
      usb_status = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	e00b      	b.n	8009eda <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec6:	e008      	b.n	8009eda <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ecc:	e005      	b.n	8009eda <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed2:	e002      	b.n	8009eda <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed8:	bf00      	nop
  }
  return usb_status;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f9 f8a6 	bl	8003054 <HAL_PCD_EP_Close>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d816      	bhi.n	8009f40 <USBD_LL_CloseEP+0x5c>
 8009f12:	a201      	add	r2, pc, #4	; (adr r2, 8009f18 <USBD_LL_CloseEP+0x34>)
 8009f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f18:	08009f29 	.word	0x08009f29
 8009f1c:	08009f2f 	.word	0x08009f2f
 8009f20:	08009f35 	.word	0x08009f35
 8009f24:	08009f3b 	.word	0x08009f3b
    case HAL_OK :
      usb_status = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2c:	e00b      	b.n	8009f46 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	73fb      	strb	r3, [r7, #15]
    break;
 8009f32:	e008      	b.n	8009f46 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
    break;
 8009f38:	e005      	b.n	8009f46 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3e:	e002      	b.n	8009f46 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f40:	2303      	movs	r3, #3
 8009f42:	73fb      	strb	r3, [r7, #15]
    break;
 8009f44:	bf00      	nop
  }
  return usb_status;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f9 f935 	bl	80031de <HAL_PCD_EP_SetStall>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d816      	bhi.n	8009fac <USBD_LL_StallEP+0x5c>
 8009f7e:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <USBD_LL_StallEP+0x34>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009f9b 	.word	0x08009f9b
 8009f8c:	08009fa1 	.word	0x08009fa1
 8009f90:	08009fa7 	.word	0x08009fa7
    case HAL_OK :
      usb_status = USBD_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]
    break;
 8009f98:	e00b      	b.n	8009fb2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9e:	e008      	b.n	8009fb2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa4:	e005      	b.n	8009fb2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8009faa:	e002      	b.n	8009fb2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009fac:	2303      	movs	r3, #3
 8009fae:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb0:	bf00      	nop
  }
  return usb_status;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7f9 f961 	bl	80032a2 <HAL_PCD_EP_ClrStall>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d816      	bhi.n	800a018 <USBD_LL_ClearStallEP+0x5c>
 8009fea:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <USBD_LL_ClearStallEP+0x34>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a007 	.word	0x0800a007
 8009ff8:	0800a00d 	.word	0x0800a00d
 8009ffc:	0800a013 	.word	0x0800a013
    case HAL_OK :
      usb_status = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
    break;
 800a004:	e00b      	b.n	800a01e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	73fb      	strb	r3, [r7, #15]
    break;
 800a00a:	e008      	b.n	800a01e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a00c:	2301      	movs	r3, #1
 800a00e:	73fb      	strb	r3, [r7, #15]
    break;
 800a010:	e005      	b.n	800a01e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	73fb      	strb	r3, [r7, #15]
    break;
 800a016:	e002      	b.n	800a01e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a018:	2303      	movs	r3, #3
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	bf00      	nop
  }
  return usb_status;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a03a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a03c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0b      	bge.n	800a05c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	4613      	mov	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	333e      	adds	r3, #62	; 0x3e
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	e00b      	b.n	800a074 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	4613      	mov	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a072:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f8 ff4b 	bl	8002f3a <HAL_PCD_SetAddress>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d816      	bhi.n	800a0dc <USBD_LL_SetUSBAddress+0x5c>
 800a0ae:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <USBD_LL_SetUSBAddress+0x34>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a0c5 	.word	0x0800a0c5
 800a0b8:	0800a0cb 	.word	0x0800a0cb
 800a0bc:	0800a0d1 	.word	0x0800a0d1
 800a0c0:	0800a0d7 	.word	0x0800a0d7
    case HAL_OK :
      usb_status = USBD_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	e00b      	b.n	800a0e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ce:	e008      	b.n	800a0e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	e005      	b.n	800a0e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0da:	e002      	b.n	800a0e2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e0:	bf00      	nop
  }
  return usb_status;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a10a:	7af9      	ldrb	r1, [r7, #11]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	f7f9 f834 	bl	800317c <HAL_PCD_EP_Transmit>
 800a114:	4603      	mov	r3, r0
 800a116:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a118:	7dbb      	ldrb	r3, [r7, #22]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d816      	bhi.n	800a14c <USBD_LL_Transmit+0x60>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <USBD_LL_Transmit+0x38>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a13b 	.word	0x0800a13b
 800a12c:	0800a141 	.word	0x0800a141
 800a130:	0800a147 	.word	0x0800a147
    case HAL_OK :
      usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	75fb      	strb	r3, [r7, #23]
    break;
 800a138:	e00b      	b.n	800a152 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a13a:	2303      	movs	r3, #3
 800a13c:	75fb      	strb	r3, [r7, #23]
    break;
 800a13e:	e008      	b.n	800a152 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a140:	2301      	movs	r3, #1
 800a142:	75fb      	strb	r3, [r7, #23]
    break;
 800a144:	e005      	b.n	800a152 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	75fb      	strb	r3, [r7, #23]
    break;
 800a14a:	e002      	b.n	800a152 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	75fb      	strb	r3, [r7, #23]
    break;
 800a150:	bf00      	nop
  }
  return usb_status;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	460b      	mov	r3, r1
 800a16a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a17a:	7af9      	ldrb	r1, [r7, #11]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	f7f8 ffb2 	bl	80030e8 <HAL_PCD_EP_Receive>
 800a184:	4603      	mov	r3, r0
 800a186:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a188:	7dbb      	ldrb	r3, [r7, #22]
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d816      	bhi.n	800a1bc <USBD_LL_PrepareReceive+0x60>
 800a18e:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <USBD_LL_PrepareReceive+0x38>)
 800a190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a194:	0800a1a5 	.word	0x0800a1a5
 800a198:	0800a1ab 	.word	0x0800a1ab
 800a19c:	0800a1b1 	.word	0x0800a1b1
 800a1a0:	0800a1b7 	.word	0x0800a1b7
    case HAL_OK :
      usb_status = USBD_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	75fb      	strb	r3, [r7, #23]
    break;
 800a1a8:	e00b      	b.n	800a1c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	75fb      	strb	r3, [r7, #23]
    break;
 800a1ae:	e008      	b.n	800a1c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	75fb      	strb	r3, [r7, #23]
    break;
 800a1b4:	e005      	b.n	800a1c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	75fb      	strb	r3, [r7, #23]
    break;
 800a1ba:	e002      	b.n	800a1c2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	75fb      	strb	r3, [r7, #23]
    break;
 800a1c0:	bf00      	nop
  }
  return usb_status;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1de:	78fa      	ldrb	r2, [r7, #3]
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f8 ffb2 	bl	800314c <HAL_PCD_EP_GetRxCount>
 800a1e8:	4603      	mov	r3, r0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <HAL_PCDEx_LPM_Callback+0x18>
 800a206:	2b01      	cmp	r3, #1
 800a208:	d01f      	beq.n	800a24a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a20a:	e03b      	b.n	800a284 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a214:	f000 f854 	bl	800a2c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a218:	4b1c      	ldr	r3, [pc, #112]	; (800a28c <HAL_PCDEx_LPM_Callback+0x98>)
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	4a1b      	ldr	r2, [pc, #108]	; (800a28c <HAL_PCDEx_LPM_Callback+0x98>)
 800a21e:	f023 0306 	bic.w	r3, r3, #6
 800a222:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	6812      	ldr	r2, [r2, #0]
 800a232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a236:	f023 0301 	bic.w	r3, r3, #1
 800a23a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe f9af 	bl	80085a6 <USBD_LL_Resume>
    break;
 800a248:	e01c      	b.n	800a284 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a25c:	f043 0301 	orr.w	r3, r3, #1
 800a260:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe f980 	bl	800856e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d005      	beq.n	800a282 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a276:	4b05      	ldr	r3, [pc, #20]	; (800a28c <HAL_PCDEx_LPM_Callback+0x98>)
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	4a04      	ldr	r2, [pc, #16]	; (800a28c <HAL_PCDEx_LPM_Callback+0x98>)
 800a27c:	f043 0306 	orr.w	r3, r3, #6
 800a280:	6113      	str	r3, [r2, #16]
    break;
 800a282:	bf00      	nop
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	e000ed00 	.word	0xe000ed00

0800a290 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a298:	4b03      	ldr	r3, [pc, #12]	; (800a2a8 <USBD_static_malloc+0x18>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20001cc4 	.word	0x20001cc4

0800a2ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]

}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2c4:	f7f6 fb5a 	bl	800097c <SystemClock_Config>
}
 800a2c8:	bf00      	nop
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <std>:
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	b510      	push	{r4, lr}
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2da:	6083      	str	r3, [r0, #8]
 800a2dc:	8181      	strh	r1, [r0, #12]
 800a2de:	6643      	str	r3, [r0, #100]	; 0x64
 800a2e0:	81c2      	strh	r2, [r0, #14]
 800a2e2:	6183      	str	r3, [r0, #24]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	2208      	movs	r2, #8
 800a2e8:	305c      	adds	r0, #92	; 0x5c
 800a2ea:	f000 f8f4 	bl	800a4d6 <memset>
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <std+0x38>)
 800a2f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <std+0x3c>)
 800a2f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2f6:	4b05      	ldr	r3, [pc, #20]	; (800a30c <std+0x40>)
 800a2f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2fa:	4b05      	ldr	r3, [pc, #20]	; (800a310 <std+0x44>)
 800a2fc:	6224      	str	r4, [r4, #32]
 800a2fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a300:	bd10      	pop	{r4, pc}
 800a302:	bf00      	nop
 800a304:	0800a451 	.word	0x0800a451
 800a308:	0800a473 	.word	0x0800a473
 800a30c:	0800a4ab 	.word	0x0800a4ab
 800a310:	0800a4cf 	.word	0x0800a4cf

0800a314 <stdio_exit_handler>:
 800a314:	4a02      	ldr	r2, [pc, #8]	; (800a320 <stdio_exit_handler+0xc>)
 800a316:	4903      	ldr	r1, [pc, #12]	; (800a324 <stdio_exit_handler+0x10>)
 800a318:	4803      	ldr	r0, [pc, #12]	; (800a328 <stdio_exit_handler+0x14>)
 800a31a:	f000 b869 	b.w	800a3f0 <_fwalk_sglue>
 800a31e:	bf00      	nop
 800a320:	2000010c 	.word	0x2000010c
 800a324:	0800ae71 	.word	0x0800ae71
 800a328:	20000118 	.word	0x20000118

0800a32c <cleanup_stdio>:
 800a32c:	6841      	ldr	r1, [r0, #4]
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <cleanup_stdio+0x34>)
 800a330:	4299      	cmp	r1, r3
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	d001      	beq.n	800a33c <cleanup_stdio+0x10>
 800a338:	f000 fd9a 	bl	800ae70 <_fflush_r>
 800a33c:	68a1      	ldr	r1, [r4, #8]
 800a33e:	4b09      	ldr	r3, [pc, #36]	; (800a364 <cleanup_stdio+0x38>)
 800a340:	4299      	cmp	r1, r3
 800a342:	d002      	beq.n	800a34a <cleanup_stdio+0x1e>
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fd93 	bl	800ae70 <_fflush_r>
 800a34a:	68e1      	ldr	r1, [r4, #12]
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <cleanup_stdio+0x3c>)
 800a34e:	4299      	cmp	r1, r3
 800a350:	d004      	beq.n	800a35c <cleanup_stdio+0x30>
 800a352:	4620      	mov	r0, r4
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a358:	f000 bd8a 	b.w	800ae70 <_fflush_r>
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	bf00      	nop
 800a360:	20001ee4 	.word	0x20001ee4
 800a364:	20001f4c 	.word	0x20001f4c
 800a368:	20001fb4 	.word	0x20001fb4

0800a36c <global_stdio_init.part.0>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <global_stdio_init.part.0+0x30>)
 800a370:	4c0b      	ldr	r4, [pc, #44]	; (800a3a0 <global_stdio_init.part.0+0x34>)
 800a372:	4a0c      	ldr	r2, [pc, #48]	; (800a3a4 <global_stdio_init.part.0+0x38>)
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	4620      	mov	r0, r4
 800a378:	2200      	movs	r2, #0
 800a37a:	2104      	movs	r1, #4
 800a37c:	f7ff ffa6 	bl	800a2cc <std>
 800a380:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a384:	2201      	movs	r2, #1
 800a386:	2109      	movs	r1, #9
 800a388:	f7ff ffa0 	bl	800a2cc <std>
 800a38c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a390:	2202      	movs	r2, #2
 800a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a396:	2112      	movs	r1, #18
 800a398:	f7ff bf98 	b.w	800a2cc <std>
 800a39c:	2000201c 	.word	0x2000201c
 800a3a0:	20001ee4 	.word	0x20001ee4
 800a3a4:	0800a315 	.word	0x0800a315

0800a3a8 <__sfp_lock_acquire>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__sfp_lock_acquire+0x8>)
 800a3aa:	f000 b90d 	b.w	800a5c8 <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20002025 	.word	0x20002025

0800a3b4 <__sfp_lock_release>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <__sfp_lock_release+0x8>)
 800a3b6:	f000 b908 	b.w	800a5ca <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	20002025 	.word	0x20002025

0800a3c0 <__sinit>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	f7ff fff0 	bl	800a3a8 <__sfp_lock_acquire>
 800a3c8:	6a23      	ldr	r3, [r4, #32]
 800a3ca:	b11b      	cbz	r3, 800a3d4 <__sinit+0x14>
 800a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d0:	f7ff bff0 	b.w	800a3b4 <__sfp_lock_release>
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <__sinit+0x28>)
 800a3d6:	6223      	str	r3, [r4, #32]
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <__sinit+0x2c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1f5      	bne.n	800a3cc <__sinit+0xc>
 800a3e0:	f7ff ffc4 	bl	800a36c <global_stdio_init.part.0>
 800a3e4:	e7f2      	b.n	800a3cc <__sinit+0xc>
 800a3e6:	bf00      	nop
 800a3e8:	0800a32d 	.word	0x0800a32d
 800a3ec:	2000201c 	.word	0x2000201c

0800a3f0 <_fwalk_sglue>:
 800a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4688      	mov	r8, r1
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a400:	f1b9 0901 	subs.w	r9, r9, #1
 800a404:	d505      	bpl.n	800a412 <_fwalk_sglue+0x22>
 800a406:	6824      	ldr	r4, [r4, #0]
 800a408:	2c00      	cmp	r4, #0
 800a40a:	d1f7      	bne.n	800a3fc <_fwalk_sglue+0xc>
 800a40c:	4630      	mov	r0, r6
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d907      	bls.n	800a428 <_fwalk_sglue+0x38>
 800a418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a41c:	3301      	adds	r3, #1
 800a41e:	d003      	beq.n	800a428 <_fwalk_sglue+0x38>
 800a420:	4629      	mov	r1, r5
 800a422:	4638      	mov	r0, r7
 800a424:	47c0      	blx	r8
 800a426:	4306      	orrs	r6, r0
 800a428:	3568      	adds	r5, #104	; 0x68
 800a42a:	e7e9      	b.n	800a400 <_fwalk_sglue+0x10>

0800a42c <iprintf>:
 800a42c:	b40f      	push	{r0, r1, r2, r3}
 800a42e:	b507      	push	{r0, r1, r2, lr}
 800a430:	4906      	ldr	r1, [pc, #24]	; (800a44c <iprintf+0x20>)
 800a432:	ab04      	add	r3, sp, #16
 800a434:	6808      	ldr	r0, [r1, #0]
 800a436:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43a:	6881      	ldr	r1, [r0, #8]
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	f000 f9e7 	bl	800a810 <_vfiprintf_r>
 800a442:	b003      	add	sp, #12
 800a444:	f85d eb04 	ldr.w	lr, [sp], #4
 800a448:	b004      	add	sp, #16
 800a44a:	4770      	bx	lr
 800a44c:	20000164 	.word	0x20000164

0800a450 <__sread>:
 800a450:	b510      	push	{r4, lr}
 800a452:	460c      	mov	r4, r1
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	f000 f868 	bl	800a52c <_read_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	bfab      	itete	ge
 800a460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a462:	89a3      	ldrhlt	r3, [r4, #12]
 800a464:	181b      	addge	r3, r3, r0
 800a466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a46a:	bfac      	ite	ge
 800a46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a46e:	81a3      	strhlt	r3, [r4, #12]
 800a470:	bd10      	pop	{r4, pc}

0800a472 <__swrite>:
 800a472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	461f      	mov	r7, r3
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	05db      	lsls	r3, r3, #23
 800a47c:	4605      	mov	r5, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	4616      	mov	r6, r2
 800a482:	d505      	bpl.n	800a490 <__swrite+0x1e>
 800a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a488:	2302      	movs	r3, #2
 800a48a:	2200      	movs	r2, #0
 800a48c:	f000 f83c 	bl	800a508 <_lseek_r>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	f000 b853 	b.w	800a550 <_write_r>

0800a4aa <__sseek>:
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b2:	f000 f829 	bl	800a508 <_lseek_r>
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	bf15      	itete	ne
 800a4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4c6:	81a3      	strheq	r3, [r4, #12]
 800a4c8:	bf18      	it	ne
 800a4ca:	81a3      	strhne	r3, [r4, #12]
 800a4cc:	bd10      	pop	{r4, pc}

0800a4ce <__sclose>:
 800a4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d2:	f000 b809 	b.w	800a4e8 <_close_r>

0800a4d6 <memset>:
 800a4d6:	4402      	add	r2, r0
 800a4d8:	4603      	mov	r3, r0
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d100      	bne.n	800a4e0 <memset+0xa>
 800a4de:	4770      	bx	lr
 800a4e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e4:	e7f9      	b.n	800a4da <memset+0x4>
	...

0800a4e8 <_close_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d06      	ldr	r5, [pc, #24]	; (800a504 <_close_r+0x1c>)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	f7f6 ff19 	bl	800132a <_close>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_close_r+0x1a>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_close_r+0x1a>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20002020 	.word	0x20002020

0800a508 <_lseek_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_lseek_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f6 ff2e 	bl	8001378 <_lseek>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_lseek_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_lseek_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20002020 	.word	0x20002020

0800a52c <_read_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	; (800a54c <_read_r+0x20>)
 800a530:	4604      	mov	r4, r0
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	2200      	movs	r2, #0
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f7f6 fed8 	bl	80012f0 <_read>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_read_r+0x1e>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_read_r+0x1e>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20002020 	.word	0x20002020

0800a550 <_write_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_write_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f6 f9ac 	bl	80008bc <_write>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_write_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_write_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20002020 	.word	0x20002020

0800a574 <__errno>:
 800a574:	4b01      	ldr	r3, [pc, #4]	; (800a57c <__errno+0x8>)
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000164 	.word	0x20000164

0800a580 <__libc_init_array>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	4d0d      	ldr	r5, [pc, #52]	; (800a5b8 <__libc_init_array+0x38>)
 800a584:	4c0d      	ldr	r4, [pc, #52]	; (800a5bc <__libc_init_array+0x3c>)
 800a586:	1b64      	subs	r4, r4, r5
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	2600      	movs	r6, #0
 800a58c:	42a6      	cmp	r6, r4
 800a58e:	d109      	bne.n	800a5a4 <__libc_init_array+0x24>
 800a590:	4d0b      	ldr	r5, [pc, #44]	; (800a5c0 <__libc_init_array+0x40>)
 800a592:	4c0c      	ldr	r4, [pc, #48]	; (800a5c4 <__libc_init_array+0x44>)
 800a594:	f000 fdbe 	bl	800b114 <_init>
 800a598:	1b64      	subs	r4, r4, r5
 800a59a:	10a4      	asrs	r4, r4, #2
 800a59c:	2600      	movs	r6, #0
 800a59e:	42a6      	cmp	r6, r4
 800a5a0:	d105      	bne.n	800a5ae <__libc_init_array+0x2e>
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a8:	4798      	blx	r3
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7ee      	b.n	800a58c <__libc_init_array+0xc>
 800a5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b2:	4798      	blx	r3
 800a5b4:	3601      	adds	r6, #1
 800a5b6:	e7f2      	b.n	800a59e <__libc_init_array+0x1e>
 800a5b8:	0800b204 	.word	0x0800b204
 800a5bc:	0800b204 	.word	0x0800b204
 800a5c0:	0800b204 	.word	0x0800b204
 800a5c4:	0800b208 	.word	0x0800b208

0800a5c8 <__retarget_lock_acquire_recursive>:
 800a5c8:	4770      	bx	lr

0800a5ca <__retarget_lock_release_recursive>:
 800a5ca:	4770      	bx	lr

0800a5cc <_free_r>:
 800a5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ce:	2900      	cmp	r1, #0
 800a5d0:	d044      	beq.n	800a65c <_free_r+0x90>
 800a5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5d6:	9001      	str	r0, [sp, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f1a1 0404 	sub.w	r4, r1, #4
 800a5de:	bfb8      	it	lt
 800a5e0:	18e4      	addlt	r4, r4, r3
 800a5e2:	f000 f8df 	bl	800a7a4 <__malloc_lock>
 800a5e6:	4a1e      	ldr	r2, [pc, #120]	; (800a660 <_free_r+0x94>)
 800a5e8:	9801      	ldr	r0, [sp, #4]
 800a5ea:	6813      	ldr	r3, [r2, #0]
 800a5ec:	b933      	cbnz	r3, 800a5fc <_free_r+0x30>
 800a5ee:	6063      	str	r3, [r4, #4]
 800a5f0:	6014      	str	r4, [r2, #0]
 800a5f2:	b003      	add	sp, #12
 800a5f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5f8:	f000 b8da 	b.w	800a7b0 <__malloc_unlock>
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d908      	bls.n	800a612 <_free_r+0x46>
 800a600:	6825      	ldr	r5, [r4, #0]
 800a602:	1961      	adds	r1, r4, r5
 800a604:	428b      	cmp	r3, r1
 800a606:	bf01      	itttt	eq
 800a608:	6819      	ldreq	r1, [r3, #0]
 800a60a:	685b      	ldreq	r3, [r3, #4]
 800a60c:	1949      	addeq	r1, r1, r5
 800a60e:	6021      	streq	r1, [r4, #0]
 800a610:	e7ed      	b.n	800a5ee <_free_r+0x22>
 800a612:	461a      	mov	r2, r3
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	b10b      	cbz	r3, 800a61c <_free_r+0x50>
 800a618:	42a3      	cmp	r3, r4
 800a61a:	d9fa      	bls.n	800a612 <_free_r+0x46>
 800a61c:	6811      	ldr	r1, [r2, #0]
 800a61e:	1855      	adds	r5, r2, r1
 800a620:	42a5      	cmp	r5, r4
 800a622:	d10b      	bne.n	800a63c <_free_r+0x70>
 800a624:	6824      	ldr	r4, [r4, #0]
 800a626:	4421      	add	r1, r4
 800a628:	1854      	adds	r4, r2, r1
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	6011      	str	r1, [r2, #0]
 800a62e:	d1e0      	bne.n	800a5f2 <_free_r+0x26>
 800a630:	681c      	ldr	r4, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	6053      	str	r3, [r2, #4]
 800a636:	440c      	add	r4, r1
 800a638:	6014      	str	r4, [r2, #0]
 800a63a:	e7da      	b.n	800a5f2 <_free_r+0x26>
 800a63c:	d902      	bls.n	800a644 <_free_r+0x78>
 800a63e:	230c      	movs	r3, #12
 800a640:	6003      	str	r3, [r0, #0]
 800a642:	e7d6      	b.n	800a5f2 <_free_r+0x26>
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	1961      	adds	r1, r4, r5
 800a648:	428b      	cmp	r3, r1
 800a64a:	bf04      	itt	eq
 800a64c:	6819      	ldreq	r1, [r3, #0]
 800a64e:	685b      	ldreq	r3, [r3, #4]
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	bf04      	itt	eq
 800a654:	1949      	addeq	r1, r1, r5
 800a656:	6021      	streq	r1, [r4, #0]
 800a658:	6054      	str	r4, [r2, #4]
 800a65a:	e7ca      	b.n	800a5f2 <_free_r+0x26>
 800a65c:	b003      	add	sp, #12
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	20002028 	.word	0x20002028

0800a664 <sbrk_aligned>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	4e0e      	ldr	r6, [pc, #56]	; (800a6a0 <sbrk_aligned+0x3c>)
 800a668:	460c      	mov	r4, r1
 800a66a:	6831      	ldr	r1, [r6, #0]
 800a66c:	4605      	mov	r5, r0
 800a66e:	b911      	cbnz	r1, 800a676 <sbrk_aligned+0x12>
 800a670:	f000 fcbc 	bl	800afec <_sbrk_r>
 800a674:	6030      	str	r0, [r6, #0]
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 fcb7 	bl	800afec <_sbrk_r>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	d00a      	beq.n	800a698 <sbrk_aligned+0x34>
 800a682:	1cc4      	adds	r4, r0, #3
 800a684:	f024 0403 	bic.w	r4, r4, #3
 800a688:	42a0      	cmp	r0, r4
 800a68a:	d007      	beq.n	800a69c <sbrk_aligned+0x38>
 800a68c:	1a21      	subs	r1, r4, r0
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 fcac 	bl	800afec <_sbrk_r>
 800a694:	3001      	adds	r0, #1
 800a696:	d101      	bne.n	800a69c <sbrk_aligned+0x38>
 800a698:	f04f 34ff 	mov.w	r4, #4294967295
 800a69c:	4620      	mov	r0, r4
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	2000202c 	.word	0x2000202c

0800a6a4 <_malloc_r>:
 800a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	1ccd      	adds	r5, r1, #3
 800a6aa:	f025 0503 	bic.w	r5, r5, #3
 800a6ae:	3508      	adds	r5, #8
 800a6b0:	2d0c      	cmp	r5, #12
 800a6b2:	bf38      	it	cc
 800a6b4:	250c      	movcc	r5, #12
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	db01      	blt.n	800a6c0 <_malloc_r+0x1c>
 800a6bc:	42a9      	cmp	r1, r5
 800a6be:	d905      	bls.n	800a6cc <_malloc_r+0x28>
 800a6c0:	230c      	movs	r3, #12
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7a0 <_malloc_r+0xfc>
 800a6d0:	f000 f868 	bl	800a7a4 <__malloc_lock>
 800a6d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d8:	461c      	mov	r4, r3
 800a6da:	bb5c      	cbnz	r4, 800a734 <_malloc_r+0x90>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4638      	mov	r0, r7
 800a6e0:	f7ff ffc0 	bl	800a664 <sbrk_aligned>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	d155      	bne.n	800a796 <_malloc_r+0xf2>
 800a6ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a6ee:	4626      	mov	r6, r4
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	d145      	bne.n	800a780 <_malloc_r+0xdc>
 800a6f4:	2c00      	cmp	r4, #0
 800a6f6:	d048      	beq.n	800a78a <_malloc_r+0xe6>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	eb04 0903 	add.w	r9, r4, r3
 800a702:	f000 fc73 	bl	800afec <_sbrk_r>
 800a706:	4581      	cmp	r9, r0
 800a708:	d13f      	bne.n	800a78a <_malloc_r+0xe6>
 800a70a:	6821      	ldr	r1, [r4, #0]
 800a70c:	1a6d      	subs	r5, r5, r1
 800a70e:	4629      	mov	r1, r5
 800a710:	4638      	mov	r0, r7
 800a712:	f7ff ffa7 	bl	800a664 <sbrk_aligned>
 800a716:	3001      	adds	r0, #1
 800a718:	d037      	beq.n	800a78a <_malloc_r+0xe6>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	442b      	add	r3, r5
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	f8d8 3000 	ldr.w	r3, [r8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d038      	beq.n	800a79a <_malloc_r+0xf6>
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	42a2      	cmp	r2, r4
 800a72c:	d12b      	bne.n	800a786 <_malloc_r+0xe2>
 800a72e:	2200      	movs	r2, #0
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	e00f      	b.n	800a754 <_malloc_r+0xb0>
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	1b52      	subs	r2, r2, r5
 800a738:	d41f      	bmi.n	800a77a <_malloc_r+0xd6>
 800a73a:	2a0b      	cmp	r2, #11
 800a73c:	d917      	bls.n	800a76e <_malloc_r+0xca>
 800a73e:	1961      	adds	r1, r4, r5
 800a740:	42a3      	cmp	r3, r4
 800a742:	6025      	str	r5, [r4, #0]
 800a744:	bf18      	it	ne
 800a746:	6059      	strne	r1, [r3, #4]
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	bf08      	it	eq
 800a74c:	f8c8 1000 	streq.w	r1, [r8]
 800a750:	5162      	str	r2, [r4, r5]
 800a752:	604b      	str	r3, [r1, #4]
 800a754:	4638      	mov	r0, r7
 800a756:	f104 060b 	add.w	r6, r4, #11
 800a75a:	f000 f829 	bl	800a7b0 <__malloc_unlock>
 800a75e:	f026 0607 	bic.w	r6, r6, #7
 800a762:	1d23      	adds	r3, r4, #4
 800a764:	1af2      	subs	r2, r6, r3
 800a766:	d0ae      	beq.n	800a6c6 <_malloc_r+0x22>
 800a768:	1b9b      	subs	r3, r3, r6
 800a76a:	50a3      	str	r3, [r4, r2]
 800a76c:	e7ab      	b.n	800a6c6 <_malloc_r+0x22>
 800a76e:	42a3      	cmp	r3, r4
 800a770:	6862      	ldr	r2, [r4, #4]
 800a772:	d1dd      	bne.n	800a730 <_malloc_r+0x8c>
 800a774:	f8c8 2000 	str.w	r2, [r8]
 800a778:	e7ec      	b.n	800a754 <_malloc_r+0xb0>
 800a77a:	4623      	mov	r3, r4
 800a77c:	6864      	ldr	r4, [r4, #4]
 800a77e:	e7ac      	b.n	800a6da <_malloc_r+0x36>
 800a780:	4634      	mov	r4, r6
 800a782:	6876      	ldr	r6, [r6, #4]
 800a784:	e7b4      	b.n	800a6f0 <_malloc_r+0x4c>
 800a786:	4613      	mov	r3, r2
 800a788:	e7cc      	b.n	800a724 <_malloc_r+0x80>
 800a78a:	230c      	movs	r3, #12
 800a78c:	603b      	str	r3, [r7, #0]
 800a78e:	4638      	mov	r0, r7
 800a790:	f000 f80e 	bl	800a7b0 <__malloc_unlock>
 800a794:	e797      	b.n	800a6c6 <_malloc_r+0x22>
 800a796:	6025      	str	r5, [r4, #0]
 800a798:	e7dc      	b.n	800a754 <_malloc_r+0xb0>
 800a79a:	605b      	str	r3, [r3, #4]
 800a79c:	deff      	udf	#255	; 0xff
 800a79e:	bf00      	nop
 800a7a0:	20002028 	.word	0x20002028

0800a7a4 <__malloc_lock>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	; (800a7ac <__malloc_lock+0x8>)
 800a7a6:	f7ff bf0f 	b.w	800a5c8 <__retarget_lock_acquire_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	20002024 	.word	0x20002024

0800a7b0 <__malloc_unlock>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__malloc_unlock+0x8>)
 800a7b2:	f7ff bf0a 	b.w	800a5ca <__retarget_lock_release_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	20002024 	.word	0x20002024

0800a7bc <__sfputc_r>:
 800a7bc:	6893      	ldr	r3, [r2, #8]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	b410      	push	{r4}
 800a7c4:	6093      	str	r3, [r2, #8]
 800a7c6:	da08      	bge.n	800a7da <__sfputc_r+0x1e>
 800a7c8:	6994      	ldr	r4, [r2, #24]
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	db01      	blt.n	800a7d2 <__sfputc_r+0x16>
 800a7ce:	290a      	cmp	r1, #10
 800a7d0:	d103      	bne.n	800a7da <__sfputc_r+0x1e>
 800a7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d6:	f000 bb73 	b.w	800aec0 <__swbuf_r>
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	1c58      	adds	r0, r3, #1
 800a7de:	6010      	str	r0, [r2, #0]
 800a7e0:	7019      	strb	r1, [r3, #0]
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <__sfputs_r>:
 800a7ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460f      	mov	r7, r1
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	18d5      	adds	r5, r2, r3
 800a7f4:	42ac      	cmp	r4, r5
 800a7f6:	d101      	bne.n	800a7fc <__sfputs_r+0x12>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e007      	b.n	800a80c <__sfputs_r+0x22>
 800a7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a800:	463a      	mov	r2, r7
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff ffda 	bl	800a7bc <__sfputc_r>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d1f3      	bne.n	800a7f4 <__sfputs_r+0xa>
 800a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a810 <_vfiprintf_r>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	460d      	mov	r5, r1
 800a816:	b09d      	sub	sp, #116	; 0x74
 800a818:	4614      	mov	r4, r2
 800a81a:	4698      	mov	r8, r3
 800a81c:	4606      	mov	r6, r0
 800a81e:	b118      	cbz	r0, 800a828 <_vfiprintf_r+0x18>
 800a820:	6a03      	ldr	r3, [r0, #32]
 800a822:	b90b      	cbnz	r3, 800a828 <_vfiprintf_r+0x18>
 800a824:	f7ff fdcc 	bl	800a3c0 <__sinit>
 800a828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a82a:	07d9      	lsls	r1, r3, #31
 800a82c:	d405      	bmi.n	800a83a <_vfiprintf_r+0x2a>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	059a      	lsls	r2, r3, #22
 800a832:	d402      	bmi.n	800a83a <_vfiprintf_r+0x2a>
 800a834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a836:	f7ff fec7 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	071b      	lsls	r3, r3, #28
 800a83e:	d501      	bpl.n	800a844 <_vfiprintf_r+0x34>
 800a840:	692b      	ldr	r3, [r5, #16]
 800a842:	b99b      	cbnz	r3, 800a86c <_vfiprintf_r+0x5c>
 800a844:	4629      	mov	r1, r5
 800a846:	4630      	mov	r0, r6
 800a848:	f000 fb78 	bl	800af3c <__swsetup_r>
 800a84c:	b170      	cbz	r0, 800a86c <_vfiprintf_r+0x5c>
 800a84e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a850:	07dc      	lsls	r4, r3, #31
 800a852:	d504      	bpl.n	800a85e <_vfiprintf_r+0x4e>
 800a854:	f04f 30ff 	mov.w	r0, #4294967295
 800a858:	b01d      	add	sp, #116	; 0x74
 800a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	0598      	lsls	r0, r3, #22
 800a862:	d4f7      	bmi.n	800a854 <_vfiprintf_r+0x44>
 800a864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a866:	f7ff feb0 	bl	800a5ca <__retarget_lock_release_recursive>
 800a86a:	e7f3      	b.n	800a854 <_vfiprintf_r+0x44>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	2320      	movs	r3, #32
 800a872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a876:	f8cd 800c 	str.w	r8, [sp, #12]
 800a87a:	2330      	movs	r3, #48	; 0x30
 800a87c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa30 <_vfiprintf_r+0x220>
 800a880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a884:	f04f 0901 	mov.w	r9, #1
 800a888:	4623      	mov	r3, r4
 800a88a:	469a      	mov	sl, r3
 800a88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a890:	b10a      	cbz	r2, 800a896 <_vfiprintf_r+0x86>
 800a892:	2a25      	cmp	r2, #37	; 0x25
 800a894:	d1f9      	bne.n	800a88a <_vfiprintf_r+0x7a>
 800a896:	ebba 0b04 	subs.w	fp, sl, r4
 800a89a:	d00b      	beq.n	800a8b4 <_vfiprintf_r+0xa4>
 800a89c:	465b      	mov	r3, fp
 800a89e:	4622      	mov	r2, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7ff ffa1 	bl	800a7ea <__sfputs_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	f000 80a9 	beq.w	800aa00 <_vfiprintf_r+0x1f0>
 800a8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b0:	445a      	add	r2, fp
 800a8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 80a1 	beq.w	800aa00 <_vfiprintf_r+0x1f0>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c8:	f10a 0a01 	add.w	sl, sl, #1
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8d6:	4654      	mov	r4, sl
 800a8d8:	2205      	movs	r2, #5
 800a8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8de:	4854      	ldr	r0, [pc, #336]	; (800aa30 <_vfiprintf_r+0x220>)
 800a8e0:	f7f5 fc76 	bl	80001d0 <memchr>
 800a8e4:	9a04      	ldr	r2, [sp, #16]
 800a8e6:	b9d8      	cbnz	r0, 800a920 <_vfiprintf_r+0x110>
 800a8e8:	06d1      	lsls	r1, r2, #27
 800a8ea:	bf44      	itt	mi
 800a8ec:	2320      	movmi	r3, #32
 800a8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f2:	0713      	lsls	r3, r2, #28
 800a8f4:	bf44      	itt	mi
 800a8f6:	232b      	movmi	r3, #43	; 0x2b
 800a8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a900:	2b2a      	cmp	r3, #42	; 0x2a
 800a902:	d015      	beq.n	800a930 <_vfiprintf_r+0x120>
 800a904:	9a07      	ldr	r2, [sp, #28]
 800a906:	4654      	mov	r4, sl
 800a908:	2000      	movs	r0, #0
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4621      	mov	r1, r4
 800a910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a914:	3b30      	subs	r3, #48	; 0x30
 800a916:	2b09      	cmp	r3, #9
 800a918:	d94d      	bls.n	800a9b6 <_vfiprintf_r+0x1a6>
 800a91a:	b1b0      	cbz	r0, 800a94a <_vfiprintf_r+0x13a>
 800a91c:	9207      	str	r2, [sp, #28]
 800a91e:	e014      	b.n	800a94a <_vfiprintf_r+0x13a>
 800a920:	eba0 0308 	sub.w	r3, r0, r8
 800a924:	fa09 f303 	lsl.w	r3, r9, r3
 800a928:	4313      	orrs	r3, r2
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	46a2      	mov	sl, r4
 800a92e:	e7d2      	b.n	800a8d6 <_vfiprintf_r+0xc6>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	1d19      	adds	r1, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	9103      	str	r1, [sp, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfbb      	ittet	lt
 800a93c:	425b      	neglt	r3, r3
 800a93e:	f042 0202 	orrlt.w	r2, r2, #2
 800a942:	9307      	strge	r3, [sp, #28]
 800a944:	9307      	strlt	r3, [sp, #28]
 800a946:	bfb8      	it	lt
 800a948:	9204      	strlt	r2, [sp, #16]
 800a94a:	7823      	ldrb	r3, [r4, #0]
 800a94c:	2b2e      	cmp	r3, #46	; 0x2e
 800a94e:	d10c      	bne.n	800a96a <_vfiprintf_r+0x15a>
 800a950:	7863      	ldrb	r3, [r4, #1]
 800a952:	2b2a      	cmp	r3, #42	; 0x2a
 800a954:	d134      	bne.n	800a9c0 <_vfiprintf_r+0x1b0>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	1d1a      	adds	r2, r3, #4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	9203      	str	r2, [sp, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bfb8      	it	lt
 800a962:	f04f 33ff 	movlt.w	r3, #4294967295
 800a966:	3402      	adds	r4, #2
 800a968:	9305      	str	r3, [sp, #20]
 800a96a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa40 <_vfiprintf_r+0x230>
 800a96e:	7821      	ldrb	r1, [r4, #0]
 800a970:	2203      	movs	r2, #3
 800a972:	4650      	mov	r0, sl
 800a974:	f7f5 fc2c 	bl	80001d0 <memchr>
 800a978:	b138      	cbz	r0, 800a98a <_vfiprintf_r+0x17a>
 800a97a:	9b04      	ldr	r3, [sp, #16]
 800a97c:	eba0 000a 	sub.w	r0, r0, sl
 800a980:	2240      	movs	r2, #64	; 0x40
 800a982:	4082      	lsls	r2, r0
 800a984:	4313      	orrs	r3, r2
 800a986:	3401      	adds	r4, #1
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4829      	ldr	r0, [pc, #164]	; (800aa34 <_vfiprintf_r+0x224>)
 800a990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a994:	2206      	movs	r2, #6
 800a996:	f7f5 fc1b 	bl	80001d0 <memchr>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d03f      	beq.n	800aa1e <_vfiprintf_r+0x20e>
 800a99e:	4b26      	ldr	r3, [pc, #152]	; (800aa38 <_vfiprintf_r+0x228>)
 800a9a0:	bb1b      	cbnz	r3, 800a9ea <_vfiprintf_r+0x1da>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	3307      	adds	r3, #7
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b0:	443b      	add	r3, r7
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	e768      	b.n	800a888 <_vfiprintf_r+0x78>
 800a9b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	2001      	movs	r0, #1
 800a9be:	e7a6      	b.n	800a90e <_vfiprintf_r+0xfe>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	3401      	adds	r4, #1
 800a9c4:	9305      	str	r3, [sp, #20]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9d2:	3a30      	subs	r2, #48	; 0x30
 800a9d4:	2a09      	cmp	r2, #9
 800a9d6:	d903      	bls.n	800a9e0 <_vfiprintf_r+0x1d0>
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0c6      	beq.n	800a96a <_vfiprintf_r+0x15a>
 800a9dc:	9105      	str	r1, [sp, #20]
 800a9de:	e7c4      	b.n	800a96a <_vfiprintf_r+0x15a>
 800a9e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7f0      	b.n	800a9cc <_vfiprintf_r+0x1bc>
 800a9ea:	ab03      	add	r3, sp, #12
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <_vfiprintf_r+0x22c>)
 800a9f2:	a904      	add	r1, sp, #16
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f3af 8000 	nop.w
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	1c78      	adds	r0, r7, #1
 800a9fe:	d1d6      	bne.n	800a9ae <_vfiprintf_r+0x19e>
 800aa00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa02:	07d9      	lsls	r1, r3, #31
 800aa04:	d405      	bmi.n	800aa12 <_vfiprintf_r+0x202>
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	059a      	lsls	r2, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_vfiprintf_r+0x202>
 800aa0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa0e:	f7ff fddc 	bl	800a5ca <__retarget_lock_release_recursive>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	065b      	lsls	r3, r3, #25
 800aa16:	f53f af1d 	bmi.w	800a854 <_vfiprintf_r+0x44>
 800aa1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa1c:	e71c      	b.n	800a858 <_vfiprintf_r+0x48>
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <_vfiprintf_r+0x22c>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f000 f879 	bl	800ab20 <_printf_i>
 800aa2e:	e7e4      	b.n	800a9fa <_vfiprintf_r+0x1ea>
 800aa30:	0800b1c8 	.word	0x0800b1c8
 800aa34:	0800b1d2 	.word	0x0800b1d2
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	0800a7eb 	.word	0x0800a7eb
 800aa40:	0800b1ce 	.word	0x0800b1ce

0800aa44 <_printf_common>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	4616      	mov	r6, r2
 800aa4a:	4699      	mov	r9, r3
 800aa4c:	688a      	ldr	r2, [r1, #8]
 800aa4e:	690b      	ldr	r3, [r1, #16]
 800aa50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	bfb8      	it	lt
 800aa58:	4613      	movlt	r3, r2
 800aa5a:	6033      	str	r3, [r6, #0]
 800aa5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa60:	4607      	mov	r7, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b10a      	cbz	r2, 800aa6a <_printf_common+0x26>
 800aa66:	3301      	adds	r3, #1
 800aa68:	6033      	str	r3, [r6, #0]
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	0699      	lsls	r1, r3, #26
 800aa6e:	bf42      	ittt	mi
 800aa70:	6833      	ldrmi	r3, [r6, #0]
 800aa72:	3302      	addmi	r3, #2
 800aa74:	6033      	strmi	r3, [r6, #0]
 800aa76:	6825      	ldr	r5, [r4, #0]
 800aa78:	f015 0506 	ands.w	r5, r5, #6
 800aa7c:	d106      	bne.n	800aa8c <_printf_common+0x48>
 800aa7e:	f104 0a19 	add.w	sl, r4, #25
 800aa82:	68e3      	ldr	r3, [r4, #12]
 800aa84:	6832      	ldr	r2, [r6, #0]
 800aa86:	1a9b      	subs	r3, r3, r2
 800aa88:	42ab      	cmp	r3, r5
 800aa8a:	dc26      	bgt.n	800aada <_printf_common+0x96>
 800aa8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa90:	1e13      	subs	r3, r2, #0
 800aa92:	6822      	ldr	r2, [r4, #0]
 800aa94:	bf18      	it	ne
 800aa96:	2301      	movne	r3, #1
 800aa98:	0692      	lsls	r2, r2, #26
 800aa9a:	d42b      	bmi.n	800aaf4 <_printf_common+0xb0>
 800aa9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d01e      	beq.n	800aae8 <_printf_common+0xa4>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	f003 0306 	and.w	r3, r3, #6
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	bf02      	ittt	eq
 800aab6:	68e5      	ldreq	r5, [r4, #12]
 800aab8:	6833      	ldreq	r3, [r6, #0]
 800aaba:	1aed      	subeq	r5, r5, r3
 800aabc:	68a3      	ldr	r3, [r4, #8]
 800aabe:	bf0c      	ite	eq
 800aac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aac4:	2500      	movne	r5, #0
 800aac6:	4293      	cmp	r3, r2
 800aac8:	bfc4      	itt	gt
 800aaca:	1a9b      	subgt	r3, r3, r2
 800aacc:	18ed      	addgt	r5, r5, r3
 800aace:	2600      	movs	r6, #0
 800aad0:	341a      	adds	r4, #26
 800aad2:	42b5      	cmp	r5, r6
 800aad4:	d11a      	bne.n	800ab0c <_printf_common+0xc8>
 800aad6:	2000      	movs	r0, #0
 800aad8:	e008      	b.n	800aaec <_printf_common+0xa8>
 800aada:	2301      	movs	r3, #1
 800aadc:	4652      	mov	r2, sl
 800aade:	4649      	mov	r1, r9
 800aae0:	4638      	mov	r0, r7
 800aae2:	47c0      	blx	r8
 800aae4:	3001      	adds	r0, #1
 800aae6:	d103      	bne.n	800aaf0 <_printf_common+0xac>
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	e7c6      	b.n	800aa82 <_printf_common+0x3e>
 800aaf4:	18e1      	adds	r1, r4, r3
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	2030      	movs	r0, #48	; 0x30
 800aafa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aafe:	4422      	add	r2, r4
 800ab00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab08:	3302      	adds	r3, #2
 800ab0a:	e7c7      	b.n	800aa9c <_printf_common+0x58>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4649      	mov	r1, r9
 800ab12:	4638      	mov	r0, r7
 800ab14:	47c0      	blx	r8
 800ab16:	3001      	adds	r0, #1
 800ab18:	d0e6      	beq.n	800aae8 <_printf_common+0xa4>
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	e7d9      	b.n	800aad2 <_printf_common+0x8e>
	...

0800ab20 <_printf_i>:
 800ab20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	7e0f      	ldrb	r7, [r1, #24]
 800ab26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab28:	2f78      	cmp	r7, #120	; 0x78
 800ab2a:	4691      	mov	r9, r2
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	469a      	mov	sl, r3
 800ab32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab36:	d807      	bhi.n	800ab48 <_printf_i+0x28>
 800ab38:	2f62      	cmp	r7, #98	; 0x62
 800ab3a:	d80a      	bhi.n	800ab52 <_printf_i+0x32>
 800ab3c:	2f00      	cmp	r7, #0
 800ab3e:	f000 80d4 	beq.w	800acea <_printf_i+0x1ca>
 800ab42:	2f58      	cmp	r7, #88	; 0x58
 800ab44:	f000 80c0 	beq.w	800acc8 <_printf_i+0x1a8>
 800ab48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab50:	e03a      	b.n	800abc8 <_printf_i+0xa8>
 800ab52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab56:	2b15      	cmp	r3, #21
 800ab58:	d8f6      	bhi.n	800ab48 <_printf_i+0x28>
 800ab5a:	a101      	add	r1, pc, #4	; (adr r1, 800ab60 <_printf_i+0x40>)
 800ab5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab60:	0800abb9 	.word	0x0800abb9
 800ab64:	0800abcd 	.word	0x0800abcd
 800ab68:	0800ab49 	.word	0x0800ab49
 800ab6c:	0800ab49 	.word	0x0800ab49
 800ab70:	0800ab49 	.word	0x0800ab49
 800ab74:	0800ab49 	.word	0x0800ab49
 800ab78:	0800abcd 	.word	0x0800abcd
 800ab7c:	0800ab49 	.word	0x0800ab49
 800ab80:	0800ab49 	.word	0x0800ab49
 800ab84:	0800ab49 	.word	0x0800ab49
 800ab88:	0800ab49 	.word	0x0800ab49
 800ab8c:	0800acd1 	.word	0x0800acd1
 800ab90:	0800abf9 	.word	0x0800abf9
 800ab94:	0800ac8b 	.word	0x0800ac8b
 800ab98:	0800ab49 	.word	0x0800ab49
 800ab9c:	0800ab49 	.word	0x0800ab49
 800aba0:	0800acf3 	.word	0x0800acf3
 800aba4:	0800ab49 	.word	0x0800ab49
 800aba8:	0800abf9 	.word	0x0800abf9
 800abac:	0800ab49 	.word	0x0800ab49
 800abb0:	0800ab49 	.word	0x0800ab49
 800abb4:	0800ac93 	.word	0x0800ac93
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	1d1a      	adds	r2, r3, #4
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	602a      	str	r2, [r5, #0]
 800abc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abc8:	2301      	movs	r3, #1
 800abca:	e09f      	b.n	800ad0c <_printf_i+0x1ec>
 800abcc:	6820      	ldr	r0, [r4, #0]
 800abce:	682b      	ldr	r3, [r5, #0]
 800abd0:	0607      	lsls	r7, r0, #24
 800abd2:	f103 0104 	add.w	r1, r3, #4
 800abd6:	6029      	str	r1, [r5, #0]
 800abd8:	d501      	bpl.n	800abde <_printf_i+0xbe>
 800abda:	681e      	ldr	r6, [r3, #0]
 800abdc:	e003      	b.n	800abe6 <_printf_i+0xc6>
 800abde:	0646      	lsls	r6, r0, #25
 800abe0:	d5fb      	bpl.n	800abda <_printf_i+0xba>
 800abe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	da03      	bge.n	800abf2 <_printf_i+0xd2>
 800abea:	232d      	movs	r3, #45	; 0x2d
 800abec:	4276      	negs	r6, r6
 800abee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf2:	485a      	ldr	r0, [pc, #360]	; (800ad5c <_printf_i+0x23c>)
 800abf4:	230a      	movs	r3, #10
 800abf6:	e012      	b.n	800ac1e <_printf_i+0xfe>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	1d19      	adds	r1, r3, #4
 800abfe:	6029      	str	r1, [r5, #0]
 800ac00:	0605      	lsls	r5, r0, #24
 800ac02:	d501      	bpl.n	800ac08 <_printf_i+0xe8>
 800ac04:	681e      	ldr	r6, [r3, #0]
 800ac06:	e002      	b.n	800ac0e <_printf_i+0xee>
 800ac08:	0641      	lsls	r1, r0, #25
 800ac0a:	d5fb      	bpl.n	800ac04 <_printf_i+0xe4>
 800ac0c:	881e      	ldrh	r6, [r3, #0]
 800ac0e:	4853      	ldr	r0, [pc, #332]	; (800ad5c <_printf_i+0x23c>)
 800ac10:	2f6f      	cmp	r7, #111	; 0x6f
 800ac12:	bf0c      	ite	eq
 800ac14:	2308      	moveq	r3, #8
 800ac16:	230a      	movne	r3, #10
 800ac18:	2100      	movs	r1, #0
 800ac1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac1e:	6865      	ldr	r5, [r4, #4]
 800ac20:	60a5      	str	r5, [r4, #8]
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	bfa2      	ittt	ge
 800ac26:	6821      	ldrge	r1, [r4, #0]
 800ac28:	f021 0104 	bicge.w	r1, r1, #4
 800ac2c:	6021      	strge	r1, [r4, #0]
 800ac2e:	b90e      	cbnz	r6, 800ac34 <_printf_i+0x114>
 800ac30:	2d00      	cmp	r5, #0
 800ac32:	d04b      	beq.n	800accc <_printf_i+0x1ac>
 800ac34:	4615      	mov	r5, r2
 800ac36:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac3a:	fb03 6711 	mls	r7, r3, r1, r6
 800ac3e:	5dc7      	ldrb	r7, [r0, r7]
 800ac40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac44:	4637      	mov	r7, r6
 800ac46:	42bb      	cmp	r3, r7
 800ac48:	460e      	mov	r6, r1
 800ac4a:	d9f4      	bls.n	800ac36 <_printf_i+0x116>
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d10b      	bne.n	800ac68 <_printf_i+0x148>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	07de      	lsls	r6, r3, #31
 800ac54:	d508      	bpl.n	800ac68 <_printf_i+0x148>
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	6861      	ldr	r1, [r4, #4]
 800ac5a:	4299      	cmp	r1, r3
 800ac5c:	bfde      	ittt	le
 800ac5e:	2330      	movle	r3, #48	; 0x30
 800ac60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac68:	1b52      	subs	r2, r2, r5
 800ac6a:	6122      	str	r2, [r4, #16]
 800ac6c:	f8cd a000 	str.w	sl, [sp]
 800ac70:	464b      	mov	r3, r9
 800ac72:	aa03      	add	r2, sp, #12
 800ac74:	4621      	mov	r1, r4
 800ac76:	4640      	mov	r0, r8
 800ac78:	f7ff fee4 	bl	800aa44 <_printf_common>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d14a      	bne.n	800ad16 <_printf_i+0x1f6>
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	b004      	add	sp, #16
 800ac86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	f043 0320 	orr.w	r3, r3, #32
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	4833      	ldr	r0, [pc, #204]	; (800ad60 <_printf_i+0x240>)
 800ac94:	2778      	movs	r7, #120	; 0x78
 800ac96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	6829      	ldr	r1, [r5, #0]
 800ac9e:	061f      	lsls	r7, r3, #24
 800aca0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aca4:	d402      	bmi.n	800acac <_printf_i+0x18c>
 800aca6:	065f      	lsls	r7, r3, #25
 800aca8:	bf48      	it	mi
 800acaa:	b2b6      	uxthmi	r6, r6
 800acac:	07df      	lsls	r7, r3, #31
 800acae:	bf48      	it	mi
 800acb0:	f043 0320 	orrmi.w	r3, r3, #32
 800acb4:	6029      	str	r1, [r5, #0]
 800acb6:	bf48      	it	mi
 800acb8:	6023      	strmi	r3, [r4, #0]
 800acba:	b91e      	cbnz	r6, 800acc4 <_printf_i+0x1a4>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	f023 0320 	bic.w	r3, r3, #32
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	2310      	movs	r3, #16
 800acc6:	e7a7      	b.n	800ac18 <_printf_i+0xf8>
 800acc8:	4824      	ldr	r0, [pc, #144]	; (800ad5c <_printf_i+0x23c>)
 800acca:	e7e4      	b.n	800ac96 <_printf_i+0x176>
 800accc:	4615      	mov	r5, r2
 800acce:	e7bd      	b.n	800ac4c <_printf_i+0x12c>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	6826      	ldr	r6, [r4, #0]
 800acd4:	6961      	ldr	r1, [r4, #20]
 800acd6:	1d18      	adds	r0, r3, #4
 800acd8:	6028      	str	r0, [r5, #0]
 800acda:	0635      	lsls	r5, r6, #24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	d501      	bpl.n	800ace4 <_printf_i+0x1c4>
 800ace0:	6019      	str	r1, [r3, #0]
 800ace2:	e002      	b.n	800acea <_printf_i+0x1ca>
 800ace4:	0670      	lsls	r0, r6, #25
 800ace6:	d5fb      	bpl.n	800ace0 <_printf_i+0x1c0>
 800ace8:	8019      	strh	r1, [r3, #0]
 800acea:	2300      	movs	r3, #0
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	4615      	mov	r5, r2
 800acf0:	e7bc      	b.n	800ac6c <_printf_i+0x14c>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	1d1a      	adds	r2, r3, #4
 800acf6:	602a      	str	r2, [r5, #0]
 800acf8:	681d      	ldr	r5, [r3, #0]
 800acfa:	6862      	ldr	r2, [r4, #4]
 800acfc:	2100      	movs	r1, #0
 800acfe:	4628      	mov	r0, r5
 800ad00:	f7f5 fa66 	bl	80001d0 <memchr>
 800ad04:	b108      	cbz	r0, 800ad0a <_printf_i+0x1ea>
 800ad06:	1b40      	subs	r0, r0, r5
 800ad08:	6060      	str	r0, [r4, #4]
 800ad0a:	6863      	ldr	r3, [r4, #4]
 800ad0c:	6123      	str	r3, [r4, #16]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad14:	e7aa      	b.n	800ac6c <_printf_i+0x14c>
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	462a      	mov	r2, r5
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	47d0      	blx	sl
 800ad20:	3001      	adds	r0, #1
 800ad22:	d0ad      	beq.n	800ac80 <_printf_i+0x160>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	079b      	lsls	r3, r3, #30
 800ad28:	d413      	bmi.n	800ad52 <_printf_i+0x232>
 800ad2a:	68e0      	ldr	r0, [r4, #12]
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	bfb8      	it	lt
 800ad32:	4618      	movlt	r0, r3
 800ad34:	e7a6      	b.n	800ac84 <_printf_i+0x164>
 800ad36:	2301      	movs	r3, #1
 800ad38:	4632      	mov	r2, r6
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	47d0      	blx	sl
 800ad40:	3001      	adds	r0, #1
 800ad42:	d09d      	beq.n	800ac80 <_printf_i+0x160>
 800ad44:	3501      	adds	r5, #1
 800ad46:	68e3      	ldr	r3, [r4, #12]
 800ad48:	9903      	ldr	r1, [sp, #12]
 800ad4a:	1a5b      	subs	r3, r3, r1
 800ad4c:	42ab      	cmp	r3, r5
 800ad4e:	dcf2      	bgt.n	800ad36 <_printf_i+0x216>
 800ad50:	e7eb      	b.n	800ad2a <_printf_i+0x20a>
 800ad52:	2500      	movs	r5, #0
 800ad54:	f104 0619 	add.w	r6, r4, #25
 800ad58:	e7f5      	b.n	800ad46 <_printf_i+0x226>
 800ad5a:	bf00      	nop
 800ad5c:	0800b1d9 	.word	0x0800b1d9
 800ad60:	0800b1ea 	.word	0x0800b1ea

0800ad64 <__sflush_r>:
 800ad64:	898a      	ldrh	r2, [r1, #12]
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	0710      	lsls	r0, r2, #28
 800ad6e:	460c      	mov	r4, r1
 800ad70:	d458      	bmi.n	800ae24 <__sflush_r+0xc0>
 800ad72:	684b      	ldr	r3, [r1, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dc05      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dc02      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	d0f9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad90:	682f      	ldr	r7, [r5, #0]
 800ad92:	6a21      	ldr	r1, [r4, #32]
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	d032      	beq.n	800adfe <__sflush_r+0x9a>
 800ad98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	075a      	lsls	r2, r3, #29
 800ad9e:	d505      	bpl.n	800adac <__sflush_r+0x48>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada6:	b10b      	cbz	r3, 800adac <__sflush_r+0x48>
 800ada8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adaa:	1ac0      	subs	r0, r0, r3
 800adac:	2300      	movs	r3, #0
 800adae:	4602      	mov	r2, r0
 800adb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb2:	6a21      	ldr	r1, [r4, #32]
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b0      	blx	r6
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	d106      	bne.n	800adcc <__sflush_r+0x68>
 800adbe:	6829      	ldr	r1, [r5, #0]
 800adc0:	291d      	cmp	r1, #29
 800adc2:	d82b      	bhi.n	800ae1c <__sflush_r+0xb8>
 800adc4:	4a29      	ldr	r2, [pc, #164]	; (800ae6c <__sflush_r+0x108>)
 800adc6:	410a      	asrs	r2, r1
 800adc8:	07d6      	lsls	r6, r2, #31
 800adca:	d427      	bmi.n	800ae1c <__sflush_r+0xb8>
 800adcc:	2200      	movs	r2, #0
 800adce:	6062      	str	r2, [r4, #4]
 800add0:	04d9      	lsls	r1, r3, #19
 800add2:	6922      	ldr	r2, [r4, #16]
 800add4:	6022      	str	r2, [r4, #0]
 800add6:	d504      	bpl.n	800ade2 <__sflush_r+0x7e>
 800add8:	1c42      	adds	r2, r0, #1
 800adda:	d101      	bne.n	800ade0 <__sflush_r+0x7c>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b903      	cbnz	r3, 800ade2 <__sflush_r+0x7e>
 800ade0:	6560      	str	r0, [r4, #84]	; 0x54
 800ade2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade4:	602f      	str	r7, [r5, #0]
 800ade6:	2900      	cmp	r1, #0
 800ade8:	d0c9      	beq.n	800ad7e <__sflush_r+0x1a>
 800adea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adee:	4299      	cmp	r1, r3
 800adf0:	d002      	beq.n	800adf8 <__sflush_r+0x94>
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7ff fbea 	bl	800a5cc <_free_r>
 800adf8:	2000      	movs	r0, #0
 800adfa:	6360      	str	r0, [r4, #52]	; 0x34
 800adfc:	e7c0      	b.n	800ad80 <__sflush_r+0x1c>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b0      	blx	r6
 800ae04:	1c41      	adds	r1, r0, #1
 800ae06:	d1c8      	bne.n	800ad9a <__sflush_r+0x36>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0c5      	beq.n	800ad9a <__sflush_r+0x36>
 800ae0e:	2b1d      	cmp	r3, #29
 800ae10:	d001      	beq.n	800ae16 <__sflush_r+0xb2>
 800ae12:	2b16      	cmp	r3, #22
 800ae14:	d101      	bne.n	800ae1a <__sflush_r+0xb6>
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	e7b1      	b.n	800ad7e <__sflush_r+0x1a>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7ad      	b.n	800ad80 <__sflush_r+0x1c>
 800ae24:	690f      	ldr	r7, [r1, #16]
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	d0a9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ae2a:	0793      	lsls	r3, r2, #30
 800ae2c:	680e      	ldr	r6, [r1, #0]
 800ae2e:	bf08      	it	eq
 800ae30:	694b      	ldreq	r3, [r1, #20]
 800ae32:	600f      	str	r7, [r1, #0]
 800ae34:	bf18      	it	ne
 800ae36:	2300      	movne	r3, #0
 800ae38:	eba6 0807 	sub.w	r8, r6, r7
 800ae3c:	608b      	str	r3, [r1, #8]
 800ae3e:	f1b8 0f00 	cmp.w	r8, #0
 800ae42:	dd9c      	ble.n	800ad7e <__sflush_r+0x1a>
 800ae44:	6a21      	ldr	r1, [r4, #32]
 800ae46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae48:	4643      	mov	r3, r8
 800ae4a:	463a      	mov	r2, r7
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b0      	blx	r6
 800ae50:	2800      	cmp	r0, #0
 800ae52:	dc06      	bgt.n	800ae62 <__sflush_r+0xfe>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	e78e      	b.n	800ad80 <__sflush_r+0x1c>
 800ae62:	4407      	add	r7, r0
 800ae64:	eba8 0800 	sub.w	r8, r8, r0
 800ae68:	e7e9      	b.n	800ae3e <__sflush_r+0xda>
 800ae6a:	bf00      	nop
 800ae6c:	dfbffffe 	.word	0xdfbffffe

0800ae70 <_fflush_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	690b      	ldr	r3, [r1, #16]
 800ae74:	4605      	mov	r5, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	b913      	cbnz	r3, 800ae80 <_fflush_r+0x10>
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	b118      	cbz	r0, 800ae8a <_fflush_r+0x1a>
 800ae82:	6a03      	ldr	r3, [r0, #32]
 800ae84:	b90b      	cbnz	r3, 800ae8a <_fflush_r+0x1a>
 800ae86:	f7ff fa9b 	bl	800a3c0 <__sinit>
 800ae8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0f3      	beq.n	800ae7a <_fflush_r+0xa>
 800ae92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae94:	07d0      	lsls	r0, r2, #31
 800ae96:	d404      	bmi.n	800aea2 <_fflush_r+0x32>
 800ae98:	0599      	lsls	r1, r3, #22
 800ae9a:	d402      	bmi.n	800aea2 <_fflush_r+0x32>
 800ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9e:	f7ff fb93 	bl	800a5c8 <__retarget_lock_acquire_recursive>
 800aea2:	4628      	mov	r0, r5
 800aea4:	4621      	mov	r1, r4
 800aea6:	f7ff ff5d 	bl	800ad64 <__sflush_r>
 800aeaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeac:	07da      	lsls	r2, r3, #31
 800aeae:	4605      	mov	r5, r0
 800aeb0:	d4e4      	bmi.n	800ae7c <_fflush_r+0xc>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	d4e1      	bmi.n	800ae7c <_fflush_r+0xc>
 800aeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeba:	f7ff fb86 	bl	800a5ca <__retarget_lock_release_recursive>
 800aebe:	e7dd      	b.n	800ae7c <_fflush_r+0xc>

0800aec0 <__swbuf_r>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	460e      	mov	r6, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	4605      	mov	r5, r0
 800aec8:	b118      	cbz	r0, 800aed2 <__swbuf_r+0x12>
 800aeca:	6a03      	ldr	r3, [r0, #32]
 800aecc:	b90b      	cbnz	r3, 800aed2 <__swbuf_r+0x12>
 800aece:	f7ff fa77 	bl	800a3c0 <__sinit>
 800aed2:	69a3      	ldr	r3, [r4, #24]
 800aed4:	60a3      	str	r3, [r4, #8]
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	071a      	lsls	r2, r3, #28
 800aeda:	d525      	bpl.n	800af28 <__swbuf_r+0x68>
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	b31b      	cbz	r3, 800af28 <__swbuf_r+0x68>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	6922      	ldr	r2, [r4, #16]
 800aee4:	1a98      	subs	r0, r3, r2
 800aee6:	6963      	ldr	r3, [r4, #20]
 800aee8:	b2f6      	uxtb	r6, r6
 800aeea:	4283      	cmp	r3, r0
 800aeec:	4637      	mov	r7, r6
 800aeee:	dc04      	bgt.n	800aefa <__swbuf_r+0x3a>
 800aef0:	4621      	mov	r1, r4
 800aef2:	4628      	mov	r0, r5
 800aef4:	f7ff ffbc 	bl	800ae70 <_fflush_r>
 800aef8:	b9e0      	cbnz	r0, 800af34 <__swbuf_r+0x74>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	701e      	strb	r6, [r3, #0]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d004      	beq.n	800af1a <__swbuf_r+0x5a>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d506      	bpl.n	800af24 <__swbuf_r+0x64>
 800af16:	2e0a      	cmp	r6, #10
 800af18:	d104      	bne.n	800af24 <__swbuf_r+0x64>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f7ff ffa7 	bl	800ae70 <_fflush_r>
 800af22:	b938      	cbnz	r0, 800af34 <__swbuf_r+0x74>
 800af24:	4638      	mov	r0, r7
 800af26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f806 	bl	800af3c <__swsetup_r>
 800af30:	2800      	cmp	r0, #0
 800af32:	d0d5      	beq.n	800aee0 <__swbuf_r+0x20>
 800af34:	f04f 37ff 	mov.w	r7, #4294967295
 800af38:	e7f4      	b.n	800af24 <__swbuf_r+0x64>
	...

0800af3c <__swsetup_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <__swsetup_r+0xac>)
 800af40:	4605      	mov	r5, r0
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	460c      	mov	r4, r1
 800af46:	b118      	cbz	r0, 800af50 <__swsetup_r+0x14>
 800af48:	6a03      	ldr	r3, [r0, #32]
 800af4a:	b90b      	cbnz	r3, 800af50 <__swsetup_r+0x14>
 800af4c:	f7ff fa38 	bl	800a3c0 <__sinit>
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af56:	0718      	lsls	r0, r3, #28
 800af58:	d422      	bmi.n	800afa0 <__swsetup_r+0x64>
 800af5a:	06d9      	lsls	r1, r3, #27
 800af5c:	d407      	bmi.n	800af6e <__swsetup_r+0x32>
 800af5e:	2309      	movs	r3, #9
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af66:	81a3      	strh	r3, [r4, #12]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	e034      	b.n	800afd8 <__swsetup_r+0x9c>
 800af6e:	0758      	lsls	r0, r3, #29
 800af70:	d512      	bpl.n	800af98 <__swsetup_r+0x5c>
 800af72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af74:	b141      	cbz	r1, 800af88 <__swsetup_r+0x4c>
 800af76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af7a:	4299      	cmp	r1, r3
 800af7c:	d002      	beq.n	800af84 <__swsetup_r+0x48>
 800af7e:	4628      	mov	r0, r5
 800af80:	f7ff fb24 	bl	800a5cc <_free_r>
 800af84:	2300      	movs	r3, #0
 800af86:	6363      	str	r3, [r4, #52]	; 0x34
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	2300      	movs	r3, #0
 800af92:	6063      	str	r3, [r4, #4]
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f043 0308 	orr.w	r3, r3, #8
 800af9e:	81a3      	strh	r3, [r4, #12]
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	b94b      	cbnz	r3, 800afb8 <__swsetup_r+0x7c>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afae:	d003      	beq.n	800afb8 <__swsetup_r+0x7c>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f850 	bl	800b058 <__smakebuf_r>
 800afb8:	89a0      	ldrh	r0, [r4, #12]
 800afba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afbe:	f010 0301 	ands.w	r3, r0, #1
 800afc2:	d00a      	beq.n	800afda <__swsetup_r+0x9e>
 800afc4:	2300      	movs	r3, #0
 800afc6:	60a3      	str	r3, [r4, #8]
 800afc8:	6963      	ldr	r3, [r4, #20]
 800afca:	425b      	negs	r3, r3
 800afcc:	61a3      	str	r3, [r4, #24]
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	b943      	cbnz	r3, 800afe4 <__swsetup_r+0xa8>
 800afd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afd6:	d1c4      	bne.n	800af62 <__swsetup_r+0x26>
 800afd8:	bd38      	pop	{r3, r4, r5, pc}
 800afda:	0781      	lsls	r1, r0, #30
 800afdc:	bf58      	it	pl
 800afde:	6963      	ldrpl	r3, [r4, #20]
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	e7f4      	b.n	800afce <__swsetup_r+0x92>
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7f7      	b.n	800afd8 <__swsetup_r+0x9c>
 800afe8:	20000164 	.word	0x20000164

0800afec <_sbrk_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_sbrk_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f6 f9cc 	bl	8001394 <_sbrk>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_sbrk_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_sbrk_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20002020 	.word	0x20002020

0800b00c <__swhatbuf_r>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b014:	2900      	cmp	r1, #0
 800b016:	b096      	sub	sp, #88	; 0x58
 800b018:	4615      	mov	r5, r2
 800b01a:	461e      	mov	r6, r3
 800b01c:	da0d      	bge.n	800b03a <__swhatbuf_r+0x2e>
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b024:	f04f 0100 	mov.w	r1, #0
 800b028:	bf0c      	ite	eq
 800b02a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b02e:	2340      	movne	r3, #64	; 0x40
 800b030:	2000      	movs	r0, #0
 800b032:	6031      	str	r1, [r6, #0]
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	b016      	add	sp, #88	; 0x58
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	466a      	mov	r2, sp
 800b03c:	f000 f848 	bl	800b0d0 <_fstat_r>
 800b040:	2800      	cmp	r0, #0
 800b042:	dbec      	blt.n	800b01e <__swhatbuf_r+0x12>
 800b044:	9901      	ldr	r1, [sp, #4]
 800b046:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b04a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b04e:	4259      	negs	r1, r3
 800b050:	4159      	adcs	r1, r3
 800b052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b056:	e7eb      	b.n	800b030 <__swhatbuf_r+0x24>

0800b058 <__smakebuf_r>:
 800b058:	898b      	ldrh	r3, [r1, #12]
 800b05a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b05c:	079d      	lsls	r5, r3, #30
 800b05e:	4606      	mov	r6, r0
 800b060:	460c      	mov	r4, r1
 800b062:	d507      	bpl.n	800b074 <__smakebuf_r+0x1c>
 800b064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	6123      	str	r3, [r4, #16]
 800b06c:	2301      	movs	r3, #1
 800b06e:	6163      	str	r3, [r4, #20]
 800b070:	b002      	add	sp, #8
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	ab01      	add	r3, sp, #4
 800b076:	466a      	mov	r2, sp
 800b078:	f7ff ffc8 	bl	800b00c <__swhatbuf_r>
 800b07c:	9900      	ldr	r1, [sp, #0]
 800b07e:	4605      	mov	r5, r0
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff fb0f 	bl	800a6a4 <_malloc_r>
 800b086:	b948      	cbnz	r0, 800b09c <__smakebuf_r+0x44>
 800b088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08c:	059a      	lsls	r2, r3, #22
 800b08e:	d4ef      	bmi.n	800b070 <__smakebuf_r+0x18>
 800b090:	f023 0303 	bic.w	r3, r3, #3
 800b094:	f043 0302 	orr.w	r3, r3, #2
 800b098:	81a3      	strh	r3, [r4, #12]
 800b09a:	e7e3      	b.n	800b064 <__smakebuf_r+0xc>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	6020      	str	r0, [r4, #0]
 800b0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	6163      	str	r3, [r4, #20]
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	6120      	str	r0, [r4, #16]
 800b0ae:	b15b      	cbz	r3, 800b0c8 <__smakebuf_r+0x70>
 800b0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 f81d 	bl	800b0f4 <_isatty_r>
 800b0ba:	b128      	cbz	r0, 800b0c8 <__smakebuf_r+0x70>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f023 0303 	bic.w	r3, r3, #3
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	81a3      	strh	r3, [r4, #12]
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	431d      	orrs	r5, r3
 800b0cc:	81a5      	strh	r5, [r4, #12]
 800b0ce:	e7cf      	b.n	800b070 <__smakebuf_r+0x18>

0800b0d0 <_fstat_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d07      	ldr	r5, [pc, #28]	; (800b0f0 <_fstat_r+0x20>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	f7f6 f930 	bl	8001342 <_fstat>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	d102      	bne.n	800b0ec <_fstat_r+0x1c>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	b103      	cbz	r3, 800b0ec <_fstat_r+0x1c>
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20002020 	.word	0x20002020

0800b0f4 <_isatty_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d06      	ldr	r5, [pc, #24]	; (800b110 <_isatty_r+0x1c>)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	f7f6 f92f 	bl	8001362 <_isatty>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_isatty_r+0x1a>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_isatty_r+0x1a>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	20002020 	.word	0x20002020

0800b114 <_init>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr

0800b120 <_fini>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	bf00      	nop
 800b124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b126:	bc08      	pop	{r3}
 800b128:	469e      	mov	lr, r3
 800b12a:	4770      	bx	lr
