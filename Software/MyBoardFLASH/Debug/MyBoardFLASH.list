
MyBoardFLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b0ec  0800b0ec  0001b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1bc  0800b1bc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1c4  0800b1c4  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  20000168  0800b334  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20002030  0800b334  00022030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d44c  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ca1  00000000  00000000  0003d627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  000422c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bc  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bc6c  00000000  00000000  00044e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b61  00000000  00000000  00070a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f55cf  00000000  00000000  000925f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c54  00000000  00000000  00187bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0018e81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0d4 	.word	0x0800b0d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800b0d4 	.word	0x0800b0d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x60>)
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_CAN1_Init+0x60>)
 8000578:	2220      	movs	r2, #32
 800057a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_CAN1_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_CAN1_Init+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x60>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x60>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x60>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x60>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x60>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x60>)
 80005ba:	f001 f861 	bl	8001680 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80005c4:	f000 fd62 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000184 	.word	0x20000184
 80005d0:	40006400 	.word	0x40006400

080005d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <HAL_CAN_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_CAN_MspInit+0x80>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000638:	2309      	movs	r3, #9
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000644:	f001 fa68 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40006400 	.word	0x40006400
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <BSP_QSPI_Read>:


/* USER CODE BEGIN 1 */

uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b092      	sub	sp, #72	; 0x48
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 800066e:	23ec      	movs	r3, #236	; 0xec
 8000670:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000672:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000678:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800067c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000682:	2300      	movs	r3, #0
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000686:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800068c:	230a      	movs	r3, #10
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000698:	2300      	movs	r3, #0
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800069c:	2300      	movs	r3, #0
 800069e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <BSP_QSPI_Read+0x80>)
 80006ac:	f003 f904 	bl	80038b8 <HAL_QSPI_Command>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00b      	b.n	80006d2 <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80006be:	68f9      	ldr	r1, [r7, #12]
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <BSP_QSPI_Read+0x80>)
 80006c2:	f003 f9ee 	bl	8003aa2 <HAL_QSPI_Receive>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e000      	b.n	80006d2 <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3748      	adds	r7, #72	; 0x48
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000204 	.word	0x20000204

080006e0 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	; 0x58
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 80006f0:	e003      	b.n	80006fa <BSP_QSPI_Write+0x1a>
  {
    current_addr += MEMORY_PAGE_SIZE;
 80006f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 80006fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d9f7      	bls.n	80006f2 <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 8000702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800070a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	429a      	cmp	r2, r3
 8000710:	d901      	bls.n	8000716 <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8000728:	2312      	movs	r3, #18
 800072a:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800072c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000732:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000736:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800073c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800074e:	2300      	movs	r3, #0
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8000752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000754:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8000756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != QSPI_OK)
 800075a:	f000 f8b3 	bl	80008c4 <QSPI_WriteEnable>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e038      	b.n	80007da <BSP_QSPI_Write+0xfa>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000770:	4619      	mov	r1, r3
 8000772:	481c      	ldr	r0, [pc, #112]	; (80007e4 <BSP_QSPI_Write+0x104>)
 8000774:	f003 f8a0 	bl	80038b8 <HAL_QSPI_Command>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e02b      	b.n	80007da <BSP_QSPI_Write+0xfa>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000782:	f241 3288 	movw	r2, #5000	; 0x1388
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <BSP_QSPI_Write+0x104>)
 800078a:	f003 f8f3 	bl	8003974 <HAL_QSPI_Transmit>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e020      	b.n	80007da <BSP_QSPI_Write+0xfa>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != QSPI_OK)
 8000798:	f000 f85c 	bl	8000854 <QSPI_AutoPollingMemReady>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <BSP_QSPI_Write+0xc6>
    {
      return QSPI_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e019      	b.n	80007da <BSP_QSPI_Write+0xfa>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80007a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007aa:	4413      	add	r3, r2
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007b2:	4413      	add	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MEMORY_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MEMORY_PAGE_SIZE;
 80007b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80007bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007be:	429a      	cmp	r2, r3
 80007c0:	d203      	bcs.n	80007ca <BSP_QSPI_Write+0xea>
 80007c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	e001      	b.n	80007ce <BSP_QSPI_Write+0xee>
 80007ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80007d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3bc      	bcc.n	8000752 <BSP_QSPI_Write+0x72>

  return QSPI_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3758      	adds	r7, #88	; 0x58
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000204 	.word	0x20000204

080007e8 <CSP_QUADSPI_Init>:

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <CSP_QUADSPI_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <CSP_QUADSPI_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <CSP_QUADSPI_Init+0x64>)
 80007f4:	f003 f83c 	bl	8003870 <HAL_QSPI_DeInit>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e021      	b.n	8000846 <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 8000802:	f000 fc49 	bl	8001098 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000806:	f000 f951 	bl	8000aac <QSPI_ResetChip>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	e018      	b.n	8000846 <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f000 ff0f 	bl	8001638 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800081a:	f000 f81b 	bl	8000854 <QSPI_AutoPollingMemReady>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	e00e      	b.n	8000846 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000828:	f000 f84c 	bl	80008c4 <QSPI_WriteEnable>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e007      	b.n	8000846 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8000836:	f000 f88f 	bl	8000958 <QSPI_Configuration>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000204 	.word	0x20000204
 8000850:	a0001000 	.word	0xa0001000

08000854 <QSPI_AutoPollingMemReady>:
			}

	return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800085a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000860:	2305      	movs	r3, #5
 8000862:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800086c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800087a:	2300      	movs	r3, #0
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800087e:	2300      	movs	r3, #0
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000892:	2310      	movs	r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800089c:	463a      	mov	r2, r7
 800089e:	f107 0118 	add.w	r1, r7, #24
 80008a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <QSPI_AutoPollingMemReady+0x6c>)
 80008a8:	f003 f99d 	bl	8003be6 <HAL_QSPI_AutoPolling>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3750      	adds	r7, #80	; 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000204 	.word	0x20000204

080008c4 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80008d0:	2306      	movs	r3, #6
 80008d2:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <QSPI_WriteEnable+0x90>)
 80008fc:	f002 ffdc 	bl	80038b8 <HAL_QSPI_Command>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e01f      	b.n	800094a <QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 800090a:	2302      	movs	r3, #2
 800090c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 800090e:	2302      	movs	r3, #2
 8000910:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800091a:	2310      	movs	r3, #16
 800091c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000924:	2305      	movs	r3, #5
 8000926:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800092e:	463a      	mov	r2, r7
 8000930:	f107 0118 	add.w	r1, r7, #24
 8000934:	f241 3388 	movw	r3, #5000	; 0x1388
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <QSPI_WriteEnable+0x90>)
 800093a:	f003 f954 	bl	8003be6 <HAL_QSPI_AutoPolling>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000204 	.word	0x20000204

08000958 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	; 0x40
 800095c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000966:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000968:	2305      	movs	r3, #5
 800096a:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	f241 3288 	movw	r2, #5000	; 0x1388
 8000996:	4619      	mov	r1, r3
 8000998:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <QSPI_Configuration+0x150>)
 800099a:	f002 ff8d 	bl	80038b8 <HAL_QSPI_Command>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e07a      	b.n	8000a9e <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ae:	4619      	mov	r1, r3
 80009b0:	483d      	ldr	r0, [pc, #244]	; (8000aa8 <QSPI_Configuration+0x150>)
 80009b2:	f003 f876 	bl	8003aa2 <HAL_QSPI_Receive>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e06e      	b.n	8000a9e <QSPI_Configuration+0x146>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 80009c6:	2315      	movs	r3, #21
 80009c8:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80009d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f4:	4619      	mov	r1, r3
 80009f6:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <QSPI_Configuration+0x150>)
 80009f8:	f002 ff5e 	bl	80038b8 <HAL_QSPI_Command>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e04b      	b.n	8000a9e <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <QSPI_Configuration+0x150>)
 8000a12:	f003 f846 	bl	8003aa2 <HAL_QSPI_Receive>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e03e      	b.n	8000a9e <QSPI_Configuration+0x146>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8000a20:	793b      	ldrb	r3, [r7, #4]
 8000a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a38:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <QSPI_Configuration+0x150>)
 8000a72:	f002 ff21 	bl	80038b8 <HAL_QSPI_Command>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <QSPI_Configuration+0x128>
			!= HAL_OK) {
		return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e00e      	b.n	8000a9e <QSPI_Configuration+0x146>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a86:	4619      	mov	r1, r3
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <QSPI_Configuration+0x150>)
 8000a8a:	f002 ff73 	bl	8003974 <HAL_QSPI_Transmit>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <QSPI_Configuration+0x144>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000a94:	f000 fafa 	bl	800108c <Error_Handler>
		return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <QSPI_Configuration+0x146>
	}
	return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3740      	adds	r7, #64	; 0x40
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000204 	.word	0x20000204

08000aac <QSPI_ResetChip>:
		return HAL_ERROR;
	}
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	; 0x40
 8000ab0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aba:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000ad2:	2366      	movs	r3, #102	; 0x66
 8000ad4:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aec:	4619      	mov	r1, r3
 8000aee:	486f      	ldr	r0, [pc, #444]	; (8000cac <QSPI_ResetChip+0x200>)
 8000af0:	f002 fee2 	bl	80038b8 <HAL_QSPI_Command>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0d2      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b02:	e003      	b.n	8000b0c <QSPI_ResetChip+0x60>
		__NOP();
 8000b04:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b08:	3301      	adds	r3, #1
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8000b10:	d9f8      	bls.n	8000b04 <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b16:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b26:	2300      	movs	r3, #0
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000b2e:	2399      	movs	r3, #153	; 0x99
 8000b30:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4858      	ldr	r0, [pc, #352]	; (8000cac <QSPI_ResetChip+0x200>)
 8000b4c:	f002 feb4 	bl	80038b8 <HAL_QSPI_Command>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0a4      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8000b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000b76:	2366      	movs	r3, #102	; 0x66
 8000b78:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b90:	4619      	mov	r1, r3
 8000b92:	4846      	ldr	r0, [pc, #280]	; (8000cac <QSPI_ResetChip+0x200>)
 8000b94:	f002 fe90 	bl	80038b8 <HAL_QSPI_Command>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <QSPI_ResetChip+0xf6>
			!= HAL_OK) {
		return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e080      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ba6:	e003      	b.n	8000bb0 <QSPI_ResetChip+0x104>
		__NOP();
 8000ba8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bac:	3301      	adds	r3, #1
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8000bb4:	d9f8      	bls.n	8000ba8 <QSPI_ResetChip+0xfc>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8000bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bba:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000bd2:	2399      	movs	r3, #153	; 0x99
 8000bd4:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bec:	4619      	mov	r1, r3
 8000bee:	482f      	ldr	r0, [pc, #188]	; (8000cac <QSPI_ResetChip+0x200>)
 8000bf0:	f002 fe62 	bl	80038b8 <HAL_QSPI_Command>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <QSPI_ResetChip+0x152>
			!= HAL_OK) {
		return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e052      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c02:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000c1a:	2366      	movs	r3, #102	; 0x66
 8000c1c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c34:	4619      	mov	r1, r3
 8000c36:	481d      	ldr	r0, [pc, #116]	; (8000cac <QSPI_ResetChip+0x200>)
 8000c38:	f002 fe3e 	bl	80038b8 <HAL_QSPI_Command>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <QSPI_ResetChip+0x19a>
			!= HAL_OK) {
		return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e02e      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c4a:	e003      	b.n	8000c54 <QSPI_ResetChip+0x1a8>
		__NOP();
 8000c4c:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c50:	3301      	adds	r3, #1
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c56:	2b2e      	cmp	r3, #46	; 0x2e
 8000c58:	d9f8      	bls.n	8000c4c <QSPI_ResetChip+0x1a0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000c76:	2399      	movs	r3, #153	; 0x99
 8000c78:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <QSPI_ResetChip+0x200>)
 8000c94:	f002 fe10 	bl	80038b8 <HAL_QSPI_Command>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <QSPI_ResetChip+0x1f6>
			!= HAL_OK) {
		return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <QSPI_ResetChip+0x1f8>
	}

	return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3740      	adds	r7, #64	; 0x40
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000204 	.word	0x20000204

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_RESET_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2111      	movs	r1, #17
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f001 f991 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d3a:	f001 f98b 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PUSHBUTTON_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d54:	f000 fee0 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FLASH_RESET_Pin|FLASH_CS_Pin;
 8000d58:	2311      	movs	r3, #17
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fed1 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d90:	f000 fec2 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000d94:	2320      	movs	r3, #32
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000daa:	f000 feb5 	bl	8001b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2017      	movs	r0, #23
 8000db4:	f000 fe3b 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000db8:	2017      	movs	r0, #23
 8000dba:	f000 fe54 	bl	8001a66 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e10:	f001 f95b 	bl	80020ca <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 f937 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e22:	f001 f9ed 	bl	8002200 <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 f92e 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e34:	f001 fa2f 	bl	8002296 <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 f925 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001ac 	.word	0x200001ac
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	10909cec 	.word	0x10909cec

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	; 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	; 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fb0e 	bl	800a496 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_I2C_MspInit+0xb0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d13a      	bne.n	8000efa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 ff63 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e9c:	f000 f8f6 	bl	800108c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_I2C_MspInit+0xb8>)
 8000ede:	f000 fe1b 	bl	8001b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	37b0      	adds	r7, #176	; 0xb0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40005400 	.word	0x40005400
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f008 fc14 	bl	8009750 <CDC_Transmit_FS>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_write+0x40>)
 8000f2e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_write+0x40>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d0f1      	beq.n	8000f1c <_write+0xc>

    if (USBD_FAIL == rc) {
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <_write+0x40>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d101      	bne.n	8000f44 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e000      	b.n	8000f46 <_write+0x36>
    }
    return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000200 	.word	0x20000200

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 faf8 	bl	800154e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f833 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f7ff fea5 	bl	8000cb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f66:	f7ff ff35 	bl	8000dd4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000f6a:	f7ff faff 	bl	800056c <MX_CAN1_Init>
  MX_QUADSPI_Init();
 8000f6e:	f000 f893 	bl	8001098 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000f72:	f000 fa37 	bl	80013e4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000f76:	f008 fb2d 	bl	80095d4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_StatusTypeDef status1;

  status1 = CSP_QUADSPI_Init();
 8000f7a:	f7ff fc35 	bl	80007e8 <CSP_QUADSPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]

  uint8_t t_data = 76;
 8000f82:	234c      	movs	r3, #76	; 0x4c
 8000f84:	717b      	strb	r3, [r7, #5]
  uint8_t r_data;
  uint8_t status;


  status = BSP_QSPI_Write(&t_data, 0, sizeof(t_data));
 8000f86:	1d7b      	adds	r3, r7, #5
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fba7 	bl	80006e0 <BSP_QSPI_Write>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71bb      	strb	r3, [r7, #6]
  HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f000 fb4d 	bl	8001638 <HAL_Delay>
  status = BSP_QSPI_Read(&r_data, 0, sizeof(r_data));
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb59 	bl	800065c <BSP_QSPI_Read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]

  while (1)
  {
	  printf("Received: %d\n", r_data);
 8000fae:	793b      	ldrb	r3, [r7, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <main+0x70>)
 8000fb4:	f009 fa1a 	bl	800a3ec <iprintf>
	  HAL_Delay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f000 fb3c 	bl	8001638 <HAL_Delay>
	  printf("Received: %d\n", r_data);
 8000fc0:	e7f5      	b.n	8000fae <main+0x5a>
 8000fc2:	bf00      	nop
 8000fc4:	0800b0ec 	.word	0x0800b0ec

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	; 0x58
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2244      	movs	r2, #68	; 0x44
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f009 fa5d 	bl	800a496 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fee:	f002 fb63 	bl	80036b8 <HAL_PWREx_ControlVoltageScaling>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff8:	f000 f848 	bl	800108c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ffc:	f002 fb3e 	bl	800367c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <SystemClock_Config+0xc0>)
 8001002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <SystemClock_Config+0xc0>)
 8001008:	f023 0318 	bic.w	r3, r3, #24
 800100c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001010:	2314      	movs	r3, #20
 8001012:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001020:	2360      	movs	r3, #96	; 0x60
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001028:	2301      	movs	r3, #1
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001030:	2328      	movs	r3, #40	; 0x28
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001034:	2307      	movs	r3, #7
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f889 	bl	800415c <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001050:	f000 f81c 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2303      	movs	r3, #3
 800105a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	2104      	movs	r1, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fc51 	bl	8004914 <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001078:	f000 f808 	bl	800108c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800107c:	f004 f958 	bl	8005330 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001080:	bf00      	nop
 8001082:	3758      	adds	r7, #88	; 0x58
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_QUADSPI_Init+0x44>)
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <MX_QUADSPI_Init+0x48>)
 80010a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010b0:	2210      	movs	r2, #16
 80010b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 28;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010b6:	221c      	movs	r2, #28
 80010b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010bc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80010c0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_QUADSPI_Init+0x44>)
 80010ca:	f002 fb5b 	bl	8003784 <HAL_QSPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 80010d4:	f7ff ffda 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000204 	.word	0x20000204
 80010e0:	a0001000 	.word	0xa0001000

080010e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_QSPI_MspInit+0xb8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d145      	bne.n	8001192 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110a:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6513      	str	r3, [r2, #80]	; 0x50
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_QSPI_MspInit+0xbc>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800114e:	23c0      	movs	r3, #192	; 0xc0
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800115e:	230a      	movs	r3, #10
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fcd4 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001170:	f640 4303 	movw	r3, #3075	; 0xc03
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001182:	230a      	movs	r3, #10
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_QSPI_MspInit+0xc0>)
 800118e:	f000 fcc3 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	a0001000 	.word	0xa0001000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_QSPI_MspDeInit+0x3c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10f      	bne.n	80011da <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_QSPI_MspDeInit+0x40>)
 80011bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_QSPI_MspDeInit+0x40>)
 80011c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c4:	6513      	str	r3, [r2, #80]	; 0x50
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80011c6:	21c0      	movs	r1, #192	; 0xc0
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f000 fe4e 	bl	8001e6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11);
 80011d0:	f640 4103 	movw	r1, #3075	; 0xc03
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_QSPI_MspDeInit+0x44>)
 80011d6:	f000 fe49 	bl	8001e6c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	a0001000 	.word	0xa0001000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000400 	.word	0x48000400

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f9b8 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001290:	2020      	movs	r0, #32
 8001292:	f000 fef7 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <OTG_FS_IRQHandler+0x10>)
 80012a2:	f001 f997 	bl	80025d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200017b8 	.word	0x200017b8

080012b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e00a      	b.n	80012d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c2:	f3af 8000 	nop.w
 80012c6:	4601      	mov	r1, r0
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbf0      	blt.n	80012c2 <_read+0x12>
  }

  return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001312:	605a      	str	r2, [r3, #4]
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_isatty>:

int _isatty(int file)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f009 f8d6 	bl	800a534 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20018000 	.word	0x20018000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	20000248 	.word	0x20000248
 80013bc:	20002030 	.word	0x20002030

080013c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_USART2_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001428:	f004 f964 	bl	80056f4 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f7ff fe2b 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000024c 	.word	0x2000024c
 8001440:	40004400 	.word	0x40004400

08001444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ac      	sub	sp, #176	; 0xb0
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2288      	movs	r2, #136	; 0x88
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f009 f816 	bl	800a496 <memset>
  if(uartHandle->Instance==USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_UART_MspInit+0xb0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d13b      	bne.n	80014ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001474:	2302      	movs	r3, #2
 8001476:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fc6b 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff fdfe 	bl	800108c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149a:	6593      	str	r3, [r2, #88]	; 0x58
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c0:	230c      	movs	r3, #12
 80014c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d8:	2307      	movs	r3, #7
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f000 fb16 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	37b0      	adds	r7, #176	; 0xb0
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40021000 	.word	0x40021000

080014fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001500:	f7ff ff5e 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopForever+0x6>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopForever+0xe>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopForever+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152a:	f009 f809 	bl	800a540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152e:	f7ff fd11 	bl	8000f54 <main>

08001532 <LoopForever>:

LoopForever:
    b LoopForever
 8001532:	e7fe      	b.n	8001532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001534:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001540:	0800b1cc 	.word	0x0800b1cc
  ldr r2, =_sbss
 8001544:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001548:	20002030 	.word	0x20002030

0800154c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>

0800154e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fa5d 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f80e 	bl	8001580 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e001      	b.n	8001574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001570:	f7ff fe3e 	bl	80011f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001574:	79fb      	ldrb	r3, [r7, #7]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_InitTick+0x6c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_InitTick+0x70>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_InitTick+0x6c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fa69 	bl	8001a82 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d809      	bhi.n	80015d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 fa33 	bl	8001a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_InitTick+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e001      	b.n	80015e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	200002d4 	.word	0x200002d4

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200002d4 	.word	0x200002d4

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0ed      	b.n	800186e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe ff98 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff ffb4 	bl	8001620 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ba:	e012      	b.n	80016e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016bc:	f7ff ffb0 	bl	8001620 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d90b      	bls.n	80016e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0c5      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0e5      	beq.n	80016bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0202 	bic.w	r2, r2, #2
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001700:	f7ff ff8e 	bl	8001620 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001706:	e012      	b.n	800172e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001708:	f7ff ff8a 	bl	8001620 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d90b      	bls.n	800172e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e09f      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e5      	bne.n	8001708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e007      	b.n	8001766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e5b      	ldrb	r3, [r3, #25]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e007      	b.n	8001790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800178e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7e9b      	ldrb	r3, [r3, #26]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e007      	b.n	80017ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0220 	bic.w	r2, r2, #32
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7edb      	ldrb	r3, [r3, #27]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0210 	bic.w	r2, r2, #16
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f1b      	ldrb	r3, [r3, #28]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7f5b      	ldrb	r3, [r3, #29]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	ea42 0103 	orr.w	r1, r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d008      	beq.n	8001ac4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e022      	b.n	8001b0a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 020e 	bic.w	r2, r2, #14
 8001ad2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f003 021c 	and.w	r2, r3, #28
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	e17f      	b.n	8001e28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8171 	beq.w	8001e22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d005      	beq.n	8001b58 <HAL_GPIO_Init+0x40>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d130      	bne.n	8001bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 0201 	and.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d118      	bne.n	8001bf8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80ac 	beq.w	8001e22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	4a5e      	ldr	r2, [pc, #376]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_GPIO_Init+0x334>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x242>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x338>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x23e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_GPIO_Init+0x33c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x23a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <HAL_GPIO_Init+0x340>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x236>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4c      	ldr	r2, [pc, #304]	; (8001e5c <HAL_GPIO_Init+0x344>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x232>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4b      	ldr	r2, [pc, #300]	; (8001e60 <HAL_GPIO_Init+0x348>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x22e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4a      	ldr	r2, [pc, #296]	; (8001e64 <HAL_GPIO_Init+0x34c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x22a>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x244>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6c:	4937      	ldr	r1, [pc, #220]	; (8001e4c <HAL_GPIO_Init+0x334>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9e:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f47f ae78 	bne.w	8001b28 <HAL_GPIO_Init+0x10>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	48000400 	.word	0x48000400
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000c00 	.word	0x48000c00
 8001e5c:	48001000 	.word	0x48001000
 8001e60:	48001400 	.word	0x48001400
 8001e64:	48001800 	.word	0x48001800
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e7a:	e0cd      	b.n	8002018 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80c0 	beq.w	8002012 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001e92:	4a68      	ldr	r2, [pc, #416]	; (8002034 <HAL_GPIO_DeInit+0x1c8>)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d025      	beq.n	8001f08 <HAL_GPIO_DeInit+0x9c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HAL_GPIO_DeInit+0x1cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01f      	beq.n	8001f04 <HAL_GPIO_DeInit+0x98>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_GPIO_DeInit+0x1d0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d019      	beq.n	8001f00 <HAL_GPIO_DeInit+0x94>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a5c      	ldr	r2, [pc, #368]	; (8002040 <HAL_GPIO_DeInit+0x1d4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_DeInit+0x90>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a5b      	ldr	r2, [pc, #364]	; (8002044 <HAL_GPIO_DeInit+0x1d8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_DeInit+0x8c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a5a      	ldr	r2, [pc, #360]	; (8002048 <HAL_GPIO_DeInit+0x1dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_DeInit+0x88>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a59      	ldr	r2, [pc, #356]	; (800204c <HAL_GPIO_DeInit+0x1e0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_DeInit+0x84>
 8001eec:	2306      	movs	r3, #6
 8001eee:	e00c      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	e00a      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	e008      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001efc:	2303      	movs	r3, #3
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_DeInit+0x9e>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d132      	bne.n	8001f80 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	494b      	ldr	r1, [pc, #300]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4947      	ldr	r1, [pc, #284]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4944      	ldr	r1, [pc, #272]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4940      	ldr	r1, [pc, #256]	; (8002050 <HAL_GPIO_DeInit+0x1e4>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_GPIO_DeInit+0x1c8>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	4830      	ldr	r0, [pc, #192]	; (8002034 <HAL_GPIO_DeInit+0x1c8>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	400a      	ands	r2, r1
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2103      	movs	r1, #3
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	08d2      	lsrs	r2, r2, #3
 8001fb4:	4019      	ands	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	2101      	movs	r1, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f af2b 	bne.w	8001e7c <HAL_GPIO_DeInit+0x10>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f806 	bl	80020b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e08d      	b.n	80021f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe feaf 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e006      	b.n	8002152 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d108      	bne.n	800216c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69d9      	ldr	r1, [r3, #28]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d138      	bne.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002220:	2302      	movs	r3, #2
 8002222:	e032      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d139      	bne.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e033      	b.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2224      	movs	r2, #36	; 0x24
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002330:	b08f      	sub	sp, #60	; 0x3c
 8002332:	af0a      	add	r7, sp, #40	; 0x28
 8002334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e116      	b.n	800256e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f007 fb52 	bl	8009a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 ffad 	bl	80062de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	687e      	ldr	r6, [r7, #4]
 800238c:	466d      	mov	r5, sp
 800238e:	f106 0410 	add.w	r4, r6, #16
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239e:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a2:	1d33      	adds	r3, r6, #4
 80023a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	f003 febf 	bl	800612a <USB_CoreInit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0d7      	b.n	800256e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 ff9b 	bl	8006300 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	e04a      	b.n	8002466 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	333d      	adds	r3, #61	; 0x3d
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	333c      	adds	r3, #60	; 0x3c
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	b298      	uxth	r0, r3
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3356      	adds	r3, #86	; 0x56
 800240c:	4602      	mov	r2, r0
 800240e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3340      	adds	r3, #64	; 0x40
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3344      	adds	r3, #68	; 0x44
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3348      	adds	r3, #72	; 0x48
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	334c      	adds	r3, #76	; 0x4c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	3301      	adds	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d3af      	bcc.n	80023d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e044      	b.n	8002500 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	3301      	adds	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3b5      	bcc.n	8002476 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	687e      	ldr	r6, [r7, #4]
 8002512:	466d      	mov	r5, sp
 8002514:	f106 0410 	add.w	r4, r6, #16
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002524:	e885 0003 	stmia.w	r5, {r0, r1}
 8002528:	1d33      	adds	r3, r6, #4
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f003 ff33 	bl	8006398 <USB_DevInit>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e014      	b.n	800256e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f001 f869 	bl	8003634 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fee1 	bl	800732e <USB_DevDisconnect>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_Start+0x1c>
 800258e:	2302      	movs	r3, #2
 8002590:	e01c      	b.n	80025cc <HAL_PCD_Start+0x56>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fe82 	bl	80062bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 fe95 	bl	80072ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b08d      	sub	sp, #52	; 0x34
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 ff53 	bl	8007496 <USB_GetMode>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 847e 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 feb7 	bl	8007370 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8474 	beq.w	8002ef2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fea4 	bl	8007370 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 0202 	and.w	r2, r2, #2
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fe92 	bl	8007370 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b10      	cmp	r3, #16
 8002654:	d161      	bne.n	800271a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0210 	bic.w	r2, r2, #16
 8002664:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 020f 	and.w	r2, r3, #15
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	0c5b      	lsrs	r3, r3, #17
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	2b02      	cmp	r3, #2
 8002690:	d124      	bne.n	80026dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d035      	beq.n	800270a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	6a38      	ldr	r0, [r7, #32]
 80026b2:	f004 fcc9 	bl	8007048 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c2:	441a      	add	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d4:	441a      	add	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	e016      	b.n	800270a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	0c5b      	lsrs	r3, r3, #17
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d110      	bne.n	800270a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ee:	2208      	movs	r2, #8
 80026f0:	4619      	mov	r1, r3
 80026f2:	6a38      	ldr	r0, [r7, #32]
 80026f4:	f004 fca8 	bl	8007048 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002704:	441a      	add	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0210 	orr.w	r2, r2, #16
 8002718:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fe26 	bl	8007370 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800272e:	f040 80a7 	bne.w	8002880 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fe2b 	bl	8007396 <USB_ReadDevAllOutEpInterrupt>
 8002740:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002742:	e099      	b.n	8002878 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 808e 	beq.w	800286c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fe4f 	bl	80073fe <USB_ReadDevOutEPInterrupt>
 8002760:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002778:	461a      	mov	r2, r3
 800277a:	2301      	movs	r3, #1
 800277c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800277e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fe7d 	bl	8003480 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279c:	461a      	mov	r2, r3
 800279e:	2308      	movs	r3, #8
 80027a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 feb9 	bl	800351c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c0:	461a      	mov	r2, r3
 80027c2:	2310      	movs	r3, #16
 80027c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d030      	beq.n	8002832 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d109      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	78db      	ldrb	r3, [r3, #3]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f007 fa46 	bl	8009cac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	2302      	movs	r3, #2
 8002830:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	461a      	mov	r2, r3
 800284a:	2320      	movs	r3, #32
 800284c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3301      	adds	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	f47f af62 	bne.w	8002744 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f004 fd73 	bl	8007370 <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002894:	f040 80a4 	bne.w	80029e0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 fd94 	bl	80073ca <USB_ReadDevAllInEpInterrupt>
 80028a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028a8:	e096      	b.n	80029d8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 808b 	beq.w	80029cc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fdba 	bl	800743a <USB_ReadDevInEPInterrupt>
 80028c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	2201      	movs	r2, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69f9      	ldr	r1, [r7, #28]
 80028ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028f2:	4013      	ands	r3, r2
 80028f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002902:	461a      	mov	r2, r3
 8002904:	2301      	movs	r3, #1
 8002906:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f007 f937 	bl	8009b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	461a      	mov	r2, r3
 800292c:	2308      	movs	r3, #8
 800292e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002946:	461a      	mov	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002962:	461a      	mov	r2, r3
 8002964:	2340      	movs	r3, #64	; 0x40
 8002966:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d023      	beq.n	80029ba <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002974:	6a38      	ldr	r0, [r7, #32]
 8002976:	f003 fe51 	bl	800661c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	3338      	adds	r3, #56	; 0x38
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	78db      	ldrb	r3, [r3, #3]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d108      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f007 f994 	bl	8009cd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b4:	461a      	mov	r2, r3
 80029b6:	2302      	movs	r3, #2
 80029b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fcd2 	bl	8003370 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f47f af65 	bne.w	80028aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 fcc3 	bl	8007370 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029f4:	d122      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f007 fbc8 	bl	800a1b4 <HAL_PCDEx_LPM_Callback>
 8002a24:	e002      	b.n	8002a2c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f007 f918 	bl	8009c5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fc95 	bl	8007370 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a50:	d112      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f007 f8d4 	bl	8009c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 fc77 	bl	8007370 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d121      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002a9c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f007 fb75 	bl	800a1b4 <HAL_PCDEx_LPM_Callback>
 8002aca:	e002      	b.n	8002ad2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f007 f89f 	bl	8009c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fc4a 	bl	8007370 <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae6:	f040 80b5 	bne.w	8002c54 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2110      	movs	r1, #16
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fd89 	bl	800661c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	e046      	b.n	8002b9e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b34:	0151      	lsls	r1, r2, #5
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	440a      	add	r2, r1
 8002b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b68:	0151      	lsls	r1, r2, #5
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b88:	0151      	lsls	r1, r2, #5
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3b3      	bcc.n	8002b10 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd4:	f043 030b 	orr.w	r3, r3, #11
 8002bd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bea:	f043 030b 	orr.w	r3, r3, #11
 8002bee:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf0:	e015      	b.n	8002c1e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c18:	f043 030b 	orr.w	r3, r3, #11
 8002c1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f004 fc5a 	bl	80074f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fb89 	bl	8007370 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c68:	d124      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fc1f 	bl	80074b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fd4c 	bl	8006716 <USB_GetDevSpeed>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681c      	ldr	r4, [r3, #0]
 8002c8a:	f001 ffcf 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8002c8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f003 fa73 	bl	8006184 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f006 ff97 	bl	8009bd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 fb59 	bl	8007370 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d10a      	bne.n	8002cde <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f006 ff74 	bl	8009bb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 0208 	and.w	r2, r2, #8
 8002cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 fb44 	bl	8007370 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d122      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
 8002d02:	e014      	b.n	8002d2e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 faf3 	bl	800330e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3e5      	bcc.n	8002d04 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fb17 	bl	8007370 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4c:	d13b      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4e:	2301      	movs	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e02b      	b.n	8002dac <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3340      	adds	r3, #64	; 0x40
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d115      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da12      	bge.n	8002da6 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	333f      	adds	r3, #63	; 0x3f
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fab4 	bl	800330e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d3ce      	bcc.n	8002d54 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 fad0 	bl	8007370 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dda:	d155      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ddc:	2301      	movs	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	e045      	b.n	8002e6e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d12e      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da2b      	bge.n	8002e68 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d121      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e64:	6053      	str	r3, [r2, #4]
            break;
 8002e66:	e007      	b.n	8002e78 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3b4      	bcc.n	8002de2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fa6f 	bl	8007370 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f006 ff28 	bl	8009cf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fa59 	bl	8007370 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d115      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f006 ff18 	bl	8009d10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	e000      	b.n	8002ef4 <HAL_PCD_IRQHandler+0x920>
      return;
 8002ef2:	bf00      	nop
    }
  }
}
 8002ef4:	3734      	adds	r7, #52	; 0x34
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}

08002efa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_PCD_SetAddress+0x1a>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e013      	b.n	8002f3c <HAL_PCD_SetAddress+0x42>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 f9b7 	bl	80072a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	70fb      	strb	r3, [r7, #3]
 8002f56:	460b      	mov	r3, r1
 8002f58:	803b      	strh	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da0f      	bge.n	8002f8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	3338      	adds	r3, #56	; 0x38
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	705a      	strb	r2, [r3, #1]
 8002f88:	e00f      	b.n	8002faa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fb6:	883a      	ldrh	r2, [r7, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	78ba      	ldrb	r2, [r7, #2]
 8002fc0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d102      	bne.n	8002fe0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_EP_Open+0xaa>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e00e      	b.n	800300c <HAL_PCD_EP_Open+0xc8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fba9 	bl	8006754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800300a:	7afb      	ldrb	r3, [r7, #11]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	da0f      	bge.n	8003048 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3338      	adds	r3, #56	; 0x38
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e00f      	b.n	8003068 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_PCD_EP_Close+0x6e>
 800307e:	2302      	movs	r3, #2
 8003080:	e00e      	b.n	80030a0 <HAL_PCD_EP_Close+0x8c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fbe7 	bl	8006864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	460b      	mov	r3, r1
 80030b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2200      	movs	r2, #0
 80030e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fc8d 	bl	8006a1c <USB_EPStartXfer>

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3338      	adds	r3, #56	; 0x38
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2201      	movs	r2, #1
 800317a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	b2da      	uxtb	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6979      	ldr	r1, [r7, #20]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fc44 	bl	8006a1c <USB_EPStartXfer>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d901      	bls.n	80031bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e04e      	b.n	800325a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da0f      	bge.n	80031e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3338      	adds	r3, #56	; 0x38
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e00d      	b.n	8003200 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_PCD_EP_SetStall+0x82>
 800321c:	2302      	movs	r3, #2
 800321e:	e01c      	b.n	800325a <HAL_PCD_EP_SetStall+0xbc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 ff62 	bl	80070f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f004 f954 	bl	80074f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d901      	bls.n	8003280 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e042      	b.n	8003306 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da0f      	bge.n	80032a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3338      	adds	r3, #56	; 0x38
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
 80032a6:	e00f      	b.n	80032c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_EP_ClrStall+0x86>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e00e      	b.n	8003306 <HAL_PCD_EP_ClrStall+0xa4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 ff6c 	bl	80071d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800331a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331e:	2b00      	cmp	r3, #0
 8003320:	da0c      	bge.n	800333c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3338      	adds	r3, #56	; 0x38
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e00c      	b.n	8003356 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fd8f 	bl	8006e80 <USB_EPStopXfer>
 8003362:	4603      	mov	r3, r0
 8003364:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003366:	7afb      	ldrb	r3, [r7, #11]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d901      	bls.n	80033a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e067      	b.n	8003478 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d902      	bls.n	80033c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3303      	adds	r3, #3
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033cc:	e026      	b.n	800341c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d902      	bls.n	80033ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3303      	adds	r3, #3
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f003 fde8 	bl	8006fd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	441a      	add	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	429a      	cmp	r2, r3
 8003430:	d809      	bhi.n	8003446 <PCD_WriteEmptyTxFifo+0xd6>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800343a:	429a      	cmp	r2, r3
 800343c:	d203      	bcs.n	8003446 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1c3      	bne.n	80033ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d811      	bhi.n	8003476 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	2201      	movs	r2, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	43db      	mvns	r3, r3
 800346c:	6939      	ldr	r1, [r7, #16]
 800346e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003472:	4013      	ands	r3, r2
 8003474:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	333c      	adds	r3, #60	; 0x3c
 8003498:	3304      	adds	r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <PCD_EP_OutXfrComplete_int+0x98>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d124      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	e01a      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	2320      	movs	r3, #32
 80034f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f006 fb27 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
 80034fe:	e005      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f006 fb20 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	4f54310a 	.word	0x4f54310a

0800351c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	333c      	adds	r3, #60	; 0x3c
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <PCD_EP_OutSetupPacket_int+0x64>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d90e      	bls.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f006 fad9 	bl	8009b28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	4f54300a 	.word	0x4f54300a

08003584 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
 8003590:	4613      	mov	r3, r2
 8003592:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035a2:	883b      	ldrh	r3, [r7, #0]
 80035a4:	0419      	lsls	r1, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
 80035b0:	e028      	b.n	8003604 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e00d      	b.n	80035e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3340      	adds	r3, #64	; 0x40
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4413      	add	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	3301      	adds	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3ec      	bcc.n	80035c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035ec:	883b      	ldrh	r3, [r7, #0]
 80035ee:	0418      	lsls	r0, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4302      	orrs	r2, r0
 80035fc:	3340      	adds	r3, #64	; 0x40
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	f043 0303 	orr.w	r3, r3, #3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40007000 	.word	0x40007000

0800369c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40007000 	.word	0x40007000

080036b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c6:	d130      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d038      	beq.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2232      	movs	r2, #50	; 0x32
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0c9b      	lsrs	r3, r3, #18
 80036f8:	3301      	adds	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fc:	e002      	b.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3b01      	subs	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d102      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f2      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003724:	d110      	bne.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e00f      	b.n	800374a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d007      	beq.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003740:	4a05      	ldr	r2, [pc, #20]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003746:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000
 800375c:	20000000 	.word	0x20000000
 8003760:	431bde83 	.word	0x431bde83

08003764 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_PWREx_EnableVddUSB+0x1c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_PWREx_EnableVddUSB+0x1c>)
 800376e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003772:	6053      	str	r3, [r2, #4]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000

08003784 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fd ff48 	bl	8001620 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e063      	b.n	8003864 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fc97 	bl	80010e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fb03 	bl	8003dc6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	021a      	lsls	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	2120      	movs	r1, #32
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fafb 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d131      	bne.n	800385a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003800:	f023 0310 	bic.w	r3, r3, #16
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6852      	ldr	r2, [r2, #4]
 8003808:	0611      	lsls	r1, r2, #24
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_QSPI_Init+0xe8>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6912      	ldr	r2, [r2, #16]
 8003826:	0411      	lsls	r1, r2, #16
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6952      	ldr	r2, [r2, #20]
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6992      	ldr	r2, [r2, #24]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003862:	7afb      	ldrb	r3, [r7, #11]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	ffe0f8fe 	.word	0xffe0f8fe

08003870 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e016      	b.n	80038b0 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd fc88 	bl	80011a8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7fd feac 	bl	8001620 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_QSPI_Command+0x22>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e048      	b.n	800396c <HAL_QSPI_Command+0xb4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d137      	bne.n	800395e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2200      	movs	r2, #0
 8003904:	2120      	movs	r1, #32
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa6b 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d125      	bne.n	8003962 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003916:	2200      	movs	r2, #0
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fa98 	bl	8003e50 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2201      	movs	r2, #1
 8003930:	2102      	movs	r1, #2
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa55 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2202      	movs	r2, #2
 8003948:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003952:	e006      	b.n	8003962 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800395c:	e001      	b.n	8003962 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fd fe4c 	bl	8001620 <HAL_GetTick>
 8003988:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3320      	adds	r3, #32
 8003990:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_QSPI_Transmit+0x2e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e07b      	b.n	8003a9a <HAL_QSPI_Transmit+0x126>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d16a      	bne.n	8003a8c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05b      	beq.n	8003a7a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2212      	movs	r2, #18
 80039c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80039f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80039f8:	e01b      	b.n	8003a32 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2201      	movs	r2, #1
 8003a02:	2104      	movs	r1, #4
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9ec 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d113      	bne.n	8003a3c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1df      	bne.n	80039fa <HAL_QSPI_Transmit+0x86>
 8003a3a:	e000      	b.n	8003a3e <HAL_QSPI_Transmit+0xca>
          break;
 8003a3c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d115      	bne.n	8003a70 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f9c7 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003a58:	7ffb      	ldrb	r3, [r7, #31]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f934 	bl	8003cd4 <HAL_QSPI_Abort>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003a78:	e00a      	b.n	8003a90 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	f043 0208 	orr.w	r2, r3, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e001      	b.n	8003a90 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b08a      	sub	sp, #40	; 0x28
 8003aa6:	af02      	add	r7, sp, #8
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003ab2:	f7fd fdb5 	bl	8001620 <HAL_GetTick>
 8003ab6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_QSPI_Receive+0x36>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e082      	b.n	8003bde <HAL_QSPI_Receive+0x13c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d171      	bne.n	8003bd0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d062      	beq.n	8003bbe <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2222      	movs	r2, #34	; 0x22
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b30:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003b3a:	e01c      	b.n	8003b76 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2201      	movs	r2, #1
 8003b44:	2106      	movs	r1, #6
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f94b 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003b50:	7ffb      	ldrb	r3, [r7, #31]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d114      	bne.n	8003b80 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1de      	bne.n	8003b3c <HAL_QSPI_Receive+0x9a>
 8003b7e:	e000      	b.n	8003b82 <HAL_QSPI_Receive+0xe0>
          break;
 8003b80:	bf00      	nop
      }

      if (status == HAL_OK)
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d115      	bne.n	8003bb4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2102      	movs	r1, #2
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f925 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f892 	bl	8003cd4 <HAL_QSPI_Abort>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003bbc:	e00a      	b.n	8003bd4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e001      	b.n	8003bd4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7fd fd14 	bl	8001620 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_QSPI_AutoPolling+0x24>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e060      	b.n	8003ccc <HAL_QSPI_AutoPolling+0xe6>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d14f      	bne.n	8003cbe <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2242      	movs	r2, #66	; 0x42
 8003c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2120      	movs	r1, #32
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f8d3 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13d      	bne.n	8003cc2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6852      	ldr	r2, [r2, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6892      	ldr	r2, [r2, #8]
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c7c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f8df 	bl	8003e50 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8a0 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003cbc:	e001      	b.n	8003cc2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7fd fc9e 	bl	8001620 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d062      	beq.n	8003dbc <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd feba 	bl	8001a9a <HAL_DMA_Abort>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d034      	beq.n	8003db4 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0202 	orr.w	r2, r2, #2
 8003d58:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2201      	movs	r2, #1
 8003d64:	2102      	movs	r1, #2
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f83b 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2120      	movs	r1, #32
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f829 	bl	8003de2 <QSPI_WaitFlagStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d110      	bne.n	8003dbc <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003da8:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003db2:	e003      	b.n	8003dbc <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003df2:	e01a      	b.n	8003e2a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d016      	beq.n	8003e2a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fd fc10 	bl	8001620 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2204      	movs	r2, #4
 8003e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00e      	b.n	8003e48 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d1d6      	bne.n	8003df4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <QSPI_Config+0x28>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e6a:	d005      	beq.n	8003e78 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3a01      	subs	r2, #1
 8003e76:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80b9 	beq.w	8003ff4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d05f      	beq.n	8003f4a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d031      	beq.n	8003f00 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	049b      	lsls	r3, r3, #18
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ef0:	f000 812e 	beq.w	8004150 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003efe:	e127      	b.n	8004150 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	049b      	lsls	r3, r3, #18
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	ea42 0103 	orr.w	r1, r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	615a      	str	r2, [r3, #20]
}
 8003f48:	e102      	b.n	8004150 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	049b      	lsls	r3, r3, #18
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ea42 0103 	orr.w	r1, r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fa0:	f000 80d6 	beq.w	8004150 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	6852      	ldr	r2, [r2, #4]
 8003fac:	619a      	str	r2, [r3, #24]
}
 8003fae:	e0cf      	b.n	8004150 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	049b      	lsls	r3, r3, #18
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	ea42 0103 	orr.w	r1, r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	615a      	str	r2, [r3, #20]
}
 8003ff2:	e0ad      	b.n	8004150 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d058      	beq.n	80040ae <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	6892      	ldr	r2, [r2, #8]
 8004004:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02d      	beq.n	800406a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	431a      	orrs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	431a      	orrs	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	431a      	orrs	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	049b      	lsls	r3, r3, #18
 800402a:	431a      	orrs	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	431a      	orrs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	431a      	orrs	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	431a      	orrs	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	ea42 0103 	orr.w	r1, r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	430a      	orrs	r2, r1
 8004054:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800405c:	d078      	beq.n	8004150 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	6852      	ldr	r2, [r2, #4]
 8004066:	619a      	str	r2, [r3, #24]
}
 8004068:	e072      	b.n	8004150 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	431a      	orrs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	431a      	orrs	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	431a      	orrs	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	049b      	lsls	r3, r3, #18
 8004086:	431a      	orrs	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	431a      	orrs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	ea42 0103 	orr.w	r1, r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	615a      	str	r2, [r3, #20]
}
 80040ac:	e050      	b.n	8004150 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02a      	beq.n	800410c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	431a      	orrs	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	049b      	lsls	r3, r3, #18
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	431a      	orrs	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	ea42 0103 	orr.w	r1, r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040fe:	d027      	beq.n	8004150 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	e021      	b.n	8004150 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01d      	beq.n	8004150 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	431a      	orrs	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	431a      	orrs	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	049b      	lsls	r3, r3, #18
 8004130:	431a      	orrs	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	431a      	orrs	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	ea42 0103 	orr.w	r1, r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	430a      	orrs	r2, r1
 800414e:	615a      	str	r2, [r3, #20]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e3ca      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416e:	4b97      	ldr	r3, [pc, #604]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004178:	4b94      	ldr	r3, [pc, #592]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80e4 	beq.w	8004358 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_RCC_OscConfig+0x4a>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	f040 808b 	bne.w	80042b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	f040 8087 	bne.w	80042b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041a6:	4b89      	ldr	r3, [pc, #548]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x62>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e3a2      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <HAL_RCC_OscConfig+0x7c>
 80041ce:	4b7f      	ldr	r3, [pc, #508]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d6:	e005      	b.n	80041e4 <HAL_RCC_OscConfig+0x88>
 80041d8:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d223      	bcs.n	8004230 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fd55 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e383      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fc:	4b73      	ldr	r3, [pc, #460]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a72      	ldr	r2, [pc, #456]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b70      	ldr	r3, [pc, #448]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	496d      	ldr	r1, [pc, #436]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421a:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	4968      	ldr	r1, [pc, #416]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
 800422e:	e025      	b.n	800427c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004230:	4b66      	ldr	r3, [pc, #408]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a65      	ldr	r2, [pc, #404]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4960      	ldr	r1, [pc, #384]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800424e:	4b5f      	ldr	r3, [pc, #380]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	495b      	ldr	r1, [pc, #364]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fd15 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e343      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800427c:	f000 fc4a 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b52      	ldr	r3, [pc, #328]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	4950      	ldr	r1, [pc, #320]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 800429a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800429c:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd f96d 	bl	8001580 <HAL_InitTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d052      	beq.n	8004356 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	e327      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d032      	beq.n	8004322 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042bc:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a42      	ldr	r2, [pc, #264]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042c8:	f7fd f9aa 	bl	8001620 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d0:	f7fd f9a6 	bl	8001620 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e310      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e2:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ee:	4b37      	ldr	r3, [pc, #220]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a36      	ldr	r2, [pc, #216]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042f4:	f043 0308 	orr.w	r3, r3, #8
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b34      	ldr	r3, [pc, #208]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4931      	ldr	r1, [pc, #196]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	492c      	ldr	r1, [pc, #176]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
 8004320:	e01a      	b.n	8004358 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a29      	ldr	r2, [pc, #164]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800432e:	f7fd f977 	bl	8001620 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004336:	f7fd f973 	bl	8001620 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e2dd      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004348:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x1da>
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004356:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d074      	beq.n	800444e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x21a>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d10e      	bne.n	800438e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d10b      	bne.n	800438e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d064      	beq.n	800444c <HAL_RCC_OscConfig+0x2f0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d160      	bne.n	800444c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e2ba      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x24a>
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e026      	b.n	80043f4 <HAL_RCC_OscConfig+0x298>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ae:	d115      	bne.n	80043dc <HAL_RCC_OscConfig+0x280>
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a05      	ldr	r2, [pc, #20]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80043b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a02      	ldr	r2, [pc, #8]	; (80043cc <HAL_RCC_OscConfig+0x270>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x298>
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800b140 	.word	0x0800b140
 80043d4:	20000000 	.word	0x20000000
 80043d8:	20000004 	.word	0x20000004
 80043dc:	4ba0      	ldr	r3, [pc, #640]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a9f      	ldr	r2, [pc, #636]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b9d      	ldr	r3, [pc, #628]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a9c      	ldr	r2, [pc, #624]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd f910 	bl	8001620 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd f90c 	bl	8001620 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e276      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004416:	4b92      	ldr	r3, [pc, #584]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x2a8>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd f8fc 	bl	8001620 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd f8f8 	bl	8001620 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e262      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x2d0>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d060      	beq.n	800451c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d005      	beq.n	800446c <HAL_RCC_OscConfig+0x310>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d119      	bne.n	800449a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d116      	bne.n	800449a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	4b7c      	ldr	r3, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_OscConfig+0x328>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e23f      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b76      	ldr	r3, [pc, #472]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	4973      	ldr	r1, [pc, #460]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	e040      	b.n	800451c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d023      	beq.n	80044ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a2:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd f8b7 	bl	8001620 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b6:	f7fd f8b3 	bl	8001620 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e21d      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c8:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	495f      	ldr	r1, [pc, #380]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	e018      	b.n	800451c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a5c      	ldr	r2, [pc, #368]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd f893 	bl	8001620 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fe:	f7fd f88f 	bl	8001620 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1f9      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004510:	4b53      	ldr	r3, [pc, #332]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03c      	beq.n	80045a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01c      	beq.n	800456a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd f86e 	bl	8001620 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004548:	f7fd f86a 	bl	8001620 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1d4      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800455c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <HAL_RCC_OscConfig+0x3ec>
 8004568:	e01b      	b.n	80045a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456a:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004570:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fd f851 	bl	8001620 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fd f84d 	bl	8001620 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1b7      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004594:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ef      	bne.n	8004582 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80a6 	beq.w	80046fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ca:	6593      	str	r3, [r2, #88]	; 0x58
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d8:	2301      	movs	r3, #1
 80045da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045dc:	4b21      	ldr	r3, [pc, #132]	; (8004664 <HAL_RCC_OscConfig+0x508>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d118      	bne.n	800461a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCC_OscConfig+0x508>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_RCC_OscConfig+0x508>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f4:	f7fd f814 	bl	8001620 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fc:	f7fd f810 	bl	8001620 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e17a      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_RCC_OscConfig+0x508>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <HAL_RCC_OscConfig+0x4d8>
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004632:	e029      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d115      	bne.n	8004668 <HAL_RCC_OscConfig+0x50c>
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	4a03      	ldr	r2, [pc, #12]	; (8004660 <HAL_RCC_OscConfig+0x504>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800465c:	e014      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	4a9b      	ldr	r2, [pc, #620]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004678:	4b98      	ldr	r3, [pc, #608]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a97      	ldr	r2, [pc, #604]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc ffc6 	bl	8001620 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc ffc2 	bl	8001620 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e12a      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	4b8b      	ldr	r3, [pc, #556]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ed      	beq.n	8004698 <HAL_RCC_OscConfig+0x53c>
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fc ffaf 	bl	8001620 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fc ffab 	bl	8001620 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e113      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046dc:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ed      	bne.n	80046c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ea:	7ffb      	ldrb	r3, [r7, #31]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f0:	4b7a      	ldr	r3, [pc, #488]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	4a79      	ldr	r2, [pc, #484]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80fe 	beq.w	8004902 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	2b02      	cmp	r3, #2
 800470c:	f040 80d0 	bne.w	80048b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004710:	4b72      	ldr	r3, [pc, #456]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0203 	and.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	429a      	cmp	r2, r3
 8004722:	d130      	bne.n	8004786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	3b01      	subs	r3, #1
 8004730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d127      	bne.n	8004786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d11f      	bne.n	8004786 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004750:	2a07      	cmp	r2, #7
 8004752:	bf14      	ite	ne
 8004754:	2201      	movne	r2, #1
 8004756:	2200      	moveq	r2, #0
 8004758:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800475a:	4293      	cmp	r3, r2
 800475c:	d113      	bne.n	8004786 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d109      	bne.n	8004786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d06e      	beq.n	8004864 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d069      	beq.n	8004860 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0ad      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047a8:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a4b      	ldr	r2, [pc, #300]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b4:	f7fc ff34 	bl	8001620 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fc ff30 	bl	8001620 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e09a      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047da:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <HAL_RCC_OscConfig+0x784>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ea:	3a01      	subs	r2, #1
 80047ec:	0112      	lsls	r2, r2, #4
 80047ee:	4311      	orrs	r1, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047f4:	0212      	lsls	r2, r2, #8
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047fc:	0852      	lsrs	r2, r2, #1
 80047fe:	3a01      	subs	r2, #1
 8004800:	0552      	lsls	r2, r2, #21
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004808:	0852      	lsrs	r2, r2, #1
 800480a:	3a01      	subs	r2, #1
 800480c:	0652      	lsls	r2, r2, #25
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004814:	0912      	lsrs	r2, r2, #4
 8004816:	0452      	lsls	r2, r2, #17
 8004818:	430a      	orrs	r2, r1
 800481a:	4930      	ldr	r1, [pc, #192]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800481c:	4313      	orrs	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004820:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2d      	ldr	r2, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004838:	f7fc fef2 	bl	8001620 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fc feee 	bl	8001620 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e058      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800485e:	e050      	b.n	8004902 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e04f      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d148      	bne.n	8004902 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a19      	ldr	r2, [pc, #100]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a16      	ldr	r2, [pc, #88]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 8004882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004888:	f7fc feca 	bl	8001620 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004890:	f7fc fec6 	bl	8001620 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e030      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x734>
 80048ae:	e028      	b.n	8004902 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d023      	beq.n	80048fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a08      	ldr	r2, [pc, #32]	; (80048dc <HAL_RCC_OscConfig+0x780>)
 80048bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fc fead 	bl	8001620 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c8:	e00c      	b.n	80048e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fc fea9 	bl	8001620 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d905      	bls.n	80048e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e013      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
 80048dc:	40021000 	.word	0x40021000
 80048e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_OscConfig+0x7b0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ec      	bne.n	80048ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_RCC_OscConfig+0x7b0>)
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	4905      	ldr	r1, [pc, #20]	; (800490c <HAL_RCC_OscConfig+0x7b0>)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x7b4>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	60cb      	str	r3, [r1, #12]
 80048fc:	e001      	b.n	8004902 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	feeefffc 	.word	0xfeeefffc

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0e7      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b75      	ldr	r3, [pc, #468]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4970      	ldr	r1, [pc, #448]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b6e      	ldr	r3, [pc, #440]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0cf      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004970:	429a      	cmp	r2, r3
 8004972:	d908      	bls.n	8004986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b63      	ldr	r3, [pc, #396]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4960      	ldr	r1, [pc, #384]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04c      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0a6      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	4b54      	ldr	r3, [pc, #336]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e09a      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e08e      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e086      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b46      	ldr	r3, [pc, #280]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4943      	ldr	r1, [pc, #268]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fc fe10 	bl	8001620 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fc fe0c 	bl	8001620 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e06e      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d208      	bcs.n	8004a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	492b      	ldr	r1, [pc, #172]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d210      	bcs.n	8004a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 0207 	bic.w	r2, r3, #7
 8004a70:	4923      	ldr	r1, [pc, #140]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e036      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4918      	ldr	r1, [pc, #96]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4910      	ldr	r1, [pc, #64]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac8:	f000 f824 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	490b      	ldr	r1, [pc, #44]	; (8004b08 <HAL_RCC_ClockConfig+0x1f4>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_ClockConfig+0x1fc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fc fd47 	bl	8001580 <HAL_InitTick>
 8004af2:	4603      	mov	r3, r0
 8004af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004af6:	7afb      	ldrb	r3, [r7, #11]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0800b140 	.word	0x0800b140
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004

08004b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x34>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d121      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d11e      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b48:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b54:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b70:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e004      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b98:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d134      	bne.n	8004c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0xa6>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bba:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bbc:	617b      	str	r3, [r7, #20]
      break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bc2:	617b      	str	r3, [r7, #20]
      break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	617b      	str	r3, [r7, #20]
      break;
 8004bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	fb03 f202 	mul.w	r2, r3, r2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0e5b      	lsrs	r3, r3, #25
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800b158 	.word	0x0800b158
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	017d7840 	.word	0x017d7840

08004c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c48:	f7ff fff0 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	0800b150 	.word	0x0800b150

08004c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c74:	f7ff ffda 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0adb      	lsrs	r3, r3, #11
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800b150 	.word	0x0800b150

08004c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cb4:	f7fe fcf2 	bl	800369c <HAL_PWREx_GetVoltageRange>
 8004cb8:	6178      	str	r0, [r7, #20]
 8004cba:	e014      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cd4:	f7fe fce2 	bl	800369c <HAL_PWREx_GetVoltageRange>
 8004cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d10b      	bne.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d919      	bls.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cf8:	d902      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e013      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d00:	2301      	movs	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e010      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d902      	bls.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e00a      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d102      	bne.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d18:	2302      	movs	r3, #2
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e004      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d101      	bne.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 0207 	bic.w	r2, r3, #7
 8004d30:	4909      	ldr	r1, [pc, #36]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40022000 	.word	0x40022000

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d64:	2300      	movs	r3, #0
 8004d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d041      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d80:	d02a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d86:	d824      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8c:	d008      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d92:	d81e      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da0:	4b86      	ldr	r3, [pc, #536]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a85      	ldr	r2, [pc, #532]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004daa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dac:	e015      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 facb 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dbe:	e00c      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3320      	adds	r3, #32
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbb6 	bl	8005538 <RCCEx_PLLSAI2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de0:	4b76      	ldr	r3, [pc, #472]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	4973      	ldr	r1, [pc, #460]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004df6:	e001      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d041      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e10:	d02a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e16:	d824      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e1c:	d008      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e22:	d81e      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2c:	d010      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e2e:	e018      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e30:	4b62      	ldr	r3, [pc, #392]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a61      	ldr	r2, [pc, #388]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e3c:	e015      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fa83 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e4e:	e00c      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3320      	adds	r3, #32
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb6e 	bl	8005538 <RCCEx_PLLSAI2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	74fb      	strb	r3, [r7, #19]
      break;
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6a:	7cfb      	ldrb	r3, [r7, #19]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e70:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7e:	494f      	ldr	r1, [pc, #316]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a0 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a40      	ldr	r2, [pc, #256]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004edc:	f7fc fba0 	bl	8001620 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee4:	f7fc fb9c 	bl	8001620 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ef6:	e005      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d15c      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d019      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fc fb5b 	bl	8001620 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fc fb57 	bl	8001620 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d902      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	74fb      	strb	r3, [r7, #19]
            break;
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ec      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9a:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004faa:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7cfb      	ldrb	r3, [r7, #19]
 8004fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc8:	7c7b      	ldrb	r3, [r7, #17]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fce:	4b9e      	ldr	r3, [pc, #632]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a9d      	ldr	r2, [pc, #628]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fe6:	4b98      	ldr	r3, [pc, #608]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 0203 	bic.w	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	4994      	ldr	r1, [pc, #592]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005008:	4b8f      	ldr	r3, [pc, #572]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 020c 	bic.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	498c      	ldr	r1, [pc, #560]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800502a:	4b87      	ldr	r3, [pc, #540]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	4983      	ldr	r1, [pc, #524]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	497b      	ldr	r1, [pc, #492]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800506e:	4b76      	ldr	r3, [pc, #472]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	4972      	ldr	r1, [pc, #456]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005090:	4b6d      	ldr	r3, [pc, #436]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	496a      	ldr	r1, [pc, #424]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	4961      	ldr	r1, [pc, #388]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050d4:	4b5c      	ldr	r3, [pc, #368]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	4959      	ldr	r1, [pc, #356]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f6:	4b54      	ldr	r3, [pc, #336]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	4950      	ldr	r1, [pc, #320]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005118:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	4948      	ldr	r1, [pc, #288]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513a:	4b43      	ldr	r3, [pc, #268]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	493f      	ldr	r1, [pc, #252]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d028      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	4937      	ldr	r1, [pc, #220]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517a:	d106      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
 8005188:	e011      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005192:	d10c      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f8d8 	bl	8005350 <RCCEx_PLLSAI1_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d028      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	491f      	ldr	r1, [pc, #124]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d8:	d106      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e4:	60d3      	str	r3, [r2, #12]
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051f0:	d10c      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f8a9 	bl	8005350 <RCCEx_PLLSAI1_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	4908      	ldr	r1, [pc, #32]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005236:	d109      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
 8005244:	e014      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f877 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	4928      	ldr	r1, [pc, #160]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800529a:	d10d      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f854 	bl	8005350 <RCCEx_PLLSAI1_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	74bb      	strb	r3, [r7, #18]
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3320      	adds	r3, #32
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f935 	bl	8005538 <RCCEx_PLLSAI2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	490d      	ldr	r1, [pc, #52]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800530a:	4b08      	ldr	r3, [pc, #32]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4904      	ldr	r1, [pc, #16]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005322:	7cbb      	ldrb	r3, [r7, #18]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000

08005330 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800533a:	f043 0304 	orr.w	r3, r3, #4
 800533e:	6013      	str	r3, [r2, #0]
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000

08005350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800535e:	4b75      	ldr	r3, [pc, #468]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800536a:	4b72      	ldr	r3, [pc, #456]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0203 	and.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d10d      	bne.n	8005396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
       ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005382:	4b6c      	ldr	r3, [pc, #432]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
       ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d047      	beq.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	e044      	b.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d018      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0x86>
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d825      	bhi.n	80053f4 <RCCEx_PLLSAI1_Config+0xa4>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d002      	beq.n	80053b2 <RCCEx_PLLSAI1_Config+0x62>
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d009      	beq.n	80053c4 <RCCEx_PLLSAI1_Config+0x74>
 80053b0:	e020      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053b2:	4b60      	ldr	r3, [pc, #384]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11d      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c2:	e01a      	b.n	80053fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053c4:	4b5b      	ldr	r3, [pc, #364]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d116      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d4:	e013      	b.n	80053fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053d6:	4b57      	ldr	r3, [pc, #348]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053e2:	4b54      	ldr	r3, [pc, #336]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053f2:	e006      	b.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      break;
 80053f8:	e004      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005402:	bf00      	nop
    }

    if(status == HAL_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6819      	ldr	r1, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	3b01      	subs	r3, #1
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	430b      	orrs	r3, r1
 8005420:	4944      	ldr	r1, [pc, #272]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d17d      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800542c:	4b41      	ldr	r3, [pc, #260]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a40      	ldr	r2, [pc, #256]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fc f8f2 	bl	8001620 <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005440:	f7fc f8ee 	bl	8001620 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
        break;
 8005452:	e005      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005454:	4b37      	ldr	r3, [pc, #220]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ef      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d160      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d111      	bne.n	8005490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800546c:	4b31      	ldr	r3, [pc, #196]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	0211      	lsls	r1, r2, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	0912      	lsrs	r2, r2, #4
 8005484:	0452      	lsls	r2, r2, #17
 8005486:	430a      	orrs	r2, r1
 8005488:	492a      	ldr	r1, [pc, #168]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]
 800548e:	e027      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d112      	bne.n	80054bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800549e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	0211      	lsls	r1, r2, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6912      	ldr	r2, [r2, #16]
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0552      	lsls	r2, r2, #21
 80054b2:	430a      	orrs	r2, r1
 80054b4:	491f      	ldr	r1, [pc, #124]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]
 80054ba:	e011      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054bc:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	0211      	lsls	r1, r2, #8
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6952      	ldr	r2, [r2, #20]
 80054d2:	0852      	lsrs	r2, r2, #1
 80054d4:	3a01      	subs	r2, #1
 80054d6:	0652      	lsls	r2, r2, #25
 80054d8:	430a      	orrs	r2, r1
 80054da:	4916      	ldr	r1, [pc, #88]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a13      	ldr	r2, [pc, #76]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fc f898 	bl	8001620 <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054f2:	e009      	b.n	8005508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f4:	f7fc f894 	bl	8001620 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d902      	bls.n	8005508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	73fb      	strb	r3, [r7, #15]
          break;
 8005506:	e005      	b.n	8005514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ef      	beq.n	80054f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	4904      	ldr	r1, [pc, #16]	; (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000

08005538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005546:	4b6a      	ldr	r3, [pc, #424]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005552:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10d      	bne.n	800557e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
       ||
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800556a:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
       ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d047      	beq.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e044      	b.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d018      	beq.n	80055be <RCCEx_PLLSAI2_Config+0x86>
 800558c:	2b03      	cmp	r3, #3
 800558e:	d825      	bhi.n	80055dc <RCCEx_PLLSAI2_Config+0xa4>
 8005590:	2b01      	cmp	r3, #1
 8005592:	d002      	beq.n	800559a <RCCEx_PLLSAI2_Config+0x62>
 8005594:	2b02      	cmp	r3, #2
 8005596:	d009      	beq.n	80055ac <RCCEx_PLLSAI2_Config+0x74>
 8005598:	e020      	b.n	80055dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800559a:	4b55      	ldr	r3, [pc, #340]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11d      	bne.n	80055e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055aa:	e01a      	b.n	80055e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d116      	bne.n	80055e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055bc:	e013      	b.n	80055e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055be:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ca:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055da:	e006      	b.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e004      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10d      	bne.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	430b      	orrs	r3, r1
 8005608:	4939      	ldr	r1, [pc, #228]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d167      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005614:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a35      	ldr	r2, [pc, #212]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fb fffe 	bl	8001620 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005626:	e009      	b.n	800563c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005628:	f7fb fffa 	bl	8001620 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	73fb      	strb	r3, [r7, #15]
        break;
 800563a:	e005      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ef      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d14a      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d111      	bne.n	8005678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005654:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6892      	ldr	r2, [r2, #8]
 8005664:	0211      	lsls	r1, r2, #8
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	0912      	lsrs	r2, r2, #4
 800566c:	0452      	lsls	r2, r2, #17
 800566e:	430a      	orrs	r2, r1
 8005670:	491f      	ldr	r1, [pc, #124]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005672:	4313      	orrs	r3, r2
 8005674:	614b      	str	r3, [r1, #20]
 8005676:	e011      	b.n	800569c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6892      	ldr	r2, [r2, #8]
 8005688:	0211      	lsls	r1, r2, #8
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6912      	ldr	r2, [r2, #16]
 800568e:	0852      	lsrs	r2, r2, #1
 8005690:	3a01      	subs	r2, #1
 8005692:	0652      	lsls	r2, r2, #25
 8005694:	430a      	orrs	r2, r1
 8005696:	4916      	ldr	r1, [pc, #88]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fb ffba 	bl	8001620 <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ae:	e009      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b0:	f7fb ffb6 	bl	8001620 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	73fb      	strb	r3, [r7, #15]
          break;
 80056c2:	e005      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4904      	ldr	r1, [pc, #16]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e040      	b.n	8005788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb fe94 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fae0 	bl	8005d00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f825 	bl	8005790 <UART_SetConfig>
 8005746:	4603      	mov	r3, r0
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e01b      	b.n	8005788 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800575e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800576e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb5f 	bl	8005e44 <UART_CheckIdleState>
 8005786:	4603      	mov	r3, r0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08a      	sub	sp, #40	; 0x28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4ba4      	ldr	r3, [pc, #656]	; (8005a50 <UART_SetConfig+0x2c0>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a99      	ldr	r2, [pc, #612]	; (8005a54 <UART_SetConfig+0x2c4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a90      	ldr	r2, [pc, #576]	; (8005a58 <UART_SetConfig+0x2c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d126      	bne.n	8005868 <UART_SetConfig+0xd8>
 800581a:	4b90      	ldr	r3, [pc, #576]	; (8005a5c <UART_SetConfig+0x2cc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b03      	cmp	r3, #3
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0xd0>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0xa0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005841 	.word	0x08005841
 8005834:	08005851 	.word	0x08005851
 8005838:	08005849 	.word	0x08005849
 800583c:	08005859 	.word	0x08005859
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e116      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584e:	e112      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e10e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e10a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e106      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7c      	ldr	r2, [pc, #496]	; (8005a60 <UART_SetConfig+0x2d0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d138      	bne.n	80058e4 <UART_SetConfig+0x154>
 8005872:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <UART_SetConfig+0x2cc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d82d      	bhi.n	80058dc <UART_SetConfig+0x14c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0xf8>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c2:	e0d8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ca:	e0d4      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e0d0      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e0cc      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e0c8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5e      	ldr	r2, [pc, #376]	; (8005a64 <UART_SetConfig+0x2d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d125      	bne.n	800593a <UART_SetConfig+0x1aa>
 80058ee:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <UART_SetConfig+0x2cc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d016      	beq.n	800592a <UART_SetConfig+0x19a>
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d818      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d00a      	beq.n	800591a <UART_SetConfig+0x18a>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d814      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <UART_SetConfig+0x182>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d008      	beq.n	8005922 <UART_SetConfig+0x192>
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x1a2>
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005918:	e0ad      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800591a:	2302      	movs	r3, #2
 800591c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005920:	e0a9      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005922:	2304      	movs	r3, #4
 8005924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005928:	e0a5      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800592a:	2308      	movs	r3, #8
 800592c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005930:	e0a1      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005932:	2310      	movs	r3, #16
 8005934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005938:	e09d      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4a      	ldr	r2, [pc, #296]	; (8005a68 <UART_SetConfig+0x2d8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d125      	bne.n	8005990 <UART_SetConfig+0x200>
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <UART_SetConfig+0x2cc>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d016      	beq.n	8005980 <UART_SetConfig+0x1f0>
 8005952:	2bc0      	cmp	r3, #192	; 0xc0
 8005954:	d818      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d00a      	beq.n	8005970 <UART_SetConfig+0x1e0>
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d814      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <UART_SetConfig+0x1d8>
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d008      	beq.n	8005978 <UART_SetConfig+0x1e8>
 8005966:	e00f      	b.n	8005988 <UART_SetConfig+0x1f8>
 8005968:	2300      	movs	r3, #0
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e082      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005970:	2302      	movs	r3, #2
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e07e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597e:	e07a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005986:	e076      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598e:	e072      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a35      	ldr	r2, [pc, #212]	; (8005a6c <UART_SetConfig+0x2dc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d12a      	bne.n	80059f0 <UART_SetConfig+0x260>
 800599a:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <UART_SetConfig+0x2cc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d01a      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ae:	d81b      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b4:	d00c      	beq.n	80059d0 <UART_SetConfig+0x240>
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ba:	d815      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <UART_SetConfig+0x238>
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d008      	beq.n	80059d8 <UART_SetConfig+0x248>
 80059c6:	e00f      	b.n	80059e8 <UART_SetConfig+0x258>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e052      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e04e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e04a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e6:	e046      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ee:	e042      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <UART_SetConfig+0x2c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d13a      	bne.n	8005a70 <UART_SetConfig+0x2e0>
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <UART_SetConfig+0x2cc>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a08:	d01a      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a14:	d00c      	beq.n	8005a30 <UART_SetConfig+0x2a0>
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1a:	d815      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <UART_SetConfig+0x298>
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x2a8>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x2b8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e022      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e01e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3e:	e01a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a46:	e016      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4e:	e012      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a50:	efff69f3 	.word	0xefff69f3
 8005a54:	40008000 	.word	0x40008000
 8005a58:	40013800 	.word	0x40013800
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40004400 	.word	0x40004400
 8005a64:	40004800 	.word	0x40004800
 8005a68:	40004c00 	.word	0x40004c00
 8005a6c:	40005000 	.word	0x40005000
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a9f      	ldr	r2, [pc, #636]	; (8005cf8 <UART_SetConfig+0x568>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d17a      	bne.n	8005b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d824      	bhi.n	8005ad2 <UART_SetConfig+0x342>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x300>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ac3 	.word	0x08005ac3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005ad3 	.word	0x08005ad3
 8005aac:	08005ad3 	.word	0x08005ad3
 8005ab0:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f7ff f8c6 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b8f      	ldr	r3, [pc, #572]	; (8005cfc <UART_SetConfig+0x56c>)
 8005abe:	61fb      	str	r3, [r7, #28]
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7ff f827 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005ac6:	61f8      	str	r0, [r7, #28]
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	61fb      	str	r3, [r7, #28]
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80fb 	beq.w	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d305      	bcc.n	8005b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d903      	bls.n	8005b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b08:	e0e8      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	461c      	mov	r4, r3
 8005b10:	4615      	mov	r5, r2
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	022b      	lsls	r3, r5, #8
 8005b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b20:	0222      	lsls	r2, r4, #8
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6849      	ldr	r1, [r1, #4]
 8005b26:	0849      	lsrs	r1, r1, #1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	4681      	mov	r9, r0
 8005b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8005b32:	eb43 0b09 	adc.w	fp, r3, r9
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	4650      	mov	r0, sl
 8005b46:	4659      	mov	r1, fp
 8005b48:	f7fa fb92 	bl	8000270 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5a:	d308      	bcc.n	8005b6e <UART_SetConfig+0x3de>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b62:	d204      	bcs.n	8005b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e0b6      	b.n	8005cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b74:	e0b2      	b.n	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7e:	d15e      	bne.n	8005c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d828      	bhi.n	8005bda <UART_SetConfig+0x44a>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x400>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bc5 	.word	0x08005bc5
 8005b9c:	08005bdb 	.word	0x08005bdb
 8005ba0:	08005bcb 	.word	0x08005bcb
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005bdb 	.word	0x08005bdb
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7ff f846 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8005bb8:	61f8      	str	r0, [r7, #28]
        break;
 8005bba:	e014      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7ff f858 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
        break;
 8005bc2:	e010      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <UART_SetConfig+0x56c>)
 8005bc6:	61fb      	str	r3, [r7, #28]
        break;
 8005bc8:	e00d      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fe ffa3 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005bce:	61f8      	str	r0, [r7, #28]
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd6:	61fb      	str	r3, [r7, #28]
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d077      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005a      	lsls	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d916      	bls.n	8005c36 <UART_SetConfig+0x4a6>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0e:	d212      	bcs.n	8005c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f023 030f 	bic.w	r3, r3, #15
 8005c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	8afb      	ldrh	r3, [r7, #22]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	8afa      	ldrh	r2, [r7, #22]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e052      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c3c:	e04e      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d827      	bhi.n	8005c96 <UART_SetConfig+0x506>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x4bc>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe ffe8 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
        break;
 8005c76:	e014      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fe fffa 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe ff45 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d019      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	085a      	lsrs	r2, r3, #1
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d909      	bls.n	8005cd6 <UART_SetConfig+0x546>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d205      	bcs.n	8005cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e002      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40008000 	.word	0x40008000
 8005cfc:	00f42400 	.word	0x00f42400

08005d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dfe:	d10a      	bne.n	8005e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b098      	sub	sp, #96	; 0x60
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e54:	f7fb fbe4 	bl	8001620 <HAL_GetTick>
 8005e58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d12e      	bne.n	8005ec6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e70:	2200      	movs	r2, #0
 8005e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f88c 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d021      	beq.n	8005ec6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e96:	653b      	str	r3, [r7, #80]	; 0x50
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e6      	bne.n	8005e82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e062      	b.n	8005f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d149      	bne.n	8005f68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f856 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d03c      	beq.n	8005f68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	623b      	str	r3, [r7, #32]
   return(result);
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f40:	61fa      	str	r2, [r7, #28]
 8005f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e011      	b.n	8005f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3758      	adds	r7, #88	; 0x58
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	e049      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d045      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fb fb37 	bl	8001620 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e048      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d031      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d110      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f838 	bl	8006062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e029      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006014:	d111      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800601e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f81e 	bl	8006062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e00f      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	429a      	cmp	r2, r3
 8006056:	d0a6      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b095      	sub	sp, #84	; 0x54
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800607e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
 800608a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800608e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d118      	bne.n	800610a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f023 0310 	bic.w	r3, r3, #16
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6979      	ldr	r1, [r7, #20]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	613b      	str	r3, [r7, #16]
   return(result);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e6      	bne.n	80060d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800611e:	bf00      	nop
 8006120:	3754      	adds	r7, #84	; 0x54
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800612a:	b084      	sub	sp, #16
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	f107 001c 	add.w	r0, r7, #28
 8006138:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fa1d 	bl	8007588 <USB_CoreReset>
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
 8006164:	e005      	b.n	8006172 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800617e:	b004      	add	sp, #16
 8006180:	4770      	bx	lr
	...

08006184 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d165      	bne.n	8006264 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4a3e      	ldr	r2, [pc, #248]	; (8006294 <USB_SetTurnaroundTime+0x110>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d906      	bls.n	80061ae <USB_SetTurnaroundTime+0x2a>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4a3d      	ldr	r2, [pc, #244]	; (8006298 <USB_SetTurnaroundTime+0x114>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d202      	bcs.n	80061ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061a8:	230f      	movs	r3, #15
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e05c      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4a39      	ldr	r2, [pc, #228]	; (8006298 <USB_SetTurnaroundTime+0x114>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d306      	bcc.n	80061c4 <USB_SetTurnaroundTime+0x40>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4a38      	ldr	r2, [pc, #224]	; (800629c <USB_SetTurnaroundTime+0x118>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d202      	bcs.n	80061c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061be:	230e      	movs	r3, #14
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e051      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a35      	ldr	r2, [pc, #212]	; (800629c <USB_SetTurnaroundTime+0x118>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d306      	bcc.n	80061da <USB_SetTurnaroundTime+0x56>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a34      	ldr	r2, [pc, #208]	; (80062a0 <USB_SetTurnaroundTime+0x11c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d202      	bcs.n	80061da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061d4:	230d      	movs	r3, #13
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e046      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <USB_SetTurnaroundTime+0x11c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d306      	bcc.n	80061f0 <USB_SetTurnaroundTime+0x6c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061ea:	230c      	movs	r3, #12
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e03b      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4a2c      	ldr	r2, [pc, #176]	; (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d906      	bls.n	8006206 <USB_SetTurnaroundTime+0x82>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <USB_SetTurnaroundTime+0x124>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d802      	bhi.n	8006206 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006200:	230b      	movs	r3, #11
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e030      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a27      	ldr	r2, [pc, #156]	; (80062a8 <USB_SetTurnaroundTime+0x124>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d906      	bls.n	800621c <USB_SetTurnaroundTime+0x98>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4a26      	ldr	r2, [pc, #152]	; (80062ac <USB_SetTurnaroundTime+0x128>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d802      	bhi.n	800621c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006216:	230a      	movs	r3, #10
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e025      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a23      	ldr	r2, [pc, #140]	; (80062ac <USB_SetTurnaroundTime+0x128>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d906      	bls.n	8006232 <USB_SetTurnaroundTime+0xae>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <USB_SetTurnaroundTime+0x12c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d202      	bcs.n	8006232 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800622c:	2309      	movs	r3, #9
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e01a      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <USB_SetTurnaroundTime+0x12c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d306      	bcc.n	8006248 <USB_SetTurnaroundTime+0xc4>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <USB_SetTurnaroundTime+0x130>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d802      	bhi.n	8006248 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006242:	2308      	movs	r3, #8
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e00f      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <USB_SetTurnaroundTime+0x130>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d906      	bls.n	800625e <USB_SetTurnaroundTime+0xda>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <USB_SetTurnaroundTime+0x134>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d202      	bcs.n	800625e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006258:	2307      	movs	r3, #7
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e004      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800625e:	2306      	movs	r3, #6
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e001      	b.n	8006268 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006264:	2309      	movs	r3, #9
 8006266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00d8acbf 	.word	0x00d8acbf
 8006298:	00e4e1c0 	.word	0x00e4e1c0
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	01067380 	.word	0x01067380
 80062a4:	011a499f 	.word	0x011a499f
 80062a8:	01312cff 	.word	0x01312cff
 80062ac:	014ca43f 	.word	0x014ca43f
 80062b0:	016e3600 	.word	0x016e3600
 80062b4:	01a6ab1f 	.word	0x01a6ab1f
 80062b8:	01e84800 	.word	0x01e84800

080062bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d115      	bne.n	800634e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800632e:	2001      	movs	r0, #1
 8006330:	f7fb f982 	bl	8001638 <HAL_Delay>
      ms++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 f8ab 	bl	8007496 <USB_GetMode>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d01e      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b31      	cmp	r3, #49	; 0x31
 800634a:	d9f0      	bls.n	800632e <USB_SetCurrentMode+0x2e>
 800634c:	e01a      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d115      	bne.n	8006380 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006360:	2001      	movs	r0, #1
 8006362:	f7fb f969 	bl	8001638 <HAL_Delay>
      ms++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f892 	bl	8007496 <USB_GetMode>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b31      	cmp	r3, #49	; 0x31
 800637c:	d9f0      	bls.n	8006360 <USB_SetCurrentMode+0x60>
 800637e:	e001      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e005      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b32      	cmp	r3, #50	; 0x32
 8006388:	d101      	bne.n	800638e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	e009      	b.n	80063cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3340      	adds	r3, #64	; 0x40
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0e      	cmp	r3, #14
 80063d0:	d9f2      	bls.n	80063b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d11c      	bne.n	8006412 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e005      	b.n	800641e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800642a:	2103      	movs	r1, #3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f959 	bl	80066e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006432:	2110      	movs	r1, #16
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f8f1 	bl	800661c <USB_FlushTxFifo>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f91d 	bl	8006684 <USB_FlushRxFifo>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	461a      	mov	r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	461a      	mov	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e043      	b.n	8006506 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006494:	d118      	bne.n	80064c8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	e013      	b.n	80064da <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	461a      	mov	r2, r3
 80064c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e008      	b.n	80064da <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	461a      	mov	r2, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	461a      	mov	r2, r3
 80064fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3301      	adds	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d3b7      	bcc.n	800647e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	e043      	b.n	800659c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652a:	d118      	bne.n	800655e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e013      	b.n	8006570 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006554:	461a      	mov	r2, r3
 8006556:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	e008      	b.n	8006570 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	461a      	mov	r2, r3
 800656c:	2300      	movs	r3, #0
 800656e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	461a      	mov	r2, r3
 8006590:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006594:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3301      	adds	r3, #1
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d3b7      	bcc.n	8006514 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f043 0210 	orr.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <USB_DevInit+0x280>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f043 0208 	orr.w	r2, r3, #8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d107      	bne.n	8006606 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065fe:	f043 0304 	orr.w	r3, r3, #4
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006612:	b004      	add	sp, #16
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	803c3800 	.word	0x803c3800

0800661c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <USB_FlushTxFifo+0x64>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e01b      	b.n	8006674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	daf2      	bge.n	800662a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	019b      	lsls	r3, r3, #6
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <USB_FlushTxFifo+0x64>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e006      	b.n	8006674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b20      	cmp	r3, #32
 8006670:	d0f0      	beq.n	8006654 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	00030d40 	.word	0x00030d40

08006684 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <USB_FlushRxFifo+0x5c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e018      	b.n	80066d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	daf2      	bge.n	8006690 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2210      	movs	r2, #16
 80066b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <USB_FlushRxFifo+0x5c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e006      	b.n	80066d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d0f0      	beq.n	80066b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d002      	beq.n	800673c <USB_GetDevSpeed+0x26>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b06      	cmp	r3, #6
 800673a:	d102      	bne.n	8006742 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800673c:	2302      	movs	r3, #2
 800673e:	75fb      	strb	r3, [r7, #23]
 8006740:	e001      	b.n	8006746 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006742:	230f      	movs	r3, #15
 8006744:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d13a      	bne.n	80067e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2101      	movs	r1, #1
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800678e:	4313      	orrs	r3, r2
 8006790:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d155      	bne.n	8006854 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	059b      	lsls	r3, r3, #22
 80067ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067cc:	4313      	orrs	r3, r2
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e036      	b.n	8006854 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	2101      	movs	r1, #1
 80067f8:	fa01 f303 	lsl.w	r3, r1, r3
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006804:	4313      	orrs	r3, r2
 8006806:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11a      	bne.n	8006854 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	791b      	ldrb	r3, [r3, #4]
 8006838:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800683a:	430b      	orrs	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006852:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d161      	bne.n	8006944 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006896:	d11f      	bne.n	80068d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	43db      	mvns	r3, r3
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f8:	4013      	ands	r3, r2
 80068fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	69da      	ldr	r2, [r3, #28]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	2101      	movs	r1, #1
 800690e:	fa01 f303 	lsl.w	r3, r1, r3
 8006912:	b29b      	uxth	r3, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	68f9      	ldr	r1, [r7, #12]
 8006918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800691c:	4013      	ands	r3, r2
 800691e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	0159      	lsls	r1, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	440b      	add	r3, r1
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	4619      	mov	r1, r3
 800693c:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <USB_DeactivateEndpoint+0x1b0>)
 800693e:	4013      	ands	r3, r2
 8006940:	600b      	str	r3, [r1, #0]
 8006942:	e060      	b.n	8006a06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695a:	d11f      	bne.n	800699c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	43db      	mvns	r3, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	43db      	mvns	r3, r3
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	4619      	mov	r1, r3
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <USB_DeactivateEndpoint+0x1b4>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	ec337800 	.word	0xec337800
 8006a18:	eff37800 	.word	0xeff37800

08006a1c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	f040 8128 	bne.w	8006c8a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d132      	bne.n	8006aa8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa0:	0cdb      	lsrs	r3, r3, #19
 8006aa2:	04db      	lsls	r3, r3, #19
 8006aa4:	6113      	str	r3, [r2, #16]
 8006aa6:	e092      	b.n	8006bce <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	0cdb      	lsrs	r3, r3, #19
 8006ac4:	04db      	lsls	r3, r3, #19
 8006ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d11a      	bne.n	8006b28 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d903      	bls.n	8006b06 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b24:	6113      	str	r3, [r2, #16]
 8006b26:	e01b      	b.n	8006b60 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6919      	ldr	r1, [r3, #16]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	440b      	add	r3, r1
 8006b40:	1e59      	subs	r1, r3, #1
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b4a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b4c:	4b8d      	ldr	r3, [pc, #564]	; (8006d84 <USB_EPStartXfer+0x368>)
 8006b4e:	400b      	ands	r3, r1
 8006b50:	6939      	ldr	r1, [r7, #16]
 8006b52:	0148      	lsls	r0, r1, #5
 8006b54:	6979      	ldr	r1, [r7, #20]
 8006b56:	4401      	add	r1, r0
 8006b58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b76:	6939      	ldr	r1, [r7, #16]
 8006b78:	0148      	lsls	r0, r1, #5
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	4401      	add	r1, r0
 8006b7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b82:	4313      	orrs	r3, r2
 8006b84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d11f      	bne.n	8006bce <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bcc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	791b      	ldrb	r3, [r3, #4]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d015      	beq.n	8006c22 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 8139 	beq.w	8006e72 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	634b      	str	r3, [r1, #52]	; 0x34
 8006c20:	e127      	b.n	8006e72 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d110      	bne.n	8006c54 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e00f      	b.n	8006c74 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c72:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68d9      	ldr	r1, [r3, #12]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9a6 	bl	8006fd4 <USB_WritePacket>
 8006c88:	e0f3      	b.n	8006e72 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca4:	0cdb      	lsrs	r3, r3, #19
 8006ca6:	04db      	lsls	r3, r3, #19
 8006ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ccc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d12f      	bne.n	8006d34 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	6939      	ldr	r1, [r7, #16]
 8006d04:	0148      	lsls	r0, r1, #5
 8006d06:	6979      	ldr	r1, [r7, #20]
 8006d08:	4401      	add	r1, r0
 8006d0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d30:	6113      	str	r3, [r2, #16]
 8006d32:	e061      	b.n	8006df8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d125      	bne.n	8006d88 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d52:	6939      	ldr	r1, [r7, #16]
 8006d54:	0148      	lsls	r0, r1, #5
 8006d56:	6979      	ldr	r1, [r7, #20]
 8006d58:	4401      	add	r1, r0
 8006d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d80:	6113      	str	r3, [r2, #16]
 8006d82:	e039      	b.n	8006df8 <USB_EPStartXfer+0x3dc>
 8006d84:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	89fa      	ldrh	r2, [r7, #14]
 8006da4:	fb03 f202 	mul.w	r2, r3, r2
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	89fb      	ldrh	r3, [r7, #14]
 8006dbc:	04d9      	lsls	r1, r3, #19
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <USB_EPStartXfer+0x460>)
 8006dc0:	400b      	ands	r3, r1
 8006dc2:	6939      	ldr	r1, [r7, #16]
 8006dc4:	0148      	lsls	r0, r1, #5
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	4401      	add	r1, r0
 8006dca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	6939      	ldr	r1, [r7, #16]
 8006dea:	0148      	lsls	r0, r1, #5
 8006dec:	6979      	ldr	r1, [r7, #20]
 8006dee:	4401      	add	r1, r0
 8006df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006df4:	4313      	orrs	r3, r2
 8006df6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	791b      	ldrb	r3, [r3, #4]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d128      	bne.n	8006e52 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d110      	bne.n	8006e32 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e00f      	b.n	8006e52 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	1ff80000 	.word	0x1ff80000

08006e80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d14a      	bne.n	8006f34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb6:	f040 8086 	bne.w	8006fc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006edc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	7812      	ldrb	r2, [r2, #0]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d902      	bls.n	8006f18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
          break;
 8006f16:	e056      	b.n	8006fc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f30:	d0e7      	beq.n	8006f02 <USB_EPStopXfer+0x82>
 8006f32:	e048      	b.n	8006fc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f4c:	d13b      	bne.n	8006fc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d902      	bls.n	8006fac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8006faa:	e00c      	b.n	8006fc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc4:	d0e7      	beq.n	8006f96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b089      	sub	sp, #36	; 0x24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	71fb      	strb	r3, [r7, #7]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006ff2:	88bb      	ldrh	r3, [r7, #4]
 8006ff4:	3303      	adds	r3, #3
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e018      	b.n	8007032 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	031a      	lsls	r2, r3, #12
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4413      	add	r3, r2
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	461a      	mov	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3301      	adds	r3, #1
 800702a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	3301      	adds	r3, #1
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	429a      	cmp	r2, r3
 8007038:	d3e2      	bcc.n	8007000 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3724      	adds	r7, #36	; 0x24
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007048:	b480      	push	{r7}
 800704a:	b08b      	sub	sp, #44	; 0x2c
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	b29b      	uxth	r3, r3
 8007064:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800706e:	2300      	movs	r3, #0
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	e014      	b.n	800709e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	3301      	adds	r3, #1
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	3301      	adds	r3, #1
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	3301      	adds	r3, #1
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	3301      	adds	r3, #1
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	3301      	adds	r3, #1
 800709c:	623b      	str	r3, [r7, #32]
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3e6      	bcc.n	8007074 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070a6:	8bfb      	ldrh	r3, [r7, #30]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01e      	beq.n	80070ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b6:	461a      	mov	r2, r3
 80070b8:	f107 0310 	add.w	r3, r7, #16
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	701a      	strb	r2, [r3, #0]
      i++;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	3301      	adds	r3, #1
 80070d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	3301      	adds	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070de:	8bfb      	ldrh	r3, [r7, #30]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070e4:	8bfb      	ldrh	r3, [r7, #30]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ea      	bne.n	80070c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	372c      	adds	r7, #44	; 0x2c
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d12c      	bne.n	800716e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	db12      	blt.n	800714c <USB_EPSetStall+0x54>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00f      	beq.n	800714c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800714a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	e02b      	b.n	80071c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	db12      	blt.n	80071a6 <USB_EPSetStall+0xae>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d128      	bne.n	8007242 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800720e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	791b      	ldrb	r3, [r3, #4]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d003      	beq.n	8007220 <USB_EPClearStall+0x4c>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	791b      	ldrb	r3, [r3, #4]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d138      	bne.n	8007292 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	440a      	add	r2, r1
 8007236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e027      	b.n	8007292 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007260:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	791b      	ldrb	r3, [r3, #4]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d003      	beq.n	8007272 <USB_EPClearStall+0x9e>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d10f      	bne.n	8007292 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007290:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072da:	4313      	orrs	r3, r2
 80072dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731a:	f023 0302 	bic.w	r3, r3, #2
 800731e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4013      	ands	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	4013      	ands	r3, r2
 80073b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	0c1b      	lsrs	r3, r3, #16
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	b29b      	uxth	r3, r3
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742c:	68bb      	ldr	r3, [r7, #8]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	fa22 f303 	lsr.w	r3, r2, r3
 800746a:	01db      	lsls	r3, r3, #7
 800746c:	b2db      	uxtb	r3, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4013      	ands	r3, r2
 8007486:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007488:	68bb      	ldr	r3, [r7, #8]
}
 800748a:	4618      	mov	r0, r3
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0301 	and.w	r3, r3, #1
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	333c      	adds	r3, #60	; 0x3c
 800750a:	3304      	adds	r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <USB_EP0_OutStart+0x8c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d90a      	bls.n	800752e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007528:	d101      	bne.n	800752e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e024      	b.n	8007578 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	461a      	mov	r2, r3
 8007536:	2300      	movs	r3, #0
 8007538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800754c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755c:	f043 0318 	orr.w	r3, r3, #24
 8007560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007570:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007574:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	4f54300a 	.word	0x4f54300a

08007588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a13      	ldr	r2, [pc, #76]	; (80075ec <USB_CoreReset+0x64>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e01b      	b.n	80075de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	daf2      	bge.n	8007594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f043 0201 	orr.w	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3301      	adds	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a09      	ldr	r2, [pc, #36]	; (80075ec <USB_CoreReset+0x64>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d901      	bls.n	80075d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e006      	b.n	80075de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d0f0      	beq.n	80075be <USB_CoreReset+0x36>

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	00030d40 	.word	0x00030d40

080075f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007600:	f002 fe26 	bl	800a250 <USBD_static_malloc>
 8007604:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32b0      	adds	r2, #176	; 0xb0
 8007616:	2100      	movs	r1, #0
 8007618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800761c:	2302      	movs	r3, #2
 800761e:	e0d4      	b.n	80077ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007620:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f002 ff35 	bl	800a496 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32b0      	adds	r2, #176	; 0xb0
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32b0      	adds	r2, #176	; 0xb0
 8007646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7c1b      	ldrb	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d138      	bne.n	80076ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007658:	4b5e      	ldr	r3, [pc, #376]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007660:	2202      	movs	r2, #2
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 fbe0 	bl	8009e28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007668:	4b5a      	ldr	r3, [pc, #360]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	2201      	movs	r2, #1
 8007680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007684:	7819      	ldrb	r1, [r3, #0]
 8007686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768a:	2202      	movs	r2, #2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f002 fbcb 	bl	8009e28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007692:	4b51      	ldr	r3, [pc, #324]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076aa:	2201      	movs	r2, #1
 80076ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076ae:	4b4b      	ldr	r3, [pc, #300]	; (80077dc <USBD_CDC_Init+0x1ec>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	3326      	adds	r3, #38	; 0x26
 80076c4:	2210      	movs	r2, #16
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e035      	b.n	8007736 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076ca:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 80076cc:	7819      	ldrb	r1, [r3, #0]
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	2202      	movs	r2, #2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f002 fba8 	bl	8009e28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <USBD_CDC_Init+0x1e4>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	2201      	movs	r2, #1
 80076f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80076f4:	7819      	ldrb	r1, [r3, #0]
 80076f6:	2340      	movs	r3, #64	; 0x40
 80076f8:	2202      	movs	r2, #2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f002 fb94 	bl	8009e28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007700:	4b35      	ldr	r3, [pc, #212]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007718:	2201      	movs	r2, #1
 800771a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800771c:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <USBD_CDC_Init+0x1ec>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 020f 	and.w	r2, r3, #15
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	3326      	adds	r3, #38	; 0x26
 8007732:	2210      	movs	r2, #16
 8007734:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007736:	4b29      	ldr	r3, [pc, #164]	; (80077dc <USBD_CDC_Init+0x1ec>)
 8007738:	7819      	ldrb	r1, [r3, #0]
 800773a:	2308      	movs	r3, #8
 800773c:	2203      	movs	r2, #3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f002 fb72 	bl	8009e28 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <USBD_CDC_Init+0x1ec>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	2201      	movs	r2, #1
 800775c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	33b0      	adds	r3, #176	; 0xb0
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007794:	2302      	movs	r3, #2
 8007796:	e018      	b.n	80077ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7c1b      	ldrb	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077a0:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80077a2:	7819      	ldrb	r1, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f002 fcb4 	bl	800a11c <USBD_LL_PrepareReceive>
 80077b4:	e008      	b.n	80077c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <USBD_CDC_Init+0x1e8>)
 80077b8:	7819      	ldrb	r1, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f002 fcaa 	bl	800a11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000093 	.word	0x20000093
 80077d8:	20000094 	.word	0x20000094
 80077dc:	20000095 	.word	0x20000095

080077e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <USBD_CDC_DeInit+0xf8>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f002 fb56 	bl	8009ea4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077f8:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <USBD_CDC_DeInit+0xf8>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3324      	adds	r3, #36	; 0x24
 800780e:	2200      	movs	r2, #0
 8007810:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007812:	4b32      	ldr	r3, [pc, #200]	; (80078dc <USBD_CDC_DeInit+0xfc>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f002 fb43 	bl	8009ea4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800781e:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <USBD_CDC_DeInit+0xfc>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 020f 	and.w	r2, r3, #15
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007836:	2200      	movs	r2, #0
 8007838:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800783a:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 fb2f 	bl	8009ea4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007846:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	3324      	adds	r3, #36	; 0x24
 800785c:	2200      	movs	r2, #0
 800785e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <USBD_CDC_DeInit+0x100>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3326      	adds	r3, #38	; 0x26
 8007876:	2200      	movs	r2, #0
 8007878:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	32b0      	adds	r2, #176	; 0xb0
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01f      	beq.n	80078cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	33b0      	adds	r3, #176	; 0xb0
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32b0      	adds	r2, #176	; 0xb0
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f002 fcdc 	bl	800a26c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32b0      	adds	r2, #176	; 0xb0
 80078be:	2100      	movs	r1, #0
 80078c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000093 	.word	0x20000093
 80078dc:	20000094 	.word	0x20000094
 80078e0:	20000095 	.word	0x20000095

080078e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32b0      	adds	r2, #176	; 0xb0
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e0bf      	b.n	8007a94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800791c:	2b00      	cmp	r3, #0
 800791e:	d050      	beq.n	80079c2 <USBD_CDC_Setup+0xde>
 8007920:	2b20      	cmp	r3, #32
 8007922:	f040 80af 	bne.w	8007a84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d03a      	beq.n	80079a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b25b      	sxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	da1b      	bge.n	8007970 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	33b0      	adds	r3, #176	; 0xb0
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800794e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	88d2      	ldrh	r2, [r2, #6]
 8007954:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b07      	cmp	r3, #7
 800795c:	bf28      	it	cs
 800795e:	2307      	movcs	r3, #7
 8007960:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	89fa      	ldrh	r2, [r7, #14]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fdb3 	bl	80094d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800796e:	e090      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	785a      	ldrb	r2, [r3, #1]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	88db      	ldrh	r3, [r3, #6]
 800797e:	2b3f      	cmp	r3, #63	; 0x3f
 8007980:	d803      	bhi.n	800798a <USBD_CDC_Setup+0xa6>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	e000      	b.n	800798c <USBD_CDC_Setup+0xa8>
 800798a:	2240      	movs	r2, #64	; 0x40
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800799a:	461a      	mov	r2, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fdc5 	bl	800952c <USBD_CtlPrepareRx>
      break;
 80079a2:	e076      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	33b0      	adds	r3, #176	; 0xb0
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	7850      	ldrb	r0, [r2, #1]
 80079ba:	2200      	movs	r2, #0
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	4798      	blx	r3
      break;
 80079c0:	e067      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b0b      	cmp	r3, #11
 80079c8:	d851      	bhi.n	8007a6e <USBD_CDC_Setup+0x18a>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <USBD_CDC_Setup+0xec>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	08007a7d 	.word	0x08007a7d
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007a6f 	.word	0x08007a6f
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a6f 	.word	0x08007a6f
 80079ec:	08007a6f 	.word	0x08007a6f
 80079f0:	08007a6f 	.word	0x08007a6f
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d107      	bne.n	8007a1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a0c:	f107 030a 	add.w	r3, r7, #10
 8007a10:	2202      	movs	r2, #2
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fd5d 	bl	80094d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a1a:	e032      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fce7 	bl	80093f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a24:	2303      	movs	r3, #3
 8007a26:	75fb      	strb	r3, [r7, #23]
          break;
 8007a28:	e02b      	b.n	8007a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d107      	bne.n	8007a46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a36:	f107 030d 	add.w	r3, r7, #13
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fd48 	bl	80094d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a44:	e01d      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fcd2 	bl	80093f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e016      	b.n	8007a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d00f      	beq.n	8007a80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fcc5 	bl	80093f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a6c:	e008      	b.n	8007a80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fcbe 	bl	80093f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e002      	b.n	8007a82 <USBD_CDC_Setup+0x19e>
          break;
 8007a7c:	bf00      	nop
 8007a7e:	e008      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>
          break;
 8007a80:	bf00      	nop
      }
      break;
 8007a82:	e006      	b.n	8007a92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fcb3 	bl	80093f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	32b0      	adds	r2, #176	; 0xb0
 8007aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e065      	b.n	8007b92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	32b0      	adds	r2, #176	; 0xb0
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3318      	adds	r3, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02f      	beq.n	8007b50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	3318      	adds	r3, #24
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 010f 	and.w	r1, r3, #15
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	440b      	add	r3, r1
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4403      	add	r3, r0
 8007b18:	3344      	adds	r3, #68	; 0x44
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d112      	bne.n	8007b50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b42:	78f9      	ldrb	r1, [r7, #3]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f002 faaf 	bl	800a0ac <USBD_LL_Transmit>
 8007b4e:	e01f      	b.n	8007b90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	33b0      	adds	r3, #176	; 0xb0
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d010      	beq.n	8007b90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	33b0      	adds	r3, #176	; 0xb0
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32b0      	adds	r2, #176	; 0xb0
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	32b0      	adds	r2, #176	; 0xb0
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e01a      	b.n	8007c02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f002 fadb 	bl	800a18c <USBD_LL_GetRxDataSize>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	33b0      	adds	r3, #176	; 0xb0
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	32b0      	adds	r2, #176	; 0xb0
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e025      	b.n	8007c78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	33b0      	adds	r3, #176	; 0xb0
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <USBD_CDC_EP0_RxReady+0x6c>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c46:	2bff      	cmp	r3, #255	; 0xff
 8007c48:	d015      	beq.n	8007c76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	33b0      	adds	r3, #176	; 0xb0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	22ff      	movs	r2, #255	; 0xff
 8007c72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c88:	2182      	movs	r1, #130	; 0x82
 8007c8a:	4818      	ldr	r0, [pc, #96]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c8c:	f000 fd4f 	bl	800872e <USBD_GetEpDesc>
 8007c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c92:	2101      	movs	r1, #1
 8007c94:	4815      	ldr	r0, [pc, #84]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c96:	f000 fd4a 	bl	800872e <USBD_GetEpDesc>
 8007c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c9c:	2181      	movs	r1, #129	; 0x81
 8007c9e:	4813      	ldr	r0, [pc, #76]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ca0:	f000 fd45 	bl	800872e <USBD_GetEpDesc>
 8007ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2210      	movs	r2, #16
 8007cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d006      	beq.n	8007cc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc0:	711a      	strb	r2, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd4:	711a      	strb	r2, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2243      	movs	r2, #67	; 0x43
 8007cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000050 	.word	0x20000050

08007cf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cf8:	2182      	movs	r1, #130	; 0x82
 8007cfa:	4818      	ldr	r0, [pc, #96]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cfc:	f000 fd17 	bl	800872e <USBD_GetEpDesc>
 8007d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d02:	2101      	movs	r1, #1
 8007d04:	4815      	ldr	r0, [pc, #84]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d06:	f000 fd12 	bl	800872e <USBD_GetEpDesc>
 8007d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d0c:	2181      	movs	r1, #129	; 0x81
 8007d0e:	4813      	ldr	r0, [pc, #76]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d10:	f000 fd0d 	bl	800872e <USBD_GetEpDesc>
 8007d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	711a      	strb	r2, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f042 0202 	orr.w	r2, r2, #2
 8007d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d006      	beq.n	8007d4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	711a      	strb	r2, [r3, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f042 0202 	orr.w	r2, r2, #2
 8007d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2243      	movs	r2, #67	; 0x43
 8007d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000050 	.word	0x20000050

08007d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d68:	2182      	movs	r1, #130	; 0x82
 8007d6a:	4818      	ldr	r0, [pc, #96]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d6c:	f000 fcdf 	bl	800872e <USBD_GetEpDesc>
 8007d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d72:	2101      	movs	r1, #1
 8007d74:	4815      	ldr	r0, [pc, #84]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d76:	f000 fcda 	bl	800872e <USBD_GetEpDesc>
 8007d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d7c:	2181      	movs	r1, #129	; 0x81
 8007d7e:	4813      	ldr	r0, [pc, #76]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d80:	f000 fcd5 	bl	800872e <USBD_GetEpDesc>
 8007d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da0:	711a      	strb	r2, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db4:	711a      	strb	r2, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2243      	movs	r2, #67	; 0x43
 8007dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dc0:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000050 	.word	0x20000050

08007dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220a      	movs	r2, #10
 8007ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dde:	4b03      	ldr	r3, [pc, #12]	; (8007dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000000c 	.word	0x2000000c

08007df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e009      	b.n	8007e18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	33b0      	adds	r3, #176	; 0xb0
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	32b0      	adds	r2, #176	; 0xb0
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e008      	b.n	8007e5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32b0      	adds	r2, #176	; 0xb0
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e004      	b.n	8007e96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
	...

08007ea4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32b0      	adds	r2, #176	; 0xb0
 8007eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e025      	b.n	8007f16 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d11f      	bne.n	8007f14 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <USBD_CDC_TransmitPacket+0x7c>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f003 020f 	and.w	r2, r3, #15
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	3318      	adds	r3, #24
 8007ef8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <USBD_CDC_TransmitPacket+0x7c>)
 8007efc:	7819      	ldrb	r1, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f002 f8ce 	bl	800a0ac <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000093 	.word	0x20000093

08007f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32b0      	adds	r2, #176	; 0xb0
 8007f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32b0      	adds	r2, #176	; 0xb0
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e018      	b.n	8007f84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7c1b      	ldrb	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <USBD_CDC_ReceivePacket+0x68>)
 8007f5c:	7819      	ldrb	r1, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f002 f8d7 	bl	800a11c <USBD_LL_PrepareReceive>
 8007f6e:	e008      	b.n	8007f82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <USBD_CDC_ReceivePacket+0x68>)
 8007f72:	7819      	ldrb	r1, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f002 f8cd 	bl	800a11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000094 	.word	0x20000094

08007f90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e01f      	b.n	8007fe8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	79fa      	ldrb	r2, [r7, #7]
 8007fda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fea5 	bl	8009d2c <USBD_LL_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e025      	b.n	8008054 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	32ae      	adds	r2, #174	; 0xae
 800801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00f      	beq.n	8008044 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	; 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	f107 020e 	add.w	r2, r7, #14
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	4602      	mov	r2, r0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 fead 	bl	8009dc4 <USBD_LL_Start>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	78fa      	ldrb	r2, [r7, #3]
 80080dc:	4611      	mov	r1, r2
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f001 f938 	bl	800937e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800811c:	461a      	mov	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800812a:	f003 031f 	and.w	r3, r3, #31
 800812e:	2b02      	cmp	r3, #2
 8008130:	d01a      	beq.n	8008168 <USBD_LL_SetupStage+0x72>
 8008132:	2b02      	cmp	r3, #2
 8008134:	d822      	bhi.n	800817c <USBD_LL_SetupStage+0x86>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <USBD_LL_SetupStage+0x4a>
 800813a:	2b01      	cmp	r3, #1
 800813c:	d00a      	beq.n	8008154 <USBD_LL_SetupStage+0x5e>
 800813e:	e01d      	b.n	800817c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fb65 	bl	8008818 <USBD_StdDevReq>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
      break;
 8008152:	e020      	b.n	8008196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fbcd 	bl	80088fc <USBD_StdItfReq>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
      break;
 8008166:	e016      	b.n	8008196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc2f 	bl	80089d4 <USBD_StdEPReq>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]
      break;
 800817a:	e00c      	b.n	8008196 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008182:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008186:	b2db      	uxtb	r3, r3
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fec0 	bl	8009f10 <USBD_LL_StallEP>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
      break;
 8008194:	bf00      	nop
  }

  return ret;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d16e      	bne.n	8008296 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	f040 8098 	bne.w	80082fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d913      	bls.n	8008200 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bf28      	it	cs
 80081f2:	4613      	movcs	r3, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f001 f9b4 	bl	8009566 <USBD_CtlContinueRx>
 80081fe:	e07d      	b.n	80082fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	2b02      	cmp	r3, #2
 800820c:	d014      	beq.n	8008238 <USBD_LL_DataOutStage+0x98>
 800820e:	2b02      	cmp	r3, #2
 8008210:	d81d      	bhi.n	800824e <USBD_LL_DataOutStage+0xae>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <USBD_LL_DataOutStage+0x7c>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d003      	beq.n	8008222 <USBD_LL_DataOutStage+0x82>
 800821a:	e018      	b.n	800824e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	75bb      	strb	r3, [r7, #22]
            break;
 8008220:	e018      	b.n	8008254 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008228:	b2db      	uxtb	r3, r3
 800822a:	4619      	mov	r1, r3
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fa64 	bl	80086fa <USBD_CoreFindIF>
 8008232:	4603      	mov	r3, r0
 8008234:	75bb      	strb	r3, [r7, #22]
            break;
 8008236:	e00d      	b.n	8008254 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4619      	mov	r1, r3
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fa66 	bl	8008714 <USBD_CoreFindEP>
 8008248:	4603      	mov	r3, r0
 800824a:	75bb      	strb	r3, [r7, #22]
            break;
 800824c:	e002      	b.n	8008254 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	75bb      	strb	r3, [r7, #22]
            break;
 8008252:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008254:	7dbb      	ldrb	r3, [r7, #22]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d119      	bne.n	800828e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d113      	bne.n	800828e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008266:	7dba      	ldrb	r2, [r7, #22]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	32ae      	adds	r2, #174	; 0xae
 800826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008276:	7dba      	ldrb	r2, [r7, #22]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800827e:	7dba      	ldrb	r2, [r7, #22]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	32ae      	adds	r2, #174	; 0xae
 8008284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f001 f97a 	bl	8009588 <USBD_CtlSendStatus>
 8008294:	e032      	b.n	80082fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829c:	b2db      	uxtb	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fa37 	bl	8008714 <USBD_CoreFindEP>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
 80082ac:	2bff      	cmp	r3, #255	; 0xff
 80082ae:	d025      	beq.n	80082fc <USBD_LL_DataOutStage+0x15c>
 80082b0:	7dbb      	ldrb	r3, [r7, #22]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d122      	bne.n	80082fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d117      	bne.n	80082f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80082c2:	7dba      	ldrb	r2, [r7, #22]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	32ae      	adds	r2, #174	; 0xae
 80082c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80082d2:	7dba      	ldrb	r2, [r7, #22]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082da:	7dba      	ldrb	r2, [r7, #22]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	32ae      	adds	r2, #174	; 0xae
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	7afa      	ldrb	r2, [r7, #11]
 80082e8:	4611      	mov	r1, r2
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	e000      	b.n	80082fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b086      	sub	sp, #24
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	460b      	mov	r3, r1
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d16f      	bne.n	80083fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3314      	adds	r3, #20
 800831e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008326:	2b02      	cmp	r3, #2
 8008328:	d15a      	bne.n	80083e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	429a      	cmp	r2, r3
 8008334:	d914      	bls.n	8008360 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	461a      	mov	r2, r3
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f001 f8dc 	bl	800950a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008352:	2300      	movs	r3, #0
 8008354:	2200      	movs	r2, #0
 8008356:	2100      	movs	r1, #0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f001 fedf 	bl	800a11c <USBD_LL_PrepareReceive>
 800835e:	e03f      	b.n	80083e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	429a      	cmp	r2, r3
 800836a:	d11c      	bne.n	80083a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008374:	429a      	cmp	r2, r3
 8008376:	d316      	bcc.n	80083a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008382:	429a      	cmp	r2, r3
 8008384:	d20f      	bcs.n	80083a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f001 f8bd 	bl	800950a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008398:	2300      	movs	r3, #0
 800839a:	2200      	movs	r2, #0
 800839c:	2100      	movs	r1, #0
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f001 febc 	bl	800a11c <USBD_LL_PrepareReceive>
 80083a4:	e01c      	b.n	80083e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d10f      	bne.n	80083d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d2:	2180      	movs	r1, #128	; 0x80
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f001 fd9b 	bl	8009f10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 f8e7 	bl	80095ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d03a      	beq.n	8008460 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fe42 	bl	8008074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083f8:	e032      	b.n	8008460 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008400:	b2db      	uxtb	r3, r3
 8008402:	4619      	mov	r1, r3
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 f985 	bl	8008714 <USBD_CoreFindEP>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2bff      	cmp	r3, #255	; 0xff
 8008412:	d025      	beq.n	8008460 <USBD_LL_DataInStage+0x15a>
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d122      	bne.n	8008460 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b03      	cmp	r3, #3
 8008424:	d11c      	bne.n	8008460 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008426:	7dfa      	ldrb	r2, [r7, #23]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	32ae      	adds	r2, #174	; 0xae
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d014      	beq.n	8008460 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008436:	7dfa      	ldrb	r2, [r7, #23]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800843e:	7dfa      	ldrb	r2, [r7, #23]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	32ae      	adds	r2, #174	; 0xae
 8008444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	7afa      	ldrb	r2, [r7, #11]
 800844c:	4611      	mov	r1, r2
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008456:	7dbb      	ldrb	r3, [r7, #22]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800845c:	7dbb      	ldrb	r3, [r7, #22]
 800845e:	e000      	b.n	8008462 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d014      	beq.n	80084d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6852      	ldr	r2, [r2, #4]
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	4611      	mov	r1, r2
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fca6 	bl	8009e28 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2240      	movs	r2, #64	; 0x40
 80084e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084ec:	2340      	movs	r3, #64	; 0x40
 80084ee:	2200      	movs	r2, #0
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fc98 	bl	8009e28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2240      	movs	r2, #64	; 0x40
 8008502:	621a      	str	r2, [r3, #32]

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b04      	cmp	r3, #4
 8008540:	d006      	beq.n	8008550 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2da      	uxtb	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2204      	movs	r2, #4
 8008554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b04      	cmp	r3, #4
 8008578:	d106      	bne.n	8008588 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008580:	b2da      	uxtb	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d110      	bne.n	80085cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	32ae      	adds	r2, #174	; 0xae
 80085ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e01c      	b.n	8008632 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b03      	cmp	r3, #3
 8008602:	d115      	bne.n	8008630 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	32ae      	adds	r2, #174	; 0xae
 800860e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	32ae      	adds	r2, #174	; 0xae
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	32ae      	adds	r2, #174	; 0xae
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e01c      	b.n	8008696 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b03      	cmp	r3, #3
 8008666:	d115      	bne.n	8008694 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32ae      	adds	r2, #174	; 0xae
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	; 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00e      	beq.n	80086f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6852      	ldr	r2, [r2, #4]
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	4611      	mov	r1, r2
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80086ec:	2303      	movs	r3, #3
 80086ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008706:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008720:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	885b      	ldrh	r3, [r3, #2]
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	429a      	cmp	r2, r3
 8008754:	d920      	bls.n	8008798 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800875e:	e013      	b.n	8008788 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008760:	f107 030a 	add.w	r3, r7, #10
 8008764:	4619      	mov	r1, r3
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	f000 f81b 	bl	80087a2 <USBD_GetNextDesc>
 800876c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b05      	cmp	r3, #5
 8008774:	d108      	bne.n	8008788 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	789b      	ldrb	r3, [r3, #2]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	429a      	cmp	r2, r3
 8008782:	d008      	beq.n	8008796 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	885b      	ldrh	r3, [r3, #2]
 800878c:	b29a      	uxth	r2, r3
 800878e:	897b      	ldrh	r3, [r7, #10]
 8008790:	429a      	cmp	r2, r3
 8008792:	d8e5      	bhi.n	8008760 <USBD_GetEpDesc+0x32>
 8008794:	e000      	b.n	8008798 <USBD_GetEpDesc+0x6a>
          break;
 8008796:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008798:	693b      	ldr	r3, [r7, #16]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	881a      	ldrh	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4413      	add	r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4413      	add	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087ce:	68fb      	ldr	r3, [r7, #12]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	3301      	adds	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087fa:	8a3b      	ldrh	r3, [r7, #16]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	b21a      	sxth	r2, r3
 8008800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008804:	4313      	orrs	r3, r2
 8008806:	b21b      	sxth	r3, r3
 8008808:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800880a:	89fb      	ldrh	r3, [r7, #14]
}
 800880c:	4618      	mov	r0, r3
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d005      	beq.n	800883e <USBD_StdDevReq+0x26>
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d857      	bhi.n	80088e6 <USBD_StdDevReq+0xce>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00f      	beq.n	800885a <USBD_StdDevReq+0x42>
 800883a:	2b20      	cmp	r3, #32
 800883c:	d153      	bne.n	80088e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	32ae      	adds	r2, #174	; 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e04a      	b.n	80088f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b09      	cmp	r3, #9
 8008860:	d83b      	bhi.n	80088da <USBD_StdDevReq+0xc2>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBD_StdDevReq+0x50>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	080088bd 	.word	0x080088bd
 800886c:	080088d1 	.word	0x080088d1
 8008870:	080088db 	.word	0x080088db
 8008874:	080088c7 	.word	0x080088c7
 8008878:	080088db 	.word	0x080088db
 800887c:	0800889b 	.word	0x0800889b
 8008880:	08008891 	.word	0x08008891
 8008884:	080088db 	.word	0x080088db
 8008888:	080088b3 	.word	0x080088b3
 800888c:	080088a5 	.word	0x080088a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa3c 	bl	8008d10 <USBD_GetDescriptor>
          break;
 8008898:	e024      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fbcb 	bl	8009038 <USBD_SetAddress>
          break;
 80088a2:	e01f      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc0a 	bl	80090c0 <USBD_SetConfig>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]
          break;
 80088b0:	e018      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fcad 	bl	8009214 <USBD_GetConfig>
          break;
 80088ba:	e013      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fcde 	bl	8009280 <USBD_GetStatus>
          break;
 80088c4:	e00e      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fd0d 	bl	80092e8 <USBD_SetFeature>
          break;
 80088ce:	e009      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fd31 	bl	800933a <USBD_ClrFeature>
          break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fd88 	bl	80093f2 <USBD_CtlError>
          break;
 80088e2:	bf00      	nop
      }
      break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fd82 	bl	80093f2 <USBD_CtlError>
      break;
 80088ee:	bf00      	nop
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d005      	beq.n	8008922 <USBD_StdItfReq+0x26>
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d852      	bhi.n	80089c0 <USBD_StdItfReq+0xc4>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <USBD_StdItfReq+0x26>
 800891e:	2b20      	cmp	r3, #32
 8008920:	d14e      	bne.n	80089c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	2b02      	cmp	r3, #2
 800892e:	d840      	bhi.n	80089b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	889b      	ldrh	r3, [r3, #4]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	d836      	bhi.n	80089a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	889b      	ldrh	r3, [r3, #4]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff fed9 	bl	80086fa <USBD_CoreFindIF>
 8008948:	4603      	mov	r3, r0
 800894a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2bff      	cmp	r3, #255	; 0xff
 8008950:	d01d      	beq.n	800898e <USBD_StdItfReq+0x92>
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11a      	bne.n	800898e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008958:	7bba      	ldrb	r2, [r7, #14]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	32ae      	adds	r2, #174	; 0xae
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00f      	beq.n	8008988 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008968:	7bba      	ldrb	r2, [r7, #14]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008970:	7bba      	ldrb	r2, [r7, #14]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	; 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008986:	e004      	b.n	8008992 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008988:	2303      	movs	r3, #3
 800898a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800898c:	e001      	b.n	8008992 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800898e:	2303      	movs	r3, #3
 8008990:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d110      	bne.n	80089bc <USBD_StdItfReq+0xc0>
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10d      	bne.n	80089bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fdf1 	bl	8009588 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089a6:	e009      	b.n	80089bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fd21 	bl	80093f2 <USBD_CtlError>
          break;
 80089b0:	e004      	b.n	80089bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fd1c 	bl	80093f2 <USBD_CtlError>
          break;
 80089ba:	e000      	b.n	80089be <USBD_StdItfReq+0xc2>
          break;
 80089bc:	bf00      	nop
      }
      break;
 80089be:	e004      	b.n	80089ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd15 	bl	80093f2 <USBD_CtlError>
      break;
 80089c8:	bf00      	nop
  }

  return ret;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	889b      	ldrh	r3, [r3, #4]
 80089e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f0:	2b40      	cmp	r3, #64	; 0x40
 80089f2:	d007      	beq.n	8008a04 <USBD_StdEPReq+0x30>
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	f200 817f 	bhi.w	8008cf8 <USBD_StdEPReq+0x324>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d02a      	beq.n	8008a54 <USBD_StdEPReq+0x80>
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	f040 817a 	bne.w	8008cf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fe83 	bl	8008714 <USBD_CoreFindEP>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a12:	7b7b      	ldrb	r3, [r7, #13]
 8008a14:	2bff      	cmp	r3, #255	; 0xff
 8008a16:	f000 8174 	beq.w	8008d02 <USBD_StdEPReq+0x32e>
 8008a1a:	7b7b      	ldrb	r3, [r7, #13]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 8170 	bne.w	8008d02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008a22:	7b7a      	ldrb	r2, [r7, #13]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a2a:	7b7a      	ldrb	r2, [r7, #13]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	32ae      	adds	r2, #174	; 0xae
 8008a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8163 	beq.w	8008d02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a3c:	7b7a      	ldrb	r2, [r7, #13]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	32ae      	adds	r2, #174	; 0xae
 8008a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a52:	e156      	b.n	8008d02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d008      	beq.n	8008a6e <USBD_StdEPReq+0x9a>
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	f300 8145 	bgt.w	8008cec <USBD_StdEPReq+0x318>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 809b 	beq.w	8008b9e <USBD_StdEPReq+0x1ca>
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d03c      	beq.n	8008ae6 <USBD_StdEPReq+0x112>
 8008a6c:	e13e      	b.n	8008cec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d002      	beq.n	8008a80 <USBD_StdEPReq+0xac>
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d016      	beq.n	8008aac <USBD_StdEPReq+0xd8>
 8008a7e:	e02c      	b.n	8008ada <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00d      	beq.n	8008aa2 <USBD_StdEPReq+0xce>
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b80      	cmp	r3, #128	; 0x80
 8008a8a:	d00a      	beq.n	8008aa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fa3d 	bl	8009f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fa39 	bl	8009f10 <USBD_LL_StallEP>
 8008a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aa0:	e020      	b.n	8008ae4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fca4 	bl	80093f2 <USBD_CtlError>
              break;
 8008aaa:	e01b      	b.n	8008ae4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	885b      	ldrh	r3, [r3, #2]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10e      	bne.n	8008ad2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00b      	beq.n	8008ad2 <USBD_StdEPReq+0xfe>
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d008      	beq.n	8008ad2 <USBD_StdEPReq+0xfe>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	88db      	ldrh	r3, [r3, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fa1f 	bl	8009f10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fd58 	bl	8009588 <USBD_CtlSendStatus>

              break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fc88 	bl	80093f2 <USBD_CtlError>
              break;
 8008ae2:	bf00      	nop
          }
          break;
 8008ae4:	e107      	b.n	8008cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d002      	beq.n	8008af8 <USBD_StdEPReq+0x124>
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d016      	beq.n	8008b24 <USBD_StdEPReq+0x150>
 8008af6:	e04b      	b.n	8008b90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00d      	beq.n	8008b1a <USBD_StdEPReq+0x146>
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d00a      	beq.n	8008b1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fa01 	bl	8009f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f9fd 	bl	8009f10 <USBD_LL_StallEP>
 8008b16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b18:	e040      	b.n	8008b9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fc68 	bl	80093f2 <USBD_CtlError>
              break;
 8008b22:	e03b      	b.n	8008b9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	885b      	ldrh	r3, [r3, #2]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d136      	bne.n	8008b9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 fa1e 	bl	8009f7c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fd21 	bl	8009588 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff fde2 	bl	8008714 <USBD_CoreFindEP>
 8008b50:	4603      	mov	r3, r0
 8008b52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b54:	7b7b      	ldrb	r3, [r7, #13]
 8008b56:	2bff      	cmp	r3, #255	; 0xff
 8008b58:	d01f      	beq.n	8008b9a <USBD_StdEPReq+0x1c6>
 8008b5a:	7b7b      	ldrb	r3, [r7, #13]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d11c      	bne.n	8008b9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b60:	7b7a      	ldrb	r2, [r7, #13]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b68:	7b7a      	ldrb	r2, [r7, #13]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	; 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d010      	beq.n	8008b9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b78:	7b7a      	ldrb	r2, [r7, #13]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	32ae      	adds	r2, #174	; 0xae
 8008b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	4798      	blx	r3
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b8e:	e004      	b.n	8008b9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fc2d 	bl	80093f2 <USBD_CtlError>
              break;
 8008b98:	e000      	b.n	8008b9c <USBD_StdEPReq+0x1c8>
              break;
 8008b9a:	bf00      	nop
          }
          break;
 8008b9c:	e0ab      	b.n	8008cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d002      	beq.n	8008bb0 <USBD_StdEPReq+0x1dc>
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d032      	beq.n	8008c14 <USBD_StdEPReq+0x240>
 8008bae:	e097      	b.n	8008ce0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <USBD_StdEPReq+0x1f2>
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	2b80      	cmp	r3, #128	; 0x80
 8008bba:	d004      	beq.n	8008bc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc17 	bl	80093f2 <USBD_CtlError>
                break;
 8008bc4:	e091      	b.n	8008cea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da0b      	bge.n	8008be6 <USBD_StdEPReq+0x212>
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	3310      	adds	r3, #16
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	3304      	adds	r3, #4
 8008be4:	e00b      	b.n	8008bfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc61 	bl	80094d4 <USBD_CtlSendData>
              break;
 8008c12:	e06a      	b.n	8008cea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da11      	bge.n	8008c40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	f003 020f 	and.w	r2, r3, #15
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	3324      	adds	r3, #36	; 0x24
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d117      	bne.n	8008c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fbda 	bl	80093f2 <USBD_CtlError>
                  break;
 8008c3e:	e054      	b.n	8008cea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	f003 020f 	and.w	r2, r3, #15
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fbc7 	bl	80093f2 <USBD_CtlError>
                  break;
 8008c64:	e041      	b.n	8008cea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da0b      	bge.n	8008c86 <USBD_StdEPReq+0x2b2>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	3310      	adds	r3, #16
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	3304      	adds	r3, #4
 8008c84:	e00b      	b.n	8008c9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <USBD_StdEPReq+0x2d8>
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d103      	bne.n	8008cb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e00e      	b.n	8008cd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 f995 	bl	8009fe8 <USBD_LL_IsStallEP>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	e002      	b.n	8008cd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fbfb 	bl	80094d4 <USBD_CtlSendData>
              break;
 8008cde:	e004      	b.n	8008cea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb85 	bl	80093f2 <USBD_CtlError>
              break;
 8008ce8:	bf00      	nop
          }
          break;
 8008cea:	e004      	b.n	8008cf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fb7f 	bl	80093f2 <USBD_CtlError>
          break;
 8008cf4:	bf00      	nop
      }
      break;
 8008cf6:	e005      	b.n	8008d04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fb79 	bl	80093f2 <USBD_CtlError>
      break;
 8008d00:	e000      	b.n	8008d04 <USBD_StdEPReq+0x330>
      break;
 8008d02:	bf00      	nop
  }

  return ret;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b0e      	cmp	r3, #14
 8008d32:	f200 8152 	bhi.w	8008fda <USBD_GetDescriptor+0x2ca>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <USBD_GetDescriptor+0x2c>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008dad 	.word	0x08008dad
 8008d40:	08008dc5 	.word	0x08008dc5
 8008d44:	08008e05 	.word	0x08008e05
 8008d48:	08008fdb 	.word	0x08008fdb
 8008d4c:	08008fdb 	.word	0x08008fdb
 8008d50:	08008f7b 	.word	0x08008f7b
 8008d54:	08008fa7 	.word	0x08008fa7
 8008d58:	08008fdb 	.word	0x08008fdb
 8008d5c:	08008fdb 	.word	0x08008fdb
 8008d60:	08008fdb 	.word	0x08008fdb
 8008d64:	08008fdb 	.word	0x08008fdb
 8008d68:	08008fdb 	.word	0x08008fdb
 8008d6c:	08008fdb 	.word	0x08008fdb
 8008d70:	08008fdb 	.word	0x08008fdb
 8008d74:	08008d79 	.word	0x08008d79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d9a:	e126      	b.n	8008fea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fb27 	bl	80093f2 <USBD_CtlError>
        err++;
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	3301      	adds	r3, #1
 8008da8:	72fb      	strb	r3, [r7, #11]
      break;
 8008daa:	e11e      	b.n	8008fea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
      break;
 8008dc2:	e112      	b.n	8008fea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7c1b      	ldrb	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10d      	bne.n	8008de8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	f107 0208 	add.w	r2, r7, #8
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
 8008ddc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	2202      	movs	r2, #2
 8008de4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008de6:	e100      	b.n	8008fea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	f107 0208 	add.w	r2, r7, #8
 8008df4:	4610      	mov	r0, r2
 8008df6:	4798      	blx	r3
 8008df8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	2202      	movs	r2, #2
 8008e00:	701a      	strb	r2, [r3, #0]
      break;
 8008e02:	e0f2      	b.n	8008fea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	885b      	ldrh	r3, [r3, #2]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	f200 80ac 	bhi.w	8008f68 <USBD_GetDescriptor+0x258>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <USBD_GetDescriptor+0x108>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e31 	.word	0x08008e31
 8008e1c:	08008e65 	.word	0x08008e65
 8008e20:	08008e99 	.word	0x08008e99
 8008e24:	08008ecd 	.word	0x08008ecd
 8008e28:	08008f01 	.word	0x08008f01
 8008e2c:	08008f35 	.word	0x08008f35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	7c12      	ldrb	r2, [r2, #16]
 8008e48:	f107 0108 	add.w	r1, r7, #8
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	4798      	blx	r3
 8008e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e52:	e091      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 facb 	bl	80093f2 <USBD_CtlError>
            err++;
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	72fb      	strb	r3, [r7, #11]
          break;
 8008e62:	e089      	b.n	8008f78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00b      	beq.n	8008e88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	7c12      	ldrb	r2, [r2, #16]
 8008e7c:	f107 0108 	add.w	r1, r7, #8
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e86:	e077      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fab1 	bl	80093f2 <USBD_CtlError>
            err++;
 8008e90:	7afb      	ldrb	r3, [r7, #11]
 8008e92:	3301      	adds	r3, #1
 8008e94:	72fb      	strb	r3, [r7, #11]
          break;
 8008e96:	e06f      	b.n	8008f78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7c12      	ldrb	r2, [r2, #16]
 8008eb0:	f107 0108 	add.w	r1, r7, #8
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4798      	blx	r3
 8008eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eba:	e05d      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fa97 	bl	80093f2 <USBD_CtlError>
            err++;
 8008ec4:	7afb      	ldrb	r3, [r7, #11]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eca:	e055      	b.n	8008f78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	7c12      	ldrb	r2, [r2, #16]
 8008ee4:	f107 0108 	add.w	r1, r7, #8
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
 8008eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eee:	e043      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa7d 	bl	80093f2 <USBD_CtlError>
            err++;
 8008ef8:	7afb      	ldrb	r3, [r7, #11]
 8008efa:	3301      	adds	r3, #1
 8008efc:	72fb      	strb	r3, [r7, #11]
          break;
 8008efe:	e03b      	b.n	8008f78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00b      	beq.n	8008f24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7c12      	ldrb	r2, [r2, #16]
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f22:	e029      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa63 	bl	80093f2 <USBD_CtlError>
            err++;
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	72fb      	strb	r3, [r7, #11]
          break;
 8008f32:	e021      	b.n	8008f78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7c12      	ldrb	r2, [r2, #16]
 8008f4c:	f107 0108 	add.w	r1, r7, #8
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f56:	e00f      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa49 	bl	80093f2 <USBD_CtlError>
            err++;
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	3301      	adds	r3, #1
 8008f64:	72fb      	strb	r3, [r7, #11]
          break;
 8008f66:	e007      	b.n	8008f78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa41 	bl	80093f2 <USBD_CtlError>
          err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f76:	bf00      	nop
      }
      break;
 8008f78:	e037      	b.n	8008fea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7c1b      	ldrb	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8a:	f107 0208 	add.w	r2, r7, #8
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4798      	blx	r3
 8008f92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f94:	e029      	b.n	8008fea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fa2a 	bl	80093f2 <USBD_CtlError>
        err++;
 8008f9e:	7afb      	ldrb	r3, [r7, #11]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa4:	e021      	b.n	8008fea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7c1b      	ldrb	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10d      	bne.n	8008fca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f107 0208 	add.w	r2, r7, #8
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4798      	blx	r3
 8008fbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	2207      	movs	r2, #7
 8008fc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fc8:	e00f      	b.n	8008fea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa10 	bl	80093f2 <USBD_CtlError>
        err++;
 8008fd2:	7afb      	ldrb	r3, [r7, #11]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fd8:	e007      	b.n	8008fea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa08 	bl	80093f2 <USBD_CtlError>
      err++;
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe8:	bf00      	nop
  }

  if (err != 0U)
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11e      	bne.n	800902e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	88db      	ldrh	r3, [r3, #6]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d016      	beq.n	8009026 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ff8:	893b      	ldrh	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00e      	beq.n	800901c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	88da      	ldrh	r2, [r3, #6]
 8009002:	893b      	ldrh	r3, [r7, #8]
 8009004:	4293      	cmp	r3, r2
 8009006:	bf28      	it	cs
 8009008:	4613      	movcs	r3, r2
 800900a:	b29b      	uxth	r3, r3
 800900c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800900e:	893b      	ldrh	r3, [r7, #8]
 8009010:	461a      	mov	r2, r3
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa5d 	bl	80094d4 <USBD_CtlSendData>
 800901a:	e009      	b.n	8009030 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f9e7 	bl	80093f2 <USBD_CtlError>
 8009024:	e004      	b.n	8009030 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 faae 	bl	8009588 <USBD_CtlSendStatus>
 800902c:	e000      	b.n	8009030 <USBD_GetDescriptor+0x320>
    return;
 800902e:	bf00      	nop
  }
}
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d131      	bne.n	80090ae <USBD_SetAddress+0x76>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d12d      	bne.n	80090ae <USBD_SetAddress+0x76>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	2b7f      	cmp	r3, #127	; 0x7f
 8009058:	d829      	bhi.n	80090ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	885b      	ldrh	r3, [r3, #2]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009064:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b03      	cmp	r3, #3
 8009070:	d104      	bne.n	800907c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9bc 	bl	80093f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907a:	e01d      	b.n	80090b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7bfa      	ldrb	r2, [r7, #15]
 8009080:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 ffd9 	bl	800a040 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa7a 	bl	8009588 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2202      	movs	r2, #2
 800909e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	e009      	b.n	80090b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ac:	e004      	b.n	80090b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f99e 	bl	80093f2 <USBD_CtlError>
  }
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	885b      	ldrh	r3, [r3, #2]
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	4b4e      	ldr	r3, [pc, #312]	; (8009210 <USBD_SetConfig+0x150>)
 80090d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090d8:	4b4d      	ldr	r3, [pc, #308]	; (8009210 <USBD_SetConfig+0x150>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d905      	bls.n	80090ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f985 	bl	80093f2 <USBD_CtlError>
    return USBD_FAIL;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e08c      	b.n	8009206 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d002      	beq.n	80090fe <USBD_SetConfig+0x3e>
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d029      	beq.n	8009150 <USBD_SetConfig+0x90>
 80090fc:	e075      	b.n	80091ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090fe:	4b44      	ldr	r3, [pc, #272]	; (8009210 <USBD_SetConfig+0x150>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d020      	beq.n	8009148 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009106:	4b42      	ldr	r3, [pc, #264]	; (8009210 <USBD_SetConfig+0x150>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009110:	4b3f      	ldr	r3, [pc, #252]	; (8009210 <USBD_SetConfig+0x150>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7fe ffb7 	bl	800808a <USBD_SetClassConfig>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f962 	bl	80093f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009136:	e065      	b.n	8009204 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fa25 	bl	8009588 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2203      	movs	r2, #3
 8009142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009146:	e05d      	b.n	8009204 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fa1d 	bl	8009588 <USBD_CtlSendStatus>
      break;
 800914e:	e059      	b.n	8009204 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009150:	4b2f      	ldr	r3, [pc, #188]	; (8009210 <USBD_SetConfig+0x150>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d112      	bne.n	800917e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009160:	4b2b      	ldr	r3, [pc, #172]	; (8009210 <USBD_SetConfig+0x150>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800916a:	4b29      	ldr	r3, [pc, #164]	; (8009210 <USBD_SetConfig+0x150>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fe ffa6 	bl	80080c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa06 	bl	8009588 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800917c:	e042      	b.n	8009204 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800917e:	4b24      	ldr	r3, [pc, #144]	; (8009210 <USBD_SetConfig+0x150>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d02a      	beq.n	80091e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fe ff94 	bl	80080c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800919a:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <USBD_SetConfig+0x150>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091a4:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <USBD_SetConfig+0x150>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fe ff6d 	bl	800808a <USBD_SetClassConfig>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00f      	beq.n	80091da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f918 	bl	80093f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe ff79 	bl	80080c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091d8:	e014      	b.n	8009204 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f9d4 	bl	8009588 <USBD_CtlSendStatus>
      break;
 80091e0:	e010      	b.n	8009204 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f9d0 	bl	8009588 <USBD_CtlSendStatus>
      break;
 80091e8:	e00c      	b.n	8009204 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f900 	bl	80093f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <USBD_SetConfig+0x150>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fe ff62 	bl	80080c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091fe:	2303      	movs	r3, #3
 8009200:	73fb      	strb	r3, [r7, #15]
      break;
 8009202:	bf00      	nop
  }

  return ret;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	200002d8 	.word	0x200002d8

08009214 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	88db      	ldrh	r3, [r3, #6]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d004      	beq.n	8009230 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f8e2 	bl	80093f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800922e:	e023      	b.n	8009278 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	dc02      	bgt.n	8009242 <USBD_GetConfig+0x2e>
 800923c:	2b00      	cmp	r3, #0
 800923e:	dc03      	bgt.n	8009248 <USBD_GetConfig+0x34>
 8009240:	e015      	b.n	800926e <USBD_GetConfig+0x5a>
 8009242:	2b03      	cmp	r3, #3
 8009244:	d00b      	beq.n	800925e <USBD_GetConfig+0x4a>
 8009246:	e012      	b.n	800926e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3308      	adds	r3, #8
 8009252:	2201      	movs	r2, #1
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f93c 	bl	80094d4 <USBD_CtlSendData>
        break;
 800925c:	e00c      	b.n	8009278 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3304      	adds	r3, #4
 8009262:	2201      	movs	r2, #1
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f934 	bl	80094d4 <USBD_CtlSendData>
        break;
 800926c:	e004      	b.n	8009278 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8be 	bl	80093f2 <USBD_CtlError>
        break;
 8009276:	bf00      	nop
}
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009290:	b2db      	uxtb	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	2b02      	cmp	r3, #2
 8009296:	d81e      	bhi.n	80092d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	88db      	ldrh	r3, [r3, #6]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d004      	beq.n	80092aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f8a5 	bl	80093f2 <USBD_CtlError>
        break;
 80092a8:	e01a      	b.n	80092e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f043 0202 	orr.w	r2, r3, #2
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	330c      	adds	r3, #12
 80092ca:	2202      	movs	r2, #2
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f900 	bl	80094d4 <USBD_CtlSendData>
      break;
 80092d4:	e004      	b.n	80092e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f88a 	bl	80093f2 <USBD_CtlError>
      break;
 80092de:	bf00      	nop
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	885b      	ldrh	r3, [r3, #2]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d107      	bne.n	800930a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f940 	bl	8009588 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009308:	e013      	b.n	8009332 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	885b      	ldrh	r3, [r3, #2]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d10b      	bne.n	800932a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	889b      	ldrh	r3, [r3, #4]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	b29b      	uxth	r3, r3
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f930 	bl	8009588 <USBD_CtlSendStatus>
}
 8009328:	e003      	b.n	8009332 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f860 	bl	80093f2 <USBD_CtlError>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800934a:	b2db      	uxtb	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	2b02      	cmp	r3, #2
 8009350:	d80b      	bhi.n	800936a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	885b      	ldrh	r3, [r3, #2]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d10c      	bne.n	8009374 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f910 	bl	8009588 <USBD_CtlSendStatus>
      }
      break;
 8009368:	e004      	b.n	8009374 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f840 	bl	80093f2 <USBD_CtlError>
      break;
 8009372:	e000      	b.n	8009376 <USBD_ClrFeature+0x3c>
      break;
 8009374:	bf00      	nop
  }
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3301      	adds	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff fa17 	bl	80087dc <SWAPBYTE>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3301      	adds	r3, #1
 80093c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff fa0a 	bl	80087dc <SWAPBYTE>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff f9fd 	bl	80087dc <SWAPBYTE>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	80da      	strh	r2, [r3, #6]
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093fc:	2180      	movs	r1, #128	; 0x80
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fd86 	bl	8009f10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fd82 	bl	8009f10 <USBD_LL_StallEP>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d036      	beq.n	8009498 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f000 f836 	bl	80094a0 <USBD_GetLen>
 8009434:	4603      	mov	r3, r0
 8009436:	3301      	adds	r3, #1
 8009438:	b29b      	uxth	r3, r3
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4413      	add	r3, r2
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	7812      	ldrb	r2, [r2, #0]
 800944c:	701a      	strb	r2, [r3, #0]
  idx++;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	3301      	adds	r3, #1
 8009452:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	4413      	add	r3, r2
 800945a:	2203      	movs	r2, #3
 800945c:	701a      	strb	r2, [r3, #0]
  idx++;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	3301      	adds	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009464:	e013      	b.n	800948e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	4413      	add	r3, r2
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	7812      	ldrb	r2, [r2, #0]
 8009470:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3301      	adds	r3, #1
 8009476:	613b      	str	r3, [r7, #16]
    idx++;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	3301      	adds	r3, #1
 800947c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	4413      	add	r3, r2
 8009484:	2200      	movs	r2, #0
 8009486:	701a      	strb	r2, [r3, #0]
    idx++;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	3301      	adds	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e7      	bne.n	8009466 <USBD_GetString+0x52>
 8009496:	e000      	b.n	800949a <USBD_GetString+0x86>
    return;
 8009498:	bf00      	nop
  }
}
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094b0:	e005      	b.n	80094be <USBD_GetLen+0x1e>
  {
    len++;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	3301      	adds	r3, #1
 80094b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1f5      	bne.n	80094b2 <USBD_GetLen+0x12>
  }

  return len;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	2100      	movs	r1, #0
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 fdd6 	bl	800a0ac <USBD_LL_Transmit>

  return USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	2100      	movs	r1, #0
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fdc5 	bl	800a0ac <USBD_LL_Transmit>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2203      	movs	r2, #3
 800953c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	2100      	movs	r1, #0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fde0 	bl	800a11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fdcf 	bl	800a11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2204      	movs	r2, #4
 8009594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fd84 	bl	800a0ac <USBD_LL_Transmit>

  return USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2205      	movs	r2, #5
 80095ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095be:	2300      	movs	r3, #0
 80095c0:	2200      	movs	r2, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fda9 	bl	800a11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095d8:	2200      	movs	r2, #0
 80095da:	4912      	ldr	r1, [pc, #72]	; (8009624 <MX_USB_DEVICE_Init+0x50>)
 80095dc:	4812      	ldr	r0, [pc, #72]	; (8009628 <MX_USB_DEVICE_Init+0x54>)
 80095de:	f7fe fcd7 	bl	8007f90 <USBD_Init>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80095e8:	f7f7 fd50 	bl	800108c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095ec:	490f      	ldr	r1, [pc, #60]	; (800962c <MX_USB_DEVICE_Init+0x58>)
 80095ee:	480e      	ldr	r0, [pc, #56]	; (8009628 <MX_USB_DEVICE_Init+0x54>)
 80095f0:	f7fe fcfe 	bl	8007ff0 <USBD_RegisterClass>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095fa:	f7f7 fd47 	bl	800108c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095fe:	490c      	ldr	r1, [pc, #48]	; (8009630 <MX_USB_DEVICE_Init+0x5c>)
 8009600:	4809      	ldr	r0, [pc, #36]	; (8009628 <MX_USB_DEVICE_Init+0x54>)
 8009602:	f7fe fbf5 	bl	8007df0 <USBD_CDC_RegisterInterface>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800960c:	f7f7 fd3e 	bl	800108c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <MX_USB_DEVICE_Init+0x54>)
 8009612:	f7fe fd23 	bl	800805c <USBD_Start>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800961c:	f7f7 fd36 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009620:	bf00      	nop
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200000ac 	.word	0x200000ac
 8009628:	200002dc 	.word	0x200002dc
 800962c:	20000018 	.word	0x20000018
 8009630:	20000098 	.word	0x20000098

08009634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009638:	2200      	movs	r2, #0
 800963a:	4905      	ldr	r1, [pc, #20]	; (8009650 <CDC_Init_FS+0x1c>)
 800963c:	4805      	ldr	r0, [pc, #20]	; (8009654 <CDC_Init_FS+0x20>)
 800963e:	f7fe fbf1 	bl	8007e24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009642:	4905      	ldr	r1, [pc, #20]	; (8009658 <CDC_Init_FS+0x24>)
 8009644:	4803      	ldr	r0, [pc, #12]	; (8009654 <CDC_Init_FS+0x20>)
 8009646:	f7fe fc0f 	bl	8007e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800964a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800964c:	4618      	mov	r0, r3
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000db8 	.word	0x20000db8
 8009654:	200002dc 	.word	0x200002dc
 8009658:	200005b8 	.word	0x200005b8

0800965c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009662:	4618      	mov	r0, r3
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
 8009678:	4613      	mov	r3, r2
 800967a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b23      	cmp	r3, #35	; 0x23
 8009680:	d84a      	bhi.n	8009718 <CDC_Control_FS+0xac>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <CDC_Control_FS+0x1c>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	08009719 	.word	0x08009719
 800968c:	08009719 	.word	0x08009719
 8009690:	08009719 	.word	0x08009719
 8009694:	08009719 	.word	0x08009719
 8009698:	08009719 	.word	0x08009719
 800969c:	08009719 	.word	0x08009719
 80096a0:	08009719 	.word	0x08009719
 80096a4:	08009719 	.word	0x08009719
 80096a8:	08009719 	.word	0x08009719
 80096ac:	08009719 	.word	0x08009719
 80096b0:	08009719 	.word	0x08009719
 80096b4:	08009719 	.word	0x08009719
 80096b8:	08009719 	.word	0x08009719
 80096bc:	08009719 	.word	0x08009719
 80096c0:	08009719 	.word	0x08009719
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009719 	.word	0x08009719
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009719 	.word	0x08009719
 80096d4:	08009719 	.word	0x08009719
 80096d8:	08009719 	.word	0x08009719
 80096dc:	08009719 	.word	0x08009719
 80096e0:	08009719 	.word	0x08009719
 80096e4:	08009719 	.word	0x08009719
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009719 	.word	0x08009719
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009719 	.word	0x08009719
 80096f8:	08009719 	.word	0x08009719
 80096fc:	08009719 	.word	0x08009719
 8009700:	08009719 	.word	0x08009719
 8009704:	08009719 	.word	0x08009719
 8009708:	08009719 	.word	0x08009719
 800970c:	08009719 	.word	0x08009719
 8009710:	08009719 	.word	0x08009719
 8009714:	08009719 	.word	0x08009719
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009718:	bf00      	nop
  }

  return (USBD_OK);
 800971a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	4805      	ldr	r0, [pc, #20]	; (800974c <CDC_Receive_FS+0x24>)
 8009736:	f7fe fb97 	bl	8007e68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800973a:	4804      	ldr	r0, [pc, #16]	; (800974c <CDC_Receive_FS+0x24>)
 800973c:	f7fe fbf2 	bl	8007f24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009740:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200002dc 	.word	0x200002dc

08009750 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009760:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <CDC_Transmit_FS+0x48>)
 8009762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009766:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009772:	2301      	movs	r3, #1
 8009774:	e00b      	b.n	800978e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009776:	887b      	ldrh	r3, [r7, #2]
 8009778:	461a      	mov	r2, r3
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	4806      	ldr	r0, [pc, #24]	; (8009798 <CDC_Transmit_FS+0x48>)
 800977e:	f7fe fb51 	bl	8007e24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009782:	4805      	ldr	r0, [pc, #20]	; (8009798 <CDC_Transmit_FS+0x48>)
 8009784:	f7fe fb8e 	bl	8007ea4 <USBD_CDC_TransmitPacket>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200002dc 	.word	0x200002dc

0800979c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
	...

080097c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2212      	movs	r2, #18
 80097d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097d2:	4b03      	ldr	r3, [pc, #12]	; (80097e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	200000cc 	.word	0x200000cc

080097e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2204      	movs	r2, #4
 80097f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097f6:	4b03      	ldr	r3, [pc, #12]	; (8009804 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	200000ec 	.word	0x200000ec

08009808 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	; (800983c <USBD_FS_ProductStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBD_FS_ProductStrDescriptor+0x38>)
 8009820:	f7ff fdf8 	bl	8009414 <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <USBD_FS_ProductStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <USBD_FS_ProductStrDescriptor+0x38>)
 800982c:	f7ff fdf2 	bl	8009414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200015b8 	.word	0x200015b8
 8009840:	0800b0fc 	.word	0x0800b0fc

08009844 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	4904      	ldr	r1, [pc, #16]	; (8009864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009854:	4804      	ldr	r0, [pc, #16]	; (8009868 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009856:	f7ff fddd 	bl	8009414 <USBD_GetString>
  return USBD_StrDesc;
 800985a:	4b02      	ldr	r3, [pc, #8]	; (8009864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200015b8 	.word	0x200015b8
 8009868:	0800b110 	.word	0x0800b110

0800986c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	221a      	movs	r2, #26
 800987c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800987e:	f000 f855 	bl	800992c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009882:	4b02      	ldr	r3, [pc, #8]	; (800988c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	200000f0 	.word	0x200000f0

08009890 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	6039      	str	r1, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d105      	bne.n	80098ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	4907      	ldr	r1, [pc, #28]	; (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098a6:	4808      	ldr	r0, [pc, #32]	; (80098c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098a8:	f7ff fdb4 	bl	8009414 <USBD_GetString>
 80098ac:	e004      	b.n	80098b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	4904      	ldr	r1, [pc, #16]	; (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098b2:	4805      	ldr	r0, [pc, #20]	; (80098c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098b4:	f7ff fdae 	bl	8009414 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b8:	4b02      	ldr	r3, [pc, #8]	; (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200015b8 	.word	0x200015b8
 80098c8:	0800b124 	.word	0x0800b124

080098cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	6039      	str	r1, [r7, #0]
 80098d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	4907      	ldr	r1, [pc, #28]	; (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098e2:	4808      	ldr	r0, [pc, #32]	; (8009904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098e4:	f7ff fd96 	bl	8009414 <USBD_GetString>
 80098e8:	e004      	b.n	80098f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4904      	ldr	r1, [pc, #16]	; (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ee:	4805      	ldr	r0, [pc, #20]	; (8009904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098f0:	f7ff fd90 	bl	8009414 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	200015b8 	.word	0x200015b8
 8009904:	0800b130 	.word	0x0800b130

08009908 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	220c      	movs	r2, #12
 8009918:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800991a:	4b03      	ldr	r3, [pc, #12]	; (8009928 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	200000e0 	.word	0x200000e0

0800992c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009932:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <Get_SerialNum+0x44>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009938:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <Get_SerialNum+0x48>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800993e:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <Get_SerialNum+0x4c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4413      	add	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d009      	beq.n	8009966 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009952:	2208      	movs	r2, #8
 8009954:	4909      	ldr	r1, [pc, #36]	; (800997c <Get_SerialNum+0x50>)
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f814 	bl	8009984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800995c:	2204      	movs	r2, #4
 800995e:	4908      	ldr	r1, [pc, #32]	; (8009980 <Get_SerialNum+0x54>)
 8009960:	68b8      	ldr	r0, [r7, #8]
 8009962:	f000 f80f 	bl	8009984 <IntToUnicode>
  }
}
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	1fff7590 	.word	0x1fff7590
 8009974:	1fff7594 	.word	0x1fff7594
 8009978:	1fff7598 	.word	0x1fff7598
 800997c:	200000f2 	.word	0x200000f2
 8009980:	20000102 	.word	0x20000102

08009984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
 800999a:	e027      	b.n	80099ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0f1b      	lsrs	r3, r3, #28
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d80b      	bhi.n	80099bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	0f1b      	lsrs	r3, r3, #28
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4619      	mov	r1, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	440b      	add	r3, r1
 80099b4:	3230      	adds	r2, #48	; 0x30
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e00a      	b.n	80099d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	0f1b      	lsrs	r3, r3, #28
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4619      	mov	r1, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	440b      	add	r3, r1
 80099cc:	3237      	adds	r2, #55	; 0x37
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	3301      	adds	r3, #1
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	3301      	adds	r3, #1
 80099ea:	75fb      	strb	r3, [r7, #23]
 80099ec:	7dfa      	ldrb	r2, [r7, #23]
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d3d3      	bcc.n	800999c <IntToUnicode+0x18>
  }
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b0ac      	sub	sp, #176	; 0xb0
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a1c:	f107 0314 	add.w	r3, r7, #20
 8009a20:	2288      	movs	r2, #136	; 0x88
 8009a22:	2100      	movs	r1, #0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fd36 	bl	800a496 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a32:	d173      	bne.n	8009b1c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009a3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009a42:	2301      	movs	r3, #1
 8009a44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009a4a:	2318      	movs	r3, #24
 8009a4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009a4e:	2307      	movs	r3, #7
 8009a50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009a52:	2302      	movs	r3, #2
 8009a54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009a56:	2302      	movs	r3, #2
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009a5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a60:	f107 0314 	add.w	r3, r7, #20
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fb f979 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009a70:	f7f7 fb0c 	bl	800108c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a74:	4b2b      	ldr	r3, [pc, #172]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a78:	4a2a      	ldr	r2, [pc, #168]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a80:	4b28      	ldr	r3, [pc, #160]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a94:	2302      	movs	r3, #2
 8009a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009aa6:	230a      	movs	r3, #10
 8009aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ab6:	f7f8 f82f 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009aba:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009abe:	4a19      	ldr	r2, [pc, #100]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ac6:	4b17      	ldr	r3, [pc, #92]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ad2:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d114      	bne.n	8009b08 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ade:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae2:	4a10      	ldr	r2, [pc, #64]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8009aea:	4b0e      	ldr	r3, [pc, #56]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af2:	60bb      	str	r3, [r7, #8]
 8009af4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009af6:	f7f9 fe35 	bl	8003764 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <HAL_PCD_MspInit+0x120>)
 8009b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6593      	str	r3, [r2, #88]	; 0x58
 8009b06:	e001      	b.n	8009b0c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009b08:	f7f9 fe2c 	bl	8003764 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2100      	movs	r1, #0
 8009b10:	2043      	movs	r0, #67	; 0x43
 8009b12:	f7f7 ff8c 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b16:	2043      	movs	r0, #67	; 0x43
 8009b18:	f7f7 ffa5 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	37b0      	adds	r7, #176	; 0xb0
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	40021000 	.word	0x40021000

08009b28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fe fad9 	bl	80080f6 <USBD_LL_SetupStage>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7fe fb13 	bl	80081a0 <USBD_LL_DataOutStage>
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3348      	adds	r3, #72	; 0x48
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f7fe fbac 	bl	8008306 <USBD_LL_DataInStage>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fce6 	bl	8008596 <USBD_LL_SOF>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d001      	beq.n	8009bea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009be6:	f7f7 fa51 	bl	800108c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bf0:	7bfa      	ldrb	r2, [r7, #15]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fc8a 	bl	800850e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fc32 	bl	800846a <USBD_LL_Reset>
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c2a:	f043 0301 	orr.w	r3, r3, #1
 8009c2e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fc79 	bl	800852e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c44:	4b04      	ldr	r3, [pc, #16]	; (8009c58 <HAL_PCD_SuspendCallback+0x48>)
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	4a03      	ldr	r2, [pc, #12]	; (8009c58 <HAL_PCD_SuspendCallback+0x48>)
 8009c4a:	f043 0306 	orr.w	r3, r3, #6
 8009c4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed00 	.word	0xe000ed00

08009c5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c76:	f023 0301 	bic.w	r3, r3, #1
 8009c7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c84:	4b08      	ldr	r3, [pc, #32]	; (8009ca8 <HAL_PCD_ResumeCallback+0x4c>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4a07      	ldr	r2, [pc, #28]	; (8009ca8 <HAL_PCD_ResumeCallback+0x4c>)
 8009c8a:	f023 0306 	bic.w	r3, r3, #6
 8009c8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009c90:	f000 faf6 	bl	800a280 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fc63 	bl	8008566 <USBD_LL_Resume>
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fcb9 	bl	800863a <USBD_LL_IsoOUTIncomplete>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ce2:	78fa      	ldrb	r2, [r7, #3]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fc75 	bl	80085d6 <USBD_LL_IsoINIncomplete>
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fccb 	bl	800869e <USBD_LL_DevConnected>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fcc8 	bl	80086b4 <USBD_LL_DevDisconnected>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d13c      	bne.n	8009db6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d3c:	4a20      	ldr	r2, [pc, #128]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a1e      	ldr	r2, [pc, #120]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d4c:	4b1c      	ldr	r3, [pc, #112]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d54:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d56:	2206      	movs	r2, #6
 8009d58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d5a:	4b19      	ldr	r3, [pc, #100]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d60:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d62:	2202      	movs	r2, #2
 8009d64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d66:	4b16      	ldr	r3, [pc, #88]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d6c:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d72:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d8a:	480d      	ldr	r0, [pc, #52]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d8c:	f7f8 facf 	bl	800232e <HAL_PCD_Init>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d96:	f7f7 f979 	bl	800108c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d9a:	2180      	movs	r1, #128	; 0x80
 8009d9c:	4808      	ldr	r0, [pc, #32]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009d9e:	f7f9 fc38 	bl	8003612 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009da2:	2240      	movs	r2, #64	; 0x40
 8009da4:	2100      	movs	r1, #0
 8009da6:	4806      	ldr	r0, [pc, #24]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009da8:	f7f9 fbec 	bl	8003584 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dac:	2280      	movs	r2, #128	; 0x80
 8009dae:	2101      	movs	r1, #1
 8009db0:	4803      	ldr	r0, [pc, #12]	; (8009dc0 <USBD_LL_Init+0x94>)
 8009db2:	f7f9 fbe7 	bl	8003584 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200017b8 	.word	0x200017b8

08009dc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f8 fbcb 	bl	8002576 <HAL_PCD_Start>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d816      	bhi.n	8009e18 <USBD_LL_Start+0x54>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USBD_LL_Start+0x2c>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e07 	.word	0x08009e07
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e13 	.word	0x08009e13
    case HAL_OK :
      usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
    break;
 8009e04:	e00b      	b.n	8009e1e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0a:	e008      	b.n	8009e1e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e10:	e005      	b.n	8009e1e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e12:	2303      	movs	r3, #3
 8009e14:	73fb      	strb	r3, [r7, #15]
    break;
 8009e16:	e002      	b.n	8009e1e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1c:	bf00      	nop
  }
  return usb_status;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	4608      	mov	r0, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	461a      	mov	r2, r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	70fb      	strb	r3, [r7, #3]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70bb      	strb	r3, [r7, #2]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e50:	78bb      	ldrb	r3, [r7, #2]
 8009e52:	883a      	ldrh	r2, [r7, #0]
 8009e54:	78f9      	ldrb	r1, [r7, #3]
 8009e56:	f7f9 f875 	bl	8002f44 <HAL_PCD_EP_Open>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d817      	bhi.n	8009e94 <USBD_LL_OpenEP+0x6c>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <USBD_LL_OpenEP+0x44>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009e7d 	.word	0x08009e7d
 8009e70:	08009e83 	.word	0x08009e83
 8009e74:	08009e89 	.word	0x08009e89
 8009e78:	08009e8f 	.word	0x08009e8f
    case HAL_OK :
      usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e80:	e00b      	b.n	8009e9a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	73fb      	strb	r3, [r7, #15]
    break;
 8009e86:	e008      	b.n	8009e9a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8c:	e005      	b.n	8009e9a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
    break;
 8009e92:	e002      	b.n	8009e9a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	73fb      	strb	r3, [r7, #15]
    break;
 8009e98:	bf00      	nop
  }
  return usb_status;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f9 f8a6 	bl	8003014 <HAL_PCD_EP_Close>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d816      	bhi.n	8009f00 <USBD_LL_CloseEP+0x5c>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <USBD_LL_CloseEP+0x34>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009ee9 	.word	0x08009ee9
 8009edc:	08009eef 	.word	0x08009eef
 8009ee0:	08009ef5 	.word	0x08009ef5
 8009ee4:	08009efb 	.word	0x08009efb
    case HAL_OK :
      usb_status = USBD_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
    break;
 8009eec:	e00b      	b.n	8009f06 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef2:	e008      	b.n	8009f06 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef8:	e005      	b.n	8009f06 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009efa:	2303      	movs	r3, #3
 8009efc:	73fb      	strb	r3, [r7, #15]
    break;
 8009efe:	e002      	b.n	8009f06 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f00:	2303      	movs	r3, #3
 8009f02:	73fb      	strb	r3, [r7, #15]
    break;
 8009f04:	bf00      	nop
  }
  return usb_status;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f2a:	78fa      	ldrb	r2, [r7, #3]
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7f9 f935 	bl	800319e <HAL_PCD_EP_SetStall>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d816      	bhi.n	8009f6c <USBD_LL_StallEP+0x5c>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <USBD_LL_StallEP+0x34>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f5b 	.word	0x08009f5b
 8009f4c:	08009f61 	.word	0x08009f61
 8009f50:	08009f67 	.word	0x08009f67
    case HAL_OK :
      usb_status = USBD_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]
    break;
 8009f58:	e00b      	b.n	8009f72 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5e:	e008      	b.n	8009f72 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
    break;
 8009f64:	e005      	b.n	8009f72 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6a:	e002      	b.n	8009f72 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f70:	bf00      	nop
  }
  return usb_status;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f9 f961 	bl	8003262 <HAL_PCD_EP_ClrStall>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d816      	bhi.n	8009fd8 <USBD_LL_ClearStallEP+0x5c>
 8009faa:	a201      	add	r2, pc, #4	; (adr r2, 8009fb0 <USBD_LL_ClearStallEP+0x34>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fc1 	.word	0x08009fc1
 8009fb4:	08009fc7 	.word	0x08009fc7
 8009fb8:	08009fcd 	.word	0x08009fcd
 8009fbc:	08009fd3 	.word	0x08009fd3
    case HAL_OK :
      usb_status = USBD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc4:	e00b      	b.n	8009fde <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fca:	e008      	b.n	8009fde <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd0:	e005      	b.n	8009fde <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd6:	e002      	b.n	8009fde <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	73fb      	strb	r3, [r7, #15]
    break;
 8009fdc:	bf00      	nop
  }
  return usb_status;
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ffa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a000:	2b00      	cmp	r3, #0
 800a002:	da0b      	bge.n	800a01c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	4613      	mov	r3, r2
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	333e      	adds	r3, #62	; 0x3e
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	e00b      	b.n	800a034 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	4613      	mov	r3, r2
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a032:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7f8 ff4b 	bl	8002efa <HAL_PCD_SetAddress>
 800a064:	4603      	mov	r3, r0
 800a066:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d816      	bhi.n	800a09c <USBD_LL_SetUSBAddress+0x5c>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <USBD_LL_SetUSBAddress+0x34>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a08b 	.word	0x0800a08b
 800a07c:	0800a091 	.word	0x0800a091
 800a080:	0800a097 	.word	0x0800a097
    case HAL_OK :
      usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
    break;
 800a088:	e00b      	b.n	800a0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a08a:	2303      	movs	r3, #3
 800a08c:	73fb      	strb	r3, [r7, #15]
    break;
 800a08e:	e008      	b.n	800a0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a090:	2301      	movs	r3, #1
 800a092:	73fb      	strb	r3, [r7, #15]
    break;
 800a094:	e005      	b.n	800a0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a096:	2303      	movs	r3, #3
 800a098:	73fb      	strb	r3, [r7, #15]
    break;
 800a09a:	e002      	b.n	800a0a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a0:	bf00      	nop
  }
  return usb_status;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0ca:	7af9      	ldrb	r1, [r7, #11]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	f7f9 f834 	bl	800313c <HAL_PCD_EP_Transmit>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a0d8:	7dbb      	ldrb	r3, [r7, #22]
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	d816      	bhi.n	800a10c <USBD_LL_Transmit+0x60>
 800a0de:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <USBD_LL_Transmit+0x38>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a0f5 	.word	0x0800a0f5
 800a0e8:	0800a0fb 	.word	0x0800a0fb
 800a0ec:	0800a101 	.word	0x0800a101
 800a0f0:	0800a107 	.word	0x0800a107
    case HAL_OK :
      usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
    break;
 800a0f8:	e00b      	b.n	800a112 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
    break;
 800a0fe:	e008      	b.n	800a112 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a100:	2301      	movs	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
    break;
 800a104:	e005      	b.n	800a112 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a106:	2303      	movs	r3, #3
 800a108:	75fb      	strb	r3, [r7, #23]
    break;
 800a10a:	e002      	b.n	800a112 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	75fb      	strb	r3, [r7, #23]
    break;
 800a110:	bf00      	nop
  }
  return usb_status;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	460b      	mov	r3, r1
 800a12a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a13a:	7af9      	ldrb	r1, [r7, #11]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f7f8 ffb2 	bl	80030a8 <HAL_PCD_EP_Receive>
 800a144:	4603      	mov	r3, r0
 800a146:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a148:	7dbb      	ldrb	r3, [r7, #22]
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d816      	bhi.n	800a17c <USBD_LL_PrepareReceive+0x60>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBD_LL_PrepareReceive+0x38>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a16b 	.word	0x0800a16b
 800a15c:	0800a171 	.word	0x0800a171
 800a160:	0800a177 	.word	0x0800a177
    case HAL_OK :
      usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75fb      	strb	r3, [r7, #23]
    break;
 800a168:	e00b      	b.n	800a182 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a16a:	2303      	movs	r3, #3
 800a16c:	75fb      	strb	r3, [r7, #23]
    break;
 800a16e:	e008      	b.n	800a182 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a170:	2301      	movs	r3, #1
 800a172:	75fb      	strb	r3, [r7, #23]
    break;
 800a174:	e005      	b.n	800a182 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	75fb      	strb	r3, [r7, #23]
    break;
 800a17a:	e002      	b.n	800a182 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a17c:	2303      	movs	r3, #3
 800a17e:	75fb      	strb	r3, [r7, #23]
    break;
 800a180:	bf00      	nop
  }
  return usb_status;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f8 ffb2 	bl	800310c <HAL_PCD_EP_GetRxCount>
 800a1a8:	4603      	mov	r3, r0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <HAL_PCDEx_LPM_Callback+0x18>
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d01f      	beq.n	800a20a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1ca:	e03b      	b.n	800a244 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a1d4:	f000 f854 	bl	800a280 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1d8:	4b1c      	ldr	r3, [pc, #112]	; (800a24c <HAL_PCDEx_LPM_Callback+0x98>)
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	4a1b      	ldr	r2, [pc, #108]	; (800a24c <HAL_PCDEx_LPM_Callback+0x98>)
 800a1de:	f023 0306 	bic.w	r3, r3, #6
 800a1e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6812      	ldr	r2, [r2, #0]
 800a1f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1f6:	f023 0301 	bic.w	r3, r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe f9af 	bl	8008566 <USBD_LL_Resume>
    break;
 800a208:	e01c      	b.n	800a244 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe f980 	bl	800852e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <HAL_PCDEx_LPM_Callback+0x98>)
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	4a04      	ldr	r2, [pc, #16]	; (800a24c <HAL_PCDEx_LPM_Callback+0x98>)
 800a23c:	f043 0306 	orr.w	r3, r3, #6
 800a240:	6113      	str	r3, [r2, #16]
    break;
 800a242:	bf00      	nop
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	e000ed00 	.word	0xe000ed00

0800a250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a258:	4b03      	ldr	r3, [pc, #12]	; (800a268 <USBD_static_malloc+0x18>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20001cc4 	.word	0x20001cc4

0800a26c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a284:	f7f6 fea0 	bl	8000fc8 <SystemClock_Config>
}
 800a288:	bf00      	nop
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <std>:
 800a28c:	2300      	movs	r3, #0
 800a28e:	b510      	push	{r4, lr}
 800a290:	4604      	mov	r4, r0
 800a292:	e9c0 3300 	strd	r3, r3, [r0]
 800a296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a29a:	6083      	str	r3, [r0, #8]
 800a29c:	8181      	strh	r1, [r0, #12]
 800a29e:	6643      	str	r3, [r0, #100]	; 0x64
 800a2a0:	81c2      	strh	r2, [r0, #14]
 800a2a2:	6183      	str	r3, [r0, #24]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	2208      	movs	r2, #8
 800a2a8:	305c      	adds	r0, #92	; 0x5c
 800a2aa:	f000 f8f4 	bl	800a496 <memset>
 800a2ae:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <std+0x38>)
 800a2b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <std+0x3c>)
 800a2b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2b6:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <std+0x40>)
 800a2b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ba:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <std+0x44>)
 800a2bc:	6224      	str	r4, [r4, #32]
 800a2be:	6323      	str	r3, [r4, #48]	; 0x30
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0800a411 	.word	0x0800a411
 800a2c8:	0800a433 	.word	0x0800a433
 800a2cc:	0800a46b 	.word	0x0800a46b
 800a2d0:	0800a48f 	.word	0x0800a48f

0800a2d4 <stdio_exit_handler>:
 800a2d4:	4a02      	ldr	r2, [pc, #8]	; (800a2e0 <stdio_exit_handler+0xc>)
 800a2d6:	4903      	ldr	r1, [pc, #12]	; (800a2e4 <stdio_exit_handler+0x10>)
 800a2d8:	4803      	ldr	r0, [pc, #12]	; (800a2e8 <stdio_exit_handler+0x14>)
 800a2da:	f000 b869 	b.w	800a3b0 <_fwalk_sglue>
 800a2de:	bf00      	nop
 800a2e0:	2000010c 	.word	0x2000010c
 800a2e4:	0800ae31 	.word	0x0800ae31
 800a2e8:	20000118 	.word	0x20000118

0800a2ec <cleanup_stdio>:
 800a2ec:	6841      	ldr	r1, [r0, #4]
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	; (800a320 <cleanup_stdio+0x34>)
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	d001      	beq.n	800a2fc <cleanup_stdio+0x10>
 800a2f8:	f000 fd9a 	bl	800ae30 <_fflush_r>
 800a2fc:	68a1      	ldr	r1, [r4, #8]
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <cleanup_stdio+0x38>)
 800a300:	4299      	cmp	r1, r3
 800a302:	d002      	beq.n	800a30a <cleanup_stdio+0x1e>
 800a304:	4620      	mov	r0, r4
 800a306:	f000 fd93 	bl	800ae30 <_fflush_r>
 800a30a:	68e1      	ldr	r1, [r4, #12]
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <cleanup_stdio+0x3c>)
 800a30e:	4299      	cmp	r1, r3
 800a310:	d004      	beq.n	800a31c <cleanup_stdio+0x30>
 800a312:	4620      	mov	r0, r4
 800a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a318:	f000 bd8a 	b.w	800ae30 <_fflush_r>
 800a31c:	bd10      	pop	{r4, pc}
 800a31e:	bf00      	nop
 800a320:	20001ee4 	.word	0x20001ee4
 800a324:	20001f4c 	.word	0x20001f4c
 800a328:	20001fb4 	.word	0x20001fb4

0800a32c <global_stdio_init.part.0>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <global_stdio_init.part.0+0x30>)
 800a330:	4c0b      	ldr	r4, [pc, #44]	; (800a360 <global_stdio_init.part.0+0x34>)
 800a332:	4a0c      	ldr	r2, [pc, #48]	; (800a364 <global_stdio_init.part.0+0x38>)
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	4620      	mov	r0, r4
 800a338:	2200      	movs	r2, #0
 800a33a:	2104      	movs	r1, #4
 800a33c:	f7ff ffa6 	bl	800a28c <std>
 800a340:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a344:	2201      	movs	r2, #1
 800a346:	2109      	movs	r1, #9
 800a348:	f7ff ffa0 	bl	800a28c <std>
 800a34c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a350:	2202      	movs	r2, #2
 800a352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a356:	2112      	movs	r1, #18
 800a358:	f7ff bf98 	b.w	800a28c <std>
 800a35c:	2000201c 	.word	0x2000201c
 800a360:	20001ee4 	.word	0x20001ee4
 800a364:	0800a2d5 	.word	0x0800a2d5

0800a368 <__sfp_lock_acquire>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__sfp_lock_acquire+0x8>)
 800a36a:	f000 b90d 	b.w	800a588 <__retarget_lock_acquire_recursive>
 800a36e:	bf00      	nop
 800a370:	20002025 	.word	0x20002025

0800a374 <__sfp_lock_release>:
 800a374:	4801      	ldr	r0, [pc, #4]	; (800a37c <__sfp_lock_release+0x8>)
 800a376:	f000 b908 	b.w	800a58a <__retarget_lock_release_recursive>
 800a37a:	bf00      	nop
 800a37c:	20002025 	.word	0x20002025

0800a380 <__sinit>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4604      	mov	r4, r0
 800a384:	f7ff fff0 	bl	800a368 <__sfp_lock_acquire>
 800a388:	6a23      	ldr	r3, [r4, #32]
 800a38a:	b11b      	cbz	r3, 800a394 <__sinit+0x14>
 800a38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a390:	f7ff bff0 	b.w	800a374 <__sfp_lock_release>
 800a394:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <__sinit+0x28>)
 800a396:	6223      	str	r3, [r4, #32]
 800a398:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <__sinit+0x2c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1f5      	bne.n	800a38c <__sinit+0xc>
 800a3a0:	f7ff ffc4 	bl	800a32c <global_stdio_init.part.0>
 800a3a4:	e7f2      	b.n	800a38c <__sinit+0xc>
 800a3a6:	bf00      	nop
 800a3a8:	0800a2ed 	.word	0x0800a2ed
 800a3ac:	2000201c 	.word	0x2000201c

0800a3b0 <_fwalk_sglue>:
 800a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	4688      	mov	r8, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3c4:	d505      	bpl.n	800a3d2 <_fwalk_sglue+0x22>
 800a3c6:	6824      	ldr	r4, [r4, #0]
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d1f7      	bne.n	800a3bc <_fwalk_sglue+0xc>
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d907      	bls.n	800a3e8 <_fwalk_sglue+0x38>
 800a3d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	d003      	beq.n	800a3e8 <_fwalk_sglue+0x38>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	47c0      	blx	r8
 800a3e6:	4306      	orrs	r6, r0
 800a3e8:	3568      	adds	r5, #104	; 0x68
 800a3ea:	e7e9      	b.n	800a3c0 <_fwalk_sglue+0x10>

0800a3ec <iprintf>:
 800a3ec:	b40f      	push	{r0, r1, r2, r3}
 800a3ee:	b507      	push	{r0, r1, r2, lr}
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <iprintf+0x20>)
 800a3f2:	ab04      	add	r3, sp, #16
 800a3f4:	6808      	ldr	r0, [r1, #0]
 800a3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fa:	6881      	ldr	r1, [r0, #8]
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	f000 f9e7 	bl	800a7d0 <_vfiprintf_r>
 800a402:	b003      	add	sp, #12
 800a404:	f85d eb04 	ldr.w	lr, [sp], #4
 800a408:	b004      	add	sp, #16
 800a40a:	4770      	bx	lr
 800a40c:	20000164 	.word	0x20000164

0800a410 <__sread>:
 800a410:	b510      	push	{r4, lr}
 800a412:	460c      	mov	r4, r1
 800a414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a418:	f000 f868 	bl	800a4ec <_read_r>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	bfab      	itete	ge
 800a420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a422:	89a3      	ldrhlt	r3, [r4, #12]
 800a424:	181b      	addge	r3, r3, r0
 800a426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a42a:	bfac      	ite	ge
 800a42c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a42e:	81a3      	strhlt	r3, [r4, #12]
 800a430:	bd10      	pop	{r4, pc}

0800a432 <__swrite>:
 800a432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a436:	461f      	mov	r7, r3
 800a438:	898b      	ldrh	r3, [r1, #12]
 800a43a:	05db      	lsls	r3, r3, #23
 800a43c:	4605      	mov	r5, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	4616      	mov	r6, r2
 800a442:	d505      	bpl.n	800a450 <__swrite+0x1e>
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	2302      	movs	r3, #2
 800a44a:	2200      	movs	r2, #0
 800a44c:	f000 f83c 	bl	800a4c8 <_lseek_r>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	4632      	mov	r2, r6
 800a45e:	463b      	mov	r3, r7
 800a460:	4628      	mov	r0, r5
 800a462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	f000 b853 	b.w	800a510 <_write_r>

0800a46a <__sseek>:
 800a46a:	b510      	push	{r4, lr}
 800a46c:	460c      	mov	r4, r1
 800a46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a472:	f000 f829 	bl	800a4c8 <_lseek_r>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	bf15      	itete	ne
 800a47c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a47e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a486:	81a3      	strheq	r3, [r4, #12]
 800a488:	bf18      	it	ne
 800a48a:	81a3      	strhne	r3, [r4, #12]
 800a48c:	bd10      	pop	{r4, pc}

0800a48e <__sclose>:
 800a48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a492:	f000 b809 	b.w	800a4a8 <_close_r>

0800a496 <memset>:
 800a496:	4402      	add	r2, r0
 800a498:	4603      	mov	r3, r0
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d100      	bne.n	800a4a0 <memset+0xa>
 800a49e:	4770      	bx	lr
 800a4a0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a4:	e7f9      	b.n	800a49a <memset+0x4>
	...

0800a4a8 <_close_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_close_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f6 ff19 	bl	80012ea <_close>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_close_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_close_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20002020 	.word	0x20002020

0800a4c8 <_lseek_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_lseek_r+0x20>)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f6 ff2e 	bl	8001338 <_lseek>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_lseek_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_lseek_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	20002020 	.word	0x20002020

0800a4ec <_read_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_read_r+0x20>)
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7f6 fed8 	bl	80012b0 <_read>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_read_r+0x1e>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_read_r+0x1e>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20002020 	.word	0x20002020

0800a510 <_write_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d07      	ldr	r5, [pc, #28]	; (800a530 <_write_r+0x20>)
 800a514:	4604      	mov	r4, r0
 800a516:	4608      	mov	r0, r1
 800a518:	4611      	mov	r1, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	602a      	str	r2, [r5, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	f7f6 fcf6 	bl	8000f10 <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_write_r+0x1e>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_write_r+0x1e>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20002020 	.word	0x20002020

0800a534 <__errno>:
 800a534:	4b01      	ldr	r3, [pc, #4]	; (800a53c <__errno+0x8>)
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	20000164 	.word	0x20000164

0800a540 <__libc_init_array>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	4d0d      	ldr	r5, [pc, #52]	; (800a578 <__libc_init_array+0x38>)
 800a544:	4c0d      	ldr	r4, [pc, #52]	; (800a57c <__libc_init_array+0x3c>)
 800a546:	1b64      	subs	r4, r4, r5
 800a548:	10a4      	asrs	r4, r4, #2
 800a54a:	2600      	movs	r6, #0
 800a54c:	42a6      	cmp	r6, r4
 800a54e:	d109      	bne.n	800a564 <__libc_init_array+0x24>
 800a550:	4d0b      	ldr	r5, [pc, #44]	; (800a580 <__libc_init_array+0x40>)
 800a552:	4c0c      	ldr	r4, [pc, #48]	; (800a584 <__libc_init_array+0x44>)
 800a554:	f000 fdbe 	bl	800b0d4 <_init>
 800a558:	1b64      	subs	r4, r4, r5
 800a55a:	10a4      	asrs	r4, r4, #2
 800a55c:	2600      	movs	r6, #0
 800a55e:	42a6      	cmp	r6, r4
 800a560:	d105      	bne.n	800a56e <__libc_init_array+0x2e>
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	f855 3b04 	ldr.w	r3, [r5], #4
 800a568:	4798      	blx	r3
 800a56a:	3601      	adds	r6, #1
 800a56c:	e7ee      	b.n	800a54c <__libc_init_array+0xc>
 800a56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a572:	4798      	blx	r3
 800a574:	3601      	adds	r6, #1
 800a576:	e7f2      	b.n	800a55e <__libc_init_array+0x1e>
 800a578:	0800b1c4 	.word	0x0800b1c4
 800a57c:	0800b1c4 	.word	0x0800b1c4
 800a580:	0800b1c4 	.word	0x0800b1c4
 800a584:	0800b1c8 	.word	0x0800b1c8

0800a588 <__retarget_lock_acquire_recursive>:
 800a588:	4770      	bx	lr

0800a58a <__retarget_lock_release_recursive>:
 800a58a:	4770      	bx	lr

0800a58c <_free_r>:
 800a58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a58e:	2900      	cmp	r1, #0
 800a590:	d044      	beq.n	800a61c <_free_r+0x90>
 800a592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a596:	9001      	str	r0, [sp, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f1a1 0404 	sub.w	r4, r1, #4
 800a59e:	bfb8      	it	lt
 800a5a0:	18e4      	addlt	r4, r4, r3
 800a5a2:	f000 f8df 	bl	800a764 <__malloc_lock>
 800a5a6:	4a1e      	ldr	r2, [pc, #120]	; (800a620 <_free_r+0x94>)
 800a5a8:	9801      	ldr	r0, [sp, #4]
 800a5aa:	6813      	ldr	r3, [r2, #0]
 800a5ac:	b933      	cbnz	r3, 800a5bc <_free_r+0x30>
 800a5ae:	6063      	str	r3, [r4, #4]
 800a5b0:	6014      	str	r4, [r2, #0]
 800a5b2:	b003      	add	sp, #12
 800a5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5b8:	f000 b8da 	b.w	800a770 <__malloc_unlock>
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	d908      	bls.n	800a5d2 <_free_r+0x46>
 800a5c0:	6825      	ldr	r5, [r4, #0]
 800a5c2:	1961      	adds	r1, r4, r5
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	bf01      	itttt	eq
 800a5c8:	6819      	ldreq	r1, [r3, #0]
 800a5ca:	685b      	ldreq	r3, [r3, #4]
 800a5cc:	1949      	addeq	r1, r1, r5
 800a5ce:	6021      	streq	r1, [r4, #0]
 800a5d0:	e7ed      	b.n	800a5ae <_free_r+0x22>
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	b10b      	cbz	r3, 800a5dc <_free_r+0x50>
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	d9fa      	bls.n	800a5d2 <_free_r+0x46>
 800a5dc:	6811      	ldr	r1, [r2, #0]
 800a5de:	1855      	adds	r5, r2, r1
 800a5e0:	42a5      	cmp	r5, r4
 800a5e2:	d10b      	bne.n	800a5fc <_free_r+0x70>
 800a5e4:	6824      	ldr	r4, [r4, #0]
 800a5e6:	4421      	add	r1, r4
 800a5e8:	1854      	adds	r4, r2, r1
 800a5ea:	42a3      	cmp	r3, r4
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	d1e0      	bne.n	800a5b2 <_free_r+0x26>
 800a5f0:	681c      	ldr	r4, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	6053      	str	r3, [r2, #4]
 800a5f6:	440c      	add	r4, r1
 800a5f8:	6014      	str	r4, [r2, #0]
 800a5fa:	e7da      	b.n	800a5b2 <_free_r+0x26>
 800a5fc:	d902      	bls.n	800a604 <_free_r+0x78>
 800a5fe:	230c      	movs	r3, #12
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	e7d6      	b.n	800a5b2 <_free_r+0x26>
 800a604:	6825      	ldr	r5, [r4, #0]
 800a606:	1961      	adds	r1, r4, r5
 800a608:	428b      	cmp	r3, r1
 800a60a:	bf04      	itt	eq
 800a60c:	6819      	ldreq	r1, [r3, #0]
 800a60e:	685b      	ldreq	r3, [r3, #4]
 800a610:	6063      	str	r3, [r4, #4]
 800a612:	bf04      	itt	eq
 800a614:	1949      	addeq	r1, r1, r5
 800a616:	6021      	streq	r1, [r4, #0]
 800a618:	6054      	str	r4, [r2, #4]
 800a61a:	e7ca      	b.n	800a5b2 <_free_r+0x26>
 800a61c:	b003      	add	sp, #12
 800a61e:	bd30      	pop	{r4, r5, pc}
 800a620:	20002028 	.word	0x20002028

0800a624 <sbrk_aligned>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	4e0e      	ldr	r6, [pc, #56]	; (800a660 <sbrk_aligned+0x3c>)
 800a628:	460c      	mov	r4, r1
 800a62a:	6831      	ldr	r1, [r6, #0]
 800a62c:	4605      	mov	r5, r0
 800a62e:	b911      	cbnz	r1, 800a636 <sbrk_aligned+0x12>
 800a630:	f000 fcbc 	bl	800afac <_sbrk_r>
 800a634:	6030      	str	r0, [r6, #0]
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 fcb7 	bl	800afac <_sbrk_r>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d00a      	beq.n	800a658 <sbrk_aligned+0x34>
 800a642:	1cc4      	adds	r4, r0, #3
 800a644:	f024 0403 	bic.w	r4, r4, #3
 800a648:	42a0      	cmp	r0, r4
 800a64a:	d007      	beq.n	800a65c <sbrk_aligned+0x38>
 800a64c:	1a21      	subs	r1, r4, r0
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 fcac 	bl	800afac <_sbrk_r>
 800a654:	3001      	adds	r0, #1
 800a656:	d101      	bne.n	800a65c <sbrk_aligned+0x38>
 800a658:	f04f 34ff 	mov.w	r4, #4294967295
 800a65c:	4620      	mov	r0, r4
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	2000202c 	.word	0x2000202c

0800a664 <_malloc_r>:
 800a664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a668:	1ccd      	adds	r5, r1, #3
 800a66a:	f025 0503 	bic.w	r5, r5, #3
 800a66e:	3508      	adds	r5, #8
 800a670:	2d0c      	cmp	r5, #12
 800a672:	bf38      	it	cc
 800a674:	250c      	movcc	r5, #12
 800a676:	2d00      	cmp	r5, #0
 800a678:	4607      	mov	r7, r0
 800a67a:	db01      	blt.n	800a680 <_malloc_r+0x1c>
 800a67c:	42a9      	cmp	r1, r5
 800a67e:	d905      	bls.n	800a68c <_malloc_r+0x28>
 800a680:	230c      	movs	r3, #12
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	2600      	movs	r6, #0
 800a686:	4630      	mov	r0, r6
 800a688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a760 <_malloc_r+0xfc>
 800a690:	f000 f868 	bl	800a764 <__malloc_lock>
 800a694:	f8d8 3000 	ldr.w	r3, [r8]
 800a698:	461c      	mov	r4, r3
 800a69a:	bb5c      	cbnz	r4, 800a6f4 <_malloc_r+0x90>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4638      	mov	r0, r7
 800a6a0:	f7ff ffc0 	bl	800a624 <sbrk_aligned>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	d155      	bne.n	800a756 <_malloc_r+0xf2>
 800a6aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a6ae:	4626      	mov	r6, r4
 800a6b0:	2e00      	cmp	r6, #0
 800a6b2:	d145      	bne.n	800a740 <_malloc_r+0xdc>
 800a6b4:	2c00      	cmp	r4, #0
 800a6b6:	d048      	beq.n	800a74a <_malloc_r+0xe6>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4638      	mov	r0, r7
 800a6be:	eb04 0903 	add.w	r9, r4, r3
 800a6c2:	f000 fc73 	bl	800afac <_sbrk_r>
 800a6c6:	4581      	cmp	r9, r0
 800a6c8:	d13f      	bne.n	800a74a <_malloc_r+0xe6>
 800a6ca:	6821      	ldr	r1, [r4, #0]
 800a6cc:	1a6d      	subs	r5, r5, r1
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7ff ffa7 	bl	800a624 <sbrk_aligned>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d037      	beq.n	800a74a <_malloc_r+0xe6>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	442b      	add	r3, r5
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d038      	beq.n	800a75a <_malloc_r+0xf6>
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	42a2      	cmp	r2, r4
 800a6ec:	d12b      	bne.n	800a746 <_malloc_r+0xe2>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	e00f      	b.n	800a714 <_malloc_r+0xb0>
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	1b52      	subs	r2, r2, r5
 800a6f8:	d41f      	bmi.n	800a73a <_malloc_r+0xd6>
 800a6fa:	2a0b      	cmp	r2, #11
 800a6fc:	d917      	bls.n	800a72e <_malloc_r+0xca>
 800a6fe:	1961      	adds	r1, r4, r5
 800a700:	42a3      	cmp	r3, r4
 800a702:	6025      	str	r5, [r4, #0]
 800a704:	bf18      	it	ne
 800a706:	6059      	strne	r1, [r3, #4]
 800a708:	6863      	ldr	r3, [r4, #4]
 800a70a:	bf08      	it	eq
 800a70c:	f8c8 1000 	streq.w	r1, [r8]
 800a710:	5162      	str	r2, [r4, r5]
 800a712:	604b      	str	r3, [r1, #4]
 800a714:	4638      	mov	r0, r7
 800a716:	f104 060b 	add.w	r6, r4, #11
 800a71a:	f000 f829 	bl	800a770 <__malloc_unlock>
 800a71e:	f026 0607 	bic.w	r6, r6, #7
 800a722:	1d23      	adds	r3, r4, #4
 800a724:	1af2      	subs	r2, r6, r3
 800a726:	d0ae      	beq.n	800a686 <_malloc_r+0x22>
 800a728:	1b9b      	subs	r3, r3, r6
 800a72a:	50a3      	str	r3, [r4, r2]
 800a72c:	e7ab      	b.n	800a686 <_malloc_r+0x22>
 800a72e:	42a3      	cmp	r3, r4
 800a730:	6862      	ldr	r2, [r4, #4]
 800a732:	d1dd      	bne.n	800a6f0 <_malloc_r+0x8c>
 800a734:	f8c8 2000 	str.w	r2, [r8]
 800a738:	e7ec      	b.n	800a714 <_malloc_r+0xb0>
 800a73a:	4623      	mov	r3, r4
 800a73c:	6864      	ldr	r4, [r4, #4]
 800a73e:	e7ac      	b.n	800a69a <_malloc_r+0x36>
 800a740:	4634      	mov	r4, r6
 800a742:	6876      	ldr	r6, [r6, #4]
 800a744:	e7b4      	b.n	800a6b0 <_malloc_r+0x4c>
 800a746:	4613      	mov	r3, r2
 800a748:	e7cc      	b.n	800a6e4 <_malloc_r+0x80>
 800a74a:	230c      	movs	r3, #12
 800a74c:	603b      	str	r3, [r7, #0]
 800a74e:	4638      	mov	r0, r7
 800a750:	f000 f80e 	bl	800a770 <__malloc_unlock>
 800a754:	e797      	b.n	800a686 <_malloc_r+0x22>
 800a756:	6025      	str	r5, [r4, #0]
 800a758:	e7dc      	b.n	800a714 <_malloc_r+0xb0>
 800a75a:	605b      	str	r3, [r3, #4]
 800a75c:	deff      	udf	#255	; 0xff
 800a75e:	bf00      	nop
 800a760:	20002028 	.word	0x20002028

0800a764 <__malloc_lock>:
 800a764:	4801      	ldr	r0, [pc, #4]	; (800a76c <__malloc_lock+0x8>)
 800a766:	f7ff bf0f 	b.w	800a588 <__retarget_lock_acquire_recursive>
 800a76a:	bf00      	nop
 800a76c:	20002024 	.word	0x20002024

0800a770 <__malloc_unlock>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__malloc_unlock+0x8>)
 800a772:	f7ff bf0a 	b.w	800a58a <__retarget_lock_release_recursive>
 800a776:	bf00      	nop
 800a778:	20002024 	.word	0x20002024

0800a77c <__sfputc_r>:
 800a77c:	6893      	ldr	r3, [r2, #8]
 800a77e:	3b01      	subs	r3, #1
 800a780:	2b00      	cmp	r3, #0
 800a782:	b410      	push	{r4}
 800a784:	6093      	str	r3, [r2, #8]
 800a786:	da08      	bge.n	800a79a <__sfputc_r+0x1e>
 800a788:	6994      	ldr	r4, [r2, #24]
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	db01      	blt.n	800a792 <__sfputc_r+0x16>
 800a78e:	290a      	cmp	r1, #10
 800a790:	d103      	bne.n	800a79a <__sfputc_r+0x1e>
 800a792:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a796:	f000 bb73 	b.w	800ae80 <__swbuf_r>
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	1c58      	adds	r0, r3, #1
 800a79e:	6010      	str	r0, [r2, #0]
 800a7a0:	7019      	strb	r1, [r3, #0]
 800a7a2:	4608      	mov	r0, r1
 800a7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <__sfputs_r>:
 800a7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	18d5      	adds	r5, r2, r3
 800a7b4:	42ac      	cmp	r4, r5
 800a7b6:	d101      	bne.n	800a7bc <__sfputs_r+0x12>
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e007      	b.n	800a7cc <__sfputs_r+0x22>
 800a7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c0:	463a      	mov	r2, r7
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f7ff ffda 	bl	800a77c <__sfputc_r>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d1f3      	bne.n	800a7b4 <__sfputs_r+0xa>
 800a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7d0 <_vfiprintf_r>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	b09d      	sub	sp, #116	; 0x74
 800a7d8:	4614      	mov	r4, r2
 800a7da:	4698      	mov	r8, r3
 800a7dc:	4606      	mov	r6, r0
 800a7de:	b118      	cbz	r0, 800a7e8 <_vfiprintf_r+0x18>
 800a7e0:	6a03      	ldr	r3, [r0, #32]
 800a7e2:	b90b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x18>
 800a7e4:	f7ff fdcc 	bl	800a380 <__sinit>
 800a7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d405      	bmi.n	800a7fa <_vfiprintf_r+0x2a>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_vfiprintf_r+0x2a>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f7ff fec7 	bl	800a588 <__retarget_lock_acquire_recursive>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	071b      	lsls	r3, r3, #28
 800a7fe:	d501      	bpl.n	800a804 <_vfiprintf_r+0x34>
 800a800:	692b      	ldr	r3, [r5, #16]
 800a802:	b99b      	cbnz	r3, 800a82c <_vfiprintf_r+0x5c>
 800a804:	4629      	mov	r1, r5
 800a806:	4630      	mov	r0, r6
 800a808:	f000 fb78 	bl	800aefc <__swsetup_r>
 800a80c:	b170      	cbz	r0, 800a82c <_vfiprintf_r+0x5c>
 800a80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a810:	07dc      	lsls	r4, r3, #31
 800a812:	d504      	bpl.n	800a81e <_vfiprintf_r+0x4e>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b01d      	add	sp, #116	; 0x74
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	0598      	lsls	r0, r3, #22
 800a822:	d4f7      	bmi.n	800a814 <_vfiprintf_r+0x44>
 800a824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a826:	f7ff feb0 	bl	800a58a <__retarget_lock_release_recursive>
 800a82a:	e7f3      	b.n	800a814 <_vfiprintf_r+0x44>
 800a82c:	2300      	movs	r3, #0
 800a82e:	9309      	str	r3, [sp, #36]	; 0x24
 800a830:	2320      	movs	r3, #32
 800a832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a836:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83a:	2330      	movs	r3, #48	; 0x30
 800a83c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9f0 <_vfiprintf_r+0x220>
 800a840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a844:	f04f 0901 	mov.w	r9, #1
 800a848:	4623      	mov	r3, r4
 800a84a:	469a      	mov	sl, r3
 800a84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a850:	b10a      	cbz	r2, 800a856 <_vfiprintf_r+0x86>
 800a852:	2a25      	cmp	r2, #37	; 0x25
 800a854:	d1f9      	bne.n	800a84a <_vfiprintf_r+0x7a>
 800a856:	ebba 0b04 	subs.w	fp, sl, r4
 800a85a:	d00b      	beq.n	800a874 <_vfiprintf_r+0xa4>
 800a85c:	465b      	mov	r3, fp
 800a85e:	4622      	mov	r2, r4
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ffa1 	bl	800a7aa <__sfputs_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	f000 80a9 	beq.w	800a9c0 <_vfiprintf_r+0x1f0>
 800a86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a870:	445a      	add	r2, fp
 800a872:	9209      	str	r2, [sp, #36]	; 0x24
 800a874:	f89a 3000 	ldrb.w	r3, [sl]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 80a1 	beq.w	800a9c0 <_vfiprintf_r+0x1f0>
 800a87e:	2300      	movs	r3, #0
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a888:	f10a 0a01 	add.w	sl, sl, #1
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a894:	931a      	str	r3, [sp, #104]	; 0x68
 800a896:	4654      	mov	r4, sl
 800a898:	2205      	movs	r2, #5
 800a89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89e:	4854      	ldr	r0, [pc, #336]	; (800a9f0 <_vfiprintf_r+0x220>)
 800a8a0:	f7f5 fc96 	bl	80001d0 <memchr>
 800a8a4:	9a04      	ldr	r2, [sp, #16]
 800a8a6:	b9d8      	cbnz	r0, 800a8e0 <_vfiprintf_r+0x110>
 800a8a8:	06d1      	lsls	r1, r2, #27
 800a8aa:	bf44      	itt	mi
 800a8ac:	2320      	movmi	r3, #32
 800a8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b2:	0713      	lsls	r3, r2, #28
 800a8b4:	bf44      	itt	mi
 800a8b6:	232b      	movmi	r3, #43	; 0x2b
 800a8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c2:	d015      	beq.n	800a8f0 <_vfiprintf_r+0x120>
 800a8c4:	9a07      	ldr	r2, [sp, #28]
 800a8c6:	4654      	mov	r4, sl
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f04f 0c0a 	mov.w	ip, #10
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d4:	3b30      	subs	r3, #48	; 0x30
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	d94d      	bls.n	800a976 <_vfiprintf_r+0x1a6>
 800a8da:	b1b0      	cbz	r0, 800a90a <_vfiprintf_r+0x13a>
 800a8dc:	9207      	str	r2, [sp, #28]
 800a8de:	e014      	b.n	800a90a <_vfiprintf_r+0x13a>
 800a8e0:	eba0 0308 	sub.w	r3, r0, r8
 800a8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	46a2      	mov	sl, r4
 800a8ee:	e7d2      	b.n	800a896 <_vfiprintf_r+0xc6>
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	1d19      	adds	r1, r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	9103      	str	r1, [sp, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bfbb      	ittet	lt
 800a8fc:	425b      	neglt	r3, r3
 800a8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a902:	9307      	strge	r3, [sp, #28]
 800a904:	9307      	strlt	r3, [sp, #28]
 800a906:	bfb8      	it	lt
 800a908:	9204      	strlt	r2, [sp, #16]
 800a90a:	7823      	ldrb	r3, [r4, #0]
 800a90c:	2b2e      	cmp	r3, #46	; 0x2e
 800a90e:	d10c      	bne.n	800a92a <_vfiprintf_r+0x15a>
 800a910:	7863      	ldrb	r3, [r4, #1]
 800a912:	2b2a      	cmp	r3, #42	; 0x2a
 800a914:	d134      	bne.n	800a980 <_vfiprintf_r+0x1b0>
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	1d1a      	adds	r2, r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	9203      	str	r2, [sp, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bfb8      	it	lt
 800a922:	f04f 33ff 	movlt.w	r3, #4294967295
 800a926:	3402      	adds	r4, #2
 800a928:	9305      	str	r3, [sp, #20]
 800a92a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa00 <_vfiprintf_r+0x230>
 800a92e:	7821      	ldrb	r1, [r4, #0]
 800a930:	2203      	movs	r2, #3
 800a932:	4650      	mov	r0, sl
 800a934:	f7f5 fc4c 	bl	80001d0 <memchr>
 800a938:	b138      	cbz	r0, 800a94a <_vfiprintf_r+0x17a>
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	eba0 000a 	sub.w	r0, r0, sl
 800a940:	2240      	movs	r2, #64	; 0x40
 800a942:	4082      	lsls	r2, r0
 800a944:	4313      	orrs	r3, r2
 800a946:	3401      	adds	r4, #1
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94e:	4829      	ldr	r0, [pc, #164]	; (800a9f4 <_vfiprintf_r+0x224>)
 800a950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a954:	2206      	movs	r2, #6
 800a956:	f7f5 fc3b 	bl	80001d0 <memchr>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d03f      	beq.n	800a9de <_vfiprintf_r+0x20e>
 800a95e:	4b26      	ldr	r3, [pc, #152]	; (800a9f8 <_vfiprintf_r+0x228>)
 800a960:	bb1b      	cbnz	r3, 800a9aa <_vfiprintf_r+0x1da>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	3307      	adds	r3, #7
 800a966:	f023 0307 	bic.w	r3, r3, #7
 800a96a:	3308      	adds	r3, #8
 800a96c:	9303      	str	r3, [sp, #12]
 800a96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a970:	443b      	add	r3, r7
 800a972:	9309      	str	r3, [sp, #36]	; 0x24
 800a974:	e768      	b.n	800a848 <_vfiprintf_r+0x78>
 800a976:	fb0c 3202 	mla	r2, ip, r2, r3
 800a97a:	460c      	mov	r4, r1
 800a97c:	2001      	movs	r0, #1
 800a97e:	e7a6      	b.n	800a8ce <_vfiprintf_r+0xfe>
 800a980:	2300      	movs	r3, #0
 800a982:	3401      	adds	r4, #1
 800a984:	9305      	str	r3, [sp, #20]
 800a986:	4619      	mov	r1, r3
 800a988:	f04f 0c0a 	mov.w	ip, #10
 800a98c:	4620      	mov	r0, r4
 800a98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a992:	3a30      	subs	r2, #48	; 0x30
 800a994:	2a09      	cmp	r2, #9
 800a996:	d903      	bls.n	800a9a0 <_vfiprintf_r+0x1d0>
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0c6      	beq.n	800a92a <_vfiprintf_r+0x15a>
 800a99c:	9105      	str	r1, [sp, #20]
 800a99e:	e7c4      	b.n	800a92a <_vfiprintf_r+0x15a>
 800a9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e7f0      	b.n	800a98c <_vfiprintf_r+0x1bc>
 800a9aa:	ab03      	add	r3, sp, #12
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4b12      	ldr	r3, [pc, #72]	; (800a9fc <_vfiprintf_r+0x22c>)
 800a9b2:	a904      	add	r1, sp, #16
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f3af 8000 	nop.w
 800a9ba:	4607      	mov	r7, r0
 800a9bc:	1c78      	adds	r0, r7, #1
 800a9be:	d1d6      	bne.n	800a96e <_vfiprintf_r+0x19e>
 800a9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c2:	07d9      	lsls	r1, r3, #31
 800a9c4:	d405      	bmi.n	800a9d2 <_vfiprintf_r+0x202>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	059a      	lsls	r2, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_vfiprintf_r+0x202>
 800a9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ce:	f7ff fddc 	bl	800a58a <__retarget_lock_release_recursive>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	065b      	lsls	r3, r3, #25
 800a9d6:	f53f af1d 	bmi.w	800a814 <_vfiprintf_r+0x44>
 800a9da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9dc:	e71c      	b.n	800a818 <_vfiprintf_r+0x48>
 800a9de:	ab03      	add	r3, sp, #12
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <_vfiprintf_r+0x22c>)
 800a9e6:	a904      	add	r1, sp, #16
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f000 f879 	bl	800aae0 <_printf_i>
 800a9ee:	e7e4      	b.n	800a9ba <_vfiprintf_r+0x1ea>
 800a9f0:	0800b188 	.word	0x0800b188
 800a9f4:	0800b192 	.word	0x0800b192
 800a9f8:	00000000 	.word	0x00000000
 800a9fc:	0800a7ab 	.word	0x0800a7ab
 800aa00:	0800b18e 	.word	0x0800b18e

0800aa04 <_printf_common>:
 800aa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	4616      	mov	r6, r2
 800aa0a:	4699      	mov	r9, r3
 800aa0c:	688a      	ldr	r2, [r1, #8]
 800aa0e:	690b      	ldr	r3, [r1, #16]
 800aa10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa14:	4293      	cmp	r3, r2
 800aa16:	bfb8      	it	lt
 800aa18:	4613      	movlt	r3, r2
 800aa1a:	6033      	str	r3, [r6, #0]
 800aa1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa20:	4607      	mov	r7, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	b10a      	cbz	r2, 800aa2a <_printf_common+0x26>
 800aa26:	3301      	adds	r3, #1
 800aa28:	6033      	str	r3, [r6, #0]
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	0699      	lsls	r1, r3, #26
 800aa2e:	bf42      	ittt	mi
 800aa30:	6833      	ldrmi	r3, [r6, #0]
 800aa32:	3302      	addmi	r3, #2
 800aa34:	6033      	strmi	r3, [r6, #0]
 800aa36:	6825      	ldr	r5, [r4, #0]
 800aa38:	f015 0506 	ands.w	r5, r5, #6
 800aa3c:	d106      	bne.n	800aa4c <_printf_common+0x48>
 800aa3e:	f104 0a19 	add.w	sl, r4, #25
 800aa42:	68e3      	ldr	r3, [r4, #12]
 800aa44:	6832      	ldr	r2, [r6, #0]
 800aa46:	1a9b      	subs	r3, r3, r2
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	dc26      	bgt.n	800aa9a <_printf_common+0x96>
 800aa4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa50:	1e13      	subs	r3, r2, #0
 800aa52:	6822      	ldr	r2, [r4, #0]
 800aa54:	bf18      	it	ne
 800aa56:	2301      	movne	r3, #1
 800aa58:	0692      	lsls	r2, r2, #26
 800aa5a:	d42b      	bmi.n	800aab4 <_printf_common+0xb0>
 800aa5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa60:	4649      	mov	r1, r9
 800aa62:	4638      	mov	r0, r7
 800aa64:	47c0      	blx	r8
 800aa66:	3001      	adds	r0, #1
 800aa68:	d01e      	beq.n	800aaa8 <_printf_common+0xa4>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	6922      	ldr	r2, [r4, #16]
 800aa6e:	f003 0306 	and.w	r3, r3, #6
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	bf02      	ittt	eq
 800aa76:	68e5      	ldreq	r5, [r4, #12]
 800aa78:	6833      	ldreq	r3, [r6, #0]
 800aa7a:	1aed      	subeq	r5, r5, r3
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	bf0c      	ite	eq
 800aa80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa84:	2500      	movne	r5, #0
 800aa86:	4293      	cmp	r3, r2
 800aa88:	bfc4      	itt	gt
 800aa8a:	1a9b      	subgt	r3, r3, r2
 800aa8c:	18ed      	addgt	r5, r5, r3
 800aa8e:	2600      	movs	r6, #0
 800aa90:	341a      	adds	r4, #26
 800aa92:	42b5      	cmp	r5, r6
 800aa94:	d11a      	bne.n	800aacc <_printf_common+0xc8>
 800aa96:	2000      	movs	r0, #0
 800aa98:	e008      	b.n	800aaac <_printf_common+0xa8>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	4652      	mov	r2, sl
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	47c0      	blx	r8
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d103      	bne.n	800aab0 <_printf_common+0xac>
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab0:	3501      	adds	r5, #1
 800aab2:	e7c6      	b.n	800aa42 <_printf_common+0x3e>
 800aab4:	18e1      	adds	r1, r4, r3
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	2030      	movs	r0, #48	; 0x30
 800aaba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aabe:	4422      	add	r2, r4
 800aac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aac8:	3302      	adds	r3, #2
 800aaca:	e7c7      	b.n	800aa5c <_printf_common+0x58>
 800aacc:	2301      	movs	r3, #1
 800aace:	4622      	mov	r2, r4
 800aad0:	4649      	mov	r1, r9
 800aad2:	4638      	mov	r0, r7
 800aad4:	47c0      	blx	r8
 800aad6:	3001      	adds	r0, #1
 800aad8:	d0e6      	beq.n	800aaa8 <_printf_common+0xa4>
 800aada:	3601      	adds	r6, #1
 800aadc:	e7d9      	b.n	800aa92 <_printf_common+0x8e>
	...

0800aae0 <_printf_i>:
 800aae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	7e0f      	ldrb	r7, [r1, #24]
 800aae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aae8:	2f78      	cmp	r7, #120	; 0x78
 800aaea:	4691      	mov	r9, r2
 800aaec:	4680      	mov	r8, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	469a      	mov	sl, r3
 800aaf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaf6:	d807      	bhi.n	800ab08 <_printf_i+0x28>
 800aaf8:	2f62      	cmp	r7, #98	; 0x62
 800aafa:	d80a      	bhi.n	800ab12 <_printf_i+0x32>
 800aafc:	2f00      	cmp	r7, #0
 800aafe:	f000 80d4 	beq.w	800acaa <_printf_i+0x1ca>
 800ab02:	2f58      	cmp	r7, #88	; 0x58
 800ab04:	f000 80c0 	beq.w	800ac88 <_printf_i+0x1a8>
 800ab08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab10:	e03a      	b.n	800ab88 <_printf_i+0xa8>
 800ab12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab16:	2b15      	cmp	r3, #21
 800ab18:	d8f6      	bhi.n	800ab08 <_printf_i+0x28>
 800ab1a:	a101      	add	r1, pc, #4	; (adr r1, 800ab20 <_printf_i+0x40>)
 800ab1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab20:	0800ab79 	.word	0x0800ab79
 800ab24:	0800ab8d 	.word	0x0800ab8d
 800ab28:	0800ab09 	.word	0x0800ab09
 800ab2c:	0800ab09 	.word	0x0800ab09
 800ab30:	0800ab09 	.word	0x0800ab09
 800ab34:	0800ab09 	.word	0x0800ab09
 800ab38:	0800ab8d 	.word	0x0800ab8d
 800ab3c:	0800ab09 	.word	0x0800ab09
 800ab40:	0800ab09 	.word	0x0800ab09
 800ab44:	0800ab09 	.word	0x0800ab09
 800ab48:	0800ab09 	.word	0x0800ab09
 800ab4c:	0800ac91 	.word	0x0800ac91
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800ac4b 	.word	0x0800ac4b
 800ab58:	0800ab09 	.word	0x0800ab09
 800ab5c:	0800ab09 	.word	0x0800ab09
 800ab60:	0800acb3 	.word	0x0800acb3
 800ab64:	0800ab09 	.word	0x0800ab09
 800ab68:	0800abb9 	.word	0x0800abb9
 800ab6c:	0800ab09 	.word	0x0800ab09
 800ab70:	0800ab09 	.word	0x0800ab09
 800ab74:	0800ac53 	.word	0x0800ac53
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	1d1a      	adds	r2, r3, #4
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	602a      	str	r2, [r5, #0]
 800ab80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e09f      	b.n	800accc <_printf_i+0x1ec>
 800ab8c:	6820      	ldr	r0, [r4, #0]
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	0607      	lsls	r7, r0, #24
 800ab92:	f103 0104 	add.w	r1, r3, #4
 800ab96:	6029      	str	r1, [r5, #0]
 800ab98:	d501      	bpl.n	800ab9e <_printf_i+0xbe>
 800ab9a:	681e      	ldr	r6, [r3, #0]
 800ab9c:	e003      	b.n	800aba6 <_printf_i+0xc6>
 800ab9e:	0646      	lsls	r6, r0, #25
 800aba0:	d5fb      	bpl.n	800ab9a <_printf_i+0xba>
 800aba2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	da03      	bge.n	800abb2 <_printf_i+0xd2>
 800abaa:	232d      	movs	r3, #45	; 0x2d
 800abac:	4276      	negs	r6, r6
 800abae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb2:	485a      	ldr	r0, [pc, #360]	; (800ad1c <_printf_i+0x23c>)
 800abb4:	230a      	movs	r3, #10
 800abb6:	e012      	b.n	800abde <_printf_i+0xfe>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	6820      	ldr	r0, [r4, #0]
 800abbc:	1d19      	adds	r1, r3, #4
 800abbe:	6029      	str	r1, [r5, #0]
 800abc0:	0605      	lsls	r5, r0, #24
 800abc2:	d501      	bpl.n	800abc8 <_printf_i+0xe8>
 800abc4:	681e      	ldr	r6, [r3, #0]
 800abc6:	e002      	b.n	800abce <_printf_i+0xee>
 800abc8:	0641      	lsls	r1, r0, #25
 800abca:	d5fb      	bpl.n	800abc4 <_printf_i+0xe4>
 800abcc:	881e      	ldrh	r6, [r3, #0]
 800abce:	4853      	ldr	r0, [pc, #332]	; (800ad1c <_printf_i+0x23c>)
 800abd0:	2f6f      	cmp	r7, #111	; 0x6f
 800abd2:	bf0c      	ite	eq
 800abd4:	2308      	moveq	r3, #8
 800abd6:	230a      	movne	r3, #10
 800abd8:	2100      	movs	r1, #0
 800abda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abde:	6865      	ldr	r5, [r4, #4]
 800abe0:	60a5      	str	r5, [r4, #8]
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	bfa2      	ittt	ge
 800abe6:	6821      	ldrge	r1, [r4, #0]
 800abe8:	f021 0104 	bicge.w	r1, r1, #4
 800abec:	6021      	strge	r1, [r4, #0]
 800abee:	b90e      	cbnz	r6, 800abf4 <_printf_i+0x114>
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	d04b      	beq.n	800ac8c <_printf_i+0x1ac>
 800abf4:	4615      	mov	r5, r2
 800abf6:	fbb6 f1f3 	udiv	r1, r6, r3
 800abfa:	fb03 6711 	mls	r7, r3, r1, r6
 800abfe:	5dc7      	ldrb	r7, [r0, r7]
 800ac00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac04:	4637      	mov	r7, r6
 800ac06:	42bb      	cmp	r3, r7
 800ac08:	460e      	mov	r6, r1
 800ac0a:	d9f4      	bls.n	800abf6 <_printf_i+0x116>
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d10b      	bne.n	800ac28 <_printf_i+0x148>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	07de      	lsls	r6, r3, #31
 800ac14:	d508      	bpl.n	800ac28 <_printf_i+0x148>
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	bfde      	ittt	le
 800ac1e:	2330      	movle	r3, #48	; 0x30
 800ac20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac24:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac28:	1b52      	subs	r2, r2, r5
 800ac2a:	6122      	str	r2, [r4, #16]
 800ac2c:	f8cd a000 	str.w	sl, [sp]
 800ac30:	464b      	mov	r3, r9
 800ac32:	aa03      	add	r2, sp, #12
 800ac34:	4621      	mov	r1, r4
 800ac36:	4640      	mov	r0, r8
 800ac38:	f7ff fee4 	bl	800aa04 <_printf_common>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d14a      	bne.n	800acd6 <_printf_i+0x1f6>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	b004      	add	sp, #16
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	4833      	ldr	r0, [pc, #204]	; (800ad20 <_printf_i+0x240>)
 800ac54:	2778      	movs	r7, #120	; 0x78
 800ac56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	6829      	ldr	r1, [r5, #0]
 800ac5e:	061f      	lsls	r7, r3, #24
 800ac60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac64:	d402      	bmi.n	800ac6c <_printf_i+0x18c>
 800ac66:	065f      	lsls	r7, r3, #25
 800ac68:	bf48      	it	mi
 800ac6a:	b2b6      	uxthmi	r6, r6
 800ac6c:	07df      	lsls	r7, r3, #31
 800ac6e:	bf48      	it	mi
 800ac70:	f043 0320 	orrmi.w	r3, r3, #32
 800ac74:	6029      	str	r1, [r5, #0]
 800ac76:	bf48      	it	mi
 800ac78:	6023      	strmi	r3, [r4, #0]
 800ac7a:	b91e      	cbnz	r6, 800ac84 <_printf_i+0x1a4>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	f023 0320 	bic.w	r3, r3, #32
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	2310      	movs	r3, #16
 800ac86:	e7a7      	b.n	800abd8 <_printf_i+0xf8>
 800ac88:	4824      	ldr	r0, [pc, #144]	; (800ad1c <_printf_i+0x23c>)
 800ac8a:	e7e4      	b.n	800ac56 <_printf_i+0x176>
 800ac8c:	4615      	mov	r5, r2
 800ac8e:	e7bd      	b.n	800ac0c <_printf_i+0x12c>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	6826      	ldr	r6, [r4, #0]
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	1d18      	adds	r0, r3, #4
 800ac98:	6028      	str	r0, [r5, #0]
 800ac9a:	0635      	lsls	r5, r6, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1c4>
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1ca>
 800aca4:	0670      	lsls	r0, r6, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1c0>
 800aca8:	8019      	strh	r1, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4615      	mov	r5, r2
 800acb0:	e7bc      	b.n	800ac2c <_printf_i+0x14c>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	602a      	str	r2, [r5, #0]
 800acb8:	681d      	ldr	r5, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4628      	mov	r0, r5
 800acc0:	f7f5 fa86 	bl	80001d0 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1ea>
 800acc6:	1b40      	subs	r0, r0, r5
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd4:	e7aa      	b.n	800ac2c <_printf_i+0x14c>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	462a      	mov	r2, r5
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ad      	beq.n	800ac40 <_printf_i+0x160>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x232>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a6      	b.n	800ac44 <_printf_i+0x164>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09d      	beq.n	800ac40 <_printf_i+0x160>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x216>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x20a>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x226>
 800ad1a:	bf00      	nop
 800ad1c:	0800b199 	.word	0x0800b199
 800ad20:	0800b1aa 	.word	0x0800b1aa

0800ad24 <__sflush_r>:
 800ad24:	898a      	ldrh	r2, [r1, #12]
 800ad26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	0710      	lsls	r0, r2, #28
 800ad2e:	460c      	mov	r4, r1
 800ad30:	d458      	bmi.n	800ade4 <__sflush_r+0xc0>
 800ad32:	684b      	ldr	r3, [r1, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc05      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dc02      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d0f9      	beq.n	800ad3e <__sflush_r+0x1a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad50:	682f      	ldr	r7, [r5, #0]
 800ad52:	6a21      	ldr	r1, [r4, #32]
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	d032      	beq.n	800adbe <__sflush_r+0x9a>
 800ad58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	075a      	lsls	r2, r3, #29
 800ad5e:	d505      	bpl.n	800ad6c <__sflush_r+0x48>
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	1ac0      	subs	r0, r0, r3
 800ad64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad66:	b10b      	cbz	r3, 800ad6c <__sflush_r+0x48>
 800ad68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad6a:	1ac0      	subs	r0, r0, r3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	6a21      	ldr	r1, [r4, #32]
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	d106      	bne.n	800ad8c <__sflush_r+0x68>
 800ad7e:	6829      	ldr	r1, [r5, #0]
 800ad80:	291d      	cmp	r1, #29
 800ad82:	d82b      	bhi.n	800addc <__sflush_r+0xb8>
 800ad84:	4a29      	ldr	r2, [pc, #164]	; (800ae2c <__sflush_r+0x108>)
 800ad86:	410a      	asrs	r2, r1
 800ad88:	07d6      	lsls	r6, r2, #31
 800ad8a:	d427      	bmi.n	800addc <__sflush_r+0xb8>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	6062      	str	r2, [r4, #4]
 800ad90:	04d9      	lsls	r1, r3, #19
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	d504      	bpl.n	800ada2 <__sflush_r+0x7e>
 800ad98:	1c42      	adds	r2, r0, #1
 800ad9a:	d101      	bne.n	800ada0 <__sflush_r+0x7c>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b903      	cbnz	r3, 800ada2 <__sflush_r+0x7e>
 800ada0:	6560      	str	r0, [r4, #84]	; 0x54
 800ada2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ada4:	602f      	str	r7, [r5, #0]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d0c9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adae:	4299      	cmp	r1, r3
 800adb0:	d002      	beq.n	800adb8 <__sflush_r+0x94>
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7ff fbea 	bl	800a58c <_free_r>
 800adb8:	2000      	movs	r0, #0
 800adba:	6360      	str	r0, [r4, #52]	; 0x34
 800adbc:	e7c0      	b.n	800ad40 <__sflush_r+0x1c>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	1c41      	adds	r1, r0, #1
 800adc6:	d1c8      	bne.n	800ad5a <__sflush_r+0x36>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0c5      	beq.n	800ad5a <__sflush_r+0x36>
 800adce:	2b1d      	cmp	r3, #29
 800add0:	d001      	beq.n	800add6 <__sflush_r+0xb2>
 800add2:	2b16      	cmp	r3, #22
 800add4:	d101      	bne.n	800adda <__sflush_r+0xb6>
 800add6:	602f      	str	r7, [r5, #0]
 800add8:	e7b1      	b.n	800ad3e <__sflush_r+0x1a>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7ad      	b.n	800ad40 <__sflush_r+0x1c>
 800ade4:	690f      	ldr	r7, [r1, #16]
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	d0a9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adea:	0793      	lsls	r3, r2, #30
 800adec:	680e      	ldr	r6, [r1, #0]
 800adee:	bf08      	it	eq
 800adf0:	694b      	ldreq	r3, [r1, #20]
 800adf2:	600f      	str	r7, [r1, #0]
 800adf4:	bf18      	it	ne
 800adf6:	2300      	movne	r3, #0
 800adf8:	eba6 0807 	sub.w	r8, r6, r7
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	dd9c      	ble.n	800ad3e <__sflush_r+0x1a>
 800ae04:	6a21      	ldr	r1, [r4, #32]
 800ae06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae08:	4643      	mov	r3, r8
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b0      	blx	r6
 800ae10:	2800      	cmp	r0, #0
 800ae12:	dc06      	bgt.n	800ae22 <__sflush_r+0xfe>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e78e      	b.n	800ad40 <__sflush_r+0x1c>
 800ae22:	4407      	add	r7, r0
 800ae24:	eba8 0800 	sub.w	r8, r8, r0
 800ae28:	e7e9      	b.n	800adfe <__sflush_r+0xda>
 800ae2a:	bf00      	nop
 800ae2c:	dfbffffe 	.word	0xdfbffffe

0800ae30 <_fflush_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	690b      	ldr	r3, [r1, #16]
 800ae34:	4605      	mov	r5, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b913      	cbnz	r3, 800ae40 <_fflush_r+0x10>
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	b118      	cbz	r0, 800ae4a <_fflush_r+0x1a>
 800ae42:	6a03      	ldr	r3, [r0, #32]
 800ae44:	b90b      	cbnz	r3, 800ae4a <_fflush_r+0x1a>
 800ae46:	f7ff fa9b 	bl	800a380 <__sinit>
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f3      	beq.n	800ae3a <_fflush_r+0xa>
 800ae52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae54:	07d0      	lsls	r0, r2, #31
 800ae56:	d404      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae58:	0599      	lsls	r1, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f7ff fb93 	bl	800a588 <__retarget_lock_acquire_recursive>
 800ae62:	4628      	mov	r0, r5
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff ff5d 	bl	800ad24 <__sflush_r>
 800ae6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	4605      	mov	r5, r0
 800ae70:	d4e4      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	059b      	lsls	r3, r3, #22
 800ae76:	d4e1      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f7ff fb86 	bl	800a58a <__retarget_lock_release_recursive>
 800ae7e:	e7dd      	b.n	800ae3c <_fflush_r+0xc>

0800ae80 <__swbuf_r>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	460e      	mov	r6, r1
 800ae84:	4614      	mov	r4, r2
 800ae86:	4605      	mov	r5, r0
 800ae88:	b118      	cbz	r0, 800ae92 <__swbuf_r+0x12>
 800ae8a:	6a03      	ldr	r3, [r0, #32]
 800ae8c:	b90b      	cbnz	r3, 800ae92 <__swbuf_r+0x12>
 800ae8e:	f7ff fa77 	bl	800a380 <__sinit>
 800ae92:	69a3      	ldr	r3, [r4, #24]
 800ae94:	60a3      	str	r3, [r4, #8]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	071a      	lsls	r2, r3, #28
 800ae9a:	d525      	bpl.n	800aee8 <__swbuf_r+0x68>
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	b31b      	cbz	r3, 800aee8 <__swbuf_r+0x68>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	6922      	ldr	r2, [r4, #16]
 800aea4:	1a98      	subs	r0, r3, r2
 800aea6:	6963      	ldr	r3, [r4, #20]
 800aea8:	b2f6      	uxtb	r6, r6
 800aeaa:	4283      	cmp	r3, r0
 800aeac:	4637      	mov	r7, r6
 800aeae:	dc04      	bgt.n	800aeba <__swbuf_r+0x3a>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f7ff ffbc 	bl	800ae30 <_fflush_r>
 800aeb8:	b9e0      	cbnz	r0, 800aef4 <__swbuf_r+0x74>
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	701e      	strb	r6, [r3, #0]
 800aec8:	6962      	ldr	r2, [r4, #20]
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	429a      	cmp	r2, r3
 800aece:	d004      	beq.n	800aeda <__swbuf_r+0x5a>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	07db      	lsls	r3, r3, #31
 800aed4:	d506      	bpl.n	800aee4 <__swbuf_r+0x64>
 800aed6:	2e0a      	cmp	r6, #10
 800aed8:	d104      	bne.n	800aee4 <__swbuf_r+0x64>
 800aeda:	4621      	mov	r1, r4
 800aedc:	4628      	mov	r0, r5
 800aede:	f7ff ffa7 	bl	800ae30 <_fflush_r>
 800aee2:	b938      	cbnz	r0, 800aef4 <__swbuf_r+0x74>
 800aee4:	4638      	mov	r0, r7
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	4621      	mov	r1, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 f806 	bl	800aefc <__swsetup_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d0d5      	beq.n	800aea0 <__swbuf_r+0x20>
 800aef4:	f04f 37ff 	mov.w	r7, #4294967295
 800aef8:	e7f4      	b.n	800aee4 <__swbuf_r+0x64>
	...

0800aefc <__swsetup_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <__swsetup_r+0xac>)
 800af00:	4605      	mov	r5, r0
 800af02:	6818      	ldr	r0, [r3, #0]
 800af04:	460c      	mov	r4, r1
 800af06:	b118      	cbz	r0, 800af10 <__swsetup_r+0x14>
 800af08:	6a03      	ldr	r3, [r0, #32]
 800af0a:	b90b      	cbnz	r3, 800af10 <__swsetup_r+0x14>
 800af0c:	f7ff fa38 	bl	800a380 <__sinit>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af16:	0718      	lsls	r0, r3, #28
 800af18:	d422      	bmi.n	800af60 <__swsetup_r+0x64>
 800af1a:	06d9      	lsls	r1, r3, #27
 800af1c:	d407      	bmi.n	800af2e <__swsetup_r+0x32>
 800af1e:	2309      	movs	r3, #9
 800af20:	602b      	str	r3, [r5, #0]
 800af22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	e034      	b.n	800af98 <__swsetup_r+0x9c>
 800af2e:	0758      	lsls	r0, r3, #29
 800af30:	d512      	bpl.n	800af58 <__swsetup_r+0x5c>
 800af32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af34:	b141      	cbz	r1, 800af48 <__swsetup_r+0x4c>
 800af36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af3a:	4299      	cmp	r1, r3
 800af3c:	d002      	beq.n	800af44 <__swsetup_r+0x48>
 800af3e:	4628      	mov	r0, r5
 800af40:	f7ff fb24 	bl	800a58c <_free_r>
 800af44:	2300      	movs	r3, #0
 800af46:	6363      	str	r3, [r4, #52]	; 0x34
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	2300      	movs	r3, #0
 800af52:	6063      	str	r3, [r4, #4]
 800af54:	6923      	ldr	r3, [r4, #16]
 800af56:	6023      	str	r3, [r4, #0]
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f043 0308 	orr.w	r3, r3, #8
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	b94b      	cbnz	r3, 800af78 <__swsetup_r+0x7c>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af6e:	d003      	beq.n	800af78 <__swsetup_r+0x7c>
 800af70:	4621      	mov	r1, r4
 800af72:	4628      	mov	r0, r5
 800af74:	f000 f850 	bl	800b018 <__smakebuf_r>
 800af78:	89a0      	ldrh	r0, [r4, #12]
 800af7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af7e:	f010 0301 	ands.w	r3, r0, #1
 800af82:	d00a      	beq.n	800af9a <__swsetup_r+0x9e>
 800af84:	2300      	movs	r3, #0
 800af86:	60a3      	str	r3, [r4, #8]
 800af88:	6963      	ldr	r3, [r4, #20]
 800af8a:	425b      	negs	r3, r3
 800af8c:	61a3      	str	r3, [r4, #24]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	b943      	cbnz	r3, 800afa4 <__swsetup_r+0xa8>
 800af92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af96:	d1c4      	bne.n	800af22 <__swsetup_r+0x26>
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	0781      	lsls	r1, r0, #30
 800af9c:	bf58      	it	pl
 800af9e:	6963      	ldrpl	r3, [r4, #20]
 800afa0:	60a3      	str	r3, [r4, #8]
 800afa2:	e7f4      	b.n	800af8e <__swsetup_r+0x92>
 800afa4:	2000      	movs	r0, #0
 800afa6:	e7f7      	b.n	800af98 <__swsetup_r+0x9c>
 800afa8:	20000164 	.word	0x20000164

0800afac <_sbrk_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d06      	ldr	r5, [pc, #24]	; (800afc8 <_sbrk_r+0x1c>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f6 f9cc 	bl	8001354 <_sbrk>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_sbrk_r+0x1a>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_sbrk_r+0x1a>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	20002020 	.word	0x20002020

0800afcc <__swhatbuf_r>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	460c      	mov	r4, r1
 800afd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd4:	2900      	cmp	r1, #0
 800afd6:	b096      	sub	sp, #88	; 0x58
 800afd8:	4615      	mov	r5, r2
 800afda:	461e      	mov	r6, r3
 800afdc:	da0d      	bge.n	800affa <__swhatbuf_r+0x2e>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afe4:	f04f 0100 	mov.w	r1, #0
 800afe8:	bf0c      	ite	eq
 800afea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afee:	2340      	movne	r3, #64	; 0x40
 800aff0:	2000      	movs	r0, #0
 800aff2:	6031      	str	r1, [r6, #0]
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	b016      	add	sp, #88	; 0x58
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	466a      	mov	r2, sp
 800affc:	f000 f848 	bl	800b090 <_fstat_r>
 800b000:	2800      	cmp	r0, #0
 800b002:	dbec      	blt.n	800afde <__swhatbuf_r+0x12>
 800b004:	9901      	ldr	r1, [sp, #4]
 800b006:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b00a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b00e:	4259      	negs	r1, r3
 800b010:	4159      	adcs	r1, r3
 800b012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b016:	e7eb      	b.n	800aff0 <__swhatbuf_r+0x24>

0800b018 <__smakebuf_r>:
 800b018:	898b      	ldrh	r3, [r1, #12]
 800b01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b01c:	079d      	lsls	r5, r3, #30
 800b01e:	4606      	mov	r6, r0
 800b020:	460c      	mov	r4, r1
 800b022:	d507      	bpl.n	800b034 <__smakebuf_r+0x1c>
 800b024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	2301      	movs	r3, #1
 800b02e:	6163      	str	r3, [r4, #20]
 800b030:	b002      	add	sp, #8
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	ab01      	add	r3, sp, #4
 800b036:	466a      	mov	r2, sp
 800b038:	f7ff ffc8 	bl	800afcc <__swhatbuf_r>
 800b03c:	9900      	ldr	r1, [sp, #0]
 800b03e:	4605      	mov	r5, r0
 800b040:	4630      	mov	r0, r6
 800b042:	f7ff fb0f 	bl	800a664 <_malloc_r>
 800b046:	b948      	cbnz	r0, 800b05c <__smakebuf_r+0x44>
 800b048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04c:	059a      	lsls	r2, r3, #22
 800b04e:	d4ef      	bmi.n	800b030 <__smakebuf_r+0x18>
 800b050:	f023 0303 	bic.w	r3, r3, #3
 800b054:	f043 0302 	orr.w	r3, r3, #2
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	e7e3      	b.n	800b024 <__smakebuf_r+0xc>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	6020      	str	r0, [r4, #0]
 800b060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	6163      	str	r3, [r4, #20]
 800b06a:	9b01      	ldr	r3, [sp, #4]
 800b06c:	6120      	str	r0, [r4, #16]
 800b06e:	b15b      	cbz	r3, 800b088 <__smakebuf_r+0x70>
 800b070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b074:	4630      	mov	r0, r6
 800b076:	f000 f81d 	bl	800b0b4 <_isatty_r>
 800b07a:	b128      	cbz	r0, 800b088 <__smakebuf_r+0x70>
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f023 0303 	bic.w	r3, r3, #3
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	431d      	orrs	r5, r3
 800b08c:	81a5      	strh	r5, [r4, #12]
 800b08e:	e7cf      	b.n	800b030 <__smakebuf_r+0x18>

0800b090 <_fstat_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_fstat_r+0x20>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	f7f6 f930 	bl	8001302 <_fstat>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d102      	bne.n	800b0ac <_fstat_r+0x1c>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	b103      	cbz	r3, 800b0ac <_fstat_r+0x1c>
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20002020 	.word	0x20002020

0800b0b4 <_isatty_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d06      	ldr	r5, [pc, #24]	; (800b0d0 <_isatty_r+0x1c>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f6 f92f 	bl	8001322 <_isatty>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_isatty_r+0x1a>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_isatty_r+0x1a>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20002020 	.word	0x20002020

0800b0d4 <_init>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	bf00      	nop
 800b0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0da:	bc08      	pop	{r3}
 800b0dc:	469e      	mov	lr, r3
 800b0de:	4770      	bx	lr

0800b0e0 <_fini>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	bf00      	nop
 800b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	469e      	mov	lr, r3
 800b0ea:	4770      	bx	lr
