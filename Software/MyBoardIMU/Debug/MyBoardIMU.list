
MyBoardIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800ef60  0800ef60  0001ef60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f448  0800f448  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f448  0800f448  0001f448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f450  0800f450  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f454  0800f454  0001f454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800f458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  200002d4  0800f72c  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000219c  0800f72c  0002219c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c58e  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048aa  00000000  00000000  0003c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  00041180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c3  00000000  00000000  000428e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b82a  00000000  00000000  00043aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ffee  00000000  00000000  0006f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f59  00000000  00000000  0008f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007594  00000000  00000000  00184214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef48 	.word	0x0800ef48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800ef48 	.word	0x0800ef48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_CAN1_Init+0x60>)
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <MX_CAN1_Init+0x64>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_CAN1_Init+0x60>)
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_CAN1_Init+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_CAN1_Init+0x60>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_CAN1_Init+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_CAN1_Init+0x60>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_CAN1_Init+0x60>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_CAN1_Init+0x60>)
 8001020:	2200      	movs	r2, #0
 8001022:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_CAN1_Init+0x60>)
 8001026:	2200      	movs	r2, #0
 8001028:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_CAN1_Init+0x60>)
 800102c:	2200      	movs	r2, #0
 800102e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_CAN1_Init+0x60>)
 8001032:	2200      	movs	r2, #0
 8001034:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_CAN1_Init+0x60>)
 8001038:	2200      	movs	r2, #0
 800103a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_CAN1_Init+0x60>)
 800103e:	f000 fe45 	bl	8001ccc <HAL_CAN_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 fa2b 	bl	80014a2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002f0 	.word	0x200002f0
 8001054:	40006400 	.word	0x40006400

08001058 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_CAN_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d128      	bne.n	80010cc <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010bc:	2309      	movs	r3, #9
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_CAN_MspInit+0x84>)
 80010c8:	f001 f80e 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40006400 	.word	0x40006400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x118>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <MX_GPIO_Init+0x118>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_GPIO_Init+0x118>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_RESET_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2111      	movs	r1, #17
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 f96d 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4824      	ldr	r0, [pc, #144]	; (80011fc <MX_GPIO_Init+0x11c>)
 800116a:	f001 f967 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PUSHBUTTON_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0x120>)
 8001184:	f000 ffb0 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FLASH_RESET_Pin|FLASH_CS_Pin;
 8001188:	2311      	movs	r3, #17
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f000 ffa1 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011c0:	f000 ff92 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011da:	f000 ff85 	bl	80020e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2017      	movs	r0, #23
 80011e4:	f000 ff49 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e8:	2017      	movs	r0, #23
 80011ea:	f000 ff62 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800

08001204 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_I2C1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_I2C1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_I2C1_Init+0x74>)
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <MX_I2C1_Init+0x7c>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_I2C1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_I2C1_Init+0x74>)
 8001240:	f001 f937 	bl	80024b2 <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 f92a 	bl	80014a2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <MX_I2C1_Init+0x74>)
 8001252:	f001 feaf 	bl	8002fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 f921 	bl	80014a2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_I2C1_Init+0x74>)
 8001264:	f001 fef1 	bl	800304a <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f918 	bl	80014a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000318 	.word	0x20000318
 800127c:	40005400 	.word	0x40005400
 8001280:	109093dc 	.word	0x109093dc

08001284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	; 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a fa16 	bl	800b6d6 <memset>
  if(i2cHandle->Instance==I2C1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_I2C_MspInit+0xb0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13a      	bne.n	800132a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 ffe5 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f000 f8e9 	bl	80014a2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0xb8>)
 800130e:	f000 feeb 	bl	80020e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	37b0      	adds	r7, #176	; 0xb0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400

08001340 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f008 fc86 	bl	8009c64 <CDC_Transmit_FS>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_write+0x40>)
 800135e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_write+0x40>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d0f1      	beq.n	800134c <_write+0xc>

    if (USBD_FAIL == rc) {
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_write+0x40>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d101      	bne.n	8001374 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001370:	2300      	movs	r3, #0
 8001372:	e000      	b.n	8001376 <_write+0x36>
    }
    return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000036c 	.word	0x2000036c

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001388:	b08e      	sub	sp, #56	; 0x38
 800138a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fc05 	bl	8001b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f838 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff fea4 	bl	80010e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001398:	f7ff ff34 	bl	8001204 <MX_I2C1_Init>
  MX_CAN1_Init();
 800139c:	f7ff fe28 	bl	8000ff0 <MX_CAN1_Init>
  MX_QUADSPI_Init();
 80013a0:	f000 f9a2 	bl	80016e8 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 80013a4:	f000 fb44 	bl	8001a30 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80013a8:	f008 fb9e 	bl	8009ae8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MPU6050_DATA data;

  MPU6050_Init(&hi2c1);
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <main+0x78>)
 80013ae:	f000 f8b9 	bl	8001524 <MPU6050_Init>

  while (1)
  {
	  MPU6050_ReadData(&hi2c1, &data);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <main+0x78>)
 80013b8:	f000 f952 	bl	8001660 <MPU6050_ReadData>

	  printf("AccelX: %.02f\tAccelY: %.02f\tAccelZ: %.02f\r\n", data.accel[0], data.accel[1], data.accel[2]);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8c2 	bl	8000548 <__aeabi_f2d>
 80013c4:	4680      	mov	r8, r0
 80013c6:	4689      	mov	r9, r1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8bc 	bl	8000548 <__aeabi_f2d>
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013e4:	e9cd 4500 	strd	r4, r5, [sp]
 80013e8:	4642      	mov	r2, r8
 80013ea:	464b      	mov	r3, r9
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <main+0x7c>)
 80013ee:	f00a f8fd 	bl	800b5ec <iprintf>
	  HAL_Delay(50);
 80013f2:	2032      	movs	r0, #50	; 0x32
 80013f4:	f000 fc46 	bl	8001c84 <HAL_Delay>
	  MPU6050_ReadData(&hi2c1, &data);
 80013f8:	e7db      	b.n	80013b2 <main+0x2e>
 80013fa:	bf00      	nop
 80013fc:	20000318 	.word	0x20000318
 8001400:	0800ef60 	.word	0x0800ef60

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00a f95f 	bl	800b6d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142a:	f003 f80f 	bl	800444c <HAL_PWREx_ControlVoltageScaling>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001434:	f000 f835 	bl	80014a2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	2303      	movs	r3, #3
 8001448:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800144e:	230c      	movs	r3, #12
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001452:	2307      	movs	r3, #7
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f914 	bl	8004690 <HAL_RCC_OscConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800146e:	f000 f818 	bl	80014a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2303      	movs	r3, #3
 8001478:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	2104      	movs	r1, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fcdc 	bl	8004e48 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001496:	f000 f804 	bl	80014a2 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3758      	adds	r7, #88	; 0x58
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a6:	b672      	cpsid	i
}
 80014a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014aa:	e7fe      	b.n	80014aa <Error_Handler+0x8>

080014ac <MPU6050_read_from_single_register>:
#include "../Inc/mpu6050.h"

static uint8_t MPU6050_read_from_single_register(I2C_HandleTypeDef* i2c, uint8_t address){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDR<<1, address, 1, &data, 1, 100);
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f107 030f 	add.w	r3, r7, #15
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	21d0      	movs	r1, #208	; 0xd0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f001 f99e 	bl	8002810 <HAL_I2C_Mem_Read>
	return data;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <MPU6050_read_from_double_register>:

static uint16_t MPU6050_read_from_double_register(I2C_HandleTypeDef* i2c, uint8_t high_address, uint8_t low_address){
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70bb      	strb	r3, [r7, #2]
	uint16_t data;
	uint8_t high_byte, low_byte;

	high_byte = MPU6050_read_from_single_register(i2c, high_address);
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffda 	bl	80014ac <MPU6050_read_from_single_register>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
	low_byte = MPU6050_read_from_single_register(i2c, low_address);
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffd3 	bl	80014ac <MPU6050_read_from_single_register>
 8001506:	4603      	mov	r3, r0
 8001508:	73bb      	strb	r3, [r7, #14]

	data = ( high_byte << 8 ) | low_byte;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21b      	sxth	r3, r3
 8001518:	81bb      	strh	r3, [r7, #12]
	return data;
 800151a:	89bb      	ldrh	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef* i2c){
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af04      	add	r7, sp, #16
 800152a:	6078      	str	r0, [r7, #4]
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR<<1, WHO_I_AM, 1, &check, 1, 100);
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	2301      	movs	r3, #1
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f107 030f 	add.w	r3, r7, #15
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	2275      	movs	r2, #117	; 0x75
 800153e:	21d0      	movs	r1, #208	; 0xd0
 8001540:	4826      	ldr	r0, [pc, #152]	; (80015dc <MPU6050_Init+0xb8>)
 8001542:	f001 f965 	bl	8002810 <HAL_I2C_Mem_Read>

	/* If value of the WHO_I_AM register (address 0x75) is equal to 0x68 then
	 * the sensor is present and ready to be set up
	 *
	 * */
	if(check != 0x68){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b68      	cmp	r3, #104	; 0x68
 800154a:	d001      	beq.n	8001550 <MPU6050_Init+0x2c>
		return 1;
 800154c:	2301      	movs	r3, #1
 800154e:	e040      	b.n	80015d2 <MPU6050_Init+0xae>
	}

	// We need to wake up the sensor by writing the 0x00 value to the PWR_MGMT_1 (0x6B) register
	data = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, PWR_MGMT_1, 1, &data, 1, 1000);
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030e 	add.w	r3, r7, #14
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	226b      	movs	r2, #107	; 0x6b
 8001568:	21d0      	movs	r1, #208	; 0xd0
 800156a:	481c      	ldr	r0, [pc, #112]	; (80015dc <MPU6050_Init+0xb8>)
 800156c:	f001 f83c 	bl	80025e8 <HAL_I2C_Mem_Write>

	// Set DATA rate to 1KHz by writing 0x07 to the SMPRT_DIV(0x19) register
	data = 0x07;
 8001570:	2307      	movs	r3, #7
 8001572:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, SMPRT_DIV, 1, &data, 1, 1000);
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	2301      	movs	r3, #1
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	f107 030e 	add.w	r3, r7, #14
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	2219      	movs	r2, #25
 8001588:	21d0      	movs	r1, #208	; 0xd0
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MPU6050_Init+0xb8>)
 800158c:	f001 f82c 	bl	80025e8 <HAL_I2C_Mem_Write>

	// Set accelerometer configuration in ACCEL_CONFIG register
	// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +- 2g
	data = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, ACCEL_CONFIG, 1, &data, 1, 1000);
 8001594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	2301      	movs	r3, #1
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	f107 030e 	add.w	r3, r7, #14
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	221c      	movs	r2, #28
 80015a8:	21d0      	movs	r1, #208	; 0xd0
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <MPU6050_Init+0xb8>)
 80015ac:	f001 f81c 	bl	80025e8 <HAL_I2C_Mem_Write>

	// Set gyroscope configuration in GYRO_CONFIG register
	// XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 -> +-250 deg/s
	data = 0x00;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, GYRO_CONFIG, 1, &data, 1, 1000);
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f107 030e 	add.w	r3, r7, #14
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	221b      	movs	r2, #27
 80015c8:	21d0      	movs	r1, #208	; 0xd0
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <MPU6050_Init+0xb8>)
 80015cc:	f001 f80c 	bl	80025e8 <HAL_I2C_Mem_Write>
	return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000318 	.word	0x20000318

080015e0 <MPU6050_ReadRawData>:

uint8_t MPU6050_ReadRawData(I2C_HandleTypeDef* i2c, MPU6050_DATA* data){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	data->raw_accel[0] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_XOUT_H, ACCEL_XOUT_L);
 80015ea:	223c      	movs	r2, #60	; 0x3c
 80015ec:	213b      	movs	r1, #59	; 0x3b
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff75 	bl	80014de <MPU6050_read_from_double_register>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	801a      	strh	r2, [r3, #0]
	data->raw_accel[1] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_YOUT_H, ACCEL_YOUT_L);
 80015fc:	223e      	movs	r2, #62	; 0x3e
 80015fe:	213d      	movs	r1, #61	; 0x3d
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff6c 	bl	80014de <MPU6050_read_from_double_register>
 8001606:	4603      	mov	r3, r0
 8001608:	b21a      	sxth	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	805a      	strh	r2, [r3, #2]
	data->raw_accel[2] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_ZOUT_H, ACCEL_ZOUT_L);
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	213f      	movs	r1, #63	; 0x3f
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff63 	bl	80014de <MPU6050_read_from_double_register>
 8001618:	4603      	mov	r3, r0
 800161a:	b21a      	sxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	809a      	strh	r2, [r3, #4]

	data->raw_gyro[0] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_XOUT_H, GYRO_XOUT_L);
 8001620:	2244      	movs	r2, #68	; 0x44
 8001622:	2143      	movs	r1, #67	; 0x43
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff5a 	bl	80014de <MPU6050_read_from_double_register>
 800162a:	4603      	mov	r3, r0
 800162c:	b21a      	sxth	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	80da      	strh	r2, [r3, #6]
	data->raw_gyro[1] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_YOUT_H, GYRO_YOUT_L);
 8001632:	2246      	movs	r2, #70	; 0x46
 8001634:	2145      	movs	r1, #69	; 0x45
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff51 	bl	80014de <MPU6050_read_from_double_register>
 800163c:	4603      	mov	r3, r0
 800163e:	b21a      	sxth	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	811a      	strh	r2, [r3, #8]
	data->raw_gyro[2] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_ZOUT_H, GYRO_ZOUT_L);
 8001644:	2248      	movs	r2, #72	; 0x48
 8001646:	2147      	movs	r1, #71	; 0x47
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff48 	bl	80014de <MPU6050_read_from_double_register>
 800164e:	4603      	mov	r3, r0
 8001650:	b21a      	sxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	815a      	strh	r2, [r3, #10]
	return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <MPU6050_ReadData>:

uint8_t MPU6050_ReadData(I2C_HandleTypeDef* i2c, MPU6050_DATA* data){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	MPU6050_ReadRawData(i2c, data);
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffb7 	bl	80015e0 <MPU6050_ReadRawData>

	// +- 2g and 250 deg/s

	for(uint8_t i = 0; i < 3; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e02b      	b.n	80016d0 <MPU6050_ReadData+0x70>
		data->accel[i] = (float)data->raw_accel[i] / 16384.f;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80016e0 <MPU6050_ReadData+0x80>
 800168e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	3302      	adds	r3, #2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	edc3 7a00 	vstr	s15, [r3]
		data->gyro[i] = (float)data->raw_gyro[i] / 131.f;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80016e4 <MPU6050_ReadData+0x84>
 80016ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	3306      	adds	r3, #6
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; i++){
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d9d0      	bls.n	8001678 <MPU6050_ReadData+0x18>
	}
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	46800000 	.word	0x46800000
 80016e4:	43030000 	.word	0x43030000

080016e8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_QUADSPI_Init+0x44>)
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <MX_QUADSPI_Init+0x48>)
 80016f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_QUADSPI_Init+0x44>)
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_QUADSPI_Init+0x44>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_QUADSPI_Init+0x44>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_QUADSPI_Init+0x44>)
 8001706:	2201      	movs	r2, #1
 8001708:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_QUADSPI_Init+0x44>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_QUADSPI_Init+0x44>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_QUADSPI_Init+0x44>)
 8001718:	f002 fefe 	bl	8004518 <HAL_QSPI_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001722:	f7ff febe 	bl	80014a2 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000370 	.word	0x20000370
 8001730:	a0001000 	.word	0xa0001000

08001734 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_QSPI_MspInit+0xb8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d145      	bne.n	80017e2 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6513      	str	r3, [r2, #80]	; 0x50
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_QSPI_MspInit+0xbc>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017ae:	230a      	movs	r3, #10
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fc94 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80017c0:	f640 4303 	movw	r3, #3075	; 0xc03
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017d2:	230a      	movs	r3, #10
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_QSPI_MspInit+0xc0>)
 80017de:	f000 fc83 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	a0001000 	.word	0xa0001000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000400 	.word	0x48000400

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x44>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6613      	str	r3, [r2, #96]	; 0x60
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x44>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x44>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x44>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f9da 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001898:	2020      	movs	r0, #32
 800189a:	f000 fde7 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <OTG_FS_IRQHandler+0x10>)
 80018aa:	f001 fd6d 	bl	8003388 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001924 	.word	0x20001924

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_kill>:

int _kill(int pid, int sig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d2:	f009 ff53 	bl	800b77c <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2216      	movs	r2, #22
 80018da:	601a      	str	r2, [r3, #0]
  return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_exit>:

void _exit (int status)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fa:	e7fe      	b.n	80018fa <_exit+0x12>

080018fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
  }

  return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195e:	605a      	str	r2, [r3, #4]
  return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f009 fed4 	bl	800b77c <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20018000 	.word	0x20018000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	200003b4 	.word	0x200003b4
 8001a08:	200021a0 	.word	0x200021a0

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_USART2_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a74:	f004 f8c8 	bl	8005c08 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f7ff fd10 	bl	80014a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200003b8 	.word	0x200003b8
 8001a8c:	40004400 	.word	0x40004400

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0ac      	sub	sp, #176	; 0xb0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2288      	movs	r2, #136	; 0x88
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f009 fe10 	bl	800b6d6 <memset>
  if(uartHandle->Instance==USART2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <HAL_UART_MspInit+0xb0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d13b      	bne.n	8001b38 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fbdf 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad8:	f7ff fce3 	bl	80014a2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_UART_MspInit+0xb4>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b24:	2307      	movs	r3, #7
 8001b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f000 fad8 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b38:	bf00      	nop
 8001b3a:	37b0      	adds	r7, #176	; 0xb0
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40021000 	.word	0x40021000

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff ff5e 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f009 fe07 	bl	800b788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff fc03 	bl	8001384 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001b8c:	0800f458 	.word	0x0800f458
  ldr r2, =_sbss
 8001b90:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001b94:	2000219c 	.word	0x2000219c

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>

08001b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 fa5d 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f80e 	bl	8001bcc <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e001      	b.n	8001bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bbc:	f7ff fe1c 	bl	80017f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_InitTick+0x6c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_InitTick+0x70>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_InitTick+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fa69 	bl	80020ce <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d809      	bhi.n	8001c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 fa33 	bl	800207a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_InitTick+0x74>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e004      	b.n	8001c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e001      	b.n	8001c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000440 	.word	0x20000440

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000440 	.word	0x20000440

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0ed      	b.n	8001eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f9b4 	bl	8001058 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d00:	f7ff ffb4 	bl	8001c6c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d06:	e012      	b.n	8001d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d08:	f7ff ffb0 	bl	8001c6c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b0a      	cmp	r3, #10
 8001d14:	d90b      	bls.n	8001d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0c5      	b.n	8001eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0e5      	beq.n	8001d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0202 	bic.w	r2, r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff ff8e 	bl	8001c6c <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff ff8a 	bl	8001c6c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e09f      	b.n	8001eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e5      	bne.n	8001d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7e5b      	ldrb	r3, [r3, #25]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e007      	b.n	8001ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e9b      	ldrb	r3, [r3, #26]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0220 	bic.w	r2, r2, #32
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7edb      	ldrb	r3, [r3, #27]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0210 	bic.w	r2, r2, #16
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0210 	orr.w	r2, r2, #16
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7f1b      	ldrb	r3, [r3, #28]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7f5b      	ldrb	r3, [r3, #29]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0204 	orr.w	r2, r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	ea42 0103 	orr.w	r1, r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff8e 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff29 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff3e 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff8e 	bl	8001fb8 <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff31 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	e17f      	b.n	80023f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8171 	beq.w	80023f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x40>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d118      	bne.n	80021c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	6939      	ldr	r1, [r7, #16]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80ac 	beq.w	80023f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_GPIO_Init+0x330>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	4a5e      	ldr	r2, [pc, #376]	; (8002418 <HAL_GPIO_Init+0x330>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6613      	str	r3, [r2, #96]	; 0x60
 80022a6:	4b5c      	ldr	r3, [pc, #368]	; (8002418 <HAL_GPIO_Init+0x330>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b2:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_GPIO_Init+0x334>)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x242>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <HAL_GPIO_Init+0x338>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x23e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <HAL_GPIO_Init+0x33c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x23a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x340>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x236>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_GPIO_Init+0x344>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x232>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_GPIO_Init+0x348>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x22e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_GPIO_Init+0x34c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x22a>
 800230e:	2306      	movs	r3, #6
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002312:	2307      	movs	r3, #7
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x244>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x244>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x244>
 800232a:	2300      	movs	r3, #0
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800233c:	4937      	ldr	r1, [pc, #220]	; (800241c <HAL_GPIO_Init+0x334>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_GPIO_Init+0x350>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <HAL_GPIO_Init+0x350>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_GPIO_Init+0x350>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_GPIO_Init+0x350>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae78 	bne.w	80020f8 <HAL_GPIO_Init+0x10>
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40010000 	.word	0x40010000
 8002420:	48000400 	.word	0x48000400
 8002424:	48000800 	.word	0x48000800
 8002428:	48000c00 	.word	0x48000c00
 800242c:	48001000 	.word	0x48001000
 8002430:	48001400 	.word	0x48001400
 8002434:	48001800 	.word	0x48001800
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002458:	e002      	b.n	8002460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f806 	bl	800249c <HAL_GPIO_EXTI_Callback>
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e08d      	b.n	80025e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fe fed3 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2224      	movs	r2, #36	; 0x24
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002502:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002512:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d108      	bne.n	8002554 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	e007      	b.n	8002564 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002586:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69d9      	ldr	r1, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	f040 80f9 	bne.w	8002802 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_I2C_Mem_Write+0x34>
 8002616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0ed      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Mem_Write+0x4e>
 8002632:	2302      	movs	r3, #2
 8002634:	e0e6      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800263e:	f7ff fb15 	bl	8001c6c <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fac3 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d1      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2221      	movs	r2, #33	; 0x21
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002688:	88f8      	ldrh	r0, [r7, #6]
 800268a:	893a      	ldrh	r2, [r7, #8]
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4603      	mov	r3, r0
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9d3 	bl	8002a44 <I2C_RequestMemoryWrite>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0a9      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fc3d 	bl	8002f50 <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fc2c 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fabc 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e07b      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d034      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d130      	bne.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa3f 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e04d      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2bff      	cmp	r3, #255	; 0xff
 8002770:	d90e      	bls.n	8002790 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	22ff      	movs	r2, #255	; 0xff
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fbe1 	bl	8002f50 <I2C_TransferConfig>
 800278e:	e00f      	b.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	2300      	movs	r3, #0
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fbd0 	bl	8002f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d19e      	bne.n	80026f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 faa2 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e01a      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2220      	movs	r2, #32
 80027d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_I2C_Mem_Write+0x224>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 80fd 	bne.w	8002a32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_I2C_Mem_Read+0x34>
 800283e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0f1      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_I2C_Mem_Read+0x4e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ea      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002866:	f7ff fa01 	bl	8001c6c <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f9af 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d5      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2222      	movs	r2, #34	; 0x22
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b0:	88f8      	ldrh	r0, [r7, #6]
 80028b2:	893a      	ldrh	r2, [r7, #8]
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f913 	bl	8002aec <I2C_RequestMemoryRead>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0ad      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d90e      	bls.n	8002900 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fb29 	bl	8002f50 <I2C_TransferConfig>
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fb18 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f956 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07c      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d130      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f927 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04d      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fac9 	bl	8002f50 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fab8 	bl	8002f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d19a      	bne.n	8002920 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f98a 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_I2C_Mem_Read+0x230>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	80002400 	.word	0x80002400
 8002a40:	fe00e800 	.word	0xfe00e800

08002a44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <I2C_RequestMemoryWrite+0xa4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa6f 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8ff 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02c      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
 8002a96:	e015      	b.n	8002ac4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f8e5 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e012      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f884 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	80002000 	.word	0x80002000

08002aec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <I2C_RequestMemoryRead+0xa4>)
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2300      	movs	r3, #0
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa1c 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8ac 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e02c      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b3c:	e015      	b.n	8002b6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f892 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e012      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b60:	893b      	ldrh	r3, [r7, #8]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f831 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	80002000 	.word	0x80002000

08002b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d007      	beq.n	8002bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	619a      	str	r2, [r3, #24]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bec:	e031      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d02d      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7ff f839 	bl	8001c6c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d122      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d113      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0be      	beq.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c86:	e033      	b.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f87f 	bl	8002d90 <I2C_IsErrorOccurred>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e031      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d025      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe ffe2 	bl	8001c6c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11a      	bne.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d013      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1c4      	bne.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e02f      	b.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f838 	bl	8002d90 <I2C_IsErrorOccurred>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02d      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe ff9f 	bl	8001c6c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11a      	bne.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d013      	beq.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e007      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d1c8      	bne.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d068      	beq.n	8002e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dc4:	e049      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d045      	beq.n	8002e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe ff4d 	bl	8001c6c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_IsErrorOccurred+0x54>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d121      	bne.n	8002e4c <I2C_IsErrorOccurred+0xbc>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0e:	d01d      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d01a      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e26:	f7fe ff21 	bl	8001c6c <HAL_GetTick>
 8002e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2c:	e00e      	b.n	8002e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e2e:	f7fe ff1d 	bl	8001c6c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b19      	cmp	r3, #25
 8002e3a:	d907      	bls.n	8002e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e4a:	e006      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d1e9      	bne.n	8002e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d003      	beq.n	8002e70 <I2C_IsErrorOccurred+0xe0>
 8002e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0aa      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe45 	bl	8002b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <I2C_IsErrorOccurred+0x1bc>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	0d5b      	lsrs	r3, r3, #21
 8002f8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <I2C_TransferConfig+0x60>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	43db      	mvns	r3, r3
 8002f94:	ea02 0103 	and.w	r1, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	03ff63ff 	.word	0x03ff63ff

08002fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d138      	bne.n	800303c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e032      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d139      	bne.n	80030d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800306a:	2302      	movs	r3, #2
 800306c:	e033      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2224      	movs	r2, #36	; 0x24
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800309c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e4:	b08f      	sub	sp, #60	; 0x3c
 80030e6:	af0a      	add	r7, sp, #40	; 0x28
 80030e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e116      	b.n	8003322 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f006 ff02 	bl	8009f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fb5d 	bl	80067f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	687e      	ldr	r6, [r7, #4]
 8003140:	466d      	mov	r5, sp
 8003142:	f106 0410 	add.w	r4, r6, #16
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003152:	e885 0003 	stmia.w	r5, {r0, r1}
 8003156:	1d33      	adds	r3, r6, #4
 8003158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f003 fa6f 	bl	800663e <USB_CoreInit>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0d7      	b.n	8003322 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f003 fb4b 	bl	8006814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e04a      	b.n	800321a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	333d      	adds	r3, #61	; 0x3d
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	333c      	adds	r3, #60	; 0x3c
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	b298      	uxth	r0, r3
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3356      	adds	r3, #86	; 0x56
 80031c0:	4602      	mov	r2, r0
 80031c2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3340      	adds	r3, #64	; 0x40
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3344      	adds	r3, #68	; 0x44
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3348      	adds	r3, #72	; 0x48
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d3af      	bcc.n	8003184 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e044      	b.n	80032b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	3301      	adds	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3b5      	bcc.n	800322a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	687e      	ldr	r6, [r7, #4]
 80032c6:	466d      	mov	r5, sp
 80032c8:	f106 0410 	add.w	r4, r6, #16
 80032cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80032dc:	1d33      	adds	r3, r6, #4
 80032de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f003 fae3 	bl	80068ac <USB_DevInit>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e014      	b.n	8003322 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	d102      	bne.n	8003316 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 f869 	bl	80043e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fa91 	bl	8007842 <USB_DevDisconnect>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800332a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_PCD_Start+0x1c>
 8003342:	2302      	movs	r3, #2
 8003344:	e01c      	b.n	8003380 <HAL_PCD_Start+0x56>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f003 fa32 	bl	80067d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f004 fa45 	bl	8007800 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b08d      	sub	sp, #52	; 0x34
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fb03 	bl	80079aa <USB_GetMode>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 847e 	bne.w	8003ca8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fa67 	bl	8007884 <USB_ReadInterrupts>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8474 	beq.w	8003ca6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fa54 	bl	8007884 <USB_ReadInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 0202 	and.w	r2, r2, #2
 80033f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 fa42 	bl	8007884 <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d161      	bne.n	80034ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0210 	bic.w	r2, r2, #16
 8003418:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	0c5b      	lsrs	r3, r3, #17
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	2b02      	cmp	r3, #2
 8003444:	d124      	bne.n	8003490 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d035      	beq.n	80034be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800345c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	6a38      	ldr	r0, [r7, #32]
 8003466:	f004 f879 	bl	800755c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	441a      	add	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003488:	441a      	add	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	615a      	str	r2, [r3, #20]
 800348e:	e016      	b.n	80034be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	0c5b      	lsrs	r3, r3, #17
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2b06      	cmp	r3, #6
 800349a:	d110      	bne.n	80034be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034a2:	2208      	movs	r2, #8
 80034a4:	4619      	mov	r1, r3
 80034a6:	6a38      	ldr	r0, [r7, #32]
 80034a8:	f004 f858 	bl	800755c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b8:	441a      	add	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0210 	orr.w	r2, r2, #16
 80034cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 f9d6 	bl	8007884 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034e2:	f040 80a7 	bne.w	8003634 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 f9db 	bl	80078aa <USB_ReadDevAllOutEpInterrupt>
 80034f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034f6:	e099      	b.n	800362c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 808e 	beq.w	8003620 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 f9ff 	bl	8007912 <USB_ReadDevOutEPInterrupt>
 8003514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2301      	movs	r3, #1
 8003530:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fe7d 	bl	8004234 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	461a      	mov	r2, r3
 8003552:	2308      	movs	r3, #8
 8003554:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 feb9 	bl	80042d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2310      	movs	r3, #16
 8003578:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d030      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d109      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d108      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f006 fdf6 	bl	800a1c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	461a      	mov	r2, r3
 80035e2:	2302      	movs	r3, #2
 80035e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	2320      	movs	r3, #32
 8003600:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800361e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	3301      	adds	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	f47f af62 	bne.w	80034f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 f923 	bl	8007884 <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003648:	f040 80a4 	bne.w	8003794 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 f944 	bl	80078de <USB_ReadDevAllInEpInterrupt>
 8003656:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800365c:	e096      	b.n	800378c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 808b 	beq.w	8003780 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f004 f96a 	bl	800794e <USB_ReadDevInEPInterrupt>
 800367a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2201      	movs	r2, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a6:	4013      	ands	r3, r2
 80036a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	461a      	mov	r2, r3
 80036b8:	2301      	movs	r3, #1
 80036ba:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f006 fce7 	bl	800a096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2308      	movs	r3, #8
 80036e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	461a      	mov	r2, r3
 80036fc:	2310      	movs	r3, #16
 80036fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	461a      	mov	r2, r3
 8003718:	2340      	movs	r3, #64	; 0x40
 800371a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d023      	beq.n	800376e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003728:	6a38      	ldr	r0, [r7, #32]
 800372a:	f003 fa01 	bl	8006b30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	78db      	ldrb	r3, [r3, #3]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f006 fd44 	bl	800a1e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003768:	461a      	mov	r2, r3
 800376a:	2302      	movs	r3, #2
 800376c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fcd2 	bl	8004124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	3301      	adds	r3, #1
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	f47f af65 	bne.w	800365e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f004 f873 	bl	8007884 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a8:	d122      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037d0:	2100      	movs	r1, #0
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f006 ff78 	bl	800a6c8 <HAL_PCDEx_LPM_Callback>
 80037d8:	e002      	b.n	80037e0 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fcc8 	bl	800a170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 f845 	bl	8007884 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003804:	d112      	bne.n	800382c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f006 fc84 	bl	800a124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800382a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f004 f827 	bl	8007884 <USB_ReadInterrupts>
 8003836:	4603      	mov	r3, r0
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d121      	bne.n	8003886 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003850:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003876:	2101      	movs	r1, #1
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f006 ff25 	bl	800a6c8 <HAL_PCDEx_LPM_Callback>
 800387e:	e002      	b.n	8003886 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f006 fc4f 	bl	800a124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fffa 	bl	8007884 <USB_ReadInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	f040 80b5 	bne.w	8003a08 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2110      	movs	r1, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 f939 	bl	8006b30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	e046      	b.n	8003952 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	461a      	mov	r2, r3
 80038d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800390a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800392a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	440a      	add	r2, r1
 8003942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800394a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	3301      	adds	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003958:	429a      	cmp	r2, r3
 800395a:	d3b3      	bcc.n	80038c4 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800396e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003988:	f043 030b 	orr.w	r3, r3, #11
 800398c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399e:	f043 030b 	orr.w	r3, r3, #11
 80039a2:	6453      	str	r3, [r2, #68]	; 0x44
 80039a4:	e015      	b.n	80039d2 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039cc:	f043 030b 	orr.w	r3, r3, #11
 80039d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f004 f80a 	bl	8007a0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 ff39 	bl	8007884 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d124      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 ffcf 	bl	80079c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f8fc 	bl	8006c2a <USB_GetDevSpeed>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	f001 fb8f 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8003a42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f002 fe23 	bl	8006698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f006 fb47 	bl	800a0e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 ff09 	bl	8007884 <USB_ReadInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d10a      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f006 fb24 	bl	800a0ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 0208 	and.w	r2, r2, #8
 8003a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fef4 	bl	8007884 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d122      	bne.n	8003aec <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	e014      	b.n	8003ae2 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 faf3 	bl	80040c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3301      	adds	r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3e5      	bcc.n	8003ab8 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 fec7 	bl	8007884 <USB_ReadInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b00:	d13b      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b02:	2301      	movs	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e02b      	b.n	8003b60 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3340      	adds	r3, #64	; 0x40
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d115      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da12      	bge.n	8003b5a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	333f      	adds	r3, #63	; 0x3f
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	4619      	mov	r1, r3
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fab4 	bl	80040c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d3ce      	bcc.n	8003b08 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 fe80 	bl	8007884 <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b8e:	d155      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e045      	b.n	8003c22 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d12e      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da2b      	bge.n	8003c1c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bd0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d121      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c18:	6053      	str	r3, [r2, #4]
            break;
 8003c1a:	e007      	b.n	8003c2c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	3301      	adds	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3b4      	bcc.n	8003b96 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fe1f 	bl	8007884 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d10a      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f006 fad8 	bl	800a208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 fe09 	bl	8007884 <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d115      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f006 fac8 	bl	800a224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	e000      	b.n	8003ca8 <HAL_PCD_IRQHandler+0x920>
      return;
 8003ca6:	bf00      	nop
    }
  }
}
 8003ca8:	3734      	adds	r7, #52	; 0x34
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}

08003cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PCD_SetAddress+0x1a>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e013      	b.n	8003cf0 <HAL_PCD_SetAddress+0x42>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fd67 	bl	80077b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	70fb      	strb	r3, [r7, #3]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	803b      	strh	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da0f      	bge.n	8003d3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	3338      	adds	r3, #56	; 0x38
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	3304      	adds	r3, #4
 8003d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	705a      	strb	r2, [r3, #1]
 8003d3c:	e00f      	b.n	8003d5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 020f 	and.w	r2, r3, #15
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	3304      	adds	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d6a:	883a      	ldrh	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	78ba      	ldrb	r2, [r7, #2]
 8003d74:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d88:	78bb      	ldrb	r3, [r7, #2]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d102      	bne.n	8003d94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_PCD_EP_Open+0xaa>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e00e      	b.n	8003dc0 <HAL_PCD_EP_Open+0xc8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f002 ff59 	bl	8006c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da0f      	bge.n	8003dfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	3338      	adds	r3, #56	; 0x38
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	705a      	strb	r2, [r3, #1]
 8003dfa:	e00f      	b.n	8003e1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_PCD_EP_Close+0x6e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e00e      	b.n	8003e54 <HAL_PCD_EP_Close+0x8c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f002 ff97 	bl	8006d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 f83d 	bl	8006f30 <USB_EPStartXfer>

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	460b      	mov	r3, r1
 8003efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	3338      	adds	r3, #56	; 0x38
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6979      	ldr	r1, [r7, #20]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fff4 	bl	8006f30 <USB_EPStartXfer>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d901      	bls.n	8003f70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04e      	b.n	800400e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0f      	bge.n	8003f98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 020f 	and.w	r2, r3, #15
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3338      	adds	r3, #56	; 0x38
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	705a      	strb	r2, [r3, #1]
 8003f96:	e00d      	b.n	8003fb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_SetStall+0x82>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e01c      	b.n	800400e <HAL_PCD_EP_SetStall+0xbc>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 fb12 	bl	800760c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d108      	bne.n	8004004 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f003 fd04 	bl	8007a0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d901      	bls.n	8004034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e042      	b.n	80040ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da0f      	bge.n	800405c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3338      	adds	r3, #56	; 0x38
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	705a      	strb	r2, [r3, #1]
 800405a:	e00f      	b.n	800407c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_PCD_EP_ClrStall+0x86>
 8004098:	2302      	movs	r3, #2
 800409a:	e00e      	b.n	80040ba <HAL_PCD_EP_ClrStall+0xa4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fb1c 	bl	80076e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da0c      	bge.n	80040f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3338      	adds	r3, #56	; 0x38
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00c      	b.n	800410a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f003 f93f 	bl	8007394 <USB_EPStopXfer>
 8004116:	4603      	mov	r3, r0
 8004118:	72fb      	strb	r3, [r7, #11]

  return ret;
 800411a:	7afb      	ldrb	r3, [r7, #11]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3338      	adds	r3, #56	; 0x38
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	429a      	cmp	r2, r3
 8004156:	d901      	bls.n	800415c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e067      	b.n	800422c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	429a      	cmp	r2, r3
 8004170:	d902      	bls.n	8004178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3303      	adds	r3, #3
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004180:	e026      	b.n	80041d0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3303      	adds	r3, #3
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	6978      	ldr	r0, [r7, #20]
 80041b4:	f003 f998 	bl	80074e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d809      	bhi.n	80041fa <PCD_WriteEmptyTxFifo+0xd6>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d203      	bcs.n	80041fa <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1c3      	bne.n	8004182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	429a      	cmp	r2, r3
 8004204:	d811      	bhi.n	800422a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	2201      	movs	r2, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	43db      	mvns	r3, r3
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004226:	4013      	ands	r3, r2
 8004228:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	333c      	adds	r3, #60	; 0x3c
 800424c:	3304      	adds	r3, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <PCD_EP_OutXfrComplete_int+0x98>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d124      	bne.n	80042b4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	461a      	mov	r2, r3
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	e01a      	b.n	80042c0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a0:	461a      	mov	r2, r3
 80042a2:	2320      	movs	r3, #32
 80042a4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f005 fed7 	bl	800a060 <HAL_PCD_DataOutStageCallback>
 80042b2:	e005      	b.n	80042c0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f005 fed0 	bl	800a060 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	4f54310a 	.word	0x4f54310a

080042d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	333c      	adds	r3, #60	; 0x3c
 80042e8:	3304      	adds	r3, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <PCD_EP_OutSetupPacket_int+0x64>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d90e      	bls.n	8004324 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004322:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f005 fe89 	bl	800a03c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	4f54300a 	.word	0x4f54300a

08004338 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
 8004344:	4613      	mov	r3, r2
 8004346:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004356:	883b      	ldrh	r3, [r7, #0]
 8004358:	0419      	lsls	r1, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	430a      	orrs	r2, r1
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
 8004364:	e028      	b.n	80043b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	e00d      	b.n	8004396 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3340      	adds	r3, #64	; 0x40
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	3301      	adds	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	3b01      	subs	r3, #1
 800439c:	429a      	cmp	r2, r3
 800439e:	d3ec      	bcc.n	800437a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043a0:	883b      	ldrh	r3, [r7, #0]
 80043a2:	0418      	lsls	r0, r3, #16
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	4302      	orrs	r2, r0
 80043b0:	3340      	adds	r3, #64	; 0x40
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	f043 0303 	orr.w	r3, r3, #3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <HAL_PWREx_GetVoltageRange+0x18>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40007000 	.word	0x40007000

0800444c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d130      	bne.n	80044be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d038      	beq.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2232      	movs	r2, #50	; 0x32
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9b      	lsrs	r3, r3, #18
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004490:	e002      	b.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b01      	subs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a4:	d102      	bne.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d110      	bne.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e00f      	b.n	80044de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d007      	beq.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044d4:	4a05      	ldr	r2, [pc, #20]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40007000 	.word	0x40007000
 80044f0:	20000000 	.word	0x20000000
 80044f4:	431bde83 	.word	0x431bde83

080044f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_PWREx_EnableVddUSB+0x1c>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004506:	6053      	str	r3, [r2, #4]
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40007000 	.word	0x40007000

08004518 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7fd fba4 	bl	8001c6c <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e063      	b.n	80045f8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd f8f5 	bl	8001734 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800454a:	f241 3188 	movw	r1, #5000	; 0x1388
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f858 	bl	8004604 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	3b01      	subs	r3, #1
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	2120      	movs	r1, #32
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f850 	bl	8004620 <QSPI_WaitFlagStateUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d131      	bne.n	80045ee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	0611      	lsls	r1, r2, #24
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68d2      	ldr	r2, [r2, #12]
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_QSPI_Init+0xe8>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6912      	ldr	r2, [r2, #16]
 80045ba:	0411      	lsls	r1, r2, #16
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6952      	ldr	r2, [r2, #20]
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6992      	ldr	r2, [r2, #24]
 80045c6:	4311      	orrs	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80045f6:	7afb      	ldrb	r3, [r7, #11]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	ffe0f8fe 	.word	0xffe0f8fe

08004604 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004630:	e01a      	b.n	8004668 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d016      	beq.n	8004668 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fd fb17 	bl	8001c6c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2204      	movs	r2, #4
 8004654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e00e      	b.n	8004686 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d1d6      	bne.n	8004632 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e3ca      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	4b97      	ldr	r3, [pc, #604]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ac:	4b94      	ldr	r3, [pc, #592]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80e4 	beq.w	800488c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_RCC_OscConfig+0x4a>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	f040 808b 	bne.w	80047e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 8087 	bne.w	80047e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046da:	4b89      	ldr	r3, [pc, #548]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x62>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e3a2      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	4b82      	ldr	r3, [pc, #520]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_RCC_OscConfig+0x7c>
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470a:	e005      	b.n	8004718 <HAL_RCC_OscConfig+0x88>
 800470c:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004718:	4293      	cmp	r3, r2
 800471a:	d223      	bcs.n	8004764 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fd55 	bl	80051d0 <RCC_SetFlashLatencyFromMSIRange>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e383      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004730:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004736:	f043 0308 	orr.w	r3, r3, #8
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	496d      	ldr	r1, [pc, #436]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800474e:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	4968      	ldr	r1, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
 8004762:	e025      	b.n	80047b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800476a:	f043 0308 	orr.w	r3, r3, #8
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4960      	ldr	r1, [pc, #384]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004782:	4b5f      	ldr	r3, [pc, #380]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	495b      	ldr	r1, [pc, #364]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fd15 	bl	80051d0 <RCC_SetFlashLatencyFromMSIRange>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e343      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047b0:	f000 fc4a 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	4950      	ldr	r1, [pc, #320]	; (8004904 <HAL_RCC_OscConfig+0x274>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <HAL_RCC_OscConfig+0x278>)
 80047ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047d0:	4b4e      	ldr	r3, [pc, #312]	; (800490c <HAL_RCC_OscConfig+0x27c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd f9f9 	bl	8001bcc <HAL_InitTick>
 80047da:	4603      	mov	r3, r0
 80047dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d052      	beq.n	800488a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	e327      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d032      	beq.n	8004856 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047fc:	f7fd fa36 	bl	8001c6c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004804:	f7fd fa32 	bl	8001c6c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e310      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004822:	4b37      	ldr	r3, [pc, #220]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a36      	ldr	r2, [pc, #216]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b34      	ldr	r3, [pc, #208]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4931      	ldr	r1, [pc, #196]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004840:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	492c      	ldr	r1, [pc, #176]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
 8004854:	e01a      	b.n	800488c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004862:	f7fd fa03 	bl	8001c6c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486a:	f7fd f9ff 	bl	8001c6c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e2dd      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f0      	bne.n	800486a <HAL_RCC_OscConfig+0x1da>
 8004888:	e000      	b.n	800488c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800488a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d074      	beq.n	8004982 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x21a>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d10e      	bne.n	80048c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d10b      	bne.n	80048c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d064      	beq.n	8004980 <HAL_RCC_OscConfig+0x2f0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d160      	bne.n	8004980 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e2ba      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x24a>
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e026      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e2:	d115      	bne.n	8004910 <HAL_RCC_OscConfig+0x280>
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a02      	ldr	r2, [pc, #8]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e014      	b.n	8004928 <HAL_RCC_OscConfig+0x298>
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	0800efd4 	.word	0x0800efd4
 8004908:	20000000 	.word	0x20000000
 800490c:	20000004 	.word	0x20000004
 8004910:	4ba0      	ldr	r3, [pc, #640]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a9f      	ldr	r2, [pc, #636]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b9d      	ldr	r3, [pc, #628]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a9c      	ldr	r2, [pc, #624]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd f99c 	bl	8001c6c <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7fd f998 	bl	8001c6c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e276      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494a:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x2a8>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd f988 	bl	8001c6c <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd f984 	bl	8001c6c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e262      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004972:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x2d0>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d060      	beq.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_OscConfig+0x310>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d119      	bne.n	80049ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d116      	bne.n	80049ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a0:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x328>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e23f      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	4973      	ldr	r1, [pc, #460]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049cc:	e040      	b.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d023      	beq.n	8004a1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6e      	ldr	r2, [pc, #440]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd f943 	bl	8001c6c <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ea:	f7fd f93f 	bl	8001c6c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e21d      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fc:	4b65      	ldr	r3, [pc, #404]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	495f      	ldr	r1, [pc, #380]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	e018      	b.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5c      	ldr	r2, [pc, #368]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f91f 	bl	8001c6c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd f91b 	bl	8001c6c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1f9      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03c      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6a:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fd f8fa 	bl	8001c6c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fd f8f6 	bl	8001c6c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e1d4      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ef      	beq.n	8004a7c <HAL_RCC_OscConfig+0x3ec>
 8004a9c:	e01b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa4:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aae:	f7fd f8dd 	bl	8001c6c <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab6:	f7fd f8d9 	bl	8001c6c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e1b7      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ef      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80a6 	beq.w	8004c30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	4a26      	ldr	r2, [pc, #152]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	; 0x58
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_OscConfig+0x508>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d118      	bne.n	8004b4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCC_OscConfig+0x508>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_RCC_OscConfig+0x508>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b28:	f7fd f8a0 	bl	8001c6c <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b30:	f7fd f89c 	bl	8001c6c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e17a      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <HAL_RCC_OscConfig+0x508>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4d8>
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b66:	e029      	b.n	8004bbc <HAL_RCC_OscConfig+0x52c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d115      	bne.n	8004b9c <HAL_RCC_OscConfig+0x50c>
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	4a03      	ldr	r2, [pc, #12]	; (8004b94 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b90:	e014      	b.n	8004bbc <HAL_RCC_OscConfig+0x52c>
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	4b9c      	ldr	r3, [pc, #624]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	4a9b      	ldr	r2, [pc, #620]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bac:	4b98      	ldr	r3, [pc, #608]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	4a97      	ldr	r2, [pc, #604]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd f852 	bl	8001c6c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fd f84e 	bl	8001c6c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e12a      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	4b8b      	ldr	r3, [pc, #556]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ed      	beq.n	8004bcc <HAL_RCC_OscConfig+0x53c>
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd f83b 	bl	8001c6c <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd f837 	bl	8001c6c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e113      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c10:	4b7f      	ldr	r3, [pc, #508]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ed      	bne.n	8004bfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a79      	ldr	r2, [pc, #484]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80fe 	beq.w	8004e36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	f040 80d0 	bne.w	8004de4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c44:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0203 	and.w	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d130      	bne.n	8004cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	3b01      	subs	r3, #1
 8004c64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d127      	bne.n	8004cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11f      	bne.n	8004cba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c84:	2a07      	cmp	r2, #7
 8004c86:	bf14      	ite	ne
 8004c88:	2201      	movne	r2, #1
 8004c8a:	2200      	moveq	r2, #0
 8004c8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d113      	bne.n	8004cba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d06e      	beq.n	8004d98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d069      	beq.n	8004d94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cc0:	4b53      	ldr	r3, [pc, #332]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0ad      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a4b      	ldr	r2, [pc, #300]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce8:	f7fc ffc0 	bl	8001c6c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fc ffbc 	bl	8001c6c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e09a      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d02:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0e:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <HAL_RCC_OscConfig+0x784>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	4311      	orrs	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d28:	0212      	lsls	r2, r2, #8
 8004d2a:	4311      	orrs	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d30:	0852      	lsrs	r2, r2, #1
 8004d32:	3a01      	subs	r2, #1
 8004d34:	0552      	lsls	r2, r2, #21
 8004d36:	4311      	orrs	r1, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	0652      	lsls	r2, r2, #25
 8004d42:	4311      	orrs	r1, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d48:	0912      	lsrs	r2, r2, #4
 8004d4a:	0452      	lsls	r2, r2, #17
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	4930      	ldr	r1, [pc, #192]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d54:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d6c:	f7fc ff7e 	bl	8001c6c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc ff7a 	bl	8001c6c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e058      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d92:	e050      	b.n	8004e36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04f      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d148      	bne.n	8004e36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dbc:	f7fc ff56 	bl	8001c6c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fc ff52 	bl	8001c6c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e030      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd6:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x734>
 8004de2:	e028      	b.n	8004e36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d023      	beq.n	8004e32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <HAL_RCC_OscConfig+0x780>)
 8004df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df6:	f7fc ff39 	bl	8001c6c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dfc:	e00c      	b.n	8004e18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfe:	f7fc ff35 	bl	8001c6c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d905      	bls.n	8004e18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e013      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
 8004e10:	40021000 	.word	0x40021000
 8004e14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ec      	bne.n	8004dfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	4905      	ldr	r1, [pc, #20]	; (8004e40 <HAL_RCC_OscConfig+0x7b0>)
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <HAL_RCC_OscConfig+0x7b4>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60cb      	str	r3, [r1, #12]
 8004e30:	e001      	b.n	8004e36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	feeefffc 	.word	0xfeeefffc

08004e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0e7      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b75      	ldr	r3, [pc, #468]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d910      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b72      	ldr	r3, [pc, #456]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 0207 	bic.w	r2, r3, #7
 8004e72:	4970      	ldr	r1, [pc, #448]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b6e      	ldr	r3, [pc, #440]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0cf      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b66      	ldr	r3, [pc, #408]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d908      	bls.n	8004eba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b63      	ldr	r3, [pc, #396]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4960      	ldr	r1, [pc, #384]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d04c      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	4b5a      	ldr	r3, [pc, #360]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d121      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0a6      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d107      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee6:	4b54      	ldr	r3, [pc, #336]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d115      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e09a      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e08e      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e086      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f1e:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f023 0203 	bic.w	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4943      	ldr	r1, [pc, #268]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f30:	f7fc fe9c 	bl	8001c6c <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f38:	f7fc fe98 	bl	8001c6c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e06e      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 020c 	and.w	r2, r3, #12
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d1eb      	bne.n	8004f38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d208      	bcs.n	8004f8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	492b      	ldr	r1, [pc, #172]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d210      	bcs.n	8004fbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 0207 	bic.w	r2, r3, #7
 8004fa4:	4923      	ldr	r1, [pc, #140]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCC_ClockConfig+0x1ec>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e036      	b.n	800502c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4918      	ldr	r1, [pc, #96]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4910      	ldr	r1, [pc, #64]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ffc:	f000 f824 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCC_ClockConfig+0x1f0>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	490b      	ldr	r1, [pc, #44]	; (800503c <HAL_RCC_ClockConfig+0x1f4>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x1f8>)
 800501a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x1fc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fc fdd3 	bl	8001bcc <HAL_InitTick>
 8005026:	4603      	mov	r3, r0
 8005028:	72fb      	strb	r3, [r7, #11]

  return status;
 800502a:	7afb      	ldrb	r3, [r7, #11]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40022000 	.word	0x40022000
 8005038:	40021000 	.word	0x40021000
 800503c:	0800efd4 	.word	0x0800efd4
 8005040:	20000000 	.word	0x20000000
 8005044:	20000004 	.word	0x20000004

08005048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	; 0x24
 800504c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005056:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005060:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x34>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d121      	bne.n	80050ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d11e      	bne.n	80050ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800507c:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005088:	4b31      	ldr	r3, [pc, #196]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	e005      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050a4:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d102      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCC_GetSysClockFreq+0x110>)
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e004      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <HAL_RCC_GetSysClockFreq+0x114>)
 80050ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d134      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d003      	beq.n	80050ee <HAL_RCC_GetSysClockFreq+0xa6>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d003      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0xac>
 80050ec:	e005      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <HAL_RCC_GetSysClockFreq+0x110>)
 80050f0:	617b      	str	r3, [r7, #20]
      break;
 80050f2:	e005      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_GetSysClockFreq+0x114>)
 80050f6:	617b      	str	r3, [r7, #20]
      break;
 80050f8:	e002      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	617b      	str	r3, [r7, #20]
      break;
 80050fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	3301      	adds	r3, #1
 800510c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	fb03 f202 	mul.w	r2, r3, r2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_RCC_GetSysClockFreq+0x108>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	0e5b      	lsrs	r3, r3, #25
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	3301      	adds	r3, #1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005140:	69bb      	ldr	r3, [r7, #24]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3724      	adds	r7, #36	; 0x24
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	0800efec 	.word	0x0800efec
 8005158:	00f42400 	.word	0x00f42400
 800515c:	017d7840 	.word	0x017d7840

08005160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000000 	.word	0x20000000

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800efe4 	.word	0x0800efe4

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051a8:	f7ff ffda 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0adb      	lsrs	r3, r3, #11
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	0800efe4 	.word	0x0800efe4

080051d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051e8:	f7ff f922 	bl	8004430 <HAL_PWREx_GetVoltageRange>
 80051ec:	6178      	str	r0, [r7, #20]
 80051ee:	e014      	b.n	800521a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	4a24      	ldr	r2, [pc, #144]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6593      	str	r3, [r2, #88]	; 0x58
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005208:	f7ff f912 	bl	8004430 <HAL_PWREx_GetVoltageRange>
 800520c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d10b      	bne.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d919      	bls.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2ba0      	cmp	r3, #160	; 0xa0
 800522c:	d902      	bls.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800522e:	2302      	movs	r3, #2
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e013      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005234:	2301      	movs	r3, #1
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e010      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d902      	bls.n	8005246 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005240:	2303      	movs	r3, #3
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	e00a      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d102      	bne.n	8005252 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800524c:	2302      	movs	r3, #2
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e004      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d101      	bne.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005258:	2301      	movs	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000
 800528c:	40022000 	.word	0x40022000

08005290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005298:	2300      	movs	r3, #0
 800529a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800529c:	2300      	movs	r3, #0
 800529e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d041      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052b4:	d02a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052ba:	d824      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052c0:	d008      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052c6:	d81e      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d0:	d010      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052d2:	e018      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d4:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a85      	ldr	r2, [pc, #532]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e0:	e015      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fabb 	bl	8005864 <RCCEx_PLLSAI1_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052f2:	e00c      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3320      	adds	r3, #32
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fba6 	bl	8005a4c <RCCEx_PLLSAI2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005304:	e003      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	74fb      	strb	r3, [r7, #19]
      break;
 800530a:	e000      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800530c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005314:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005322:	4973      	ldr	r1, [pc, #460]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800532a:	e001      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d041      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005344:	d02a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005346:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800534a:	d824      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005350:	d008      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005356:	d81e      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800535c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005360:	d010      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005362:	e018      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a61      	ldr	r2, [pc, #388]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005370:	e015      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fa73 	bl	8005864 <RCCEx_PLLSAI1_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3320      	adds	r3, #32
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fb5e 	bl	8005a4c <RCCEx_PLLSAI2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	74fb      	strb	r3, [r7, #19]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053a4:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b2:	494f      	ldr	r1, [pc, #316]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053ba:	e001      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80a0 	beq.w	800550e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	6593      	str	r3, [r2, #88]	; 0x58
 80053f4:	4b3e      	ldr	r3, [pc, #248]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005400:	2301      	movs	r3, #1
 8005402:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005404:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800540a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005410:	f7fc fc2c 	bl	8001c6c <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005416:	e009      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005418:	f7fc fc28 	bl	8001c6c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d902      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	74fb      	strb	r3, [r7, #19]
        break;
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800542c:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0ef      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d15c      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01f      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	429a      	cmp	r2, r3
 800545a:	d019      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fc fbe7 	bl	8001c6c <HAL_GetTick>
 800549e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a0:	e00b      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fc fbe3 	bl	8001c6c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d902      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	74fb      	strb	r3, [r7, #19]
            break;
 80054b8:	e006      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ec      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054e6:	e009      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054fc:	7c7b      	ldrb	r3, [r7, #17]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005502:	4b9e      	ldr	r3, [pc, #632]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	4a9d      	ldr	r2, [pc, #628]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800550c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800551a:	4b98      	ldr	r3, [pc, #608]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 0203 	bic.w	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	4994      	ldr	r1, [pc, #592]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800553c:	4b8f      	ldr	r3, [pc, #572]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	f023 020c 	bic.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	498c      	ldr	r1, [pc, #560]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800555e:	4b87      	ldr	r3, [pc, #540]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	4983      	ldr	r1, [pc, #524]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005580:	4b7e      	ldr	r3, [pc, #504]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	497b      	ldr	r1, [pc, #492]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055a2:	4b76      	ldr	r3, [pc, #472]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	4972      	ldr	r1, [pc, #456]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055c4:	4b6d      	ldr	r3, [pc, #436]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	496a      	ldr	r1, [pc, #424]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e6:	4b65      	ldr	r3, [pc, #404]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	4961      	ldr	r1, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005608:	4b5c      	ldr	r3, [pc, #368]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	4959      	ldr	r1, [pc, #356]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800562a:	4b54      	ldr	r3, [pc, #336]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	4950      	ldr	r1, [pc, #320]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	4948      	ldr	r1, [pc, #288]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800566e:	4b43      	ldr	r3, [pc, #268]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	493f      	ldr	r1, [pc, #252]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d028      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005690:	4b3a      	ldr	r3, [pc, #232]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	4937      	ldr	r1, [pc, #220]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ae:	d106      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
 80056bc:	e011      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c6:	d10c      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f8c8 	bl	8005864 <RCCEx_PLLSAI1_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d028      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	491f      	ldr	r1, [pc, #124]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570c:	d106      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005718:	60d3      	str	r3, [r2, #12]
 800571a:	e011      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005724:	d10c      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f899 	bl	8005864 <RCCEx_PLLSAI1_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005736:	7cfb      	ldrb	r3, [r7, #19]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575a:	4908      	ldr	r1, [pc, #32]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576a:	d109      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a02      	ldr	r2, [pc, #8]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005776:	60d3      	str	r3, [r2, #12]
 8005778:	e014      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f867 	bl	8005864 <RCCEx_PLLSAI1_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057be:	4928      	ldr	r1, [pc, #160]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ce:	d10d      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	2102      	movs	r1, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f844 	bl	8005864 <RCCEx_PLLSAI1_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d014      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	74bb      	strb	r3, [r7, #18]
 80057ea:	e011      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3320      	adds	r3, #32
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f925 	bl	8005a4c <RCCEx_PLLSAI2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582a:	490d      	ldr	r1, [pc, #52]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005856:	7cbb      	ldrb	r3, [r7, #18]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000

08005864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005872:	4b75      	ldr	r3, [pc, #468]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800587e:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0203 	and.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d10d      	bne.n	80058aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
       ||
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005896:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
       ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d047      	beq.n	800593a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e044      	b.n	800593a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d018      	beq.n	80058ea <RCCEx_PLLSAI1_Config+0x86>
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d825      	bhi.n	8005908 <RCCEx_PLLSAI1_Config+0xa4>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d002      	beq.n	80058c6 <RCCEx_PLLSAI1_Config+0x62>
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d009      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x74>
 80058c4:	e020      	b.n	8005908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058c6:	4b60      	ldr	r3, [pc, #384]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11d      	bne.n	800590e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d6:	e01a      	b.n	800590e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d8:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d116      	bne.n	8005912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e8:	e013      	b.n	8005912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ea:	4b57      	ldr	r3, [pc, #348]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005906:	e006      	b.n	8005916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      break;
 800590c:	e004      	b.n	8005918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005916:	bf00      	nop
    }

    if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800591e:	4b4a      	ldr	r3, [pc, #296]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	3b01      	subs	r3, #1
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	430b      	orrs	r3, r1
 8005934:	4944      	ldr	r1, [pc, #272]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d17d      	bne.n	8005a3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005940:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a40      	ldr	r2, [pc, #256]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800594a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fc f98e 	bl	8001c6c <HAL_GetTick>
 8005950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005952:	e009      	b.n	8005968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005954:	f7fc f98a 	bl	8001c6c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d902      	bls.n	8005968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	73fb      	strb	r3, [r7, #15]
        break;
 8005966:	e005      	b.n	8005974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005968:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1ef      	bne.n	8005954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d160      	bne.n	8005a3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d111      	bne.n	80059a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	0211      	lsls	r1, r2, #8
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68d2      	ldr	r2, [r2, #12]
 8005996:	0912      	lsrs	r2, r2, #4
 8005998:	0452      	lsls	r2, r2, #17
 800599a:	430a      	orrs	r2, r1
 800599c:	492a      	ldr	r1, [pc, #168]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	610b      	str	r3, [r1, #16]
 80059a2:	e027      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d112      	bne.n	80059d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059aa:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6892      	ldr	r2, [r2, #8]
 80059ba:	0211      	lsls	r1, r2, #8
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6912      	ldr	r2, [r2, #16]
 80059c0:	0852      	lsrs	r2, r2, #1
 80059c2:	3a01      	subs	r2, #1
 80059c4:	0552      	lsls	r2, r2, #21
 80059c6:	430a      	orrs	r2, r1
 80059c8:	491f      	ldr	r1, [pc, #124]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]
 80059ce:	e011      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6892      	ldr	r2, [r2, #8]
 80059e0:	0211      	lsls	r1, r2, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6952      	ldr	r2, [r2, #20]
 80059e6:	0852      	lsrs	r2, r2, #1
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0652      	lsls	r2, r2, #25
 80059ec:	430a      	orrs	r2, r1
 80059ee:	4916      	ldr	r1, [pc, #88]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fc f934 	bl	8001c6c <HAL_GetTick>
 8005a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a06:	e009      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a08:	f7fc f930 	bl	8001c6c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d902      	bls.n	8005a1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	73fb      	strb	r3, [r7, #15]
          break;
 8005a1a:	e005      	b.n	8005a28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ef      	beq.n	8005a08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000

08005a4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a66:	4b67      	ldr	r3, [pc, #412]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0203 	and.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d10d      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a7e:	4b61      	ldr	r3, [pc, #388]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d047      	beq.n	8005b22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e044      	b.n	8005b22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d018      	beq.n	8005ad2 <RCCEx_PLLSAI2_Config+0x86>
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d825      	bhi.n	8005af0 <RCCEx_PLLSAI2_Config+0xa4>
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d002      	beq.n	8005aae <RCCEx_PLLSAI2_Config+0x62>
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d009      	beq.n	8005ac0 <RCCEx_PLLSAI2_Config+0x74>
 8005aac:	e020      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aae:	4b55      	ldr	r3, [pc, #340]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11d      	bne.n	8005af6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abe:	e01a      	b.n	8005af6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad0:	e013      	b.n	8005afa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ad2:	4b4c      	ldr	r3, [pc, #304]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10f      	bne.n	8005afe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ade:	4b49      	ldr	r3, [pc, #292]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aee:	e006      	b.n	8005afe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e004      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005af6:	bf00      	nop
 8005af8:	e002      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005afe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b06:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	4939      	ldr	r1, [pc, #228]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d167      	bne.n	8005bf8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b28:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a35      	ldr	r2, [pc, #212]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b34:	f7fc f89a 	bl	8001c6c <HAL_GetTick>
 8005b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b3a:	e009      	b.n	8005b50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b3c:	f7fc f896 	bl	8001c6c <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d902      	bls.n	8005b50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b4e:	e005      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b50:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ef      	bne.n	8005b3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d14a      	bne.n	8005bf8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d111      	bne.n	8005b8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b68:	4b26      	ldr	r3, [pc, #152]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6892      	ldr	r2, [r2, #8]
 8005b78:	0211      	lsls	r1, r2, #8
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	0912      	lsrs	r2, r2, #4
 8005b80:	0452      	lsls	r2, r2, #17
 8005b82:	430a      	orrs	r2, r1
 8005b84:	491f      	ldr	r1, [pc, #124]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	614b      	str	r3, [r1, #20]
 8005b8a:	e011      	b.n	8005bb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6892      	ldr	r2, [r2, #8]
 8005b9c:	0211      	lsls	r1, r2, #8
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6912      	ldr	r2, [r2, #16]
 8005ba2:	0852      	lsrs	r2, r2, #1
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0652      	lsls	r2, r2, #25
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	4916      	ldr	r1, [pc, #88]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fc f856 	bl	8001c6c <HAL_GetTick>
 8005bc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc2:	e009      	b.n	8005bd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bc4:	f7fc f852 	bl	8001c6c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d902      	bls.n	8005bd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	73fb      	strb	r3, [r7, #15]
          break;
 8005bd6:	e005      	b.n	8005be4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ef      	beq.n	8005bc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	4904      	ldr	r1, [pc, #16]	; (8005c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000

08005c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e040      	b.n	8005c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb ff30 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fae0 	bl	8006214 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f825 	bl	8005ca4 <UART_SetConfig>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e01b      	b.n	8005c9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fb5f 	bl	8006358 <UART_CheckIdleState>
 8005c9a:	4603      	mov	r3, r0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca8:	b08a      	sub	sp, #40	; 0x28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4ba4      	ldr	r3, [pc, #656]	; (8005f64 <UART_SetConfig+0x2c0>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a99      	ldr	r2, [pc, #612]	; (8005f68 <UART_SetConfig+0x2c4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a90      	ldr	r2, [pc, #576]	; (8005f6c <UART_SetConfig+0x2c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d126      	bne.n	8005d7c <UART_SetConfig+0xd8>
 8005d2e:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d81b      	bhi.n	8005d74 <UART_SetConfig+0xd0>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0xa0>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e116      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e112      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e10e      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d72:	e10a      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7a:	e106      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7c      	ldr	r2, [pc, #496]	; (8005f74 <UART_SetConfig+0x2d0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d138      	bne.n	8005df8 <UART_SetConfig+0x154>
 8005d86:	4b7a      	ldr	r3, [pc, #488]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d82d      	bhi.n	8005df0 <UART_SetConfig+0x14c>
 8005d94:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0xf8>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dd1 	.word	0x08005dd1
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08005df1 	.word	0x08005df1
 8005da8:	08005df1 	.word	0x08005df1
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005df1 	.word	0x08005df1
 8005db4:	08005df1 	.word	0x08005df1
 8005db8:	08005df1 	.word	0x08005df1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd6:	e0d8      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e0d4      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e0d0      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dee:	e0cc      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e0c8      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a5e      	ldr	r2, [pc, #376]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d125      	bne.n	8005e4e <UART_SetConfig+0x1aa>
 8005e02:	4b5b      	ldr	r3, [pc, #364]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d016      	beq.n	8005e3e <UART_SetConfig+0x19a>
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	d818      	bhi.n	8005e46 <UART_SetConfig+0x1a2>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d00a      	beq.n	8005e2e <UART_SetConfig+0x18a>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d814      	bhi.n	8005e46 <UART_SetConfig+0x1a2>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <UART_SetConfig+0x182>
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d008      	beq.n	8005e36 <UART_SetConfig+0x192>
 8005e24:	e00f      	b.n	8005e46 <UART_SetConfig+0x1a2>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2c:	e0ad      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e34:	e0a9      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e36:	2304      	movs	r3, #4
 8005e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3c:	e0a5      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e44:	e0a1      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e46:	2310      	movs	r3, #16
 8005e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4c:	e09d      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a4a      	ldr	r2, [pc, #296]	; (8005f7c <UART_SetConfig+0x2d8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d125      	bne.n	8005ea4 <UART_SetConfig+0x200>
 8005e58:	4b45      	ldr	r3, [pc, #276]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e62:	2bc0      	cmp	r3, #192	; 0xc0
 8005e64:	d016      	beq.n	8005e94 <UART_SetConfig+0x1f0>
 8005e66:	2bc0      	cmp	r3, #192	; 0xc0
 8005e68:	d818      	bhi.n	8005e9c <UART_SetConfig+0x1f8>
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d00a      	beq.n	8005e84 <UART_SetConfig+0x1e0>
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d814      	bhi.n	8005e9c <UART_SetConfig+0x1f8>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <UART_SetConfig+0x1d8>
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d008      	beq.n	8005e8c <UART_SetConfig+0x1e8>
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x1f8>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e082      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e84:	2302      	movs	r3, #2
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e07e      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e07a      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e076      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e072      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <UART_SetConfig+0x2dc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d12a      	bne.n	8005f04 <UART_SetConfig+0x260>
 8005eae:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebc:	d01a      	beq.n	8005ef4 <UART_SetConfig+0x250>
 8005ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec2:	d81b      	bhi.n	8005efc <UART_SetConfig+0x258>
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec8:	d00c      	beq.n	8005ee4 <UART_SetConfig+0x240>
 8005eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ece:	d815      	bhi.n	8005efc <UART_SetConfig+0x258>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <UART_SetConfig+0x238>
 8005ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed8:	d008      	beq.n	8005eec <UART_SetConfig+0x248>
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x258>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e052      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e04e      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e04a      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e046      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e042      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <UART_SetConfig+0x2c4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d13a      	bne.n	8005f84 <UART_SetConfig+0x2e0>
 8005f0e:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f1c:	d01a      	beq.n	8005f54 <UART_SetConfig+0x2b0>
 8005f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f22:	d81b      	bhi.n	8005f5c <UART_SetConfig+0x2b8>
 8005f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f28:	d00c      	beq.n	8005f44 <UART_SetConfig+0x2a0>
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d815      	bhi.n	8005f5c <UART_SetConfig+0x2b8>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <UART_SetConfig+0x298>
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x2a8>
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x2b8>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e022      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e01e      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e01a      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e016      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e012      	b.n	8005f8a <UART_SetConfig+0x2e6>
 8005f64:	efff69f3 	.word	0xefff69f3
 8005f68:	40008000 	.word	0x40008000
 8005f6c:	40013800 	.word	0x40013800
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40004c00 	.word	0x40004c00
 8005f80:	40005000 	.word	0x40005000
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a9f      	ldr	r2, [pc, #636]	; (800620c <UART_SetConfig+0x568>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d17a      	bne.n	800608a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d824      	bhi.n	8005fe6 <UART_SetConfig+0x342>
 8005f9c:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x300>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fe7 	.word	0x08005fe7
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fe7 	.word	0x08005fe7
 8005fb4:	08005fd7 	.word	0x08005fd7
 8005fb8:	08005fe7 	.word	0x08005fe7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005fe7 	.word	0x08005fe7
 8005fc4:	08005fdf 	.word	0x08005fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7ff f8d6 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	61f8      	str	r0, [r7, #28]
        break;
 8005fce:	e010      	b.n	8005ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd0:	4b8f      	ldr	r3, [pc, #572]	; (8006210 <UART_SetConfig+0x56c>)
 8005fd2:	61fb      	str	r3, [r7, #28]
        break;
 8005fd4:	e00d      	b.n	8005ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd6:	f7ff f837 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8005fda:	61f8      	str	r0, [r7, #28]
        break;
 8005fdc:	e009      	b.n	8005ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe2:	61fb      	str	r3, [r7, #28]
        break;
 8005fe4:	e005      	b.n	8005ff2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80fb 	beq.w	80061f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	429a      	cmp	r2, r3
 8006008:	d305      	bcc.n	8006016 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	429a      	cmp	r2, r3
 8006014:	d903      	bls.n	800601e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800601c:	e0e8      	b.n	80061f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2200      	movs	r2, #0
 8006022:	461c      	mov	r4, r3
 8006024:	4615      	mov	r5, r2
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	022b      	lsls	r3, r5, #8
 8006030:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006034:	0222      	lsls	r2, r4, #8
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	6849      	ldr	r1, [r1, #4]
 800603a:	0849      	lsrs	r1, r1, #1
 800603c:	2000      	movs	r0, #0
 800603e:	4688      	mov	r8, r1
 8006040:	4681      	mov	r9, r0
 8006042:	eb12 0a08 	adds.w	sl, r2, r8
 8006046:	eb43 0b09 	adc.w	fp, r3, r9
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006058:	4650      	mov	r0, sl
 800605a:	4659      	mov	r1, fp
 800605c:	f7fa fe14 	bl	8000c88 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4613      	mov	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d308      	bcc.n	8006082 <UART_SetConfig+0x3de>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006076:	d204      	bcs.n	8006082 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	60da      	str	r2, [r3, #12]
 8006080:	e0b6      	b.n	80061f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006088:	e0b2      	b.n	80061f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006092:	d15e      	bne.n	8006152 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006098:	2b08      	cmp	r3, #8
 800609a:	d828      	bhi.n	80060ee <UART_SetConfig+0x44a>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <UART_SetConfig+0x400>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060ef 	.word	0x080060ef
 80060b4:	080060df 	.word	0x080060df
 80060b8:	080060ef 	.word	0x080060ef
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	080060e7 	.word	0x080060e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7ff f856 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 80060cc:	61f8      	str	r0, [r7, #28]
        break;
 80060ce:	e014      	b.n	80060fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7ff f868 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80060d4:	61f8      	str	r0, [r7, #28]
        break;
 80060d6:	e010      	b.n	80060fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b4d      	ldr	r3, [pc, #308]	; (8006210 <UART_SetConfig+0x56c>)
 80060da:	61fb      	str	r3, [r7, #28]
        break;
 80060dc:	e00d      	b.n	80060fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060de:	f7fe ffb3 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 80060e2:	61f8      	str	r0, [r7, #28]
        break;
 80060e4:	e009      	b.n	80060fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ea:	61fb      	str	r3, [r7, #28]
        break;
 80060ec:	e005      	b.n	80060fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d077      	beq.n	80061f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	005a      	lsls	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d916      	bls.n	800614a <UART_SetConfig+0x4a6>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d212      	bcs.n	800614a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f023 030f 	bic.w	r3, r3, #15
 800612c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	b29a      	uxth	r2, r3
 800613a:	8afb      	ldrh	r3, [r7, #22]
 800613c:	4313      	orrs	r3, r2
 800613e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	8afa      	ldrh	r2, [r7, #22]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e052      	b.n	80061f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006150:	e04e      	b.n	80061f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006156:	2b08      	cmp	r3, #8
 8006158:	d827      	bhi.n	80061aa <UART_SetConfig+0x506>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x4bc>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006185 	.word	0x08006185
 8006164:	0800618d 	.word	0x0800618d
 8006168:	08006195 	.word	0x08006195
 800616c:	080061ab 	.word	0x080061ab
 8006170:	0800619b 	.word	0x0800619b
 8006174:	080061ab 	.word	0x080061ab
 8006178:	080061ab 	.word	0x080061ab
 800617c:	080061ab 	.word	0x080061ab
 8006180:	080061a3 	.word	0x080061a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fe fff8 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8006188:	61f8      	str	r0, [r7, #28]
        break;
 800618a:	e014      	b.n	80061b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7ff f80a 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006190:	61f8      	str	r0, [r7, #28]
        break;
 8006192:	e010      	b.n	80061b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <UART_SetConfig+0x56c>)
 8006196:	61fb      	str	r3, [r7, #28]
        break;
 8006198:	e00d      	b.n	80061b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619a:	f7fe ff55 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 800619e:	61f8      	str	r0, [r7, #28]
        break;
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	61fb      	str	r3, [r7, #28]
        break;
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061b4:	bf00      	nop
    }

    if (pclk != 0U)
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d019      	beq.n	80061f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	085a      	lsrs	r2, r3, #1
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	d909      	bls.n	80061ea <UART_SetConfig+0x546>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d205      	bcs.n	80061ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
 80061e8:	e002      	b.n	80061f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006200:	4618      	mov	r0, r3
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620a:	bf00      	nop
 800620c:	40008000 	.word	0x40008000
 8006210:	00f42400 	.word	0x00f42400

08006214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01a      	beq.n	800632a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d10a      	bne.n	800632a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b098      	sub	sp, #96	; 0x60
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006368:	f7fb fc80 	bl	8001c6c <HAL_GetTick>
 800636c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b08      	cmp	r3, #8
 800637a:	d12e      	bne.n	80063da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006384:	2200      	movs	r2, #0
 8006386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f88c 	bl	80064a8 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d021      	beq.n	80063da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063aa:	653b      	str	r3, [r7, #80]	; 0x50
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b4:	647b      	str	r3, [r7, #68]	; 0x44
 80063b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e062      	b.n	80064a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d149      	bne.n	800647c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f856 	bl	80064a8 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d03c      	beq.n	800647c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	623b      	str	r3, [r7, #32]
   return(result);
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	633b      	str	r3, [r7, #48]	; 0x30
 8006422:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	60fb      	str	r3, [r7, #12]
   return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006454:	61fa      	str	r2, [r7, #28]
 8006456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	617b      	str	r3, [r7, #20]
   return(result);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e011      	b.n	80064a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3758      	adds	r7, #88	; 0x58
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b8:	e049      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d045      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fb fbd3 	bl	8001c6c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e048      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d031      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d110      	bne.n	800651a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2208      	movs	r2, #8
 80064fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f838 	bl	8006576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2208      	movs	r2, #8
 800650a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e029      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006528:	d111      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f81e 	bl	8006576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e00f      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d0a6      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006576:	b480      	push	{r7}
 8006578:	b095      	sub	sp, #84	; 0x54
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
 800659e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d118      	bne.n	800661e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0310 	bic.w	r3, r3, #16
 8006600:	647b      	str	r3, [r7, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6979      	ldr	r1, [r7, #20]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	613b      	str	r3, [r7, #16]
   return(result);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e6      	bne.n	80065ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006632:	bf00      	nop
 8006634:	3754      	adds	r7, #84	; 0x54
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800663e:	b084      	sub	sp, #16
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	f107 001c 	add.w	r0, r7, #28
 800664c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fa1d 	bl	8007a9c <USB_CoreReset>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
 8006678:	e005      	b.n	8006686 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006692:	b004      	add	sp, #16
 8006694:	4770      	bx	lr
	...

08006698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d165      	bne.n	8006778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a3e      	ldr	r2, [pc, #248]	; (80067a8 <USB_SetTurnaroundTime+0x110>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d906      	bls.n	80066c2 <USB_SetTurnaroundTime+0x2a>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4a3d      	ldr	r2, [pc, #244]	; (80067ac <USB_SetTurnaroundTime+0x114>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d202      	bcs.n	80066c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066bc:	230f      	movs	r3, #15
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e05c      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a39      	ldr	r2, [pc, #228]	; (80067ac <USB_SetTurnaroundTime+0x114>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d306      	bcc.n	80066d8 <USB_SetTurnaroundTime+0x40>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4a38      	ldr	r2, [pc, #224]	; (80067b0 <USB_SetTurnaroundTime+0x118>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d202      	bcs.n	80066d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066d2:	230e      	movs	r3, #14
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e051      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a35      	ldr	r2, [pc, #212]	; (80067b0 <USB_SetTurnaroundTime+0x118>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d306      	bcc.n	80066ee <USB_SetTurnaroundTime+0x56>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a34      	ldr	r2, [pc, #208]	; (80067b4 <USB_SetTurnaroundTime+0x11c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d202      	bcs.n	80066ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066e8:	230d      	movs	r3, #13
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e046      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <USB_SetTurnaroundTime+0x11c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d306      	bcc.n	8006704 <USB_SetTurnaroundTime+0x6c>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <USB_SetTurnaroundTime+0x120>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d802      	bhi.n	8006704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066fe:	230c      	movs	r3, #12
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e03b      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a2c      	ldr	r2, [pc, #176]	; (80067b8 <USB_SetTurnaroundTime+0x120>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d906      	bls.n	800671a <USB_SetTurnaroundTime+0x82>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a2b      	ldr	r2, [pc, #172]	; (80067bc <USB_SetTurnaroundTime+0x124>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d802      	bhi.n	800671a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006714:	230b      	movs	r3, #11
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e030      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a27      	ldr	r2, [pc, #156]	; (80067bc <USB_SetTurnaroundTime+0x124>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d906      	bls.n	8006730 <USB_SetTurnaroundTime+0x98>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <USB_SetTurnaroundTime+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d802      	bhi.n	8006730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800672a:	230a      	movs	r3, #10
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e025      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <USB_SetTurnaroundTime+0x128>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d906      	bls.n	8006746 <USB_SetTurnaroundTime+0xae>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <USB_SetTurnaroundTime+0x12c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d202      	bcs.n	8006746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006740:	2309      	movs	r3, #9
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e01a      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <USB_SetTurnaroundTime+0x12c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d306      	bcc.n	800675c <USB_SetTurnaroundTime+0xc4>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <USB_SetTurnaroundTime+0x130>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d802      	bhi.n	800675c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006756:	2308      	movs	r3, #8
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e00f      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <USB_SetTurnaroundTime+0x130>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d906      	bls.n	8006772 <USB_SetTurnaroundTime+0xda>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a19      	ldr	r2, [pc, #100]	; (80067cc <USB_SetTurnaroundTime+0x134>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d202      	bcs.n	8006772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800676c:	2307      	movs	r3, #7
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e004      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006772:	2306      	movs	r3, #6
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e001      	b.n	800677c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006778:	2309      	movs	r3, #9
 800677a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	00d8acbf 	.word	0x00d8acbf
 80067ac:	00e4e1c0 	.word	0x00e4e1c0
 80067b0:	00f42400 	.word	0x00f42400
 80067b4:	01067380 	.word	0x01067380
 80067b8:	011a499f 	.word	0x011a499f
 80067bc:	01312cff 	.word	0x01312cff
 80067c0:	014ca43f 	.word	0x014ca43f
 80067c4:	016e3600 	.word	0x016e3600
 80067c8:	01a6ab1f 	.word	0x01a6ab1f
 80067cc:	01e84800 	.word	0x01e84800

080067d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f043 0201 	orr.w	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d115      	bne.n	8006862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006842:	2001      	movs	r0, #1
 8006844:	f7fb fa1e 	bl	8001c84 <HAL_Delay>
      ms++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f8ab 	bl	80079aa <USB_GetMode>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d01e      	beq.n	8006898 <USB_SetCurrentMode+0x84>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b31      	cmp	r3, #49	; 0x31
 800685e:	d9f0      	bls.n	8006842 <USB_SetCurrentMode+0x2e>
 8006860:	e01a      	b.n	8006898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d115      	bne.n	8006894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006874:	2001      	movs	r0, #1
 8006876:	f7fb fa05 	bl	8001c84 <HAL_Delay>
      ms++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f892 	bl	80079aa <USB_GetMode>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <USB_SetCurrentMode+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b31      	cmp	r3, #49	; 0x31
 8006890:	d9f0      	bls.n	8006874 <USB_SetCurrentMode+0x60>
 8006892:	e001      	b.n	8006898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e005      	b.n	80068a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b32      	cmp	r3, #50	; 0x32
 800689c:	d101      	bne.n	80068a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ac:	b084      	sub	sp, #16
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e009      	b.n	80068e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3340      	adds	r3, #64	; 0x40
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3301      	adds	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b0e      	cmp	r3, #14
 80068e4:	d9f2      	bls.n	80068cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11c      	bne.n	8006926 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e005      	b.n	8006932 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800693e:	2103      	movs	r1, #3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f959 	bl	8006bf8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006946:	2110      	movs	r1, #16
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8f1 	bl	8006b30 <USB_FlushTxFifo>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f91d 	bl	8006b98 <USB_FlushRxFifo>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	461a      	mov	r2, r3
 8006970:	2300      	movs	r3, #0
 8006972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e043      	b.n	8006a1a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a8:	d118      	bne.n	80069dc <USB_DevInit+0x130>
    {
      if (i == 0U)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e013      	b.n	80069ee <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	461a      	mov	r2, r3
 80069d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e008      	b.n	80069ee <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3301      	adds	r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3b7      	bcc.n	8006992 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e043      	b.n	8006ab0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3e:	d118      	bne.n	8006a72 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e013      	b.n	8006a84 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e008      	b.n	8006a84 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3b7      	bcc.n	8006a28 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f043 0210 	orr.w	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <USB_DevInit+0x280>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f043 0208 	orr.w	r2, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b26:	b004      	add	sp, #16
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	803c3800 	.word	0x803c3800

08006b30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3301      	adds	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <USB_FlushTxFifo+0x64>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d901      	bls.n	8006b50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e01b      	b.n	8006b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	daf2      	bge.n	8006b3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	019b      	lsls	r3, r3, #6
 8006b60:	f043 0220 	orr.w	r2, r3, #32
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <USB_FlushTxFifo+0x64>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e006      	b.n	8006b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d0f0      	beq.n	8006b68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	00030d40 	.word	0x00030d40

08006b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4a11      	ldr	r2, [pc, #68]	; (8006bf4 <USB_FlushRxFifo+0x5c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d901      	bls.n	8006bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e018      	b.n	8006be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	daf2      	bge.n	8006ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a08      	ldr	r2, [pc, #32]	; (8006bf4 <USB_FlushRxFifo+0x5c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e006      	b.n	8006be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d0f0      	beq.n	8006bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	00030d40 	.word	0x00030d40

08006bf8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0306 	and.w	r3, r3, #6
 8006c42:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d002      	beq.n	8006c50 <USB_GetDevSpeed+0x26>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d102      	bne.n	8006c56 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
 8006c54:	e001      	b.n	8006c5a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006c56:	230f      	movs	r3, #15
 8006c58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d13a      	bne.n	8006cfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2101      	movs	r1, #1
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	68f9      	ldr	r1, [r7, #12]
 8006c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d155      	bne.n	8006d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	791b      	ldrb	r3, [r3, #4]
 8006cd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	059b      	lsls	r3, r3, #22
 8006cde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	e036      	b.n	8006d68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	69da      	ldr	r2, [r3, #28]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11a      	bne.n	8006d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	791b      	ldrb	r3, [r3, #4]
 8006d4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
	...

08006d78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d161      	bne.n	8006e58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006daa:	d11f      	bne.n	8006dec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4013      	ands	r3, r2
 8006e32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0159      	lsls	r1, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	440b      	add	r3, r1
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <USB_DeactivateEndpoint+0x1b0>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]
 8006e56:	e060      	b.n	8006f1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e6e:	d11f      	bne.n	8006eb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	43db      	mvns	r3, r3
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	0159      	lsls	r1, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	4619      	mov	r1, r3
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <USB_DeactivateEndpoint+0x1b4>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	ec337800 	.word	0xec337800
 8006f2c:	eff37800 	.word	0xeff37800

08006f30 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	f040 8128 	bne.w	800719e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d132      	bne.n	8006fbc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb4:	0cdb      	lsrs	r3, r3, #19
 8006fb6:	04db      	lsls	r3, r3, #19
 8006fb8:	6113      	str	r3, [r2, #16]
 8006fba:	e092      	b.n	80070e2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd6:	0cdb      	lsrs	r3, r3, #19
 8006fd8:	04db      	lsls	r3, r3, #19
 8006fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ffa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ffe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11a      	bne.n	800703c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	d903      	bls.n	800701a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007038:	6113      	str	r3, [r2, #16]
 800703a:	e01b      	b.n	8007074 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6919      	ldr	r1, [r3, #16]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	440b      	add	r3, r1
 8007054:	1e59      	subs	r1, r3, #1
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	fbb1 f3f3 	udiv	r3, r1, r3
 800705e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007060:	4b8d      	ldr	r3, [pc, #564]	; (8007298 <USB_EPStartXfer+0x368>)
 8007062:	400b      	ands	r3, r1
 8007064:	6939      	ldr	r1, [r7, #16]
 8007066:	0148      	lsls	r0, r1, #5
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	4401      	add	r1, r0
 800706c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007070:	4313      	orrs	r3, r2
 8007072:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	691a      	ldr	r2, [r3, #16]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708a:	6939      	ldr	r1, [r7, #16]
 800708c:	0148      	lsls	r0, r1, #5
 800708e:	6979      	ldr	r1, [r7, #20]
 8007090:	4401      	add	r1, r0
 8007092:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007096:	4313      	orrs	r3, r2
 8007098:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d11f      	bne.n	80070e2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070e0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007100:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d015      	beq.n	8007136 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 8139 	beq.w	8007386 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	6979      	ldr	r1, [r7, #20]
 800712c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007130:	4313      	orrs	r3, r2
 8007132:	634b      	str	r3, [r1, #52]	; 0x34
 8007134:	e127      	b.n	8007386 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d110      	bne.n	8007168 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e00f      	b.n	8007188 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007186:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68d9      	ldr	r1, [r3, #12]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	b29b      	uxth	r3, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9a6 	bl	80074e8 <USB_WritePacket>
 800719c:	e0f3      	b.n	8007386 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b8:	0cdb      	lsrs	r3, r3, #19
 80071ba:	04db      	lsls	r3, r3, #19
 80071bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d12f      	bne.n	8007248 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	0148      	lsls	r0, r1, #5
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	4401      	add	r1, r0
 800721e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007244:	6113      	str	r3, [r2, #16]
 8007246:	e061      	b.n	800730c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d125      	bne.n	800729c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007266:	6939      	ldr	r1, [r7, #16]
 8007268:	0148      	lsls	r0, r1, #5
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	4401      	add	r1, r0
 800726e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007272:	4313      	orrs	r3, r2
 8007274:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007294:	6113      	str	r3, [r2, #16]
 8007296:	e039      	b.n	800730c <USB_EPStartXfer+0x3dc>
 8007298:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4413      	add	r3, r2
 80072a6:	1e5a      	subs	r2, r3, #1
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	89fa      	ldrh	r2, [r7, #14]
 80072b8:	fb03 f202 	mul.w	r2, r3, r2
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	89fb      	ldrh	r3, [r7, #14]
 80072d0:	04d9      	lsls	r1, r3, #19
 80072d2:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <USB_EPStartXfer+0x460>)
 80072d4:	400b      	ands	r3, r1
 80072d6:	6939      	ldr	r1, [r7, #16]
 80072d8:	0148      	lsls	r0, r1, #5
 80072da:	6979      	ldr	r1, [r7, #20]
 80072dc:	4401      	add	r1, r0
 80072de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072e2:	4313      	orrs	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fc:	6939      	ldr	r1, [r7, #16]
 80072fe:	0148      	lsls	r0, r1, #5
 8007300:	6979      	ldr	r1, [r7, #20]
 8007302:	4401      	add	r1, r0
 8007304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d128      	bne.n	8007366 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d110      	bne.n	8007346 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	e00f      	b.n	8007366 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007364:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007384:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	1ff80000 	.word	0x1ff80000

08007394 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d14a      	bne.n	8007448 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ca:	f040 8086 	bne.w	80074da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	7812      	ldrb	r2, [r2, #0]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007414:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007422:	4293      	cmp	r3, r2
 8007424:	d902      	bls.n	800742c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
          break;
 800742a:	e056      	b.n	80074da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007444:	d0e7      	beq.n	8007416 <USB_EPStopXfer+0x82>
 8007446:	e048      	b.n	80074da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007460:	d13b      	bne.n	80074da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007480:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007484:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	7812      	ldrb	r2, [r2, #0]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d902      	bls.n	80074c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
          break;
 80074be:	e00c      	b.n	80074da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d0e7      	beq.n	80074aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	71fb      	strb	r3, [r7, #7]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007506:	88bb      	ldrh	r3, [r7, #4]
 8007508:	3303      	adds	r3, #3
 800750a:	089b      	lsrs	r3, r3, #2
 800750c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e018      	b.n	8007546 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	031a      	lsls	r2, r3, #12
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4413      	add	r3, r2
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	461a      	mov	r2, r3
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3301      	adds	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	3301      	adds	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	3301      	adds	r3, #1
 800753e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	3301      	adds	r3, #1
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	429a      	cmp	r2, r3
 800754c:	d3e2      	bcc.n	8007514 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3724      	adds	r7, #36	; 0x24
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800755c:	b480      	push	{r7}
 800755e:	b08b      	sub	sp, #44	; 0x2c
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	089b      	lsrs	r3, r3, #2
 8007576:	b29b      	uxth	r3, r3
 8007578:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	e014      	b.n	80075b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	601a      	str	r2, [r3, #0]
    pDest++;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	3301      	adds	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	3301      	adds	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	3301      	adds	r3, #1
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	3301      	adds	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	3301      	adds	r3, #1
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d3e6      	bcc.n	8007588 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075ba:	8bfb      	ldrh	r3, [r7, #30]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01e      	beq.n	80075fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ca:	461a      	mov	r2, r3
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	701a      	strb	r2, [r3, #0]
      i++;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	3301      	adds	r3, #1
 80075ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	3301      	adds	r3, #1
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075f2:	8bfb      	ldrh	r3, [r7, #30]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075f8:	8bfb      	ldrh	r3, [r7, #30]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1ea      	bne.n	80075d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007600:	4618      	mov	r0, r3
 8007602:	372c      	adds	r7, #44	; 0x2c
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d12c      	bne.n	8007682 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	db12      	blt.n	8007660 <USB_EPSetStall+0x54>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800765e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e02b      	b.n	80076da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	db12      	blt.n	80076ba <USB_EPSetStall+0xae>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00f      	beq.n	80076ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d128      	bne.n	8007756 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	0151      	lsls	r1, r2, #5
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	440a      	add	r2, r1
 800771a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007722:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	791b      	ldrb	r3, [r3, #4]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d003      	beq.n	8007734 <USB_EPClearStall+0x4c>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	791b      	ldrb	r3, [r3, #4]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d138      	bne.n	80077a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	e027      	b.n	80077a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007774:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d003      	beq.n	8007786 <USB_EPClearStall+0x9e>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	791b      	ldrb	r3, [r3, #4]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d10f      	bne.n	80077a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800782e:	f023 0302 	bic.w	r3, r3, #2
 8007832:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800785c:	f023 0303 	bic.w	r3, r3, #3
 8007860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	4013      	ands	r3, r2
 80078cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	0c1b      	lsrs	r3, r3, #16
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	b29b      	uxth	r3, r3
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007940:	68bb      	ldr	r3, [r7, #8]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	01db      	lsls	r3, r3, #7
 8007980:	b2db      	uxtb	r3, r3
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4013      	ands	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800799c:	68bb      	ldr	r3, [r7, #8]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0301 	and.w	r3, r3, #1
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079e4:	f023 0307 	bic.w	r3, r3, #7
 80079e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	333c      	adds	r3, #60	; 0x3c
 8007a1e:	3304      	adds	r3, #4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <USB_EP0_OutStart+0x8c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d90a      	bls.n	8007a42 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a3c:	d101      	bne.n	8007a42 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e024      	b.n	8007a8c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a70:	f043 0318 	orr.w	r3, r3, #24
 8007a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a88:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	4f54300a 	.word	0x4f54300a

08007a9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <USB_CoreReset+0x64>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e01b      	b.n	8007af2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	daf2      	bge.n	8007aa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f043 0201 	orr.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <USB_CoreReset+0x64>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d901      	bls.n	8007ae4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e006      	b.n	8007af2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d0f0      	beq.n	8007ad2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	00030d40 	.word	0x00030d40

08007b04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b14:	f002 fe26 	bl	800a764 <USBD_static_malloc>
 8007b18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32b0      	adds	r2, #176	; 0xb0
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b30:	2302      	movs	r3, #2
 8007b32:	e0d4      	b.n	8007cde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007b38:	2100      	movs	r1, #0
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f003 fdcb 	bl	800b6d6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32b0      	adds	r2, #176	; 0xb0
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32b0      	adds	r2, #176	; 0xb0
 8007b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7c1b      	ldrb	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d138      	bne.n	8007bde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b6c:	4b5e      	ldr	r3, [pc, #376]	; (8007ce8 <USBD_CDC_Init+0x1e4>)
 8007b6e:	7819      	ldrb	r1, [r3, #0]
 8007b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b74:	2202      	movs	r2, #2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f002 fbe0 	bl	800a33c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b7c:	4b5a      	ldr	r3, [pc, #360]	; (8007ce8 <USBD_CDC_Init+0x1e4>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 020f 	and.w	r2, r3, #15
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	3324      	adds	r3, #36	; 0x24
 8007b92:	2201      	movs	r2, #1
 8007b94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b96:	4b55      	ldr	r3, [pc, #340]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007b98:	7819      	ldrb	r1, [r3, #0]
 8007b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f002 fbcb 	bl	800a33c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ba6:	4b51      	ldr	r3, [pc, #324]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bc2:	4b4b      	ldr	r3, [pc, #300]	; (8007cf0 <USBD_CDC_Init+0x1ec>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3326      	adds	r3, #38	; 0x26
 8007bd8:	2210      	movs	r2, #16
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	e035      	b.n	8007c4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bde:	4b42      	ldr	r3, [pc, #264]	; (8007ce8 <USBD_CDC_Init+0x1e4>)
 8007be0:	7819      	ldrb	r1, [r3, #0]
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	2202      	movs	r2, #2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f002 fba8 	bl	800a33c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bec:	4b3e      	ldr	r3, [pc, #248]	; (8007ce8 <USBD_CDC_Init+0x1e4>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3324      	adds	r3, #36	; 0x24
 8007c02:	2201      	movs	r2, #1
 8007c04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c06:	4b39      	ldr	r3, [pc, #228]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f002 fb94 	bl	800a33c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c14:	4b35      	ldr	r3, [pc, #212]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c30:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <USBD_CDC_Init+0x1ec>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	3326      	adds	r3, #38	; 0x26
 8007c46:	2210      	movs	r2, #16
 8007c48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c4a:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <USBD_CDC_Init+0x1ec>)
 8007c4c:	7819      	ldrb	r1, [r3, #0]
 8007c4e:	2308      	movs	r3, #8
 8007c50:	2203      	movs	r2, #3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f002 fb72 	bl	800a33c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <USBD_CDC_Init+0x1ec>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3324      	adds	r3, #36	; 0x24
 8007c6e:	2201      	movs	r2, #1
 8007c70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	33b0      	adds	r3, #176	; 0xb0
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e018      	b.n	8007cde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7c1b      	ldrb	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007cb6:	7819      	ldrb	r1, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f002 fcb4 	bl	800a630 <USBD_LL_PrepareReceive>
 8007cc8:	e008      	b.n	8007cdc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cca:	4b08      	ldr	r3, [pc, #32]	; (8007cec <USBD_CDC_Init+0x1e8>)
 8007ccc:	7819      	ldrb	r1, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f002 fcaa 	bl	800a630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000093 	.word	0x20000093
 8007cec:	20000094 	.word	0x20000094
 8007cf0:	20000095 	.word	0x20000095

08007cf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d00:	4b3a      	ldr	r3, [pc, #232]	; (8007dec <USBD_CDC_DeInit+0xf8>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 fb56 	bl	800a3b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d0c:	4b37      	ldr	r3, [pc, #220]	; (8007dec <USBD_CDC_DeInit+0xf8>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	3324      	adds	r3, #36	; 0x24
 8007d22:	2200      	movs	r2, #0
 8007d24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d26:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <USBD_CDC_DeInit+0xfc>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f002 fb43 	bl	800a3b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d32:	4b2f      	ldr	r3, [pc, #188]	; (8007df0 <USBD_CDC_DeInit+0xfc>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 020f 	and.w	r2, r3, #15
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d4e:	4b29      	ldr	r3, [pc, #164]	; (8007df4 <USBD_CDC_DeInit+0x100>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 fb2f 	bl	800a3b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d5a:	4b26      	ldr	r3, [pc, #152]	; (8007df4 <USBD_CDC_DeInit+0x100>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	2200      	movs	r2, #0
 8007d72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d74:	4b1f      	ldr	r3, [pc, #124]	; (8007df4 <USBD_CDC_DeInit+0x100>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3326      	adds	r3, #38	; 0x26
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	32b0      	adds	r2, #176	; 0xb0
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01f      	beq.n	8007de0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	33b0      	adds	r3, #176	; 0xb0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	32b0      	adds	r2, #176	; 0xb0
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f002 fcdc 	bl	800a780 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32b0      	adds	r2, #176	; 0xb0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000093 	.word	0x20000093
 8007df0:	20000094 	.word	0x20000094
 8007df4:	20000095 	.word	0x20000095

08007df8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	32b0      	adds	r2, #176	; 0xb0
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e0bf      	b.n	8007fa8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d050      	beq.n	8007ed6 <USBD_CDC_Setup+0xde>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	f040 80af 	bne.w	8007f98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88db      	ldrh	r3, [r3, #6]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d03a      	beq.n	8007eb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da1b      	bge.n	8007e84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	33b0      	adds	r3, #176	; 0xb0
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	88d2      	ldrh	r2, [r2, #6]
 8007e68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88db      	ldrh	r3, [r3, #6]
 8007e6e:	2b07      	cmp	r3, #7
 8007e70:	bf28      	it	cs
 8007e72:	2307      	movcs	r3, #7
 8007e74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	89fa      	ldrh	r2, [r7, #14]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fdb3 	bl	80099e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e82:	e090      	b.n	8007fa6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	785a      	ldrb	r2, [r3, #1]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88db      	ldrh	r3, [r3, #6]
 8007e92:	2b3f      	cmp	r3, #63	; 0x3f
 8007e94:	d803      	bhi.n	8007e9e <USBD_CDC_Setup+0xa6>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	88db      	ldrh	r3, [r3, #6]
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	e000      	b.n	8007ea0 <USBD_CDC_Setup+0xa8>
 8007e9e:	2240      	movs	r2, #64	; 0x40
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ea6:	6939      	ldr	r1, [r7, #16]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fdc5 	bl	8009a40 <USBD_CtlPrepareRx>
      break;
 8007eb6:	e076      	b.n	8007fa6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	33b0      	adds	r3, #176	; 0xb0
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	7850      	ldrb	r0, [r2, #1]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	4798      	blx	r3
      break;
 8007ed4:	e067      	b.n	8007fa6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b0b      	cmp	r3, #11
 8007edc:	d851      	bhi.n	8007f82 <USBD_CDC_Setup+0x18a>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <USBD_CDC_Setup+0xec>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f15 	.word	0x08007f15
 8007ee8:	08007f91 	.word	0x08007f91
 8007eec:	08007f83 	.word	0x08007f83
 8007ef0:	08007f83 	.word	0x08007f83
 8007ef4:	08007f83 	.word	0x08007f83
 8007ef8:	08007f83 	.word	0x08007f83
 8007efc:	08007f83 	.word	0x08007f83
 8007f00:	08007f83 	.word	0x08007f83
 8007f04:	08007f83 	.word	0x08007f83
 8007f08:	08007f83 	.word	0x08007f83
 8007f0c:	08007f3f 	.word	0x08007f3f
 8007f10:	08007f69 	.word	0x08007f69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d107      	bne.n	8007f30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f20:	f107 030a 	add.w	r3, r7, #10
 8007f24:	2202      	movs	r2, #2
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fd5d 	bl	80099e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2e:	e032      	b.n	8007f96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fce7 	bl	8009906 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3c:	e02b      	b.n	8007f96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d107      	bne.n	8007f5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f4a:	f107 030d 	add.w	r3, r7, #13
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fd48 	bl	80099e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f58:	e01d      	b.n	8007f96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fcd2 	bl	8009906 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
          break;
 8007f66:	e016      	b.n	8007f96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d00f      	beq.n	8007f94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 fcc5 	bl	8009906 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f80:	e008      	b.n	8007f94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fcbe 	bl	8009906 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	e002      	b.n	8007f96 <USBD_CDC_Setup+0x19e>
          break;
 8007f90:	bf00      	nop
 8007f92:	e008      	b.n	8007fa6 <USBD_CDC_Setup+0x1ae>
          break;
 8007f94:	bf00      	nop
      }
      break;
 8007f96:	e006      	b.n	8007fa6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fcb3 	bl	8009906 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32b0      	adds	r2, #176	; 0xb0
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e065      	b.n	80080a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32b0      	adds	r2, #176	; 0xb0
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	f003 020f 	and.w	r2, r3, #15
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02f      	beq.n	8008064 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	3318      	adds	r3, #24
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	f003 010f 	and.w	r1, r3, #15
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	460b      	mov	r3, r1
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	440b      	add	r3, r1
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4403      	add	r3, r0
 800802c:	3344      	adds	r3, #68	; 0x44
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	fbb2 f1f3 	udiv	r1, r2, r3
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800803a:	2b00      	cmp	r3, #0
 800803c:	d112      	bne.n	8008064 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	3318      	adds	r3, #24
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008056:	78f9      	ldrb	r1, [r7, #3]
 8008058:	2300      	movs	r3, #0
 800805a:	2200      	movs	r2, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 faaf 	bl	800a5c0 <USBD_LL_Transmit>
 8008062:	e01f      	b.n	80080a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2200      	movs	r2, #0
 8008068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	33b0      	adds	r3, #176	; 0xb0
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d010      	beq.n	80080a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	33b0      	adds	r3, #176	; 0xb0
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	32b0      	adds	r2, #176	; 0xb0
 80080c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	32b0      	adds	r2, #176	; 0xb0
 80080d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080dc:	2303      	movs	r3, #3
 80080de:	e01a      	b.n	8008116 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 fadb 	bl	800a6a0 <USBD_LL_GetRxDataSize>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	33b0      	adds	r3, #176	; 0xb0
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008110:	4611      	mov	r1, r2
 8008112:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32b0      	adds	r2, #176	; 0xb0
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800813c:	2303      	movs	r3, #3
 800813e:	e025      	b.n	800818c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	33b0      	adds	r3, #176	; 0xb0
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01a      	beq.n	800818a <USBD_CDC_EP0_RxReady+0x6c>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800815a:	2bff      	cmp	r3, #255	; 0xff
 800815c:	d015      	beq.n	800818a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33b0      	adds	r3, #176	; 0xb0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008176:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800817e:	b292      	uxth	r2, r2
 8008180:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800819c:	2182      	movs	r1, #130	; 0x82
 800819e:	4818      	ldr	r0, [pc, #96]	; (8008200 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081a0:	f000 fd4f 	bl	8008c42 <USBD_GetEpDesc>
 80081a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081a6:	2101      	movs	r1, #1
 80081a8:	4815      	ldr	r0, [pc, #84]	; (8008200 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081aa:	f000 fd4a 	bl	8008c42 <USBD_GetEpDesc>
 80081ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081b0:	2181      	movs	r1, #129	; 0x81
 80081b2:	4813      	ldr	r0, [pc, #76]	; (8008200 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081b4:	f000 fd45 	bl	8008c42 <USBD_GetEpDesc>
 80081b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2210      	movs	r2, #16
 80081c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d4:	711a      	strb	r2, [r3, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e8:	711a      	strb	r2, [r3, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2243      	movs	r2, #67	; 0x43
 80081f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000050 	.word	0x20000050

08008204 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800820c:	2182      	movs	r1, #130	; 0x82
 800820e:	4818      	ldr	r0, [pc, #96]	; (8008270 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008210:	f000 fd17 	bl	8008c42 <USBD_GetEpDesc>
 8008214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008216:	2101      	movs	r1, #1
 8008218:	4815      	ldr	r0, [pc, #84]	; (8008270 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800821a:	f000 fd12 	bl	8008c42 <USBD_GetEpDesc>
 800821e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008220:	2181      	movs	r1, #129	; 0x81
 8008222:	4813      	ldr	r0, [pc, #76]	; (8008270 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008224:	f000 fd0d 	bl	8008c42 <USBD_GetEpDesc>
 8008228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2210      	movs	r2, #16
 8008234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2200      	movs	r2, #0
 8008240:	711a      	strb	r2, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f042 0202 	orr.w	r2, r2, #2
 8008248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	711a      	strb	r2, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f042 0202 	orr.w	r2, r2, #2
 800825c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2243      	movs	r2, #67	; 0x43
 8008262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000050 	.word	0x20000050

08008274 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800827c:	2182      	movs	r1, #130	; 0x82
 800827e:	4818      	ldr	r0, [pc, #96]	; (80082e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008280:	f000 fcdf 	bl	8008c42 <USBD_GetEpDesc>
 8008284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008286:	2101      	movs	r1, #1
 8008288:	4815      	ldr	r0, [pc, #84]	; (80082e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800828a:	f000 fcda 	bl	8008c42 <USBD_GetEpDesc>
 800828e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008290:	2181      	movs	r1, #129	; 0x81
 8008292:	4813      	ldr	r0, [pc, #76]	; (80082e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008294:	f000 fcd5 	bl	8008c42 <USBD_GetEpDesc>
 8008298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2210      	movs	r2, #16
 80082a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b4:	711a      	strb	r2, [r3, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082c8:	711a      	strb	r2, [r3, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2243      	movs	r2, #67	; 0x43
 80082d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d4:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000050 	.word	0x20000050

080082e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	220a      	movs	r2, #10
 80082f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	2000000c 	.word	0x2000000c

08008304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	e009      	b.n	800832c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	33b0      	adds	r3, #176	; 0xb0
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	32b0      	adds	r2, #176	; 0xb0
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	e008      	b.n	8008370 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	32b0      	adds	r2, #176	; 0xb0
 8008390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008394:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	e004      	b.n	80083aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	32b0      	adds	r2, #176	; 0xb0
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083da:	2303      	movs	r3, #3
 80083dc:	e025      	b.n	800842a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11f      	bne.n	8008428 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083f0:	4b10      	ldr	r3, [pc, #64]	; (8008434 <USBD_CDC_TransmitPacket+0x7c>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 020f 	and.w	r2, r3, #15
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4403      	add	r3, r0
 800840a:	3318      	adds	r3, #24
 800840c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <USBD_CDC_TransmitPacket+0x7c>)
 8008410:	7819      	ldrb	r1, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f002 f8ce 	bl	800a5c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000093 	.word	0x20000093

08008438 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32b0      	adds	r2, #176	; 0xb0
 800844a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	32b0      	adds	r2, #176	; 0xb0
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	e018      	b.n	8008498 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7c1b      	ldrb	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <USBD_CDC_ReceivePacket+0x68>)
 8008470:	7819      	ldrb	r1, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f002 f8d7 	bl	800a630 <USBD_LL_PrepareReceive>
 8008482:	e008      	b.n	8008496 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <USBD_CDC_ReceivePacket+0x68>)
 8008486:	7819      	ldrb	r1, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800848e:	2340      	movs	r3, #64	; 0x40
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f002 f8cd 	bl	800a630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000094 	.word	0x20000094

080084a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e01f      	b.n	80084fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f001 fea5 	bl	800a240 <USBD_LL_Init>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	e025      	b.n	8008568 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32ae      	adds	r2, #174	; 0xae
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00f      	beq.n	8008558 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	32ae      	adds	r2, #174	; 0xae
 8008542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f107 020e 	add.w	r2, r7, #14
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	4602      	mov	r2, r0
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fead 	bl	800a2d8 <USBD_LL_Start>
 800857e:	4603      	mov	r3, r0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	4611      	mov	r1, r2
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	4611      	mov	r1, r2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f001 f938 	bl	8009892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008630:	461a      	mov	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2b02      	cmp	r3, #2
 8008644:	d01a      	beq.n	800867c <USBD_LL_SetupStage+0x72>
 8008646:	2b02      	cmp	r3, #2
 8008648:	d822      	bhi.n	8008690 <USBD_LL_SetupStage+0x86>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <USBD_LL_SetupStage+0x4a>
 800864e:	2b01      	cmp	r3, #1
 8008650:	d00a      	beq.n	8008668 <USBD_LL_SetupStage+0x5e>
 8008652:	e01d      	b.n	8008690 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fb65 	bl	8008d2c <USBD_StdDevReq>
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
      break;
 8008666:	e020      	b.n	80086aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fbcd 	bl	8008e10 <USBD_StdItfReq>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
      break;
 800867a:	e016      	b.n	80086aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc2f 	bl	8008ee8 <USBD_StdEPReq>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
      break;
 800868e:	e00c      	b.n	80086aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008696:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800869a:	b2db      	uxtb	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 fec0 	bl	800a424 <USBD_LL_StallEP>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]
      break;
 80086a8:	bf00      	nop
  }

  return ret;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	460b      	mov	r3, r1
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d16e      	bne.n	80087aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086da:	2b03      	cmp	r3, #3
 80086dc:	f040 8098 	bne.w	8008810 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d913      	bls.n	8008714 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	1ad2      	subs	r2, r2, r3
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	4293      	cmp	r3, r2
 8008704:	bf28      	it	cs
 8008706:	4613      	movcs	r3, r2
 8008708:	461a      	mov	r2, r3
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f001 f9b4 	bl	8009a7a <USBD_CtlContinueRx>
 8008712:	e07d      	b.n	8008810 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800871a:	f003 031f 	and.w	r3, r3, #31
 800871e:	2b02      	cmp	r3, #2
 8008720:	d014      	beq.n	800874c <USBD_LL_DataOutStage+0x98>
 8008722:	2b02      	cmp	r3, #2
 8008724:	d81d      	bhi.n	8008762 <USBD_LL_DataOutStage+0xae>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <USBD_LL_DataOutStage+0x7c>
 800872a:	2b01      	cmp	r3, #1
 800872c:	d003      	beq.n	8008736 <USBD_LL_DataOutStage+0x82>
 800872e:	e018      	b.n	8008762 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	75bb      	strb	r3, [r7, #22]
            break;
 8008734:	e018      	b.n	8008768 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800873c:	b2db      	uxtb	r3, r3
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa64 	bl	8008c0e <USBD_CoreFindIF>
 8008746:	4603      	mov	r3, r0
 8008748:	75bb      	strb	r3, [r7, #22]
            break;
 800874a:	e00d      	b.n	8008768 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008752:	b2db      	uxtb	r3, r3
 8008754:	4619      	mov	r1, r3
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fa66 	bl	8008c28 <USBD_CoreFindEP>
 800875c:	4603      	mov	r3, r0
 800875e:	75bb      	strb	r3, [r7, #22]
            break;
 8008760:	e002      	b.n	8008768 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	75bb      	strb	r3, [r7, #22]
            break;
 8008766:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008768:	7dbb      	ldrb	r3, [r7, #22]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d119      	bne.n	80087a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d113      	bne.n	80087a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800877a:	7dba      	ldrb	r2, [r7, #22]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	32ae      	adds	r2, #174	; 0xae
 8008780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800878a:	7dba      	ldrb	r2, [r7, #22]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008792:	7dba      	ldrb	r2, [r7, #22]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	32ae      	adds	r2, #174	; 0xae
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 f97a 	bl	8009a9c <USBD_CtlSendStatus>
 80087a8:	e032      	b.n	8008810 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	4619      	mov	r1, r3
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fa37 	bl	8008c28 <USBD_CoreFindEP>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087be:	7dbb      	ldrb	r3, [r7, #22]
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	d025      	beq.n	8008810 <USBD_LL_DataOutStage+0x15c>
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d122      	bne.n	8008810 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d117      	bne.n	8008806 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087d6:	7dba      	ldrb	r2, [r7, #22]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	32ae      	adds	r2, #174	; 0xae
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087e6:	7dba      	ldrb	r2, [r7, #22]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ee:	7dba      	ldrb	r2, [r7, #22]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	32ae      	adds	r2, #174	; 0xae
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	7afa      	ldrb	r2, [r7, #11]
 80087fc:	4611      	mov	r1, r2
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	4798      	blx	r3
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	e000      	b.n	8008812 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	460b      	mov	r3, r1
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d16f      	bne.n	800890e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3314      	adds	r3, #20
 8008832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800883a:	2b02      	cmp	r3, #2
 800883c:	d15a      	bne.n	80088f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d914      	bls.n	8008874 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	461a      	mov	r2, r3
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f001 f8dc 	bl	8009a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	2100      	movs	r1, #0
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f001 fedf 	bl	800a630 <USBD_LL_PrepareReceive>
 8008872:	e03f      	b.n	80088f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	429a      	cmp	r2, r3
 800887e:	d11c      	bne.n	80088ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008888:	429a      	cmp	r2, r3
 800888a:	d316      	bcc.n	80088ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008896:	429a      	cmp	r2, r3
 8008898:	d20f      	bcs.n	80088ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f001 f8bd 	bl	8009a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f001 febc 	bl	800a630 <USBD_LL_PrepareReceive>
 80088b8:	e01c      	b.n	80088f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d10f      	bne.n	80088e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 fd9b 	bl	800a424 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 f8e7 	bl	8009ac2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d03a      	beq.n	8008974 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fe42 	bl	8008588 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800890c:	e032      	b.n	8008974 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800890e:	7afb      	ldrb	r3, [r7, #11]
 8008910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f985 	bl	8008c28 <USBD_CoreFindEP>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	2bff      	cmp	r3, #255	; 0xff
 8008926:	d025      	beq.n	8008974 <USBD_LL_DataInStage+0x15a>
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d122      	bne.n	8008974 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d11c      	bne.n	8008974 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800893a:	7dfa      	ldrb	r2, [r7, #23]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	32ae      	adds	r2, #174	; 0xae
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800894a:	7dfa      	ldrb	r2, [r7, #23]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008952:	7dfa      	ldrb	r2, [r7, #23]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	32ae      	adds	r2, #174	; 0xae
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	7afa      	ldrb	r2, [r7, #11]
 8008960:	4611      	mov	r1, r2
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	4798      	blx	r3
 8008966:	4603      	mov	r3, r0
 8008968:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800896a:	7dbb      	ldrb	r3, [r7, #22]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008970:	7dbb      	ldrb	r3, [r7, #22]
 8008972:	e000      	b.n	8008976 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00e      	beq.n	80089e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6852      	ldr	r2, [r2, #4]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	4611      	mov	r1, r2
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	2200      	movs	r2, #0
 80089e8:	2100      	movs	r1, #0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 fca6 	bl	800a33c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2240      	movs	r2, #64	; 0x40
 80089fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	2200      	movs	r2, #0
 8008a04:	2180      	movs	r1, #128	; 0x80
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fc98 	bl	800a33c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2240      	movs	r2, #64	; 0x40
 8008a16:	621a      	str	r2, [r3, #32]

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	78fa      	ldrb	r2, [r7, #3]
 8008a32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d006      	beq.n	8008a64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2204      	movs	r2, #4
 8008a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d106      	bne.n	8008a9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d110      	bne.n	8008ae0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00b      	beq.n	8008ae0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32ae      	adds	r2, #174	; 0xae
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e01c      	b.n	8008b46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d115      	bne.n	8008b44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	; 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	32ae      	adds	r2, #174	; 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	32ae      	adds	r2, #174	; 0xae
 8008b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e01c      	b.n	8008baa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d115      	bne.n	8008ba8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	; 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	32ae      	adds	r2, #174	; 0xae
 8008b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6852      	ldr	r2, [r2, #4]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d920      	bls.n	8008cac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c72:	e013      	b.n	8008c9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c74:	f107 030a 	add.w	r3, r7, #10
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6978      	ldr	r0, [r7, #20]
 8008c7c:	f000 f81b 	bl	8008cb6 <USBD_GetNextDesc>
 8008c80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d108      	bne.n	8008c9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	789b      	ldrb	r3, [r3, #2]
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d008      	beq.n	8008caa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	885b      	ldrh	r3, [r3, #2]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	897b      	ldrh	r3, [r7, #10]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d8e5      	bhi.n	8008c74 <USBD_GetEpDesc+0x32>
 8008ca8:	e000      	b.n	8008cac <USBD_GetEpDesc+0x6a>
          break;
 8008caa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cac:	693b      	ldr	r3, [r7, #16]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	3301      	adds	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d0e:	8a3b      	ldrh	r3, [r7, #16]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	b21a      	sxth	r2, r3
 8008d14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d42:	2b40      	cmp	r3, #64	; 0x40
 8008d44:	d005      	beq.n	8008d52 <USBD_StdDevReq+0x26>
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d857      	bhi.n	8008dfa <USBD_StdDevReq+0xce>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00f      	beq.n	8008d6e <USBD_StdDevReq+0x42>
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d153      	bne.n	8008dfa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	32ae      	adds	r2, #174	; 0xae
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6c:	e04a      	b.n	8008e04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	d83b      	bhi.n	8008dee <USBD_StdDevReq+0xc2>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBD_StdDevReq+0x50>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08008def 	.word	0x08008def
 8008d88:	08008ddb 	.word	0x08008ddb
 8008d8c:	08008def 	.word	0x08008def
 8008d90:	08008daf 	.word	0x08008daf
 8008d94:	08008da5 	.word	0x08008da5
 8008d98:	08008def 	.word	0x08008def
 8008d9c:	08008dc7 	.word	0x08008dc7
 8008da0:	08008db9 	.word	0x08008db9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa3c 	bl	8009224 <USBD_GetDescriptor>
          break;
 8008dac:	e024      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fbcb 	bl	800954c <USBD_SetAddress>
          break;
 8008db6:	e01f      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fc0a 	bl	80095d4 <USBD_SetConfig>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
          break;
 8008dc4:	e018      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fcad 	bl	8009728 <USBD_GetConfig>
          break;
 8008dce:	e013      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fcde 	bl	8009794 <USBD_GetStatus>
          break;
 8008dd8:	e00e      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fd0d 	bl	80097fc <USBD_SetFeature>
          break;
 8008de2:	e009      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fd31 	bl	800984e <USBD_ClrFeature>
          break;
 8008dec:	e004      	b.n	8008df8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fd88 	bl	8009906 <USBD_CtlError>
          break;
 8008df6:	bf00      	nop
      }
      break;
 8008df8:	e004      	b.n	8008e04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fd82 	bl	8009906 <USBD_CtlError>
      break;
 8008e02:	bf00      	nop
  }

  return ret;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop

08008e10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e26:	2b40      	cmp	r3, #64	; 0x40
 8008e28:	d005      	beq.n	8008e36 <USBD_StdItfReq+0x26>
 8008e2a:	2b40      	cmp	r3, #64	; 0x40
 8008e2c:	d852      	bhi.n	8008ed4 <USBD_StdItfReq+0xc4>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <USBD_StdItfReq+0x26>
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d14e      	bne.n	8008ed4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d840      	bhi.n	8008ec6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	889b      	ldrh	r3, [r3, #4]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d836      	bhi.n	8008ebc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	889b      	ldrh	r3, [r3, #4]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff fed9 	bl	8008c0e <USBD_CoreFindIF>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2bff      	cmp	r3, #255	; 0xff
 8008e64:	d01d      	beq.n	8008ea2 <USBD_StdItfReq+0x92>
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d11a      	bne.n	8008ea2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e6c:	7bba      	ldrb	r2, [r7, #14]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32ae      	adds	r2, #174	; 0xae
 8008e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00f      	beq.n	8008e9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e7c:	7bba      	ldrb	r2, [r7, #14]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e84:	7bba      	ldrb	r2, [r7, #14]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	32ae      	adds	r2, #174	; 0xae
 8008e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e9a:	e004      	b.n	8008ea6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ea0:	e001      	b.n	8008ea6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d110      	bne.n	8008ed0 <USBD_StdItfReq+0xc0>
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10d      	bne.n	8008ed0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fdf1 	bl	8009a9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008eba:	e009      	b.n	8008ed0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fd21 	bl	8009906 <USBD_CtlError>
          break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd1c 	bl	8009906 <USBD_CtlError>
          break;
 8008ece:	e000      	b.n	8008ed2 <USBD_StdItfReq+0xc2>
          break;
 8008ed0:	bf00      	nop
      }
      break;
 8008ed2:	e004      	b.n	8008ede <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fd15 	bl	8009906 <USBD_CtlError>
      break;
 8008edc:	bf00      	nop
  }

  return ret;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	889b      	ldrh	r3, [r3, #4]
 8008efa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d007      	beq.n	8008f18 <USBD_StdEPReq+0x30>
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	f200 817f 	bhi.w	800920c <USBD_StdEPReq+0x324>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d02a      	beq.n	8008f68 <USBD_StdEPReq+0x80>
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	f040 817a 	bne.w	800920c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fe83 	bl	8008c28 <USBD_CoreFindEP>
 8008f22:	4603      	mov	r3, r0
 8008f24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f26:	7b7b      	ldrb	r3, [r7, #13]
 8008f28:	2bff      	cmp	r3, #255	; 0xff
 8008f2a:	f000 8174 	beq.w	8009216 <USBD_StdEPReq+0x32e>
 8008f2e:	7b7b      	ldrb	r3, [r7, #13]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f040 8170 	bne.w	8009216 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f36:	7b7a      	ldrb	r2, [r7, #13]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f3e:	7b7a      	ldrb	r2, [r7, #13]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	32ae      	adds	r2, #174	; 0xae
 8008f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 8163 	beq.w	8009216 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f50:	7b7a      	ldrb	r2, [r7, #13]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	32ae      	adds	r2, #174	; 0xae
 8008f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f66:	e156      	b.n	8009216 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d008      	beq.n	8008f82 <USBD_StdEPReq+0x9a>
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	f300 8145 	bgt.w	8009200 <USBD_StdEPReq+0x318>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 809b 	beq.w	80090b2 <USBD_StdEPReq+0x1ca>
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d03c      	beq.n	8008ffa <USBD_StdEPReq+0x112>
 8008f80:	e13e      	b.n	8009200 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d002      	beq.n	8008f94 <USBD_StdEPReq+0xac>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d016      	beq.n	8008fc0 <USBD_StdEPReq+0xd8>
 8008f92:	e02c      	b.n	8008fee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00d      	beq.n	8008fb6 <USBD_StdEPReq+0xce>
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b80      	cmp	r3, #128	; 0x80
 8008f9e:	d00a      	beq.n	8008fb6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fa3d 	bl	800a424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fa39 	bl	800a424 <USBD_LL_StallEP>
 8008fb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb4:	e020      	b.n	8008ff8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fca4 	bl	8009906 <USBD_CtlError>
              break;
 8008fbe:	e01b      	b.n	8008ff8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10e      	bne.n	8008fe6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <USBD_StdEPReq+0xfe>
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b80      	cmp	r3, #128	; 0x80
 8008fd2:	d008      	beq.n	8008fe6 <USBD_StdEPReq+0xfe>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	88db      	ldrh	r3, [r3, #6]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fa1f 	bl	800a424 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fd58 	bl	8009a9c <USBD_CtlSendStatus>

              break;
 8008fec:	e004      	b.n	8008ff8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc88 	bl	8009906 <USBD_CtlError>
              break;
 8008ff6:	bf00      	nop
          }
          break;
 8008ff8:	e107      	b.n	800920a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d002      	beq.n	800900c <USBD_StdEPReq+0x124>
 8009006:	2b03      	cmp	r3, #3
 8009008:	d016      	beq.n	8009038 <USBD_StdEPReq+0x150>
 800900a:	e04b      	b.n	80090a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00d      	beq.n	800902e <USBD_StdEPReq+0x146>
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	d00a      	beq.n	800902e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fa01 	bl	800a424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009022:	2180      	movs	r1, #128	; 0x80
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f9fd 	bl	800a424 <USBD_LL_StallEP>
 800902a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800902c:	e040      	b.n	80090b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc68 	bl	8009906 <USBD_CtlError>
              break;
 8009036:	e03b      	b.n	80090b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	885b      	ldrh	r3, [r3, #2]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d136      	bne.n	80090ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fa1e 	bl	800a490 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fd21 	bl	8009a9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff fde2 	bl	8008c28 <USBD_CoreFindEP>
 8009064:	4603      	mov	r3, r0
 8009066:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009068:	7b7b      	ldrb	r3, [r7, #13]
 800906a:	2bff      	cmp	r3, #255	; 0xff
 800906c:	d01f      	beq.n	80090ae <USBD_StdEPReq+0x1c6>
 800906e:	7b7b      	ldrb	r3, [r7, #13]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d11c      	bne.n	80090ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009074:	7b7a      	ldrb	r2, [r7, #13]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800907c:	7b7a      	ldrb	r2, [r7, #13]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	32ae      	adds	r2, #174	; 0xae
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d010      	beq.n	80090ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800908c:	7b7a      	ldrb	r2, [r7, #13]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	32ae      	adds	r2, #174	; 0xae
 8009092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090a2:	e004      	b.n	80090ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fc2d 	bl	8009906 <USBD_CtlError>
              break;
 80090ac:	e000      	b.n	80090b0 <USBD_StdEPReq+0x1c8>
              break;
 80090ae:	bf00      	nop
          }
          break;
 80090b0:	e0ab      	b.n	800920a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d002      	beq.n	80090c4 <USBD_StdEPReq+0x1dc>
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d032      	beq.n	8009128 <USBD_StdEPReq+0x240>
 80090c2:	e097      	b.n	80091f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <USBD_StdEPReq+0x1f2>
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b80      	cmp	r3, #128	; 0x80
 80090ce:	d004      	beq.n	80090da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc17 	bl	8009906 <USBD_CtlError>
                break;
 80090d8:	e091      	b.n	80091fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da0b      	bge.n	80090fa <USBD_StdEPReq+0x212>
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	3310      	adds	r3, #16
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	4413      	add	r3, r2
 80090f6:	3304      	adds	r3, #4
 80090f8:	e00b      	b.n	8009112 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2202      	movs	r2, #2
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fc61 	bl	80099e8 <USBD_CtlSendData>
              break;
 8009126:	e06a      	b.n	80091fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	da11      	bge.n	8009154 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d117      	bne.n	800917a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fbda 	bl	8009906 <USBD_CtlError>
                  break;
 8009152:	e054      	b.n	80091fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	f003 020f 	and.w	r2, r3, #15
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d104      	bne.n	800917a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fbc7 	bl	8009906 <USBD_CtlError>
                  break;
 8009178:	e041      	b.n	80091fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800917e:	2b00      	cmp	r3, #0
 8009180:	da0b      	bge.n	800919a <USBD_StdEPReq+0x2b2>
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	3310      	adds	r3, #16
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4413      	add	r3, r2
 8009196:	3304      	adds	r3, #4
 8009198:	e00b      	b.n	80091b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4413      	add	r3, r2
 80091b0:	3304      	adds	r3, #4
 80091b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <USBD_StdEPReq+0x2d8>
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	2b80      	cmp	r3, #128	; 0x80
 80091be:	d103      	bne.n	80091c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e00e      	b.n	80091e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 f995 	bl	800a4fc <USBD_LL_IsStallEP>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2201      	movs	r2, #1
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e002      	b.n	80091e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2202      	movs	r2, #2
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fbfb 	bl	80099e8 <USBD_CtlSendData>
              break;
 80091f2:	e004      	b.n	80091fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fb85 	bl	8009906 <USBD_CtlError>
              break;
 80091fc:	bf00      	nop
          }
          break;
 80091fe:	e004      	b.n	800920a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fb7f 	bl	8009906 <USBD_CtlError>
          break;
 8009208:	bf00      	nop
      }
      break;
 800920a:	e005      	b.n	8009218 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb79 	bl	8009906 <USBD_CtlError>
      break;
 8009214:	e000      	b.n	8009218 <USBD_StdEPReq+0x330>
      break;
 8009216:	bf00      	nop
  }

  return ret;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	2b0e      	cmp	r3, #14
 8009246:	f200 8152 	bhi.w	80094ee <USBD_GetDescriptor+0x2ca>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <USBD_GetDescriptor+0x2c>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	080092c1 	.word	0x080092c1
 8009254:	080092d9 	.word	0x080092d9
 8009258:	08009319 	.word	0x08009319
 800925c:	080094ef 	.word	0x080094ef
 8009260:	080094ef 	.word	0x080094ef
 8009264:	0800948f 	.word	0x0800948f
 8009268:	080094bb 	.word	0x080094bb
 800926c:	080094ef 	.word	0x080094ef
 8009270:	080094ef 	.word	0x080094ef
 8009274:	080094ef 	.word	0x080094ef
 8009278:	080094ef 	.word	0x080094ef
 800927c:	080094ef 	.word	0x080094ef
 8009280:	080094ef 	.word	0x080094ef
 8009284:	080094ef 	.word	0x080094ef
 8009288:	0800928d 	.word	0x0800928d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7c12      	ldrb	r2, [r2, #16]
 80092a4:	f107 0108 	add.w	r1, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092ae:	e126      	b.n	80094fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb27 	bl	8009906 <USBD_CtlError>
        err++;
 80092b8:	7afb      	ldrb	r3, [r7, #11]
 80092ba:	3301      	adds	r3, #1
 80092bc:	72fb      	strb	r3, [r7, #11]
      break;
 80092be:	e11e      	b.n	80094fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	7c12      	ldrb	r2, [r2, #16]
 80092cc:	f107 0108 	add.w	r1, r7, #8
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	60f8      	str	r0, [r7, #12]
      break;
 80092d6:	e112      	b.n	80094fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7c1b      	ldrb	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10d      	bne.n	80092fc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	f107 0208 	add.w	r2, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	2202      	movs	r2, #2
 80092f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092fa:	e100      	b.n	80094fe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	f107 0208 	add.w	r2, r7, #8
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	2202      	movs	r2, #2
 8009314:	701a      	strb	r2, [r3, #0]
      break;
 8009316:	e0f2      	b.n	80094fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	885b      	ldrh	r3, [r3, #2]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b05      	cmp	r3, #5
 8009320:	f200 80ac 	bhi.w	800947c <USBD_GetDescriptor+0x258>
 8009324:	a201      	add	r2, pc, #4	; (adr r2, 800932c <USBD_GetDescriptor+0x108>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	08009345 	.word	0x08009345
 8009330:	08009379 	.word	0x08009379
 8009334:	080093ad 	.word	0x080093ad
 8009338:	080093e1 	.word	0x080093e1
 800933c:	08009415 	.word	0x08009415
 8009340:	08009449 	.word	0x08009449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	7c12      	ldrb	r2, [r2, #16]
 800935c:	f107 0108 	add.w	r1, r7, #8
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009366:	e091      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 facb 	bl	8009906 <USBD_CtlError>
            err++;
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	3301      	adds	r3, #1
 8009374:	72fb      	strb	r3, [r7, #11]
          break;
 8009376:	e089      	b.n	800948c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	7c12      	ldrb	r2, [r2, #16]
 8009390:	f107 0108 	add.w	r1, r7, #8
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
 8009398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939a:	e077      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fab1 	bl	8009906 <USBD_CtlError>
            err++;
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	3301      	adds	r3, #1
 80093a8:	72fb      	strb	r3, [r7, #11]
          break;
 80093aa:	e06f      	b.n	800948c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	7c12      	ldrb	r2, [r2, #16]
 80093c4:	f107 0108 	add.w	r1, r7, #8
 80093c8:	4610      	mov	r0, r2
 80093ca:	4798      	blx	r3
 80093cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ce:	e05d      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa97 	bl	8009906 <USBD_CtlError>
            err++;
 80093d8:	7afb      	ldrb	r3, [r7, #11]
 80093da:	3301      	adds	r3, #1
 80093dc:	72fb      	strb	r3, [r7, #11]
          break;
 80093de:	e055      	b.n	800948c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	f107 0108 	add.w	r1, r7, #8
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009402:	e043      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa7d 	bl	8009906 <USBD_CtlError>
            err++;
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	3301      	adds	r3, #1
 8009410:	72fb      	strb	r3, [r7, #11]
          break;
 8009412:	e03b      	b.n	800948c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	7c12      	ldrb	r2, [r2, #16]
 800942c:	f107 0108 	add.w	r1, r7, #8
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009436:	e029      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa63 	bl	8009906 <USBD_CtlError>
            err++;
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	3301      	adds	r3, #1
 8009444:	72fb      	strb	r3, [r7, #11]
          break;
 8009446:	e021      	b.n	800948c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7c12      	ldrb	r2, [r2, #16]
 8009460:	f107 0108 	add.w	r1, r7, #8
 8009464:	4610      	mov	r0, r2
 8009466:	4798      	blx	r3
 8009468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946a:	e00f      	b.n	800948c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fa49 	bl	8009906 <USBD_CtlError>
            err++;
 8009474:	7afb      	ldrb	r3, [r7, #11]
 8009476:	3301      	adds	r3, #1
 8009478:	72fb      	strb	r3, [r7, #11]
          break;
 800947a:	e007      	b.n	800948c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa41 	bl	8009906 <USBD_CtlError>
          err++;
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	3301      	adds	r3, #1
 8009488:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800948a:	bf00      	nop
      }
      break;
 800948c:	e037      	b.n	80094fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	7c1b      	ldrb	r3, [r3, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f107 0208 	add.w	r2, r7, #8
 80094a2:	4610      	mov	r0, r2
 80094a4:	4798      	blx	r3
 80094a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094a8:	e029      	b.n	80094fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa2a 	bl	8009906 <USBD_CtlError>
        err++;
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	3301      	adds	r3, #1
 80094b6:	72fb      	strb	r3, [r7, #11]
      break;
 80094b8:	e021      	b.n	80094fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7c1b      	ldrb	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f107 0208 	add.w	r2, r7, #8
 80094ce:	4610      	mov	r0, r2
 80094d0:	4798      	blx	r3
 80094d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	2207      	movs	r2, #7
 80094da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094dc:	e00f      	b.n	80094fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fa10 	bl	8009906 <USBD_CtlError>
        err++;
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	3301      	adds	r3, #1
 80094ea:	72fb      	strb	r3, [r7, #11]
      break;
 80094ec:	e007      	b.n	80094fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa08 	bl	8009906 <USBD_CtlError>
      err++;
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	3301      	adds	r3, #1
 80094fa:	72fb      	strb	r3, [r7, #11]
      break;
 80094fc:	bf00      	nop
  }

  if (err != 0U)
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11e      	bne.n	8009542 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	88db      	ldrh	r3, [r3, #6]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d016      	beq.n	800953a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800950c:	893b      	ldrh	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00e      	beq.n	8009530 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	88da      	ldrh	r2, [r3, #6]
 8009516:	893b      	ldrh	r3, [r7, #8]
 8009518:	4293      	cmp	r3, r2
 800951a:	bf28      	it	cs
 800951c:	4613      	movcs	r3, r2
 800951e:	b29b      	uxth	r3, r3
 8009520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009522:	893b      	ldrh	r3, [r7, #8]
 8009524:	461a      	mov	r2, r3
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fa5d 	bl	80099e8 <USBD_CtlSendData>
 800952e:	e009      	b.n	8009544 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9e7 	bl	8009906 <USBD_CtlError>
 8009538:	e004      	b.n	8009544 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 faae 	bl	8009a9c <USBD_CtlSendStatus>
 8009540:	e000      	b.n	8009544 <USBD_GetDescriptor+0x320>
    return;
 8009542:	bf00      	nop
  }
}
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop

0800954c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	889b      	ldrh	r3, [r3, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d131      	bne.n	80095c2 <USBD_SetAddress+0x76>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	88db      	ldrh	r3, [r3, #6]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d12d      	bne.n	80095c2 <USBD_SetAddress+0x76>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	2b7f      	cmp	r3, #127	; 0x7f
 800956c:	d829      	bhi.n	80095c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d104      	bne.n	8009590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f9bc 	bl	8009906 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	e01d      	b.n	80095cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7bfa      	ldrb	r2, [r7, #15]
 8009594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 ffd9 	bl	800a554 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa7a 	bl	8009a9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b6:	e009      	b.n	80095cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c0:	e004      	b.n	80095cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f99e 	bl	8009906 <USBD_CtlError>
  }
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	885b      	ldrh	r3, [r3, #2]
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	4b4e      	ldr	r3, [pc, #312]	; (8009724 <USBD_SetConfig+0x150>)
 80095ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095ec:	4b4d      	ldr	r3, [pc, #308]	; (8009724 <USBD_SetConfig+0x150>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d905      	bls.n	8009600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f985 	bl	8009906 <USBD_CtlError>
    return USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e08c      	b.n	800971a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d002      	beq.n	8009612 <USBD_SetConfig+0x3e>
 800960c:	2b03      	cmp	r3, #3
 800960e:	d029      	beq.n	8009664 <USBD_SetConfig+0x90>
 8009610:	e075      	b.n	80096fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009612:	4b44      	ldr	r3, [pc, #272]	; (8009724 <USBD_SetConfig+0x150>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d020      	beq.n	800965c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800961a:	4b42      	ldr	r3, [pc, #264]	; (8009724 <USBD_SetConfig+0x150>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009624:	4b3f      	ldr	r3, [pc, #252]	; (8009724 <USBD_SetConfig+0x150>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fe ffb7 	bl	800859e <USBD_SetClassConfig>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f962 	bl	8009906 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2202      	movs	r2, #2
 8009646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800964a:	e065      	b.n	8009718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa25 	bl	8009a9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2203      	movs	r2, #3
 8009656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800965a:	e05d      	b.n	8009718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fa1d 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 8009662:	e059      	b.n	8009718 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009664:	4b2f      	ldr	r3, [pc, #188]	; (8009724 <USBD_SetConfig+0x150>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d112      	bne.n	8009692 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009674:	4b2b      	ldr	r3, [pc, #172]	; (8009724 <USBD_SetConfig+0x150>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <USBD_SetConfig+0x150>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fe ffa6 	bl	80085d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa06 	bl	8009a9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009690:	e042      	b.n	8009718 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009692:	4b24      	ldr	r3, [pc, #144]	; (8009724 <USBD_SetConfig+0x150>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d02a      	beq.n	80096f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7fe ff94 	bl	80085d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096ae:	4b1d      	ldr	r3, [pc, #116]	; (8009724 <USBD_SetConfig+0x150>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096b8:	4b1a      	ldr	r3, [pc, #104]	; (8009724 <USBD_SetConfig+0x150>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fe ff6d 	bl	800859e <USBD_SetClassConfig>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00f      	beq.n	80096ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f918 	bl	8009906 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe ff79 	bl	80085d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096ec:	e014      	b.n	8009718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f9d4 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 80096f4:	e010      	b.n	8009718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f9d0 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 80096fc:	e00c      	b.n	8009718 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f900 	bl	8009906 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009706:	4b07      	ldr	r3, [pc, #28]	; (8009724 <USBD_SetConfig+0x150>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fe ff62 	bl	80085d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	73fb      	strb	r3, [r7, #15]
      break;
 8009716:	bf00      	nop
  }

  return ret;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20000444 	.word	0x20000444

08009728 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	88db      	ldrh	r3, [r3, #6]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d004      	beq.n	8009744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f8e2 	bl	8009906 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009742:	e023      	b.n	800978c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	dc02      	bgt.n	8009756 <USBD_GetConfig+0x2e>
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc03      	bgt.n	800975c <USBD_GetConfig+0x34>
 8009754:	e015      	b.n	8009782 <USBD_GetConfig+0x5a>
 8009756:	2b03      	cmp	r3, #3
 8009758:	d00b      	beq.n	8009772 <USBD_GetConfig+0x4a>
 800975a:	e012      	b.n	8009782 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3308      	adds	r3, #8
 8009766:	2201      	movs	r2, #1
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f93c 	bl	80099e8 <USBD_CtlSendData>
        break;
 8009770:	e00c      	b.n	800978c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3304      	adds	r3, #4
 8009776:	2201      	movs	r2, #1
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f934 	bl	80099e8 <USBD_CtlSendData>
        break;
 8009780:	e004      	b.n	800978c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f8be 	bl	8009906 <USBD_CtlError>
        break;
 800978a:	bf00      	nop
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d81e      	bhi.n	80097ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d004      	beq.n	80097be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f8a5 	bl	8009906 <USBD_CtlError>
        break;
 80097bc:	e01a      	b.n	80097f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f043 0202 	orr.w	r2, r3, #2
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	330c      	adds	r3, #12
 80097de:	2202      	movs	r2, #2
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f900 	bl	80099e8 <USBD_CtlSendData>
      break;
 80097e8:	e004      	b.n	80097f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f88a 	bl	8009906 <USBD_CtlError>
      break;
 80097f2:	bf00      	nop
  }
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	885b      	ldrh	r3, [r3, #2]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d107      	bne.n	800981e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f940 	bl	8009a9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800981c:	e013      	b.n	8009846 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d10b      	bne.n	800983e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	889b      	ldrh	r3, [r3, #4]
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	b29b      	uxth	r3, r3
 800982e:	b2da      	uxtb	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f930 	bl	8009a9c <USBD_CtlSendStatus>
}
 800983c:	e003      	b.n	8009846 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f860 	bl	8009906 <USBD_CtlError>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985e:	b2db      	uxtb	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	2b02      	cmp	r3, #2
 8009864:	d80b      	bhi.n	800987e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d10c      	bne.n	8009888 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f910 	bl	8009a9c <USBD_CtlSendStatus>
      }
      break;
 800987c:	e004      	b.n	8009888 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f840 	bl	8009906 <USBD_CtlError>
      break;
 8009886:	e000      	b.n	800988a <USBD_ClrFeature+0x3c>
      break;
 8009888:	bf00      	nop
  }
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fa17 	bl	8008cf0 <SWAPBYTE>
 80098c2:	4603      	mov	r3, r0
 80098c4:	461a      	mov	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff fa0a 	bl	8008cf0 <SWAPBYTE>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff f9fd 	bl	8008cf0 <SWAPBYTE>
 80098f6:	4603      	mov	r3, r0
 80098f8:	461a      	mov	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	80da      	strh	r2, [r3, #6]
}
 80098fe:	bf00      	nop
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fd86 	bl	800a424 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fd82 	bl	800a424 <USBD_LL_StallEP>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d036      	beq.n	80099ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009942:	6938      	ldr	r0, [r7, #16]
 8009944:	f000 f836 	bl	80099b4 <USBD_GetLen>
 8009948:	4603      	mov	r3, r0
 800994a:	3301      	adds	r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	b29a      	uxth	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4413      	add	r3, r2
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	701a      	strb	r2, [r3, #0]
  idx++;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	3301      	adds	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	2203      	movs	r2, #3
 8009970:	701a      	strb	r2, [r3, #0]
  idx++;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	3301      	adds	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009978:	e013      	b.n	80099a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	4413      	add	r3, r2
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	3301      	adds	r3, #1
 800998a:	613b      	str	r3, [r7, #16]
    idx++;
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	3301      	adds	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	4413      	add	r3, r2
 8009998:	2200      	movs	r2, #0
 800999a:	701a      	strb	r2, [r3, #0]
    idx++;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	3301      	adds	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e7      	bne.n	800997a <USBD_GetString+0x52>
 80099aa:	e000      	b.n	80099ae <USBD_GetString+0x86>
    return;
 80099ac:	bf00      	nop
  }
}
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c4:	e005      	b.n	80099d2 <USBD_GetLen+0x1e>
  {
    len++;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	3301      	adds	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f5      	bne.n	80099c6 <USBD_GetLen+0x12>
  }

  return len;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fdd6 	bl	800a5c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fdc5 	bl	800a5c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2203      	movs	r2, #3
 8009a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fde0 	bl	800a630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fdcf 	bl	800a630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fd84 	bl	800a5c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2205      	movs	r2, #5
 8009ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fda9 	bl	800a630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009aec:	2200      	movs	r2, #0
 8009aee:	4912      	ldr	r1, [pc, #72]	; (8009b38 <MX_USB_DEVICE_Init+0x50>)
 8009af0:	4812      	ldr	r0, [pc, #72]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009af2:	f7fe fcd7 	bl	80084a4 <USBD_Init>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009afc:	f7f7 fcd1 	bl	80014a2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b00:	490f      	ldr	r1, [pc, #60]	; (8009b40 <MX_USB_DEVICE_Init+0x58>)
 8009b02:	480e      	ldr	r0, [pc, #56]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b04:	f7fe fcfe 	bl	8008504 <USBD_RegisterClass>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b0e:	f7f7 fcc8 	bl	80014a2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b12:	490c      	ldr	r1, [pc, #48]	; (8009b44 <MX_USB_DEVICE_Init+0x5c>)
 8009b14:	4809      	ldr	r0, [pc, #36]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b16:	f7fe fbf5 	bl	8008304 <USBD_CDC_RegisterInterface>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b20:	f7f7 fcbf 	bl	80014a2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b24:	4805      	ldr	r0, [pc, #20]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b26:	f7fe fd23 	bl	8008570 <USBD_Start>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b30:	f7f7 fcb7 	bl	80014a2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b34:	bf00      	nop
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200000ac 	.word	0x200000ac
 8009b3c:	20000448 	.word	0x20000448
 8009b40:	20000018 	.word	0x20000018
 8009b44:	20000098 	.word	0x20000098

08009b48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4905      	ldr	r1, [pc, #20]	; (8009b64 <CDC_Init_FS+0x1c>)
 8009b50:	4805      	ldr	r0, [pc, #20]	; (8009b68 <CDC_Init_FS+0x20>)
 8009b52:	f7fe fbf1 	bl	8008338 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b56:	4905      	ldr	r1, [pc, #20]	; (8009b6c <CDC_Init_FS+0x24>)
 8009b58:	4803      	ldr	r0, [pc, #12]	; (8009b68 <CDC_Init_FS+0x20>)
 8009b5a:	f7fe fc0f 	bl	800837c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000f24 	.word	0x20000f24
 8009b68:	20000448 	.word	0x20000448
 8009b6c:	20000724 	.word	0x20000724

08009b70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	2b23      	cmp	r3, #35	; 0x23
 8009b94:	d84a      	bhi.n	8009c2c <CDC_Control_FS+0xac>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <CDC_Control_FS+0x1c>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009c2d 	.word	0x08009c2d
 8009ba0:	08009c2d 	.word	0x08009c2d
 8009ba4:	08009c2d 	.word	0x08009c2d
 8009ba8:	08009c2d 	.word	0x08009c2d
 8009bac:	08009c2d 	.word	0x08009c2d
 8009bb0:	08009c2d 	.word	0x08009c2d
 8009bb4:	08009c2d 	.word	0x08009c2d
 8009bb8:	08009c2d 	.word	0x08009c2d
 8009bbc:	08009c2d 	.word	0x08009c2d
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009c2d 	.word	0x08009c2d
 8009bc8:	08009c2d 	.word	0x08009c2d
 8009bcc:	08009c2d 	.word	0x08009c2d
 8009bd0:	08009c2d 	.word	0x08009c2d
 8009bd4:	08009c2d 	.word	0x08009c2d
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009c2d 	.word	0x08009c2d
 8009be0:	08009c2d 	.word	0x08009c2d
 8009be4:	08009c2d 	.word	0x08009c2d
 8009be8:	08009c2d 	.word	0x08009c2d
 8009bec:	08009c2d 	.word	0x08009c2d
 8009bf0:	08009c2d 	.word	0x08009c2d
 8009bf4:	08009c2d 	.word	0x08009c2d
 8009bf8:	08009c2d 	.word	0x08009c2d
 8009bfc:	08009c2d 	.word	0x08009c2d
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c2d 	.word	0x08009c2d
 8009c10:	08009c2d 	.word	0x08009c2d
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c2d 	.word	0x08009c2d
 8009c1c:	08009c2d 	.word	0x08009c2d
 8009c20:	08009c2d 	.word	0x08009c2d
 8009c24:	08009c2d 	.word	0x08009c2d
 8009c28:	08009c2d 	.word	0x08009c2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c2c:	bf00      	nop
  }

  return (USBD_OK);
 8009c2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4805      	ldr	r0, [pc, #20]	; (8009c60 <CDC_Receive_FS+0x24>)
 8009c4a:	f7fe fb97 	bl	800837c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c4e:	4804      	ldr	r0, [pc, #16]	; (8009c60 <CDC_Receive_FS+0x24>)
 8009c50:	f7fe fbf2 	bl	8008438 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000448 	.word	0x20000448

08009c64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <CDC_Transmit_FS+0x48>)
 8009c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e00b      	b.n	8009ca2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c8a:	887b      	ldrh	r3, [r7, #2]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4806      	ldr	r0, [pc, #24]	; (8009cac <CDC_Transmit_FS+0x48>)
 8009c92:	f7fe fb51 	bl	8008338 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c96:	4805      	ldr	r0, [pc, #20]	; (8009cac <CDC_Transmit_FS+0x48>)
 8009c98:	f7fe fb8e 	bl	80083b8 <USBD_CDC_TransmitPacket>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20000448 	.word	0x20000448

08009cb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6039      	str	r1, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2212      	movs	r2, #18
 8009ce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ce6:	4b03      	ldr	r3, [pc, #12]	; (8009cf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	200000cc 	.word	0x200000cc

08009cf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	6039      	str	r1, [r7, #0]
 8009d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2204      	movs	r2, #4
 8009d08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d0a:	4b03      	ldr	r3, [pc, #12]	; (8009d18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	200000ec 	.word	0x200000ec

08009d1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	4907      	ldr	r1, [pc, #28]	; (8009d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d32:	4808      	ldr	r0, [pc, #32]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d34:	f7ff fdf8 	bl	8009928 <USBD_GetString>
 8009d38:	e004      	b.n	8009d44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4904      	ldr	r1, [pc, #16]	; (8009d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d3e:	4805      	ldr	r0, [pc, #20]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d40:	f7ff fdf2 	bl	8009928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20001724 	.word	0x20001724
 8009d54:	0800ef8c 	.word	0x0800ef8c

08009d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	4904      	ldr	r1, [pc, #16]	; (8009d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d68:	4804      	ldr	r0, [pc, #16]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d6a:	f7ff fddd 	bl	8009928 <USBD_GetString>
  return USBD_StrDesc;
 8009d6e:	4b02      	ldr	r3, [pc, #8]	; (8009d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20001724 	.word	0x20001724
 8009d7c:	0800efa4 	.word	0x0800efa4

08009d80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	221a      	movs	r2, #26
 8009d90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d92:	f000 f855 	bl	8009e40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d96:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	200000f0 	.word	0x200000f0

08009da4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d105      	bne.n	8009dc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	4907      	ldr	r1, [pc, #28]	; (8009dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dba:	4808      	ldr	r0, [pc, #32]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dbc:	f7ff fdb4 	bl	8009928 <USBD_GetString>
 8009dc0:	e004      	b.n	8009dcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	4904      	ldr	r1, [pc, #16]	; (8009dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dc6:	4805      	ldr	r0, [pc, #20]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dc8:	f7ff fdae 	bl	8009928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20001724 	.word	0x20001724
 8009ddc:	0800efb8 	.word	0x0800efb8

08009de0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4907      	ldr	r1, [pc, #28]	; (8009e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009df6:	4808      	ldr	r0, [pc, #32]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009df8:	f7ff fd96 	bl	8009928 <USBD_GetString>
 8009dfc:	e004      	b.n	8009e08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4904      	ldr	r1, [pc, #16]	; (8009e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e02:	4805      	ldr	r0, [pc, #20]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e04:	f7ff fd90 	bl	8009928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001724 	.word	0x20001724
 8009e18:	0800efc4 	.word	0x0800efc4

08009e1c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	220c      	movs	r2, #12
 8009e2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e2e:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	200000e0 	.word	0x200000e0

08009e40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <Get_SerialNum+0x44>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e4c:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <Get_SerialNum+0x48>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e52:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <Get_SerialNum+0x4c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d009      	beq.n	8009e7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e66:	2208      	movs	r2, #8
 8009e68:	4909      	ldr	r1, [pc, #36]	; (8009e90 <Get_SerialNum+0x50>)
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f814 	bl	8009e98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e70:	2204      	movs	r2, #4
 8009e72:	4908      	ldr	r1, [pc, #32]	; (8009e94 <Get_SerialNum+0x54>)
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f000 f80f 	bl	8009e98 <IntToUnicode>
  }
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	1fff7590 	.word	0x1fff7590
 8009e88:	1fff7594 	.word	0x1fff7594
 8009e8c:	1fff7598 	.word	0x1fff7598
 8009e90:	200000f2 	.word	0x200000f2
 8009e94:	20000102 	.word	0x20000102

08009e98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]
 8009eae:	e027      	b.n	8009f00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d80b      	bhi.n	8009ed0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	0f1b      	lsrs	r3, r3, #28
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3230      	adds	r2, #48	; 0x30
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	e00a      	b.n	8009ee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	0f1b      	lsrs	r3, r3, #28
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4619      	mov	r1, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	440b      	add	r3, r1
 8009ee0:	3237      	adds	r2, #55	; 0x37
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	3301      	adds	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
 8009f00:	7dfa      	ldrb	r2, [r7, #23]
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d3d3      	bcc.n	8009eb0 <IntToUnicode+0x18>
  }
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b0ac      	sub	sp, #176	; 0xb0
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f30:	f107 0314 	add.w	r3, r7, #20
 8009f34:	2288      	movs	r2, #136	; 0x88
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fbcc 	bl	800b6d6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f46:	d173      	bne.n	800a030 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009f4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8009f56:	2303      	movs	r3, #3
 8009f58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 23;
 8009f5e:	2317      	movs	r3, #23
 8009f60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009f62:	2307      	movs	r3, #7
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV6;
 8009f66:	2306      	movs	r3, #6
 8009f68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009f6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f72:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f74:	f107 0314 	add.w	r3, r7, #20
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fb f989 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009f84:	f7f7 fa8d 	bl	80014a2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f88:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8c:	4a2a      	ldr	r2, [pc, #168]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f94:	4b28      	ldr	r3, [pc, #160]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009fa0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fba:	230a      	movs	r3, #10
 8009fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fca:	f7f8 f88d 	bl	80020e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fce:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd2:	4a19      	ldr	r2, [pc, #100]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fda:	4b17      	ldr	r3, [pc, #92]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d114      	bne.n	800a01c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff6:	4a10      	ldr	r2, [pc, #64]	; (800a038 <HAL_PCD_MspInit+0x120>)
 8009ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <HAL_PCD_MspInit+0x120>)
 800a000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a006:	60bb      	str	r3, [r7, #8]
 800a008:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a00a:	f7fa fa75 	bl	80044f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a00e:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <HAL_PCD_MspInit+0x120>)
 800a010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <HAL_PCD_MspInit+0x120>)
 800a014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a018:	6593      	str	r3, [r2, #88]	; 0x58
 800a01a:	e001      	b.n	800a020 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a01c:	f7fa fa6c 	bl	80044f8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	2043      	movs	r0, #67	; 0x43
 800a026:	f7f8 f828 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a02a:	2043      	movs	r0, #67	; 0x43
 800a02c:	f7f8 f841 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a030:	bf00      	nop
 800a032:	37b0      	adds	r7, #176	; 0xb0
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40021000 	.word	0x40021000

0800a03c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f7fe fad9 	bl	800860a <USBD_LL_SetupStage>
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a072:	78fa      	ldrb	r2, [r7, #3]
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	4619      	mov	r1, r3
 800a08a:	f7fe fb13 	bl	80086b4 <USBD_LL_DataOutStage>
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a0a8:	78fa      	ldrb	r2, [r7, #3]
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	3348      	adds	r3, #72	; 0x48
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	f7fe fbac 	bl	800881a <USBD_LL_DataInStage>
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fce6 	bl	8008aaa <USBD_LL_SOF>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d001      	beq.n	800a0fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0fa:	f7f7 f9d2 	bl	80014a2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fc8a 	bl	8008a22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe fc32 	bl	800897e <USBD_LL_Reset>
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6812      	ldr	r2, [r2, #0]
 800a13a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fc79 	bl	8008a42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <HAL_PCD_SuspendCallback+0x48>)
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	4a03      	ldr	r2, [pc, #12]	; (800a16c <HAL_PCD_SuspendCallback+0x48>)
 800a15e:	f043 0306 	orr.w	r3, r3, #6
 800a162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	e000ed00 	.word	0xe000ed00

0800a170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a18a:	f023 0301 	bic.w	r3, r3, #1
 800a18e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d007      	beq.n	800a1a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a198:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <HAL_PCD_ResumeCallback+0x4c>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	4a07      	ldr	r2, [pc, #28]	; (800a1bc <HAL_PCD_ResumeCallback+0x4c>)
 800a19e:	f023 0306 	bic.w	r3, r3, #6
 800a1a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a1a4:	f000 faf6 	bl	800a794 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fc63 	bl	8008a7a <USBD_LL_Resume>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	e000ed00 	.word	0xe000ed00

0800a1c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1d2:	78fa      	ldrb	r2, [r7, #3]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fcb9 	bl	8008b4e <USBD_LL_IsoOUTIncomplete>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1f6:	78fa      	ldrb	r2, [r7, #3]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fc75 	bl	8008aea <USBD_LL_IsoINIncomplete>
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fccb 	bl	8008bb2 <USBD_LL_DevConnected>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fcc8 	bl	8008bc8 <USBD_LL_DevDisconnected>
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d13c      	bne.n	800a2ca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a250:	4a20      	ldr	r2, [pc, #128]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1e      	ldr	r2, [pc, #120]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a25c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a268:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a26a:	2206      	movs	r2, #6
 800a26c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a26e:	4b19      	ldr	r3, [pc, #100]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a270:	2202      	movs	r2, #2
 800a272:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a274:	4b17      	ldr	r3, [pc, #92]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a276:	2202      	movs	r2, #2
 800a278:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a27a:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a280:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a282:	2200      	movs	r2, #0
 800a284:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a286:	4b13      	ldr	r3, [pc, #76]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a288:	2200      	movs	r2, #0
 800a28a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a28c:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a28e:	2200      	movs	r2, #0
 800a290:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a292:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a294:	2200      	movs	r2, #0
 800a296:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a29e:	480d      	ldr	r0, [pc, #52]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a2a0:	f7f8 ff1f 	bl	80030e2 <HAL_PCD_Init>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2aa:	f7f7 f8fa 	bl	80014a2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2ae:	2180      	movs	r1, #128	; 0x80
 800a2b0:	4808      	ldr	r0, [pc, #32]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a2b2:	f7fa f888 	bl	80043c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2b6:	2240      	movs	r2, #64	; 0x40
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4806      	ldr	r0, [pc, #24]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a2bc:	f7fa f83c 	bl	8004338 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2c0:	2280      	movs	r2, #128	; 0x80
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	4803      	ldr	r0, [pc, #12]	; (800a2d4 <USBD_LL_Init+0x94>)
 800a2c6:	f7fa f837 	bl	8004338 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20001924 	.word	0x20001924

0800a2d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 f81b 	bl	800332a <HAL_PCD_Start>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d816      	bhi.n	800a32c <USBD_LL_Start+0x54>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <USBD_LL_Start+0x2c>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a31b 	.word	0x0800a31b
 800a30c:	0800a321 	.word	0x0800a321
 800a310:	0800a327 	.word	0x0800a327
    case HAL_OK :
      usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
    break;
 800a318:	e00b      	b.n	800a332 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a31a:	2303      	movs	r3, #3
 800a31c:	73fb      	strb	r3, [r7, #15]
    break;
 800a31e:	e008      	b.n	800a332 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a320:	2301      	movs	r3, #1
 800a322:	73fb      	strb	r3, [r7, #15]
    break;
 800a324:	e005      	b.n	800a332 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	73fb      	strb	r3, [r7, #15]
    break;
 800a32a:	e002      	b.n	800a332 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a32c:	2303      	movs	r3, #3
 800a32e:	73fb      	strb	r3, [r7, #15]
    break;
 800a330:	bf00      	nop
  }
  return usb_status;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	461a      	mov	r2, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	70fb      	strb	r3, [r7, #3]
 800a34e:	460b      	mov	r3, r1
 800a350:	70bb      	strb	r3, [r7, #2]
 800a352:	4613      	mov	r3, r2
 800a354:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a364:	78bb      	ldrb	r3, [r7, #2]
 800a366:	883a      	ldrh	r2, [r7, #0]
 800a368:	78f9      	ldrb	r1, [r7, #3]
 800a36a:	f7f9 fcc5 	bl	8003cf8 <HAL_PCD_EP_Open>
 800a36e:	4603      	mov	r3, r0
 800a370:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a372:	7bbb      	ldrb	r3, [r7, #14]
 800a374:	2b03      	cmp	r3, #3
 800a376:	d817      	bhi.n	800a3a8 <USBD_LL_OpenEP+0x6c>
 800a378:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <USBD_LL_OpenEP+0x44>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a397 	.word	0x0800a397
 800a388:	0800a39d 	.word	0x0800a39d
 800a38c:	0800a3a3 	.word	0x0800a3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
    break;
 800a394:	e00b      	b.n	800a3ae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a396:	2303      	movs	r3, #3
 800a398:	73fb      	strb	r3, [r7, #15]
    break;
 800a39a:	e008      	b.n	800a3ae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a0:	e005      	b.n	800a3ae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a6:	e002      	b.n	800a3ae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	bf00      	nop
  }
  return usb_status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3d2:	78fa      	ldrb	r2, [r7, #3]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f9 fcf6 	bl	8003dc8 <HAL_PCD_EP_Close>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d816      	bhi.n	800a414 <USBD_LL_CloseEP+0x5c>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <USBD_LL_CloseEP+0x34>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a403 	.word	0x0800a403
 800a3f4:	0800a409 	.word	0x0800a409
 800a3f8:	0800a40f 	.word	0x0800a40f
    case HAL_OK :
      usb_status = USBD_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a400:	e00b      	b.n	800a41a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a402:	2303      	movs	r3, #3
 800a404:	73fb      	strb	r3, [r7, #15]
    break;
 800a406:	e008      	b.n	800a41a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a408:	2301      	movs	r3, #1
 800a40a:	73fb      	strb	r3, [r7, #15]
    break;
 800a40c:	e005      	b.n	800a41a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a40e:	2303      	movs	r3, #3
 800a410:	73fb      	strb	r3, [r7, #15]
    break;
 800a412:	e002      	b.n	800a41a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	73fb      	strb	r3, [r7, #15]
    break;
 800a418:	bf00      	nop
  }
  return usb_status;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f7f9 fd85 	bl	8003f52 <HAL_PCD_EP_SetStall>
 800a448:	4603      	mov	r3, r0
 800a44a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d816      	bhi.n	800a480 <USBD_LL_StallEP+0x5c>
 800a452:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <USBD_LL_StallEP+0x34>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a469 	.word	0x0800a469
 800a45c:	0800a46f 	.word	0x0800a46f
 800a460:	0800a475 	.word	0x0800a475
 800a464:	0800a47b 	.word	0x0800a47b
    case HAL_OK :
      usb_status = USBD_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
    break;
 800a46c:	e00b      	b.n	800a486 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a46e:	2303      	movs	r3, #3
 800a470:	73fb      	strb	r3, [r7, #15]
    break;
 800a472:	e008      	b.n	800a486 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a474:	2301      	movs	r3, #1
 800a476:	73fb      	strb	r3, [r7, #15]
    break;
 800a478:	e005      	b.n	800a486 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	73fb      	strb	r3, [r7, #15]
    break;
 800a47e:	e002      	b.n	800a486 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	73fb      	strb	r3, [r7, #15]
    break;
 800a484:	bf00      	nop
  }
  return usb_status;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4aa:	78fa      	ldrb	r2, [r7, #3]
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f9 fdb1 	bl	8004016 <HAL_PCD_EP_ClrStall>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d816      	bhi.n	800a4ec <USBD_LL_ClearStallEP+0x5c>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBD_LL_ClearStallEP+0x34>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a4d5 	.word	0x0800a4d5
 800a4c8:	0800a4db 	.word	0x0800a4db
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e7 	.word	0x0800a4e7
    case HAL_OK :
      usb_status = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d8:	e00b      	b.n	800a4f2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4de:	e008      	b.n	800a4f2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	e005      	b.n	800a4f2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ea:	e002      	b.n	800a4f2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	bf00      	nop
  }
  return usb_status;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a50e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a514:	2b00      	cmp	r3, #0
 800a516:	da0b      	bge.n	800a530 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	4613      	mov	r3, r2
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	4413      	add	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	440b      	add	r3, r1
 800a52a:	333e      	adds	r3, #62	; 0x3e
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	e00b      	b.n	800a548 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	4613      	mov	r3, r2
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	4413      	add	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	440b      	add	r3, r1
 800a542:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a546:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f7f9 fb9b 	bl	8003cae <HAL_PCD_SetAddress>
 800a578:	4603      	mov	r3, r0
 800a57a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d816      	bhi.n	800a5b0 <USBD_LL_SetUSBAddress+0x5c>
 800a582:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <USBD_LL_SetUSBAddress+0x34>)
 800a584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a588:	0800a599 	.word	0x0800a599
 800a58c:	0800a59f 	.word	0x0800a59f
 800a590:	0800a5a5 	.word	0x0800a5a5
 800a594:	0800a5ab 	.word	0x0800a5ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
    break;
 800a59c:	e00b      	b.n	800a5b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a2:	e008      	b.n	800a5b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e005      	b.n	800a5b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e002      	b.n	800a5b6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	bf00      	nop
  }
  return usb_status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5de:	7af9      	ldrb	r1, [r7, #11]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	f7f9 fc84 	bl	8003ef0 <HAL_PCD_EP_Transmit>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a5ec:	7dbb      	ldrb	r3, [r7, #22]
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d816      	bhi.n	800a620 <USBD_LL_Transmit+0x60>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <USBD_LL_Transmit+0x38>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a609 	.word	0x0800a609
 800a5fc:	0800a60f 	.word	0x0800a60f
 800a600:	0800a615 	.word	0x0800a615
 800a604:	0800a61b 	.word	0x0800a61b
    case HAL_OK :
      usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	75fb      	strb	r3, [r7, #23]
    break;
 800a60c:	e00b      	b.n	800a626 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a60e:	2303      	movs	r3, #3
 800a610:	75fb      	strb	r3, [r7, #23]
    break;
 800a612:	e008      	b.n	800a626 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a614:	2301      	movs	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
    break;
 800a618:	e005      	b.n	800a626 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a61a:	2303      	movs	r3, #3
 800a61c:	75fb      	strb	r3, [r7, #23]
    break;
 800a61e:	e002      	b.n	800a626 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a620:	2303      	movs	r3, #3
 800a622:	75fb      	strb	r3, [r7, #23]
    break;
 800a624:	bf00      	nop
  }
  return usb_status;
 800a626:	7dfb      	ldrb	r3, [r7, #23]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	607a      	str	r2, [r7, #4]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	460b      	mov	r3, r1
 800a63e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a64e:	7af9      	ldrb	r1, [r7, #11]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f7f9 fc02 	bl	8003e5c <HAL_PCD_EP_Receive>
 800a658:	4603      	mov	r3, r0
 800a65a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a65c:	7dbb      	ldrb	r3, [r7, #22]
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d816      	bhi.n	800a690 <USBD_LL_PrepareReceive+0x60>
 800a662:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <USBD_LL_PrepareReceive+0x38>)
 800a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a668:	0800a679 	.word	0x0800a679
 800a66c:	0800a67f 	.word	0x0800a67f
 800a670:	0800a685 	.word	0x0800a685
 800a674:	0800a68b 	.word	0x0800a68b
    case HAL_OK :
      usb_status = USBD_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
    break;
 800a67c:	e00b      	b.n	800a696 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a67e:	2303      	movs	r3, #3
 800a680:	75fb      	strb	r3, [r7, #23]
    break;
 800a682:	e008      	b.n	800a696 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a684:	2301      	movs	r3, #1
 800a686:	75fb      	strb	r3, [r7, #23]
    break;
 800a688:	e005      	b.n	800a696 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	75fb      	strb	r3, [r7, #23]
    break;
 800a68e:	e002      	b.n	800a696 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a690:	2303      	movs	r3, #3
 800a692:	75fb      	strb	r3, [r7, #23]
    break;
 800a694:	bf00      	nop
  }
  return usb_status;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f9 fc02 	bl	8003ec0 <HAL_PCD_EP_GetRxCount>
 800a6bc:	4603      	mov	r3, r0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <HAL_PCDEx_LPM_Callback+0x18>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d01f      	beq.n	800a71e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a6de:	e03b      	b.n	800a758 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a6e8:	f000 f854 	bl	800a794 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6ec:	4b1c      	ldr	r3, [pc, #112]	; (800a760 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6f2:	f023 0306 	bic.w	r3, r3, #6
 800a6f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a70a:	f023 0301 	bic.w	r3, r3, #1
 800a70e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe f9af 	bl	8008a7a <USBD_LL_Resume>
    break;
 800a71c:	e01c      	b.n	800a758 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a730:	f043 0301 	orr.w	r3, r3, #1
 800a734:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe f980 	bl	8008a42 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <HAL_PCDEx_LPM_Callback+0x98>)
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	4a04      	ldr	r2, [pc, #16]	; (800a760 <HAL_PCDEx_LPM_Callback+0x98>)
 800a750:	f043 0306 	orr.w	r3, r3, #6
 800a754:	6113      	str	r3, [r2, #16]
    break;
 800a756:	bf00      	nop
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	e000ed00 	.word	0xe000ed00

0800a764 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a76c:	4b03      	ldr	r3, [pc, #12]	; (800a77c <USBD_static_malloc+0x18>)
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	20001e30 	.word	0x20001e30

0800a780 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]

}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a798:	f7f6 fe34 	bl	8001404 <SystemClock_Config>
}
 800a79c:	bf00      	nop
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <__cvt>:
 800a7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	ec55 4b10 	vmov	r4, r5, d0
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	460e      	mov	r6, r1
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7b6:	461d      	movlt	r5, r3
 800a7b8:	2300      	movge	r3, #0
 800a7ba:	232d      	movlt	r3, #45	; 0x2d
 800a7bc:	700b      	strb	r3, [r1, #0]
 800a7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7c4:	4691      	mov	r9, r2
 800a7c6:	f023 0820 	bic.w	r8, r3, #32
 800a7ca:	bfbc      	itt	lt
 800a7cc:	4622      	movlt	r2, r4
 800a7ce:	4614      	movlt	r4, r2
 800a7d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7d4:	d005      	beq.n	800a7e2 <__cvt+0x42>
 800a7d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a7da:	d100      	bne.n	800a7de <__cvt+0x3e>
 800a7dc:	3601      	adds	r6, #1
 800a7de:	2102      	movs	r1, #2
 800a7e0:	e000      	b.n	800a7e4 <__cvt+0x44>
 800a7e2:	2103      	movs	r1, #3
 800a7e4:	ab03      	add	r3, sp, #12
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	ab02      	add	r3, sp, #8
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	ec45 4b10 	vmov	d0, r4, r5
 800a7f0:	4653      	mov	r3, sl
 800a7f2:	4632      	mov	r2, r6
 800a7f4:	f001 f87c 	bl	800b8f0 <_dtoa_r>
 800a7f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	d102      	bne.n	800a806 <__cvt+0x66>
 800a800:	f019 0f01 	tst.w	r9, #1
 800a804:	d022      	beq.n	800a84c <__cvt+0xac>
 800a806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a80a:	eb07 0906 	add.w	r9, r7, r6
 800a80e:	d110      	bne.n	800a832 <__cvt+0x92>
 800a810:	783b      	ldrb	r3, [r7, #0]
 800a812:	2b30      	cmp	r3, #48	; 0x30
 800a814:	d10a      	bne.n	800a82c <__cvt+0x8c>
 800a816:	2200      	movs	r2, #0
 800a818:	2300      	movs	r3, #0
 800a81a:	4620      	mov	r0, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	f7f6 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 800a822:	b918      	cbnz	r0, 800a82c <__cvt+0x8c>
 800a824:	f1c6 0601 	rsb	r6, r6, #1
 800a828:	f8ca 6000 	str.w	r6, [sl]
 800a82c:	f8da 3000 	ldr.w	r3, [sl]
 800a830:	4499      	add	r9, r3
 800a832:	2200      	movs	r2, #0
 800a834:	2300      	movs	r3, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800a83e:	b108      	cbz	r0, 800a844 <__cvt+0xa4>
 800a840:	f8cd 900c 	str.w	r9, [sp, #12]
 800a844:	2230      	movs	r2, #48	; 0x30
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	454b      	cmp	r3, r9
 800a84a:	d307      	bcc.n	800a85c <__cvt+0xbc>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a850:	1bdb      	subs	r3, r3, r7
 800a852:	4638      	mov	r0, r7
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	b004      	add	sp, #16
 800a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85c:	1c59      	adds	r1, r3, #1
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	e7f0      	b.n	800a846 <__cvt+0xa6>

0800a864 <__exponent>:
 800a864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a866:	4603      	mov	r3, r0
 800a868:	2900      	cmp	r1, #0
 800a86a:	bfb8      	it	lt
 800a86c:	4249      	neglt	r1, r1
 800a86e:	f803 2b02 	strb.w	r2, [r3], #2
 800a872:	bfb4      	ite	lt
 800a874:	222d      	movlt	r2, #45	; 0x2d
 800a876:	222b      	movge	r2, #43	; 0x2b
 800a878:	2909      	cmp	r1, #9
 800a87a:	7042      	strb	r2, [r0, #1]
 800a87c:	dd2a      	ble.n	800a8d4 <__exponent+0x70>
 800a87e:	f10d 0207 	add.w	r2, sp, #7
 800a882:	4617      	mov	r7, r2
 800a884:	260a      	movs	r6, #10
 800a886:	4694      	mov	ip, r2
 800a888:	fb91 f5f6 	sdiv	r5, r1, r6
 800a88c:	fb06 1415 	mls	r4, r6, r5, r1
 800a890:	3430      	adds	r4, #48	; 0x30
 800a892:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a896:	460c      	mov	r4, r1
 800a898:	2c63      	cmp	r4, #99	; 0x63
 800a89a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a89e:	4629      	mov	r1, r5
 800a8a0:	dcf1      	bgt.n	800a886 <__exponent+0x22>
 800a8a2:	3130      	adds	r1, #48	; 0x30
 800a8a4:	f1ac 0402 	sub.w	r4, ip, #2
 800a8a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a8ac:	1c41      	adds	r1, r0, #1
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	42ba      	cmp	r2, r7
 800a8b2:	d30a      	bcc.n	800a8ca <__exponent+0x66>
 800a8b4:	f10d 0209 	add.w	r2, sp, #9
 800a8b8:	eba2 020c 	sub.w	r2, r2, ip
 800a8bc:	42bc      	cmp	r4, r7
 800a8be:	bf88      	it	hi
 800a8c0:	2200      	movhi	r2, #0
 800a8c2:	4413      	add	r3, r2
 800a8c4:	1a18      	subs	r0, r3, r0
 800a8c6:	b003      	add	sp, #12
 800a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a8ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a8d2:	e7ed      	b.n	800a8b0 <__exponent+0x4c>
 800a8d4:	2330      	movs	r3, #48	; 0x30
 800a8d6:	3130      	adds	r1, #48	; 0x30
 800a8d8:	7083      	strb	r3, [r0, #2]
 800a8da:	70c1      	strb	r1, [r0, #3]
 800a8dc:	1d03      	adds	r3, r0, #4
 800a8de:	e7f1      	b.n	800a8c4 <__exponent+0x60>

0800a8e0 <_printf_float>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b02 	vpush	{d8}
 800a8e8:	b08d      	sub	sp, #52	; 0x34
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	f000 fef7 	bl	800b6e8 <_localeconv_r>
 800a8fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a8fe:	4650      	mov	r0, sl
 800a900:	f7f5 fcb6 	bl	8000270 <strlen>
 800a904:	2300      	movs	r3, #0
 800a906:	930a      	str	r3, [sp, #40]	; 0x28
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	f8d8 3000 	ldr.w	r3, [r8]
 800a910:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a914:	3307      	adds	r3, #7
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	f103 0208 	add.w	r2, r3, #8
 800a91e:	f8c8 2000 	str.w	r2, [r8]
 800a922:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a926:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a92a:	9307      	str	r3, [sp, #28]
 800a92c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a930:	ee08 0a10 	vmov	s16, r0
 800a934:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a93c:	4b9e      	ldr	r3, [pc, #632]	; (800abb8 <_printf_float+0x2d8>)
 800a93e:	f04f 32ff 	mov.w	r2, #4294967295
 800a942:	f7f6 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 800a946:	bb88      	cbnz	r0, 800a9ac <_printf_float+0xcc>
 800a948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a94c:	4b9a      	ldr	r3, [pc, #616]	; (800abb8 <_printf_float+0x2d8>)
 800a94e:	f04f 32ff 	mov.w	r2, #4294967295
 800a952:	f7f6 f8cd 	bl	8000af0 <__aeabi_dcmple>
 800a956:	bb48      	cbnz	r0, 800a9ac <_printf_float+0xcc>
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f6 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800a964:	b110      	cbz	r0, 800a96c <_printf_float+0x8c>
 800a966:	232d      	movs	r3, #45	; 0x2d
 800a968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a96c:	4a93      	ldr	r2, [pc, #588]	; (800abbc <_printf_float+0x2dc>)
 800a96e:	4b94      	ldr	r3, [pc, #592]	; (800abc0 <_printf_float+0x2e0>)
 800a970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a974:	bf94      	ite	ls
 800a976:	4690      	movls	r8, r2
 800a978:	4698      	movhi	r8, r3
 800a97a:	2303      	movs	r3, #3
 800a97c:	6123      	str	r3, [r4, #16]
 800a97e:	9b05      	ldr	r3, [sp, #20]
 800a980:	f023 0304 	bic.w	r3, r3, #4
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	9700      	str	r7, [sp, #0]
 800a98c:	4633      	mov	r3, r6
 800a98e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a990:	4621      	mov	r1, r4
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f9da 	bl	800ad4c <_printf_common>
 800a998:	3001      	adds	r0, #1
 800a99a:	f040 8090 	bne.w	800aabe <_printf_float+0x1de>
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	b00d      	add	sp, #52	; 0x34
 800a9a4:	ecbd 8b02 	vpop	{d8}
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	4642      	mov	r2, r8
 800a9ae:	464b      	mov	r3, r9
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	f7f6 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 800a9b8:	b140      	cbz	r0, 800a9cc <_printf_float+0xec>
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfbc      	itt	lt
 800a9c0:	232d      	movlt	r3, #45	; 0x2d
 800a9c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9c6:	4a7f      	ldr	r2, [pc, #508]	; (800abc4 <_printf_float+0x2e4>)
 800a9c8:	4b7f      	ldr	r3, [pc, #508]	; (800abc8 <_printf_float+0x2e8>)
 800a9ca:	e7d1      	b.n	800a970 <_printf_float+0x90>
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a9d2:	9206      	str	r2, [sp, #24]
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	d13f      	bne.n	800aa58 <_printf_float+0x178>
 800a9d8:	2306      	movs	r3, #6
 800a9da:	6063      	str	r3, [r4, #4]
 800a9dc:	9b05      	ldr	r3, [sp, #20]
 800a9de:	6861      	ldr	r1, [r4, #4]
 800a9e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9303      	str	r3, [sp, #12]
 800a9e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a9ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a9ee:	ab09      	add	r3, sp, #36	; 0x24
 800a9f0:	ec49 8b10 	vmov	d0, r8, r9
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f7ff fecf 	bl	800a7a0 <__cvt>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa06:	2b47      	cmp	r3, #71	; 0x47
 800aa08:	4680      	mov	r8, r0
 800aa0a:	d108      	bne.n	800aa1e <_printf_float+0x13e>
 800aa0c:	1cc8      	adds	r0, r1, #3
 800aa0e:	db02      	blt.n	800aa16 <_printf_float+0x136>
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	4299      	cmp	r1, r3
 800aa14:	dd41      	ble.n	800aa9a <_printf_float+0x1ba>
 800aa16:	f1ab 0302 	sub.w	r3, fp, #2
 800aa1a:	fa5f fb83 	uxtb.w	fp, r3
 800aa1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa22:	d820      	bhi.n	800aa66 <_printf_float+0x186>
 800aa24:	3901      	subs	r1, #1
 800aa26:	465a      	mov	r2, fp
 800aa28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa2c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa2e:	f7ff ff19 	bl	800a864 <__exponent>
 800aa32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa34:	1813      	adds	r3, r2, r0
 800aa36:	2a01      	cmp	r2, #1
 800aa38:	4681      	mov	r9, r0
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	dc02      	bgt.n	800aa44 <_printf_float+0x164>
 800aa3e:	6822      	ldr	r2, [r4, #0]
 800aa40:	07d2      	lsls	r2, r2, #31
 800aa42:	d501      	bpl.n	800aa48 <_printf_float+0x168>
 800aa44:	3301      	adds	r3, #1
 800aa46:	6123      	str	r3, [r4, #16]
 800aa48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d09c      	beq.n	800a98a <_printf_float+0xaa>
 800aa50:	232d      	movs	r3, #45	; 0x2d
 800aa52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa56:	e798      	b.n	800a98a <_printf_float+0xaa>
 800aa58:	9a06      	ldr	r2, [sp, #24]
 800aa5a:	2a47      	cmp	r2, #71	; 0x47
 800aa5c:	d1be      	bne.n	800a9dc <_printf_float+0xfc>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1bc      	bne.n	800a9dc <_printf_float+0xfc>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e7b9      	b.n	800a9da <_printf_float+0xfa>
 800aa66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa6a:	d118      	bne.n	800aa9e <_printf_float+0x1be>
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	dd0b      	ble.n	800aa8a <_printf_float+0x1aa>
 800aa72:	6121      	str	r1, [r4, #16]
 800aa74:	b913      	cbnz	r3, 800aa7c <_printf_float+0x19c>
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	07d0      	lsls	r0, r2, #31
 800aa7a:	d502      	bpl.n	800aa82 <_printf_float+0x1a2>
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	440b      	add	r3, r1
 800aa80:	6123      	str	r3, [r4, #16]
 800aa82:	65a1      	str	r1, [r4, #88]	; 0x58
 800aa84:	f04f 0900 	mov.w	r9, #0
 800aa88:	e7de      	b.n	800aa48 <_printf_float+0x168>
 800aa8a:	b913      	cbnz	r3, 800aa92 <_printf_float+0x1b2>
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	07d2      	lsls	r2, r2, #31
 800aa90:	d501      	bpl.n	800aa96 <_printf_float+0x1b6>
 800aa92:	3302      	adds	r3, #2
 800aa94:	e7f4      	b.n	800aa80 <_printf_float+0x1a0>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e7f2      	b.n	800aa80 <_printf_float+0x1a0>
 800aa9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aa9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	db05      	blt.n	800aab0 <_printf_float+0x1d0>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	6121      	str	r1, [r4, #16]
 800aaa8:	07d8      	lsls	r0, r3, #31
 800aaaa:	d5ea      	bpl.n	800aa82 <_printf_float+0x1a2>
 800aaac:	1c4b      	adds	r3, r1, #1
 800aaae:	e7e7      	b.n	800aa80 <_printf_float+0x1a0>
 800aab0:	2900      	cmp	r1, #0
 800aab2:	bfd4      	ite	le
 800aab4:	f1c1 0202 	rsble	r2, r1, #2
 800aab8:	2201      	movgt	r2, #1
 800aaba:	4413      	add	r3, r2
 800aabc:	e7e0      	b.n	800aa80 <_printf_float+0x1a0>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	055a      	lsls	r2, r3, #21
 800aac2:	d407      	bmi.n	800aad4 <_printf_float+0x1f4>
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	4642      	mov	r2, r8
 800aac8:	4631      	mov	r1, r6
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	d12c      	bne.n	800ab2c <_printf_float+0x24c>
 800aad2:	e764      	b.n	800a99e <_printf_float+0xbe>
 800aad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aad8:	f240 80e0 	bls.w	800ac9c <_printf_float+0x3bc>
 800aadc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aae0:	2200      	movs	r2, #0
 800aae2:	2300      	movs	r3, #0
 800aae4:	f7f5 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d034      	beq.n	800ab56 <_printf_float+0x276>
 800aaec:	4a37      	ldr	r2, [pc, #220]	; (800abcc <_printf_float+0x2ec>)
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	47b8      	blx	r7
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f43f af51 	beq.w	800a99e <_printf_float+0xbe>
 800aafc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab00:	429a      	cmp	r2, r3
 800ab02:	db02      	blt.n	800ab0a <_printf_float+0x22a>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	07d8      	lsls	r0, r3, #31
 800ab08:	d510      	bpl.n	800ab2c <_printf_float+0x24c>
 800ab0a:	ee18 3a10 	vmov	r3, s16
 800ab0e:	4652      	mov	r2, sl
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	f43f af41 	beq.w	800a99e <_printf_float+0xbe>
 800ab1c:	f04f 0800 	mov.w	r8, #0
 800ab20:	f104 091a 	add.w	r9, r4, #26
 800ab24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab26:	3b01      	subs	r3, #1
 800ab28:	4543      	cmp	r3, r8
 800ab2a:	dc09      	bgt.n	800ab40 <_printf_float+0x260>
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	079b      	lsls	r3, r3, #30
 800ab30:	f100 8107 	bmi.w	800ad42 <_printf_float+0x462>
 800ab34:	68e0      	ldr	r0, [r4, #12]
 800ab36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab38:	4298      	cmp	r0, r3
 800ab3a:	bfb8      	it	lt
 800ab3c:	4618      	movlt	r0, r3
 800ab3e:	e730      	b.n	800a9a2 <_printf_float+0xc2>
 800ab40:	2301      	movs	r3, #1
 800ab42:	464a      	mov	r2, r9
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	f43f af27 	beq.w	800a99e <_printf_float+0xbe>
 800ab50:	f108 0801 	add.w	r8, r8, #1
 800ab54:	e7e6      	b.n	800ab24 <_printf_float+0x244>
 800ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc39      	bgt.n	800abd0 <_printf_float+0x2f0>
 800ab5c:	4a1b      	ldr	r2, [pc, #108]	; (800abcc <_printf_float+0x2ec>)
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b8      	blx	r7
 800ab66:	3001      	adds	r0, #1
 800ab68:	f43f af19 	beq.w	800a99e <_printf_float+0xbe>
 800ab6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d102      	bne.n	800ab7a <_printf_float+0x29a>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	07d9      	lsls	r1, r3, #31
 800ab78:	d5d8      	bpl.n	800ab2c <_printf_float+0x24c>
 800ab7a:	ee18 3a10 	vmov	r3, s16
 800ab7e:	4652      	mov	r2, sl
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f af09 	beq.w	800a99e <_printf_float+0xbe>
 800ab8c:	f04f 0900 	mov.w	r9, #0
 800ab90:	f104 0a1a 	add.w	sl, r4, #26
 800ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab96:	425b      	negs	r3, r3
 800ab98:	454b      	cmp	r3, r9
 800ab9a:	dc01      	bgt.n	800aba0 <_printf_float+0x2c0>
 800ab9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9e:	e792      	b.n	800aac6 <_printf_float+0x1e6>
 800aba0:	2301      	movs	r3, #1
 800aba2:	4652      	mov	r2, sl
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f aef7 	beq.w	800a99e <_printf_float+0xbe>
 800abb0:	f109 0901 	add.w	r9, r9, #1
 800abb4:	e7ee      	b.n	800ab94 <_printf_float+0x2b4>
 800abb6:	bf00      	nop
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	0800f01c 	.word	0x0800f01c
 800abc0:	0800f020 	.word	0x0800f020
 800abc4:	0800f024 	.word	0x0800f024
 800abc8:	0800f028 	.word	0x0800f028
 800abcc:	0800f02c 	.word	0x0800f02c
 800abd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bfa8      	it	ge
 800abd8:	461a      	movge	r2, r3
 800abda:	2a00      	cmp	r2, #0
 800abdc:	4691      	mov	r9, r2
 800abde:	dc37      	bgt.n	800ac50 <_printf_float+0x370>
 800abe0:	f04f 0b00 	mov.w	fp, #0
 800abe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abe8:	f104 021a 	add.w	r2, r4, #26
 800abec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abee:	9305      	str	r3, [sp, #20]
 800abf0:	eba3 0309 	sub.w	r3, r3, r9
 800abf4:	455b      	cmp	r3, fp
 800abf6:	dc33      	bgt.n	800ac60 <_printf_float+0x380>
 800abf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abfc:	429a      	cmp	r2, r3
 800abfe:	db3b      	blt.n	800ac78 <_printf_float+0x398>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	07da      	lsls	r2, r3, #31
 800ac04:	d438      	bmi.n	800ac78 <_printf_float+0x398>
 800ac06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac0a:	eba2 0903 	sub.w	r9, r2, r3
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	1ad2      	subs	r2, r2, r3
 800ac12:	4591      	cmp	r9, r2
 800ac14:	bfa8      	it	ge
 800ac16:	4691      	movge	r9, r2
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	dc35      	bgt.n	800ac8a <_printf_float+0x3aa>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac26:	f104 0a1a 	add.w	sl, r4, #26
 800ac2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac2e:	1a9b      	subs	r3, r3, r2
 800ac30:	eba3 0309 	sub.w	r3, r3, r9
 800ac34:	4543      	cmp	r3, r8
 800ac36:	f77f af79 	ble.w	800ab2c <_printf_float+0x24c>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	4652      	mov	r2, sl
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	f43f aeaa 	beq.w	800a99e <_printf_float+0xbe>
 800ac4a:	f108 0801 	add.w	r8, r8, #1
 800ac4e:	e7ec      	b.n	800ac2a <_printf_float+0x34a>
 800ac50:	4613      	mov	r3, r2
 800ac52:	4631      	mov	r1, r6
 800ac54:	4642      	mov	r2, r8
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b8      	blx	r7
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d1c0      	bne.n	800abe0 <_printf_float+0x300>
 800ac5e:	e69e      	b.n	800a99e <_printf_float+0xbe>
 800ac60:	2301      	movs	r3, #1
 800ac62:	4631      	mov	r1, r6
 800ac64:	4628      	mov	r0, r5
 800ac66:	9205      	str	r2, [sp, #20]
 800ac68:	47b8      	blx	r7
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	f43f ae97 	beq.w	800a99e <_printf_float+0xbe>
 800ac70:	9a05      	ldr	r2, [sp, #20]
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
 800ac76:	e7b9      	b.n	800abec <_printf_float+0x30c>
 800ac78:	ee18 3a10 	vmov	r3, s16
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	d1be      	bne.n	800ac06 <_printf_float+0x326>
 800ac88:	e689      	b.n	800a99e <_printf_float+0xbe>
 800ac8a:	9a05      	ldr	r2, [sp, #20]
 800ac8c:	464b      	mov	r3, r9
 800ac8e:	4442      	add	r2, r8
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	d1c1      	bne.n	800ac1e <_printf_float+0x33e>
 800ac9a:	e680      	b.n	800a99e <_printf_float+0xbe>
 800ac9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac9e:	2a01      	cmp	r2, #1
 800aca0:	dc01      	bgt.n	800aca6 <_printf_float+0x3c6>
 800aca2:	07db      	lsls	r3, r3, #31
 800aca4:	d53a      	bpl.n	800ad1c <_printf_float+0x43c>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4642      	mov	r2, r8
 800acaa:	4631      	mov	r1, r6
 800acac:	4628      	mov	r0, r5
 800acae:	47b8      	blx	r7
 800acb0:	3001      	adds	r0, #1
 800acb2:	f43f ae74 	beq.w	800a99e <_printf_float+0xbe>
 800acb6:	ee18 3a10 	vmov	r3, s16
 800acba:	4652      	mov	r2, sl
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f ae6b 	beq.w	800a99e <_printf_float+0xbe>
 800acc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800accc:	2200      	movs	r2, #0
 800acce:	2300      	movs	r3, #0
 800acd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800acd4:	f7f5 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd8:	b9d8      	cbnz	r0, 800ad12 <_printf_float+0x432>
 800acda:	f10a 33ff 	add.w	r3, sl, #4294967295
 800acde:	f108 0201 	add.w	r2, r8, #1
 800ace2:	4631      	mov	r1, r6
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b8      	blx	r7
 800ace8:	3001      	adds	r0, #1
 800acea:	d10e      	bne.n	800ad0a <_printf_float+0x42a>
 800acec:	e657      	b.n	800a99e <_printf_float+0xbe>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f ae50 	beq.w	800a99e <_printf_float+0xbe>
 800acfe:	f108 0801 	add.w	r8, r8, #1
 800ad02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad04:	3b01      	subs	r3, #1
 800ad06:	4543      	cmp	r3, r8
 800ad08:	dcf1      	bgt.n	800acee <_printf_float+0x40e>
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad10:	e6da      	b.n	800aac8 <_printf_float+0x1e8>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	f104 0a1a 	add.w	sl, r4, #26
 800ad1a:	e7f2      	b.n	800ad02 <_printf_float+0x422>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4642      	mov	r2, r8
 800ad20:	e7df      	b.n	800ace2 <_printf_float+0x402>
 800ad22:	2301      	movs	r3, #1
 800ad24:	464a      	mov	r2, r9
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b8      	blx	r7
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f43f ae36 	beq.w	800a99e <_printf_float+0xbe>
 800ad32:	f108 0801 	add.w	r8, r8, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	4543      	cmp	r3, r8
 800ad3e:	dcf0      	bgt.n	800ad22 <_printf_float+0x442>
 800ad40:	e6f8      	b.n	800ab34 <_printf_float+0x254>
 800ad42:	f04f 0800 	mov.w	r8, #0
 800ad46:	f104 0919 	add.w	r9, r4, #25
 800ad4a:	e7f4      	b.n	800ad36 <_printf_float+0x456>

0800ad4c <_printf_common>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	4616      	mov	r6, r2
 800ad52:	4699      	mov	r9, r3
 800ad54:	688a      	ldr	r2, [r1, #8]
 800ad56:	690b      	ldr	r3, [r1, #16]
 800ad58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	bfb8      	it	lt
 800ad60:	4613      	movlt	r3, r2
 800ad62:	6033      	str	r3, [r6, #0]
 800ad64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad68:	4607      	mov	r7, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b10a      	cbz	r2, 800ad72 <_printf_common+0x26>
 800ad6e:	3301      	adds	r3, #1
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	0699      	lsls	r1, r3, #26
 800ad76:	bf42      	ittt	mi
 800ad78:	6833      	ldrmi	r3, [r6, #0]
 800ad7a:	3302      	addmi	r3, #2
 800ad7c:	6033      	strmi	r3, [r6, #0]
 800ad7e:	6825      	ldr	r5, [r4, #0]
 800ad80:	f015 0506 	ands.w	r5, r5, #6
 800ad84:	d106      	bne.n	800ad94 <_printf_common+0x48>
 800ad86:	f104 0a19 	add.w	sl, r4, #25
 800ad8a:	68e3      	ldr	r3, [r4, #12]
 800ad8c:	6832      	ldr	r2, [r6, #0]
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	dc26      	bgt.n	800ade2 <_printf_common+0x96>
 800ad94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad98:	1e13      	subs	r3, r2, #0
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	bf18      	it	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	0692      	lsls	r2, r2, #26
 800ada2:	d42b      	bmi.n	800adfc <_printf_common+0xb0>
 800ada4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ada8:	4649      	mov	r1, r9
 800adaa:	4638      	mov	r0, r7
 800adac:	47c0      	blx	r8
 800adae:	3001      	adds	r0, #1
 800adb0:	d01e      	beq.n	800adf0 <_printf_common+0xa4>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	6922      	ldr	r2, [r4, #16]
 800adb6:	f003 0306 	and.w	r3, r3, #6
 800adba:	2b04      	cmp	r3, #4
 800adbc:	bf02      	ittt	eq
 800adbe:	68e5      	ldreq	r5, [r4, #12]
 800adc0:	6833      	ldreq	r3, [r6, #0]
 800adc2:	1aed      	subeq	r5, r5, r3
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	bf0c      	ite	eq
 800adc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adcc:	2500      	movne	r5, #0
 800adce:	4293      	cmp	r3, r2
 800add0:	bfc4      	itt	gt
 800add2:	1a9b      	subgt	r3, r3, r2
 800add4:	18ed      	addgt	r5, r5, r3
 800add6:	2600      	movs	r6, #0
 800add8:	341a      	adds	r4, #26
 800adda:	42b5      	cmp	r5, r6
 800addc:	d11a      	bne.n	800ae14 <_printf_common+0xc8>
 800adde:	2000      	movs	r0, #0
 800ade0:	e008      	b.n	800adf4 <_printf_common+0xa8>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4652      	mov	r2, sl
 800ade6:	4649      	mov	r1, r9
 800ade8:	4638      	mov	r0, r7
 800adea:	47c0      	blx	r8
 800adec:	3001      	adds	r0, #1
 800adee:	d103      	bne.n	800adf8 <_printf_common+0xac>
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf8:	3501      	adds	r5, #1
 800adfa:	e7c6      	b.n	800ad8a <_printf_common+0x3e>
 800adfc:	18e1      	adds	r1, r4, r3
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	2030      	movs	r0, #48	; 0x30
 800ae02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae06:	4422      	add	r2, r4
 800ae08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae10:	3302      	adds	r3, #2
 800ae12:	e7c7      	b.n	800ada4 <_printf_common+0x58>
 800ae14:	2301      	movs	r3, #1
 800ae16:	4622      	mov	r2, r4
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	47c0      	blx	r8
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d0e6      	beq.n	800adf0 <_printf_common+0xa4>
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7d9      	b.n	800adda <_printf_common+0x8e>
	...

0800ae28 <_printf_i>:
 800ae28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	7e0f      	ldrb	r7, [r1, #24]
 800ae2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae30:	2f78      	cmp	r7, #120	; 0x78
 800ae32:	4691      	mov	r9, r2
 800ae34:	4680      	mov	r8, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	469a      	mov	sl, r3
 800ae3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae3e:	d807      	bhi.n	800ae50 <_printf_i+0x28>
 800ae40:	2f62      	cmp	r7, #98	; 0x62
 800ae42:	d80a      	bhi.n	800ae5a <_printf_i+0x32>
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	f000 80d4 	beq.w	800aff2 <_printf_i+0x1ca>
 800ae4a:	2f58      	cmp	r7, #88	; 0x58
 800ae4c:	f000 80c0 	beq.w	800afd0 <_printf_i+0x1a8>
 800ae50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae58:	e03a      	b.n	800aed0 <_printf_i+0xa8>
 800ae5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae5e:	2b15      	cmp	r3, #21
 800ae60:	d8f6      	bhi.n	800ae50 <_printf_i+0x28>
 800ae62:	a101      	add	r1, pc, #4	; (adr r1, 800ae68 <_printf_i+0x40>)
 800ae64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800aed5 	.word	0x0800aed5
 800ae70:	0800ae51 	.word	0x0800ae51
 800ae74:	0800ae51 	.word	0x0800ae51
 800ae78:	0800ae51 	.word	0x0800ae51
 800ae7c:	0800ae51 	.word	0x0800ae51
 800ae80:	0800aed5 	.word	0x0800aed5
 800ae84:	0800ae51 	.word	0x0800ae51
 800ae88:	0800ae51 	.word	0x0800ae51
 800ae8c:	0800ae51 	.word	0x0800ae51
 800ae90:	0800ae51 	.word	0x0800ae51
 800ae94:	0800afd9 	.word	0x0800afd9
 800ae98:	0800af01 	.word	0x0800af01
 800ae9c:	0800af93 	.word	0x0800af93
 800aea0:	0800ae51 	.word	0x0800ae51
 800aea4:	0800ae51 	.word	0x0800ae51
 800aea8:	0800affb 	.word	0x0800affb
 800aeac:	0800ae51 	.word	0x0800ae51
 800aeb0:	0800af01 	.word	0x0800af01
 800aeb4:	0800ae51 	.word	0x0800ae51
 800aeb8:	0800ae51 	.word	0x0800ae51
 800aebc:	0800af9b 	.word	0x0800af9b
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	602a      	str	r2, [r5, #0]
 800aec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aed0:	2301      	movs	r3, #1
 800aed2:	e09f      	b.n	800b014 <_printf_i+0x1ec>
 800aed4:	6820      	ldr	r0, [r4, #0]
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	0607      	lsls	r7, r0, #24
 800aeda:	f103 0104 	add.w	r1, r3, #4
 800aede:	6029      	str	r1, [r5, #0]
 800aee0:	d501      	bpl.n	800aee6 <_printf_i+0xbe>
 800aee2:	681e      	ldr	r6, [r3, #0]
 800aee4:	e003      	b.n	800aeee <_printf_i+0xc6>
 800aee6:	0646      	lsls	r6, r0, #25
 800aee8:	d5fb      	bpl.n	800aee2 <_printf_i+0xba>
 800aeea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	da03      	bge.n	800aefa <_printf_i+0xd2>
 800aef2:	232d      	movs	r3, #45	; 0x2d
 800aef4:	4276      	negs	r6, r6
 800aef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aefa:	485a      	ldr	r0, [pc, #360]	; (800b064 <_printf_i+0x23c>)
 800aefc:	230a      	movs	r3, #10
 800aefe:	e012      	b.n	800af26 <_printf_i+0xfe>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	6820      	ldr	r0, [r4, #0]
 800af04:	1d19      	adds	r1, r3, #4
 800af06:	6029      	str	r1, [r5, #0]
 800af08:	0605      	lsls	r5, r0, #24
 800af0a:	d501      	bpl.n	800af10 <_printf_i+0xe8>
 800af0c:	681e      	ldr	r6, [r3, #0]
 800af0e:	e002      	b.n	800af16 <_printf_i+0xee>
 800af10:	0641      	lsls	r1, r0, #25
 800af12:	d5fb      	bpl.n	800af0c <_printf_i+0xe4>
 800af14:	881e      	ldrh	r6, [r3, #0]
 800af16:	4853      	ldr	r0, [pc, #332]	; (800b064 <_printf_i+0x23c>)
 800af18:	2f6f      	cmp	r7, #111	; 0x6f
 800af1a:	bf0c      	ite	eq
 800af1c:	2308      	moveq	r3, #8
 800af1e:	230a      	movne	r3, #10
 800af20:	2100      	movs	r1, #0
 800af22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af26:	6865      	ldr	r5, [r4, #4]
 800af28:	60a5      	str	r5, [r4, #8]
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	bfa2      	ittt	ge
 800af2e:	6821      	ldrge	r1, [r4, #0]
 800af30:	f021 0104 	bicge.w	r1, r1, #4
 800af34:	6021      	strge	r1, [r4, #0]
 800af36:	b90e      	cbnz	r6, 800af3c <_printf_i+0x114>
 800af38:	2d00      	cmp	r5, #0
 800af3a:	d04b      	beq.n	800afd4 <_printf_i+0x1ac>
 800af3c:	4615      	mov	r5, r2
 800af3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af42:	fb03 6711 	mls	r7, r3, r1, r6
 800af46:	5dc7      	ldrb	r7, [r0, r7]
 800af48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af4c:	4637      	mov	r7, r6
 800af4e:	42bb      	cmp	r3, r7
 800af50:	460e      	mov	r6, r1
 800af52:	d9f4      	bls.n	800af3e <_printf_i+0x116>
 800af54:	2b08      	cmp	r3, #8
 800af56:	d10b      	bne.n	800af70 <_printf_i+0x148>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	07de      	lsls	r6, r3, #31
 800af5c:	d508      	bpl.n	800af70 <_printf_i+0x148>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	6861      	ldr	r1, [r4, #4]
 800af62:	4299      	cmp	r1, r3
 800af64:	bfde      	ittt	le
 800af66:	2330      	movle	r3, #48	; 0x30
 800af68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af70:	1b52      	subs	r2, r2, r5
 800af72:	6122      	str	r2, [r4, #16]
 800af74:	f8cd a000 	str.w	sl, [sp]
 800af78:	464b      	mov	r3, r9
 800af7a:	aa03      	add	r2, sp, #12
 800af7c:	4621      	mov	r1, r4
 800af7e:	4640      	mov	r0, r8
 800af80:	f7ff fee4 	bl	800ad4c <_printf_common>
 800af84:	3001      	adds	r0, #1
 800af86:	d14a      	bne.n	800b01e <_printf_i+0x1f6>
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	b004      	add	sp, #16
 800af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	f043 0320 	orr.w	r3, r3, #32
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	4833      	ldr	r0, [pc, #204]	; (800b068 <_printf_i+0x240>)
 800af9c:	2778      	movs	r7, #120	; 0x78
 800af9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	6829      	ldr	r1, [r5, #0]
 800afa6:	061f      	lsls	r7, r3, #24
 800afa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800afac:	d402      	bmi.n	800afb4 <_printf_i+0x18c>
 800afae:	065f      	lsls	r7, r3, #25
 800afb0:	bf48      	it	mi
 800afb2:	b2b6      	uxthmi	r6, r6
 800afb4:	07df      	lsls	r7, r3, #31
 800afb6:	bf48      	it	mi
 800afb8:	f043 0320 	orrmi.w	r3, r3, #32
 800afbc:	6029      	str	r1, [r5, #0]
 800afbe:	bf48      	it	mi
 800afc0:	6023      	strmi	r3, [r4, #0]
 800afc2:	b91e      	cbnz	r6, 800afcc <_printf_i+0x1a4>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	f023 0320 	bic.w	r3, r3, #32
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	2310      	movs	r3, #16
 800afce:	e7a7      	b.n	800af20 <_printf_i+0xf8>
 800afd0:	4824      	ldr	r0, [pc, #144]	; (800b064 <_printf_i+0x23c>)
 800afd2:	e7e4      	b.n	800af9e <_printf_i+0x176>
 800afd4:	4615      	mov	r5, r2
 800afd6:	e7bd      	b.n	800af54 <_printf_i+0x12c>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	6826      	ldr	r6, [r4, #0]
 800afdc:	6961      	ldr	r1, [r4, #20]
 800afde:	1d18      	adds	r0, r3, #4
 800afe0:	6028      	str	r0, [r5, #0]
 800afe2:	0635      	lsls	r5, r6, #24
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	d501      	bpl.n	800afec <_printf_i+0x1c4>
 800afe8:	6019      	str	r1, [r3, #0]
 800afea:	e002      	b.n	800aff2 <_printf_i+0x1ca>
 800afec:	0670      	lsls	r0, r6, #25
 800afee:	d5fb      	bpl.n	800afe8 <_printf_i+0x1c0>
 800aff0:	8019      	strh	r1, [r3, #0]
 800aff2:	2300      	movs	r3, #0
 800aff4:	6123      	str	r3, [r4, #16]
 800aff6:	4615      	mov	r5, r2
 800aff8:	e7bc      	b.n	800af74 <_printf_i+0x14c>
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	602a      	str	r2, [r5, #0]
 800b000:	681d      	ldr	r5, [r3, #0]
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	2100      	movs	r1, #0
 800b006:	4628      	mov	r0, r5
 800b008:	f7f5 f8e2 	bl	80001d0 <memchr>
 800b00c:	b108      	cbz	r0, 800b012 <_printf_i+0x1ea>
 800b00e:	1b40      	subs	r0, r0, r5
 800b010:	6060      	str	r0, [r4, #4]
 800b012:	6863      	ldr	r3, [r4, #4]
 800b014:	6123      	str	r3, [r4, #16]
 800b016:	2300      	movs	r3, #0
 800b018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01c:	e7aa      	b.n	800af74 <_printf_i+0x14c>
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	462a      	mov	r2, r5
 800b022:	4649      	mov	r1, r9
 800b024:	4640      	mov	r0, r8
 800b026:	47d0      	blx	sl
 800b028:	3001      	adds	r0, #1
 800b02a:	d0ad      	beq.n	800af88 <_printf_i+0x160>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	079b      	lsls	r3, r3, #30
 800b030:	d413      	bmi.n	800b05a <_printf_i+0x232>
 800b032:	68e0      	ldr	r0, [r4, #12]
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	4298      	cmp	r0, r3
 800b038:	bfb8      	it	lt
 800b03a:	4618      	movlt	r0, r3
 800b03c:	e7a6      	b.n	800af8c <_printf_i+0x164>
 800b03e:	2301      	movs	r3, #1
 800b040:	4632      	mov	r2, r6
 800b042:	4649      	mov	r1, r9
 800b044:	4640      	mov	r0, r8
 800b046:	47d0      	blx	sl
 800b048:	3001      	adds	r0, #1
 800b04a:	d09d      	beq.n	800af88 <_printf_i+0x160>
 800b04c:	3501      	adds	r5, #1
 800b04e:	68e3      	ldr	r3, [r4, #12]
 800b050:	9903      	ldr	r1, [sp, #12]
 800b052:	1a5b      	subs	r3, r3, r1
 800b054:	42ab      	cmp	r3, r5
 800b056:	dcf2      	bgt.n	800b03e <_printf_i+0x216>
 800b058:	e7eb      	b.n	800b032 <_printf_i+0x20a>
 800b05a:	2500      	movs	r5, #0
 800b05c:	f104 0619 	add.w	r6, r4, #25
 800b060:	e7f5      	b.n	800b04e <_printf_i+0x226>
 800b062:	bf00      	nop
 800b064:	0800f02e 	.word	0x0800f02e
 800b068:	0800f03f 	.word	0x0800f03f

0800b06c <_scanf_float>:
 800b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	b087      	sub	sp, #28
 800b072:	4617      	mov	r7, r2
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	688b      	ldr	r3, [r1, #8]
 800b078:	1e5a      	subs	r2, r3, #1
 800b07a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b07e:	bf83      	ittte	hi
 800b080:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b084:	195b      	addhi	r3, r3, r5
 800b086:	9302      	strhi	r3, [sp, #8]
 800b088:	2300      	movls	r3, #0
 800b08a:	bf86      	itte	hi
 800b08c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b090:	608b      	strhi	r3, [r1, #8]
 800b092:	9302      	strls	r3, [sp, #8]
 800b094:	680b      	ldr	r3, [r1, #0]
 800b096:	468b      	mov	fp, r1
 800b098:	2500      	movs	r5, #0
 800b09a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b09e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b0a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	465e      	mov	r6, fp
 800b0ac:	46aa      	mov	sl, r5
 800b0ae:	46a9      	mov	r9, r5
 800b0b0:	9501      	str	r5, [sp, #4]
 800b0b2:	68a2      	ldr	r2, [r4, #8]
 800b0b4:	b152      	cbz	r2, 800b0cc <_scanf_float+0x60>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b4e      	cmp	r3, #78	; 0x4e
 800b0bc:	d864      	bhi.n	800b188 <_scanf_float+0x11c>
 800b0be:	2b40      	cmp	r3, #64	; 0x40
 800b0c0:	d83c      	bhi.n	800b13c <_scanf_float+0xd0>
 800b0c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b0c6:	b2c8      	uxtb	r0, r1
 800b0c8:	280e      	cmp	r0, #14
 800b0ca:	d93a      	bls.n	800b142 <_scanf_float+0xd6>
 800b0cc:	f1b9 0f00 	cmp.w	r9, #0
 800b0d0:	d003      	beq.n	800b0da <_scanf_float+0x6e>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0de:	f1ba 0f01 	cmp.w	sl, #1
 800b0e2:	f200 8113 	bhi.w	800b30c <_scanf_float+0x2a0>
 800b0e6:	455e      	cmp	r6, fp
 800b0e8:	f200 8105 	bhi.w	800b2f6 <_scanf_float+0x28a>
 800b0ec:	2501      	movs	r5, #1
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	b007      	add	sp, #28
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b0fa:	2a0d      	cmp	r2, #13
 800b0fc:	d8e6      	bhi.n	800b0cc <_scanf_float+0x60>
 800b0fe:	a101      	add	r1, pc, #4	; (adr r1, 800b104 <_scanf_float+0x98>)
 800b100:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b104:	0800b243 	.word	0x0800b243
 800b108:	0800b0cd 	.word	0x0800b0cd
 800b10c:	0800b0cd 	.word	0x0800b0cd
 800b110:	0800b0cd 	.word	0x0800b0cd
 800b114:	0800b2a3 	.word	0x0800b2a3
 800b118:	0800b27b 	.word	0x0800b27b
 800b11c:	0800b0cd 	.word	0x0800b0cd
 800b120:	0800b0cd 	.word	0x0800b0cd
 800b124:	0800b251 	.word	0x0800b251
 800b128:	0800b0cd 	.word	0x0800b0cd
 800b12c:	0800b0cd 	.word	0x0800b0cd
 800b130:	0800b0cd 	.word	0x0800b0cd
 800b134:	0800b0cd 	.word	0x0800b0cd
 800b138:	0800b209 	.word	0x0800b209
 800b13c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b140:	e7db      	b.n	800b0fa <_scanf_float+0x8e>
 800b142:	290e      	cmp	r1, #14
 800b144:	d8c2      	bhi.n	800b0cc <_scanf_float+0x60>
 800b146:	a001      	add	r0, pc, #4	; (adr r0, 800b14c <_scanf_float+0xe0>)
 800b148:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b14c:	0800b1fb 	.word	0x0800b1fb
 800b150:	0800b0cd 	.word	0x0800b0cd
 800b154:	0800b1fb 	.word	0x0800b1fb
 800b158:	0800b28f 	.word	0x0800b28f
 800b15c:	0800b0cd 	.word	0x0800b0cd
 800b160:	0800b1a9 	.word	0x0800b1a9
 800b164:	0800b1e5 	.word	0x0800b1e5
 800b168:	0800b1e5 	.word	0x0800b1e5
 800b16c:	0800b1e5 	.word	0x0800b1e5
 800b170:	0800b1e5 	.word	0x0800b1e5
 800b174:	0800b1e5 	.word	0x0800b1e5
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b1e5 	.word	0x0800b1e5
 800b180:	0800b1e5 	.word	0x0800b1e5
 800b184:	0800b1e5 	.word	0x0800b1e5
 800b188:	2b6e      	cmp	r3, #110	; 0x6e
 800b18a:	d809      	bhi.n	800b1a0 <_scanf_float+0x134>
 800b18c:	2b60      	cmp	r3, #96	; 0x60
 800b18e:	d8b2      	bhi.n	800b0f6 <_scanf_float+0x8a>
 800b190:	2b54      	cmp	r3, #84	; 0x54
 800b192:	d077      	beq.n	800b284 <_scanf_float+0x218>
 800b194:	2b59      	cmp	r3, #89	; 0x59
 800b196:	d199      	bne.n	800b0cc <_scanf_float+0x60>
 800b198:	2d07      	cmp	r5, #7
 800b19a:	d197      	bne.n	800b0cc <_scanf_float+0x60>
 800b19c:	2508      	movs	r5, #8
 800b19e:	e029      	b.n	800b1f4 <_scanf_float+0x188>
 800b1a0:	2b74      	cmp	r3, #116	; 0x74
 800b1a2:	d06f      	beq.n	800b284 <_scanf_float+0x218>
 800b1a4:	2b79      	cmp	r3, #121	; 0x79
 800b1a6:	e7f6      	b.n	800b196 <_scanf_float+0x12a>
 800b1a8:	6821      	ldr	r1, [r4, #0]
 800b1aa:	05c8      	lsls	r0, r1, #23
 800b1ac:	d51a      	bpl.n	800b1e4 <_scanf_float+0x178>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b1b4:	6021      	str	r1, [r4, #0]
 800b1b6:	f109 0901 	add.w	r9, r9, #1
 800b1ba:	b11b      	cbz	r3, 800b1c4 <_scanf_float+0x158>
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	3201      	adds	r2, #1
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	60a2      	str	r2, [r4, #8]
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	60a3      	str	r3, [r4, #8]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	6123      	str	r3, [r4, #16]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	607b      	str	r3, [r7, #4]
 800b1d8:	f340 8084 	ble.w	800b2e4 <_scanf_float+0x278>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	603b      	str	r3, [r7, #0]
 800b1e2:	e766      	b.n	800b0b2 <_scanf_float+0x46>
 800b1e4:	eb1a 0f05 	cmn.w	sl, r5
 800b1e8:	f47f af70 	bne.w	800b0cc <_scanf_float+0x60>
 800b1ec:	6822      	ldr	r2, [r4, #0]
 800b1ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b1f2:	6022      	str	r2, [r4, #0]
 800b1f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b1f8:	e7e4      	b.n	800b1c4 <_scanf_float+0x158>
 800b1fa:	6822      	ldr	r2, [r4, #0]
 800b1fc:	0610      	lsls	r0, r2, #24
 800b1fe:	f57f af65 	bpl.w	800b0cc <_scanf_float+0x60>
 800b202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b206:	e7f4      	b.n	800b1f2 <_scanf_float+0x186>
 800b208:	f1ba 0f00 	cmp.w	sl, #0
 800b20c:	d10e      	bne.n	800b22c <_scanf_float+0x1c0>
 800b20e:	f1b9 0f00 	cmp.w	r9, #0
 800b212:	d10e      	bne.n	800b232 <_scanf_float+0x1c6>
 800b214:	6822      	ldr	r2, [r4, #0]
 800b216:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b21a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b21e:	d108      	bne.n	800b232 <_scanf_float+0x1c6>
 800b220:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	f04f 0a01 	mov.w	sl, #1
 800b22a:	e7e3      	b.n	800b1f4 <_scanf_float+0x188>
 800b22c:	f1ba 0f02 	cmp.w	sl, #2
 800b230:	d055      	beq.n	800b2de <_scanf_float+0x272>
 800b232:	2d01      	cmp	r5, #1
 800b234:	d002      	beq.n	800b23c <_scanf_float+0x1d0>
 800b236:	2d04      	cmp	r5, #4
 800b238:	f47f af48 	bne.w	800b0cc <_scanf_float+0x60>
 800b23c:	3501      	adds	r5, #1
 800b23e:	b2ed      	uxtb	r5, r5
 800b240:	e7d8      	b.n	800b1f4 <_scanf_float+0x188>
 800b242:	f1ba 0f01 	cmp.w	sl, #1
 800b246:	f47f af41 	bne.w	800b0cc <_scanf_float+0x60>
 800b24a:	f04f 0a02 	mov.w	sl, #2
 800b24e:	e7d1      	b.n	800b1f4 <_scanf_float+0x188>
 800b250:	b97d      	cbnz	r5, 800b272 <_scanf_float+0x206>
 800b252:	f1b9 0f00 	cmp.w	r9, #0
 800b256:	f47f af3c 	bne.w	800b0d2 <_scanf_float+0x66>
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b260:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b264:	f47f af39 	bne.w	800b0da <_scanf_float+0x6e>
 800b268:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b26c:	6022      	str	r2, [r4, #0]
 800b26e:	2501      	movs	r5, #1
 800b270:	e7c0      	b.n	800b1f4 <_scanf_float+0x188>
 800b272:	2d03      	cmp	r5, #3
 800b274:	d0e2      	beq.n	800b23c <_scanf_float+0x1d0>
 800b276:	2d05      	cmp	r5, #5
 800b278:	e7de      	b.n	800b238 <_scanf_float+0x1cc>
 800b27a:	2d02      	cmp	r5, #2
 800b27c:	f47f af26 	bne.w	800b0cc <_scanf_float+0x60>
 800b280:	2503      	movs	r5, #3
 800b282:	e7b7      	b.n	800b1f4 <_scanf_float+0x188>
 800b284:	2d06      	cmp	r5, #6
 800b286:	f47f af21 	bne.w	800b0cc <_scanf_float+0x60>
 800b28a:	2507      	movs	r5, #7
 800b28c:	e7b2      	b.n	800b1f4 <_scanf_float+0x188>
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	0591      	lsls	r1, r2, #22
 800b292:	f57f af1b 	bpl.w	800b0cc <_scanf_float+0x60>
 800b296:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b29a:	6022      	str	r2, [r4, #0]
 800b29c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2a0:	e7a8      	b.n	800b1f4 <_scanf_float+0x188>
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b2a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b2ac:	d006      	beq.n	800b2bc <_scanf_float+0x250>
 800b2ae:	0550      	lsls	r0, r2, #21
 800b2b0:	f57f af0c 	bpl.w	800b0cc <_scanf_float+0x60>
 800b2b4:	f1b9 0f00 	cmp.w	r9, #0
 800b2b8:	f43f af0f 	beq.w	800b0da <_scanf_float+0x6e>
 800b2bc:	0591      	lsls	r1, r2, #22
 800b2be:	bf58      	it	pl
 800b2c0:	9901      	ldrpl	r1, [sp, #4]
 800b2c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2c6:	bf58      	it	pl
 800b2c8:	eba9 0101 	subpl.w	r1, r9, r1
 800b2cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b2d0:	bf58      	it	pl
 800b2d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b2d6:	6022      	str	r2, [r4, #0]
 800b2d8:	f04f 0900 	mov.w	r9, #0
 800b2dc:	e78a      	b.n	800b1f4 <_scanf_float+0x188>
 800b2de:	f04f 0a03 	mov.w	sl, #3
 800b2e2:	e787      	b.n	800b1f4 <_scanf_float+0x188>
 800b2e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4798      	blx	r3
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f43f aedf 	beq.w	800b0b2 <_scanf_float+0x46>
 800b2f4:	e6ea      	b.n	800b0cc <_scanf_float+0x60>
 800b2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2fe:	463a      	mov	r2, r7
 800b300:	4640      	mov	r0, r8
 800b302:	4798      	blx	r3
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	3b01      	subs	r3, #1
 800b308:	6123      	str	r3, [r4, #16]
 800b30a:	e6ec      	b.n	800b0e6 <_scanf_float+0x7a>
 800b30c:	1e6b      	subs	r3, r5, #1
 800b30e:	2b06      	cmp	r3, #6
 800b310:	d825      	bhi.n	800b35e <_scanf_float+0x2f2>
 800b312:	2d02      	cmp	r5, #2
 800b314:	d836      	bhi.n	800b384 <_scanf_float+0x318>
 800b316:	455e      	cmp	r6, fp
 800b318:	f67f aee8 	bls.w	800b0ec <_scanf_float+0x80>
 800b31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b320:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b324:	463a      	mov	r2, r7
 800b326:	4640      	mov	r0, r8
 800b328:	4798      	blx	r3
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	e7f1      	b.n	800b316 <_scanf_float+0x2aa>
 800b332:	9802      	ldr	r0, [sp, #8]
 800b334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b338:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b33c:	9002      	str	r0, [sp, #8]
 800b33e:	463a      	mov	r2, r7
 800b340:	4640      	mov	r0, r8
 800b342:	4798      	blx	r3
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	3b01      	subs	r3, #1
 800b348:	6123      	str	r3, [r4, #16]
 800b34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b34e:	fa5f fa8a 	uxtb.w	sl, sl
 800b352:	f1ba 0f02 	cmp.w	sl, #2
 800b356:	d1ec      	bne.n	800b332 <_scanf_float+0x2c6>
 800b358:	3d03      	subs	r5, #3
 800b35a:	b2ed      	uxtb	r5, r5
 800b35c:	1b76      	subs	r6, r6, r5
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	05da      	lsls	r2, r3, #23
 800b362:	d52f      	bpl.n	800b3c4 <_scanf_float+0x358>
 800b364:	055b      	lsls	r3, r3, #21
 800b366:	d510      	bpl.n	800b38a <_scanf_float+0x31e>
 800b368:	455e      	cmp	r6, fp
 800b36a:	f67f aebf 	bls.w	800b0ec <_scanf_float+0x80>
 800b36e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b376:	463a      	mov	r2, r7
 800b378:	4640      	mov	r0, r8
 800b37a:	4798      	blx	r3
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	3b01      	subs	r3, #1
 800b380:	6123      	str	r3, [r4, #16]
 800b382:	e7f1      	b.n	800b368 <_scanf_float+0x2fc>
 800b384:	46aa      	mov	sl, r5
 800b386:	9602      	str	r6, [sp, #8]
 800b388:	e7df      	b.n	800b34a <_scanf_float+0x2de>
 800b38a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	2965      	cmp	r1, #101	; 0x65
 800b392:	f103 33ff 	add.w	r3, r3, #4294967295
 800b396:	f106 35ff 	add.w	r5, r6, #4294967295
 800b39a:	6123      	str	r3, [r4, #16]
 800b39c:	d00c      	beq.n	800b3b8 <_scanf_float+0x34c>
 800b39e:	2945      	cmp	r1, #69	; 0x45
 800b3a0:	d00a      	beq.n	800b3b8 <_scanf_float+0x34c>
 800b3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3a6:	463a      	mov	r2, r7
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4798      	blx	r3
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	1eb5      	subs	r5, r6, #2
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3bc:	463a      	mov	r2, r7
 800b3be:	4640      	mov	r0, r8
 800b3c0:	4798      	blx	r3
 800b3c2:	462e      	mov	r6, r5
 800b3c4:	6825      	ldr	r5, [r4, #0]
 800b3c6:	f015 0510 	ands.w	r5, r5, #16
 800b3ca:	d158      	bne.n	800b47e <_scanf_float+0x412>
 800b3cc:	7035      	strb	r5, [r6, #0]
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3d8:	d11c      	bne.n	800b414 <_scanf_float+0x3a8>
 800b3da:	9b01      	ldr	r3, [sp, #4]
 800b3dc:	454b      	cmp	r3, r9
 800b3de:	eba3 0209 	sub.w	r2, r3, r9
 800b3e2:	d124      	bne.n	800b42e <_scanf_float+0x3c2>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	f002 fc2d 	bl	800dc48 <_strtod_r>
 800b3ee:	9b03      	ldr	r3, [sp, #12]
 800b3f0:	6821      	ldr	r1, [r4, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f011 0f02 	tst.w	r1, #2
 800b3f8:	ec57 6b10 	vmov	r6, r7, d0
 800b3fc:	f103 0204 	add.w	r2, r3, #4
 800b400:	d020      	beq.n	800b444 <_scanf_float+0x3d8>
 800b402:	9903      	ldr	r1, [sp, #12]
 800b404:	600a      	str	r2, [r1, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	e9c3 6700 	strd	r6, r7, [r3]
 800b40c:	68e3      	ldr	r3, [r4, #12]
 800b40e:	3301      	adds	r3, #1
 800b410:	60e3      	str	r3, [r4, #12]
 800b412:	e66c      	b.n	800b0ee <_scanf_float+0x82>
 800b414:	9b04      	ldr	r3, [sp, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0e4      	beq.n	800b3e4 <_scanf_float+0x378>
 800b41a:	9905      	ldr	r1, [sp, #20]
 800b41c:	230a      	movs	r3, #10
 800b41e:	462a      	mov	r2, r5
 800b420:	3101      	adds	r1, #1
 800b422:	4640      	mov	r0, r8
 800b424:	f002 fc98 	bl	800dd58 <_strtol_r>
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	9e05      	ldr	r6, [sp, #20]
 800b42c:	1ac2      	subs	r2, r0, r3
 800b42e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b432:	429e      	cmp	r6, r3
 800b434:	bf28      	it	cs
 800b436:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b43a:	4912      	ldr	r1, [pc, #72]	; (800b484 <_scanf_float+0x418>)
 800b43c:	4630      	mov	r0, r6
 800b43e:	f000 f8e7 	bl	800b610 <siprintf>
 800b442:	e7cf      	b.n	800b3e4 <_scanf_float+0x378>
 800b444:	f011 0f04 	tst.w	r1, #4
 800b448:	9903      	ldr	r1, [sp, #12]
 800b44a:	600a      	str	r2, [r1, #0]
 800b44c:	d1db      	bne.n	800b406 <_scanf_float+0x39a>
 800b44e:	f8d3 8000 	ldr.w	r8, [r3]
 800b452:	ee10 2a10 	vmov	r2, s0
 800b456:	ee10 0a10 	vmov	r0, s0
 800b45a:	463b      	mov	r3, r7
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f5 fb65 	bl	8000b2c <__aeabi_dcmpun>
 800b462:	b128      	cbz	r0, 800b470 <_scanf_float+0x404>
 800b464:	4808      	ldr	r0, [pc, #32]	; (800b488 <_scanf_float+0x41c>)
 800b466:	f000 f9b5 	bl	800b7d4 <nanf>
 800b46a:	ed88 0a00 	vstr	s0, [r8]
 800b46e:	e7cd      	b.n	800b40c <_scanf_float+0x3a0>
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 fbb8 	bl	8000be8 <__aeabi_d2f>
 800b478:	f8c8 0000 	str.w	r0, [r8]
 800b47c:	e7c6      	b.n	800b40c <_scanf_float+0x3a0>
 800b47e:	2500      	movs	r5, #0
 800b480:	e635      	b.n	800b0ee <_scanf_float+0x82>
 800b482:	bf00      	nop
 800b484:	0800f050 	.word	0x0800f050
 800b488:	0800f3e5 	.word	0x0800f3e5

0800b48c <std>:
 800b48c:	2300      	movs	r3, #0
 800b48e:	b510      	push	{r4, lr}
 800b490:	4604      	mov	r4, r0
 800b492:	e9c0 3300 	strd	r3, r3, [r0]
 800b496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b49a:	6083      	str	r3, [r0, #8]
 800b49c:	8181      	strh	r1, [r0, #12]
 800b49e:	6643      	str	r3, [r0, #100]	; 0x64
 800b4a0:	81c2      	strh	r2, [r0, #14]
 800b4a2:	6183      	str	r3, [r0, #24]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	305c      	adds	r0, #92	; 0x5c
 800b4aa:	f000 f914 	bl	800b6d6 <memset>
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <std+0x38>)
 800b4b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <std+0x3c>)
 800b4b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4b6:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <std+0x40>)
 800b4b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <std+0x44>)
 800b4bc:	6224      	str	r4, [r4, #32]
 800b4be:	6323      	str	r3, [r4, #48]	; 0x30
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0800b651 	.word	0x0800b651
 800b4c8:	0800b673 	.word	0x0800b673
 800b4cc:	0800b6ab 	.word	0x0800b6ab
 800b4d0:	0800b6cf 	.word	0x0800b6cf

0800b4d4 <stdio_exit_handler>:
 800b4d4:	4a02      	ldr	r2, [pc, #8]	; (800b4e0 <stdio_exit_handler+0xc>)
 800b4d6:	4903      	ldr	r1, [pc, #12]	; (800b4e4 <stdio_exit_handler+0x10>)
 800b4d8:	4803      	ldr	r0, [pc, #12]	; (800b4e8 <stdio_exit_handler+0x14>)
 800b4da:	f000 b869 	b.w	800b5b0 <_fwalk_sglue>
 800b4de:	bf00      	nop
 800b4e0:	2000010c 	.word	0x2000010c
 800b4e4:	0800e3a1 	.word	0x0800e3a1
 800b4e8:	20000118 	.word	0x20000118

0800b4ec <cleanup_stdio>:
 800b4ec:	6841      	ldr	r1, [r0, #4]
 800b4ee:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <cleanup_stdio+0x34>)
 800b4f0:	4299      	cmp	r1, r3
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	d001      	beq.n	800b4fc <cleanup_stdio+0x10>
 800b4f8:	f002 ff52 	bl	800e3a0 <_fflush_r>
 800b4fc:	68a1      	ldr	r1, [r4, #8]
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <cleanup_stdio+0x38>)
 800b500:	4299      	cmp	r1, r3
 800b502:	d002      	beq.n	800b50a <cleanup_stdio+0x1e>
 800b504:	4620      	mov	r0, r4
 800b506:	f002 ff4b 	bl	800e3a0 <_fflush_r>
 800b50a:	68e1      	ldr	r1, [r4, #12]
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <cleanup_stdio+0x3c>)
 800b50e:	4299      	cmp	r1, r3
 800b510:	d004      	beq.n	800b51c <cleanup_stdio+0x30>
 800b512:	4620      	mov	r0, r4
 800b514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b518:	f002 bf42 	b.w	800e3a0 <_fflush_r>
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	bf00      	nop
 800b520:	20002050 	.word	0x20002050
 800b524:	200020b8 	.word	0x200020b8
 800b528:	20002120 	.word	0x20002120

0800b52c <global_stdio_init.part.0>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <global_stdio_init.part.0+0x30>)
 800b530:	4c0b      	ldr	r4, [pc, #44]	; (800b560 <global_stdio_init.part.0+0x34>)
 800b532:	4a0c      	ldr	r2, [pc, #48]	; (800b564 <global_stdio_init.part.0+0x38>)
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	4620      	mov	r0, r4
 800b538:	2200      	movs	r2, #0
 800b53a:	2104      	movs	r1, #4
 800b53c:	f7ff ffa6 	bl	800b48c <std>
 800b540:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b544:	2201      	movs	r2, #1
 800b546:	2109      	movs	r1, #9
 800b548:	f7ff ffa0 	bl	800b48c <std>
 800b54c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b550:	2202      	movs	r2, #2
 800b552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b556:	2112      	movs	r1, #18
 800b558:	f7ff bf98 	b.w	800b48c <std>
 800b55c:	20002188 	.word	0x20002188
 800b560:	20002050 	.word	0x20002050
 800b564:	0800b4d5 	.word	0x0800b4d5

0800b568 <__sfp_lock_acquire>:
 800b568:	4801      	ldr	r0, [pc, #4]	; (800b570 <__sfp_lock_acquire+0x8>)
 800b56a:	f000 b931 	b.w	800b7d0 <__retarget_lock_acquire_recursive>
 800b56e:	bf00      	nop
 800b570:	20002191 	.word	0x20002191

0800b574 <__sfp_lock_release>:
 800b574:	4801      	ldr	r0, [pc, #4]	; (800b57c <__sfp_lock_release+0x8>)
 800b576:	f000 b92c 	b.w	800b7d2 <__retarget_lock_release_recursive>
 800b57a:	bf00      	nop
 800b57c:	20002191 	.word	0x20002191

0800b580 <__sinit>:
 800b580:	b510      	push	{r4, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	f7ff fff0 	bl	800b568 <__sfp_lock_acquire>
 800b588:	6a23      	ldr	r3, [r4, #32]
 800b58a:	b11b      	cbz	r3, 800b594 <__sinit+0x14>
 800b58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b590:	f7ff bff0 	b.w	800b574 <__sfp_lock_release>
 800b594:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <__sinit+0x28>)
 800b596:	6223      	str	r3, [r4, #32]
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <__sinit+0x2c>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1f5      	bne.n	800b58c <__sinit+0xc>
 800b5a0:	f7ff ffc4 	bl	800b52c <global_stdio_init.part.0>
 800b5a4:	e7f2      	b.n	800b58c <__sinit+0xc>
 800b5a6:	bf00      	nop
 800b5a8:	0800b4ed 	.word	0x0800b4ed
 800b5ac:	20002188 	.word	0x20002188

0800b5b0 <_fwalk_sglue>:
 800b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	4688      	mov	r8, r1
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b5c4:	d505      	bpl.n	800b5d2 <_fwalk_sglue+0x22>
 800b5c6:	6824      	ldr	r4, [r4, #0]
 800b5c8:	2c00      	cmp	r4, #0
 800b5ca:	d1f7      	bne.n	800b5bc <_fwalk_sglue+0xc>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d907      	bls.n	800b5e8 <_fwalk_sglue+0x38>
 800b5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	d003      	beq.n	800b5e8 <_fwalk_sglue+0x38>
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	47c0      	blx	r8
 800b5e6:	4306      	orrs	r6, r0
 800b5e8:	3568      	adds	r5, #104	; 0x68
 800b5ea:	e7e9      	b.n	800b5c0 <_fwalk_sglue+0x10>

0800b5ec <iprintf>:
 800b5ec:	b40f      	push	{r0, r1, r2, r3}
 800b5ee:	b507      	push	{r0, r1, r2, lr}
 800b5f0:	4906      	ldr	r1, [pc, #24]	; (800b60c <iprintf+0x20>)
 800b5f2:	ab04      	add	r3, sp, #16
 800b5f4:	6808      	ldr	r0, [r1, #0]
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	6881      	ldr	r1, [r0, #8]
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	f002 fd2f 	bl	800e060 <_vfiprintf_r>
 800b602:	b003      	add	sp, #12
 800b604:	f85d eb04 	ldr.w	lr, [sp], #4
 800b608:	b004      	add	sp, #16
 800b60a:	4770      	bx	lr
 800b60c:	20000164 	.word	0x20000164

0800b610 <siprintf>:
 800b610:	b40e      	push	{r1, r2, r3}
 800b612:	b500      	push	{lr}
 800b614:	b09c      	sub	sp, #112	; 0x70
 800b616:	ab1d      	add	r3, sp, #116	; 0x74
 800b618:	9002      	str	r0, [sp, #8]
 800b61a:	9006      	str	r0, [sp, #24]
 800b61c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b620:	4809      	ldr	r0, [pc, #36]	; (800b648 <siprintf+0x38>)
 800b622:	9107      	str	r1, [sp, #28]
 800b624:	9104      	str	r1, [sp, #16]
 800b626:	4909      	ldr	r1, [pc, #36]	; (800b64c <siprintf+0x3c>)
 800b628:	f853 2b04 	ldr.w	r2, [r3], #4
 800b62c:	9105      	str	r1, [sp, #20]
 800b62e:	6800      	ldr	r0, [r0, #0]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	a902      	add	r1, sp, #8
 800b634:	f002 fbec 	bl	800de10 <_svfiprintf_r>
 800b638:	9b02      	ldr	r3, [sp, #8]
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	b01c      	add	sp, #112	; 0x70
 800b640:	f85d eb04 	ldr.w	lr, [sp], #4
 800b644:	b003      	add	sp, #12
 800b646:	4770      	bx	lr
 800b648:	20000164 	.word	0x20000164
 800b64c:	ffff0208 	.word	0xffff0208

0800b650 <__sread>:
 800b650:	b510      	push	{r4, lr}
 800b652:	460c      	mov	r4, r1
 800b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b658:	f000 f86c 	bl	800b734 <_read_r>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	bfab      	itete	ge
 800b660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b662:	89a3      	ldrhlt	r3, [r4, #12]
 800b664:	181b      	addge	r3, r3, r0
 800b666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b66a:	bfac      	ite	ge
 800b66c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b66e:	81a3      	strhlt	r3, [r4, #12]
 800b670:	bd10      	pop	{r4, pc}

0800b672 <__swrite>:
 800b672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	461f      	mov	r7, r3
 800b678:	898b      	ldrh	r3, [r1, #12]
 800b67a:	05db      	lsls	r3, r3, #23
 800b67c:	4605      	mov	r5, r0
 800b67e:	460c      	mov	r4, r1
 800b680:	4616      	mov	r6, r2
 800b682:	d505      	bpl.n	800b690 <__swrite+0x1e>
 800b684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b688:	2302      	movs	r3, #2
 800b68a:	2200      	movs	r2, #0
 800b68c:	f000 f840 	bl	800b710 <_lseek_r>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	4632      	mov	r2, r6
 800b69e:	463b      	mov	r3, r7
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a6:	f000 b857 	b.w	800b758 <_write_r>

0800b6aa <__sseek>:
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b2:	f000 f82d 	bl	800b710 <_lseek_r>
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	bf15      	itete	ne
 800b6bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6c6:	81a3      	strheq	r3, [r4, #12]
 800b6c8:	bf18      	it	ne
 800b6ca:	81a3      	strhne	r3, [r4, #12]
 800b6cc:	bd10      	pop	{r4, pc}

0800b6ce <__sclose>:
 800b6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d2:	f000 b80d 	b.w	800b6f0 <_close_r>

0800b6d6 <memset>:
 800b6d6:	4402      	add	r2, r0
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d100      	bne.n	800b6e0 <memset+0xa>
 800b6de:	4770      	bx	lr
 800b6e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e4:	e7f9      	b.n	800b6da <memset+0x4>
	...

0800b6e8 <_localeconv_r>:
 800b6e8:	4800      	ldr	r0, [pc, #0]	; (800b6ec <_localeconv_r+0x4>)
 800b6ea:	4770      	bx	lr
 800b6ec:	20000258 	.word	0x20000258

0800b6f0 <_close_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d06      	ldr	r5, [pc, #24]	; (800b70c <_close_r+0x1c>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f6 f91b 	bl	8001936 <_close>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_close_r+0x1a>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_close_r+0x1a>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	2000218c 	.word	0x2000218c

0800b710 <_lseek_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d07      	ldr	r5, [pc, #28]	; (800b730 <_lseek_r+0x20>)
 800b714:	4604      	mov	r4, r0
 800b716:	4608      	mov	r0, r1
 800b718:	4611      	mov	r1, r2
 800b71a:	2200      	movs	r2, #0
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f6 f930 	bl	8001984 <_lseek>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_lseek_r+0x1e>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_lseek_r+0x1e>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	2000218c 	.word	0x2000218c

0800b734 <_read_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d07      	ldr	r5, [pc, #28]	; (800b754 <_read_r+0x20>)
 800b738:	4604      	mov	r4, r0
 800b73a:	4608      	mov	r0, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	2200      	movs	r2, #0
 800b740:	602a      	str	r2, [r5, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	f7f6 f8da 	bl	80018fc <_read>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_read_r+0x1e>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_read_r+0x1e>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	2000218c 	.word	0x2000218c

0800b758 <_write_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_write_r+0x20>)
 800b75c:	4604      	mov	r4, r0
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	2200      	movs	r2, #0
 800b764:	602a      	str	r2, [r5, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	f7f5 fdea 	bl	8001340 <_write>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_write_r+0x1e>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_write_r+0x1e>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	2000218c 	.word	0x2000218c

0800b77c <__errno>:
 800b77c:	4b01      	ldr	r3, [pc, #4]	; (800b784 <__errno+0x8>)
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	20000164 	.word	0x20000164

0800b788 <__libc_init_array>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	4d0d      	ldr	r5, [pc, #52]	; (800b7c0 <__libc_init_array+0x38>)
 800b78c:	4c0d      	ldr	r4, [pc, #52]	; (800b7c4 <__libc_init_array+0x3c>)
 800b78e:	1b64      	subs	r4, r4, r5
 800b790:	10a4      	asrs	r4, r4, #2
 800b792:	2600      	movs	r6, #0
 800b794:	42a6      	cmp	r6, r4
 800b796:	d109      	bne.n	800b7ac <__libc_init_array+0x24>
 800b798:	4d0b      	ldr	r5, [pc, #44]	; (800b7c8 <__libc_init_array+0x40>)
 800b79a:	4c0c      	ldr	r4, [pc, #48]	; (800b7cc <__libc_init_array+0x44>)
 800b79c:	f003 fbd4 	bl	800ef48 <_init>
 800b7a0:	1b64      	subs	r4, r4, r5
 800b7a2:	10a4      	asrs	r4, r4, #2
 800b7a4:	2600      	movs	r6, #0
 800b7a6:	42a6      	cmp	r6, r4
 800b7a8:	d105      	bne.n	800b7b6 <__libc_init_array+0x2e>
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b0:	4798      	blx	r3
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	e7ee      	b.n	800b794 <__libc_init_array+0xc>
 800b7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ba:	4798      	blx	r3
 800b7bc:	3601      	adds	r6, #1
 800b7be:	e7f2      	b.n	800b7a6 <__libc_init_array+0x1e>
 800b7c0:	0800f450 	.word	0x0800f450
 800b7c4:	0800f450 	.word	0x0800f450
 800b7c8:	0800f450 	.word	0x0800f450
 800b7cc:	0800f454 	.word	0x0800f454

0800b7d0 <__retarget_lock_acquire_recursive>:
 800b7d0:	4770      	bx	lr

0800b7d2 <__retarget_lock_release_recursive>:
 800b7d2:	4770      	bx	lr

0800b7d4 <nanf>:
 800b7d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b7dc <nanf+0x8>
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	7fc00000 	.word	0x7fc00000

0800b7e0 <quorem>:
 800b7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	6903      	ldr	r3, [r0, #16]
 800b7e6:	690c      	ldr	r4, [r1, #16]
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	4607      	mov	r7, r0
 800b7ec:	db7e      	blt.n	800b8ec <quorem+0x10c>
 800b7ee:	3c01      	subs	r4, #1
 800b7f0:	f101 0814 	add.w	r8, r1, #20
 800b7f4:	f100 0514 	add.w	r5, r0, #20
 800b7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b806:	3301      	adds	r3, #1
 800b808:	429a      	cmp	r2, r3
 800b80a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b80e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b812:	fbb2 f6f3 	udiv	r6, r2, r3
 800b816:	d331      	bcc.n	800b87c <quorem+0x9c>
 800b818:	f04f 0e00 	mov.w	lr, #0
 800b81c:	4640      	mov	r0, r8
 800b81e:	46ac      	mov	ip, r5
 800b820:	46f2      	mov	sl, lr
 800b822:	f850 2b04 	ldr.w	r2, [r0], #4
 800b826:	b293      	uxth	r3, r2
 800b828:	fb06 e303 	mla	r3, r6, r3, lr
 800b82c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b830:	0c1a      	lsrs	r2, r3, #16
 800b832:	b29b      	uxth	r3, r3
 800b834:	ebaa 0303 	sub.w	r3, sl, r3
 800b838:	f8dc a000 	ldr.w	sl, [ip]
 800b83c:	fa13 f38a 	uxtah	r3, r3, sl
 800b840:	fb06 220e 	mla	r2, r6, lr, r2
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	9b00      	ldr	r3, [sp, #0]
 800b848:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b84c:	b292      	uxth	r2, r2
 800b84e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b856:	f8bd 3000 	ldrh.w	r3, [sp]
 800b85a:	4581      	cmp	r9, r0
 800b85c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b860:	f84c 3b04 	str.w	r3, [ip], #4
 800b864:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b868:	d2db      	bcs.n	800b822 <quorem+0x42>
 800b86a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b86e:	b92b      	cbnz	r3, 800b87c <quorem+0x9c>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	3b04      	subs	r3, #4
 800b874:	429d      	cmp	r5, r3
 800b876:	461a      	mov	r2, r3
 800b878:	d32c      	bcc.n	800b8d4 <quorem+0xf4>
 800b87a:	613c      	str	r4, [r7, #16]
 800b87c:	4638      	mov	r0, r7
 800b87e:	f001 f9ef 	bl	800cc60 <__mcmp>
 800b882:	2800      	cmp	r0, #0
 800b884:	db22      	blt.n	800b8cc <quorem+0xec>
 800b886:	3601      	adds	r6, #1
 800b888:	4629      	mov	r1, r5
 800b88a:	2000      	movs	r0, #0
 800b88c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b890:	f8d1 c000 	ldr.w	ip, [r1]
 800b894:	b293      	uxth	r3, r2
 800b896:	1ac3      	subs	r3, r0, r3
 800b898:	0c12      	lsrs	r2, r2, #16
 800b89a:	fa13 f38c 	uxtah	r3, r3, ip
 800b89e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b8a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ac:	45c1      	cmp	r9, r8
 800b8ae:	f841 3b04 	str.w	r3, [r1], #4
 800b8b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8b6:	d2e9      	bcs.n	800b88c <quorem+0xac>
 800b8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8c0:	b922      	cbnz	r2, 800b8cc <quorem+0xec>
 800b8c2:	3b04      	subs	r3, #4
 800b8c4:	429d      	cmp	r5, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	d30a      	bcc.n	800b8e0 <quorem+0x100>
 800b8ca:	613c      	str	r4, [r7, #16]
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	b003      	add	sp, #12
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	6812      	ldr	r2, [r2, #0]
 800b8d6:	3b04      	subs	r3, #4
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	d1ce      	bne.n	800b87a <quorem+0x9a>
 800b8dc:	3c01      	subs	r4, #1
 800b8de:	e7c9      	b.n	800b874 <quorem+0x94>
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	3b04      	subs	r3, #4
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1f0      	bne.n	800b8ca <quorem+0xea>
 800b8e8:	3c01      	subs	r4, #1
 800b8ea:	e7eb      	b.n	800b8c4 <quorem+0xe4>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	e7ee      	b.n	800b8ce <quorem+0xee>

0800b8f0 <_dtoa_r>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	ed2d 8b04 	vpush	{d8-d9}
 800b8f8:	69c5      	ldr	r5, [r0, #28]
 800b8fa:	b093      	sub	sp, #76	; 0x4c
 800b8fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b900:	ec57 6b10 	vmov	r6, r7, d0
 800b904:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b908:	9107      	str	r1, [sp, #28]
 800b90a:	4604      	mov	r4, r0
 800b90c:	920a      	str	r2, [sp, #40]	; 0x28
 800b90e:	930d      	str	r3, [sp, #52]	; 0x34
 800b910:	b975      	cbnz	r5, 800b930 <_dtoa_r+0x40>
 800b912:	2010      	movs	r0, #16
 800b914:	f000 fe2a 	bl	800c56c <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	61e0      	str	r0, [r4, #28]
 800b91c:	b920      	cbnz	r0, 800b928 <_dtoa_r+0x38>
 800b91e:	4bae      	ldr	r3, [pc, #696]	; (800bbd8 <_dtoa_r+0x2e8>)
 800b920:	21ef      	movs	r1, #239	; 0xef
 800b922:	48ae      	ldr	r0, [pc, #696]	; (800bbdc <_dtoa_r+0x2ec>)
 800b924:	f002 fe4c 	bl	800e5c0 <__assert_func>
 800b928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b92c:	6005      	str	r5, [r0, #0]
 800b92e:	60c5      	str	r5, [r0, #12]
 800b930:	69e3      	ldr	r3, [r4, #28]
 800b932:	6819      	ldr	r1, [r3, #0]
 800b934:	b151      	cbz	r1, 800b94c <_dtoa_r+0x5c>
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	604a      	str	r2, [r1, #4]
 800b93a:	2301      	movs	r3, #1
 800b93c:	4093      	lsls	r3, r2
 800b93e:	608b      	str	r3, [r1, #8]
 800b940:	4620      	mov	r0, r4
 800b942:	f000 ff07 	bl	800c754 <_Bfree>
 800b946:	69e3      	ldr	r3, [r4, #28]
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	1e3b      	subs	r3, r7, #0
 800b94e:	bfbb      	ittet	lt
 800b950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b954:	9303      	strlt	r3, [sp, #12]
 800b956:	2300      	movge	r3, #0
 800b958:	2201      	movlt	r2, #1
 800b95a:	bfac      	ite	ge
 800b95c:	f8c8 3000 	strge.w	r3, [r8]
 800b960:	f8c8 2000 	strlt.w	r2, [r8]
 800b964:	4b9e      	ldr	r3, [pc, #632]	; (800bbe0 <_dtoa_r+0x2f0>)
 800b966:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b96a:	ea33 0308 	bics.w	r3, r3, r8
 800b96e:	d11b      	bne.n	800b9a8 <_dtoa_r+0xb8>
 800b970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b972:	f242 730f 	movw	r3, #9999	; 0x270f
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b97c:	4333      	orrs	r3, r6
 800b97e:	f000 8593 	beq.w	800c4a8 <_dtoa_r+0xbb8>
 800b982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b984:	b963      	cbnz	r3, 800b9a0 <_dtoa_r+0xb0>
 800b986:	4b97      	ldr	r3, [pc, #604]	; (800bbe4 <_dtoa_r+0x2f4>)
 800b988:	e027      	b.n	800b9da <_dtoa_r+0xea>
 800b98a:	4b97      	ldr	r3, [pc, #604]	; (800bbe8 <_dtoa_r+0x2f8>)
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	9800      	ldr	r0, [sp, #0]
 800b996:	b013      	add	sp, #76	; 0x4c
 800b998:	ecbd 8b04 	vpop	{d8-d9}
 800b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a0:	4b90      	ldr	r3, [pc, #576]	; (800bbe4 <_dtoa_r+0x2f4>)
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	3303      	adds	r3, #3
 800b9a6:	e7f3      	b.n	800b990 <_dtoa_r+0xa0>
 800b9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	ec51 0b17 	vmov	r0, r1, d7
 800b9b2:	eeb0 8a47 	vmov.f32	s16, s14
 800b9b6:	eef0 8a67 	vmov.f32	s17, s15
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f7f5 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9c0:	4681      	mov	r9, r0
 800b9c2:	b160      	cbz	r0, 800b9de <_dtoa_r+0xee>
 800b9c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8568 	beq.w	800c4a2 <_dtoa_r+0xbb2>
 800b9d2:	4b86      	ldr	r3, [pc, #536]	; (800bbec <_dtoa_r+0x2fc>)
 800b9d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	e7da      	b.n	800b994 <_dtoa_r+0xa4>
 800b9de:	aa10      	add	r2, sp, #64	; 0x40
 800b9e0:	a911      	add	r1, sp, #68	; 0x44
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b9e8:	eef0 0a68 	vmov.f32	s1, s17
 800b9ec:	f001 fa4e 	bl	800ce8c <__d2b>
 800b9f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	d07f      	beq.n	800bafa <_dtoa_r+0x20a>
 800b9fa:	ee18 3a90 	vmov	r3, s17
 800b9fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba06:	ec51 0b18 	vmov	r0, r1, d8
 800ba0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba16:	4619      	mov	r1, r3
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4b75      	ldr	r3, [pc, #468]	; (800bbf0 <_dtoa_r+0x300>)
 800ba1c:	f7f4 fc34 	bl	8000288 <__aeabi_dsub>
 800ba20:	a367      	add	r3, pc, #412	; (adr r3, 800bbc0 <_dtoa_r+0x2d0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fde7 	bl	80005f8 <__aeabi_dmul>
 800ba2a:	a367      	add	r3, pc, #412	; (adr r3, 800bbc8 <_dtoa_r+0x2d8>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f7f4 fc2c 	bl	800028c <__adddf3>
 800ba34:	4606      	mov	r6, r0
 800ba36:	4628      	mov	r0, r5
 800ba38:	460f      	mov	r7, r1
 800ba3a:	f7f4 fd73 	bl	8000524 <__aeabi_i2d>
 800ba3e:	a364      	add	r3, pc, #400	; (adr r3, 800bbd0 <_dtoa_r+0x2e0>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f4 fc1c 	bl	800028c <__adddf3>
 800ba54:	4606      	mov	r6, r0
 800ba56:	460f      	mov	r7, r1
 800ba58:	f7f5 f87e 	bl	8000b58 <__aeabi_d2iz>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4683      	mov	fp, r0
 800ba60:	2300      	movs	r3, #0
 800ba62:	4630      	mov	r0, r6
 800ba64:	4639      	mov	r1, r7
 800ba66:	f7f5 f839 	bl	8000adc <__aeabi_dcmplt>
 800ba6a:	b148      	cbz	r0, 800ba80 <_dtoa_r+0x190>
 800ba6c:	4658      	mov	r0, fp
 800ba6e:	f7f4 fd59 	bl	8000524 <__aeabi_i2d>
 800ba72:	4632      	mov	r2, r6
 800ba74:	463b      	mov	r3, r7
 800ba76:	f7f5 f827 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba7a:	b908      	cbnz	r0, 800ba80 <_dtoa_r+0x190>
 800ba7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba80:	f1bb 0f16 	cmp.w	fp, #22
 800ba84:	d857      	bhi.n	800bb36 <_dtoa_r+0x246>
 800ba86:	4b5b      	ldr	r3, [pc, #364]	; (800bbf4 <_dtoa_r+0x304>)
 800ba88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	ec51 0b18 	vmov	r0, r1, d8
 800ba94:	f7f5 f822 	bl	8000adc <__aeabi_dcmplt>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d04e      	beq.n	800bb3a <_dtoa_r+0x24a>
 800ba9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800baa0:	2300      	movs	r3, #0
 800baa2:	930c      	str	r3, [sp, #48]	; 0x30
 800baa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baa6:	1b5b      	subs	r3, r3, r5
 800baa8:	1e5a      	subs	r2, r3, #1
 800baaa:	bf45      	ittet	mi
 800baac:	f1c3 0301 	rsbmi	r3, r3, #1
 800bab0:	9305      	strmi	r3, [sp, #20]
 800bab2:	2300      	movpl	r3, #0
 800bab4:	2300      	movmi	r3, #0
 800bab6:	9206      	str	r2, [sp, #24]
 800bab8:	bf54      	ite	pl
 800baba:	9305      	strpl	r3, [sp, #20]
 800babc:	9306      	strmi	r3, [sp, #24]
 800babe:	f1bb 0f00 	cmp.w	fp, #0
 800bac2:	db3c      	blt.n	800bb3e <_dtoa_r+0x24e>
 800bac4:	9b06      	ldr	r3, [sp, #24]
 800bac6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800baca:	445b      	add	r3, fp
 800bacc:	9306      	str	r3, [sp, #24]
 800bace:	2300      	movs	r3, #0
 800bad0:	9308      	str	r3, [sp, #32]
 800bad2:	9b07      	ldr	r3, [sp, #28]
 800bad4:	2b09      	cmp	r3, #9
 800bad6:	d868      	bhi.n	800bbaa <_dtoa_r+0x2ba>
 800bad8:	2b05      	cmp	r3, #5
 800bada:	bfc4      	itt	gt
 800badc:	3b04      	subgt	r3, #4
 800bade:	9307      	strgt	r3, [sp, #28]
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	f1a3 0302 	sub.w	r3, r3, #2
 800bae6:	bfcc      	ite	gt
 800bae8:	2500      	movgt	r5, #0
 800baea:	2501      	movle	r5, #1
 800baec:	2b03      	cmp	r3, #3
 800baee:	f200 8085 	bhi.w	800bbfc <_dtoa_r+0x30c>
 800baf2:	e8df f003 	tbb	[pc, r3]
 800baf6:	3b2e      	.short	0x3b2e
 800baf8:	5839      	.short	0x5839
 800bafa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bafe:	441d      	add	r5, r3
 800bb00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	bfc1      	itttt	gt
 800bb08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb18:	bfd6      	itet	le
 800bb1a:	f1c3 0320 	rsble	r3, r3, #32
 800bb1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb22:	fa06 f003 	lslle.w	r0, r6, r3
 800bb26:	f7f4 fced 	bl	8000504 <__aeabi_ui2d>
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb30:	3d01      	subs	r5, #1
 800bb32:	920e      	str	r2, [sp, #56]	; 0x38
 800bb34:	e76f      	b.n	800ba16 <_dtoa_r+0x126>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e7b3      	b.n	800baa2 <_dtoa_r+0x1b2>
 800bb3a:	900c      	str	r0, [sp, #48]	; 0x30
 800bb3c:	e7b2      	b.n	800baa4 <_dtoa_r+0x1b4>
 800bb3e:	9b05      	ldr	r3, [sp, #20]
 800bb40:	eba3 030b 	sub.w	r3, r3, fp
 800bb44:	9305      	str	r3, [sp, #20]
 800bb46:	f1cb 0300 	rsb	r3, fp, #0
 800bb4a:	9308      	str	r3, [sp, #32]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb50:	e7bf      	b.n	800bad2 <_dtoa_r+0x1e2>
 800bb52:	2300      	movs	r3, #0
 800bb54:	9309      	str	r3, [sp, #36]	; 0x24
 800bb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc52      	bgt.n	800bc02 <_dtoa_r+0x312>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	461a      	mov	r2, r3
 800bb64:	920a      	str	r2, [sp, #40]	; 0x28
 800bb66:	e00b      	b.n	800bb80 <_dtoa_r+0x290>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7f3      	b.n	800bb54 <_dtoa_r+0x264>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb72:	445b      	add	r3, fp
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	3301      	adds	r3, #1
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	bfb8      	it	lt
 800bb7e:	2301      	movlt	r3, #1
 800bb80:	69e0      	ldr	r0, [r4, #28]
 800bb82:	2100      	movs	r1, #0
 800bb84:	2204      	movs	r2, #4
 800bb86:	f102 0614 	add.w	r6, r2, #20
 800bb8a:	429e      	cmp	r6, r3
 800bb8c:	d93d      	bls.n	800bc0a <_dtoa_r+0x31a>
 800bb8e:	6041      	str	r1, [r0, #4]
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 fd9f 	bl	800c6d4 <_Balloc>
 800bb96:	9000      	str	r0, [sp, #0]
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d139      	bne.n	800bc10 <_dtoa_r+0x320>
 800bb9c:	4b16      	ldr	r3, [pc, #88]	; (800bbf8 <_dtoa_r+0x308>)
 800bb9e:	4602      	mov	r2, r0
 800bba0:	f240 11af 	movw	r1, #431	; 0x1af
 800bba4:	e6bd      	b.n	800b922 <_dtoa_r+0x32>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e7e1      	b.n	800bb6e <_dtoa_r+0x27e>
 800bbaa:	2501      	movs	r5, #1
 800bbac:	2300      	movs	r3, #0
 800bbae:	9307      	str	r3, [sp, #28]
 800bbb0:	9509      	str	r5, [sp, #36]	; 0x24
 800bbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	9304      	str	r3, [sp, #16]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2312      	movs	r3, #18
 800bbbe:	e7d1      	b.n	800bb64 <_dtoa_r+0x274>
 800bbc0:	636f4361 	.word	0x636f4361
 800bbc4:	3fd287a7 	.word	0x3fd287a7
 800bbc8:	8b60c8b3 	.word	0x8b60c8b3
 800bbcc:	3fc68a28 	.word	0x3fc68a28
 800bbd0:	509f79fb 	.word	0x509f79fb
 800bbd4:	3fd34413 	.word	0x3fd34413
 800bbd8:	0800f062 	.word	0x0800f062
 800bbdc:	0800f079 	.word	0x0800f079
 800bbe0:	7ff00000 	.word	0x7ff00000
 800bbe4:	0800f05e 	.word	0x0800f05e
 800bbe8:	0800f055 	.word	0x0800f055
 800bbec:	0800f02d 	.word	0x0800f02d
 800bbf0:	3ff80000 	.word	0x3ff80000
 800bbf4:	0800f168 	.word	0x0800f168
 800bbf8:	0800f0d1 	.word	0x0800f0d1
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	e7d7      	b.n	800bbb2 <_dtoa_r+0x2c2>
 800bc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	9304      	str	r3, [sp, #16]
 800bc08:	e7ba      	b.n	800bb80 <_dtoa_r+0x290>
 800bc0a:	3101      	adds	r1, #1
 800bc0c:	0052      	lsls	r2, r2, #1
 800bc0e:	e7ba      	b.n	800bb86 <_dtoa_r+0x296>
 800bc10:	69e3      	ldr	r3, [r4, #28]
 800bc12:	9a00      	ldr	r2, [sp, #0]
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	2b0e      	cmp	r3, #14
 800bc1a:	f200 80a8 	bhi.w	800bd6e <_dtoa_r+0x47e>
 800bc1e:	2d00      	cmp	r5, #0
 800bc20:	f000 80a5 	beq.w	800bd6e <_dtoa_r+0x47e>
 800bc24:	f1bb 0f00 	cmp.w	fp, #0
 800bc28:	dd38      	ble.n	800bc9c <_dtoa_r+0x3ac>
 800bc2a:	4bc0      	ldr	r3, [pc, #768]	; (800bf2c <_dtoa_r+0x63c>)
 800bc2c:	f00b 020f 	and.w	r2, fp, #15
 800bc30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bc40:	d019      	beq.n	800bc76 <_dtoa_r+0x386>
 800bc42:	4bbb      	ldr	r3, [pc, #748]	; (800bf30 <_dtoa_r+0x640>)
 800bc44:	ec51 0b18 	vmov	r0, r1, d8
 800bc48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc4c:	f7f4 fdfe 	bl	800084c <__aeabi_ddiv>
 800bc50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc54:	f008 080f 	and.w	r8, r8, #15
 800bc58:	2503      	movs	r5, #3
 800bc5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf30 <_dtoa_r+0x640>
 800bc5e:	f1b8 0f00 	cmp.w	r8, #0
 800bc62:	d10a      	bne.n	800bc7a <_dtoa_r+0x38a>
 800bc64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	f7f4 fdee 	bl	800084c <__aeabi_ddiv>
 800bc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc74:	e02b      	b.n	800bcce <_dtoa_r+0x3de>
 800bc76:	2502      	movs	r5, #2
 800bc78:	e7ef      	b.n	800bc5a <_dtoa_r+0x36a>
 800bc7a:	f018 0f01 	tst.w	r8, #1
 800bc7e:	d008      	beq.n	800bc92 <_dtoa_r+0x3a2>
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	3501      	adds	r5, #1
 800bc8e:	4606      	mov	r6, r0
 800bc90:	460f      	mov	r7, r1
 800bc92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc96:	f109 0908 	add.w	r9, r9, #8
 800bc9a:	e7e0      	b.n	800bc5e <_dtoa_r+0x36e>
 800bc9c:	f000 809f 	beq.w	800bdde <_dtoa_r+0x4ee>
 800bca0:	f1cb 0600 	rsb	r6, fp, #0
 800bca4:	4ba1      	ldr	r3, [pc, #644]	; (800bf2c <_dtoa_r+0x63c>)
 800bca6:	4fa2      	ldr	r7, [pc, #648]	; (800bf30 <_dtoa_r+0x640>)
 800bca8:	f006 020f 	and.w	r2, r6, #15
 800bcac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb4:	ec51 0b18 	vmov	r0, r1, d8
 800bcb8:	f7f4 fc9e 	bl	80005f8 <__aeabi_dmul>
 800bcbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc0:	1136      	asrs	r6, r6, #4
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2502      	movs	r5, #2
 800bcc6:	2e00      	cmp	r6, #0
 800bcc8:	d17e      	bne.n	800bdc8 <_dtoa_r+0x4d8>
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1d0      	bne.n	800bc70 <_dtoa_r+0x380>
 800bcce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8084 	beq.w	800bde2 <_dtoa_r+0x4f2>
 800bcda:	4b96      	ldr	r3, [pc, #600]	; (800bf34 <_dtoa_r+0x644>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fefb 	bl	8000adc <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d07b      	beq.n	800bde2 <_dtoa_r+0x4f2>
 800bcea:	9b04      	ldr	r3, [sp, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d078      	beq.n	800bde2 <_dtoa_r+0x4f2>
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd39      	ble.n	800bd6a <_dtoa_r+0x47a>
 800bcf6:	4b90      	ldr	r3, [pc, #576]	; (800bf38 <_dtoa_r+0x648>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd06:	9e01      	ldr	r6, [sp, #4]
 800bd08:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd12:	4628      	mov	r0, r5
 800bd14:	f7f4 fc06 	bl	8000524 <__aeabi_i2d>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	4b86      	ldr	r3, [pc, #536]	; (800bf3c <_dtoa_r+0x64c>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	f7f4 fab2 	bl	800028c <__adddf3>
 800bd28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	2e00      	cmp	r6, #0
 800bd34:	d158      	bne.n	800bde8 <_dtoa_r+0x4f8>
 800bd36:	4b82      	ldr	r3, [pc, #520]	; (800bf40 <_dtoa_r+0x650>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	f7f4 faa3 	bl	8000288 <__aeabi_dsub>
 800bd42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd46:	4680      	mov	r8, r0
 800bd48:	4689      	mov	r9, r1
 800bd4a:	f7f4 fee5 	bl	8000b18 <__aeabi_dcmpgt>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f040 8296 	bne.w	800c280 <_dtoa_r+0x990>
 800bd54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd58:	4640      	mov	r0, r8
 800bd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd5e:	4649      	mov	r1, r9
 800bd60:	f7f4 febc 	bl	8000adc <__aeabi_dcmplt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f040 8289 	bne.w	800c27c <_dtoa_r+0x98c>
 800bd6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f2c0 814e 	blt.w	800c012 <_dtoa_r+0x722>
 800bd76:	f1bb 0f0e 	cmp.w	fp, #14
 800bd7a:	f300 814a 	bgt.w	800c012 <_dtoa_r+0x722>
 800bd7e:	4b6b      	ldr	r3, [pc, #428]	; (800bf2c <_dtoa_r+0x63c>)
 800bd80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f280 80dc 	bge.w	800bf48 <_dtoa_r+0x658>
 800bd90:	9b04      	ldr	r3, [sp, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f300 80d8 	bgt.w	800bf48 <_dtoa_r+0x658>
 800bd98:	f040 826f 	bne.w	800c27a <_dtoa_r+0x98a>
 800bd9c:	4b68      	ldr	r3, [pc, #416]	; (800bf40 <_dtoa_r+0x650>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 fc28 	bl	80005f8 <__aeabi_dmul>
 800bda8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdac:	f7f4 feaa 	bl	8000b04 <__aeabi_dcmpge>
 800bdb0:	9e04      	ldr	r6, [sp, #16]
 800bdb2:	4637      	mov	r7, r6
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f040 8245 	bne.w	800c244 <_dtoa_r+0x954>
 800bdba:	9d00      	ldr	r5, [sp, #0]
 800bdbc:	2331      	movs	r3, #49	; 0x31
 800bdbe:	f805 3b01 	strb.w	r3, [r5], #1
 800bdc2:	f10b 0b01 	add.w	fp, fp, #1
 800bdc6:	e241      	b.n	800c24c <_dtoa_r+0x95c>
 800bdc8:	07f2      	lsls	r2, r6, #31
 800bdca:	d505      	bpl.n	800bdd8 <_dtoa_r+0x4e8>
 800bdcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	1076      	asrs	r6, r6, #1
 800bdda:	3708      	adds	r7, #8
 800bddc:	e773      	b.n	800bcc6 <_dtoa_r+0x3d6>
 800bdde:	2502      	movs	r5, #2
 800bde0:	e775      	b.n	800bcce <_dtoa_r+0x3de>
 800bde2:	9e04      	ldr	r6, [sp, #16]
 800bde4:	465f      	mov	r7, fp
 800bde6:	e792      	b.n	800bd0e <_dtoa_r+0x41e>
 800bde8:	9900      	ldr	r1, [sp, #0]
 800bdea:	4b50      	ldr	r3, [pc, #320]	; (800bf2c <_dtoa_r+0x63c>)
 800bdec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdf0:	4431      	add	r1, r6
 800bdf2:	9102      	str	r1, [sp, #8]
 800bdf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdf6:	eeb0 9a47 	vmov.f32	s18, s14
 800bdfa:	eef0 9a67 	vmov.f32	s19, s15
 800bdfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be06:	2900      	cmp	r1, #0
 800be08:	d044      	beq.n	800be94 <_dtoa_r+0x5a4>
 800be0a:	494e      	ldr	r1, [pc, #312]	; (800bf44 <_dtoa_r+0x654>)
 800be0c:	2000      	movs	r0, #0
 800be0e:	f7f4 fd1d 	bl	800084c <__aeabi_ddiv>
 800be12:	ec53 2b19 	vmov	r2, r3, d9
 800be16:	f7f4 fa37 	bl	8000288 <__aeabi_dsub>
 800be1a:	9d00      	ldr	r5, [sp, #0]
 800be1c:	ec41 0b19 	vmov	d9, r0, r1
 800be20:	4649      	mov	r1, r9
 800be22:	4640      	mov	r0, r8
 800be24:	f7f4 fe98 	bl	8000b58 <__aeabi_d2iz>
 800be28:	4606      	mov	r6, r0
 800be2a:	f7f4 fb7b 	bl	8000524 <__aeabi_i2d>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4640      	mov	r0, r8
 800be34:	4649      	mov	r1, r9
 800be36:	f7f4 fa27 	bl	8000288 <__aeabi_dsub>
 800be3a:	3630      	adds	r6, #48	; 0x30
 800be3c:	f805 6b01 	strb.w	r6, [r5], #1
 800be40:	ec53 2b19 	vmov	r2, r3, d9
 800be44:	4680      	mov	r8, r0
 800be46:	4689      	mov	r9, r1
 800be48:	f7f4 fe48 	bl	8000adc <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d164      	bne.n	800bf1a <_dtoa_r+0x62a>
 800be50:	4642      	mov	r2, r8
 800be52:	464b      	mov	r3, r9
 800be54:	4937      	ldr	r1, [pc, #220]	; (800bf34 <_dtoa_r+0x644>)
 800be56:	2000      	movs	r0, #0
 800be58:	f7f4 fa16 	bl	8000288 <__aeabi_dsub>
 800be5c:	ec53 2b19 	vmov	r2, r3, d9
 800be60:	f7f4 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800be64:	2800      	cmp	r0, #0
 800be66:	f040 80b6 	bne.w	800bfd6 <_dtoa_r+0x6e6>
 800be6a:	9b02      	ldr	r3, [sp, #8]
 800be6c:	429d      	cmp	r5, r3
 800be6e:	f43f af7c 	beq.w	800bd6a <_dtoa_r+0x47a>
 800be72:	4b31      	ldr	r3, [pc, #196]	; (800bf38 <_dtoa_r+0x648>)
 800be74:	ec51 0b19 	vmov	r0, r1, d9
 800be78:	2200      	movs	r2, #0
 800be7a:	f7f4 fbbd 	bl	80005f8 <__aeabi_dmul>
 800be7e:	4b2e      	ldr	r3, [pc, #184]	; (800bf38 <_dtoa_r+0x648>)
 800be80:	ec41 0b19 	vmov	d9, r0, r1
 800be84:	2200      	movs	r2, #0
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 fbb5 	bl	80005f8 <__aeabi_dmul>
 800be8e:	4680      	mov	r8, r0
 800be90:	4689      	mov	r9, r1
 800be92:	e7c5      	b.n	800be20 <_dtoa_r+0x530>
 800be94:	ec51 0b17 	vmov	r0, r1, d7
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	9b02      	ldr	r3, [sp, #8]
 800be9e:	9d00      	ldr	r5, [sp, #0]
 800bea0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bea2:	ec41 0b19 	vmov	d9, r0, r1
 800bea6:	4649      	mov	r1, r9
 800bea8:	4640      	mov	r0, r8
 800beaa:	f7f4 fe55 	bl	8000b58 <__aeabi_d2iz>
 800beae:	4606      	mov	r6, r0
 800beb0:	f7f4 fb38 	bl	8000524 <__aeabi_i2d>
 800beb4:	3630      	adds	r6, #48	; 0x30
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	f7f4 f9e3 	bl	8000288 <__aeabi_dsub>
 800bec2:	f805 6b01 	strb.w	r6, [r5], #1
 800bec6:	9b02      	ldr	r3, [sp, #8]
 800bec8:	429d      	cmp	r5, r3
 800beca:	4680      	mov	r8, r0
 800becc:	4689      	mov	r9, r1
 800bece:	f04f 0200 	mov.w	r2, #0
 800bed2:	d124      	bne.n	800bf1e <_dtoa_r+0x62e>
 800bed4:	4b1b      	ldr	r3, [pc, #108]	; (800bf44 <_dtoa_r+0x654>)
 800bed6:	ec51 0b19 	vmov	r0, r1, d9
 800beda:	f7f4 f9d7 	bl	800028c <__adddf3>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4640      	mov	r0, r8
 800bee4:	4649      	mov	r1, r9
 800bee6:	f7f4 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 800beea:	2800      	cmp	r0, #0
 800beec:	d173      	bne.n	800bfd6 <_dtoa_r+0x6e6>
 800beee:	ec53 2b19 	vmov	r2, r3, d9
 800bef2:	4914      	ldr	r1, [pc, #80]	; (800bf44 <_dtoa_r+0x654>)
 800bef4:	2000      	movs	r0, #0
 800bef6:	f7f4 f9c7 	bl	8000288 <__aeabi_dsub>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f af2f 	beq.w	800bd6a <_dtoa_r+0x47a>
 800bf0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf0e:	1e6b      	subs	r3, r5, #1
 800bf10:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf16:	2b30      	cmp	r3, #48	; 0x30
 800bf18:	d0f8      	beq.n	800bf0c <_dtoa_r+0x61c>
 800bf1a:	46bb      	mov	fp, r7
 800bf1c:	e04a      	b.n	800bfb4 <_dtoa_r+0x6c4>
 800bf1e:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <_dtoa_r+0x648>)
 800bf20:	f7f4 fb6a 	bl	80005f8 <__aeabi_dmul>
 800bf24:	4680      	mov	r8, r0
 800bf26:	4689      	mov	r9, r1
 800bf28:	e7bd      	b.n	800bea6 <_dtoa_r+0x5b6>
 800bf2a:	bf00      	nop
 800bf2c:	0800f168 	.word	0x0800f168
 800bf30:	0800f140 	.word	0x0800f140
 800bf34:	3ff00000 	.word	0x3ff00000
 800bf38:	40240000 	.word	0x40240000
 800bf3c:	401c0000 	.word	0x401c0000
 800bf40:	40140000 	.word	0x40140000
 800bf44:	3fe00000 	.word	0x3fe00000
 800bf48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf4c:	9d00      	ldr	r5, [sp, #0]
 800bf4e:	4642      	mov	r2, r8
 800bf50:	464b      	mov	r3, r9
 800bf52:	4630      	mov	r0, r6
 800bf54:	4639      	mov	r1, r7
 800bf56:	f7f4 fc79 	bl	800084c <__aeabi_ddiv>
 800bf5a:	f7f4 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800bf5e:	9001      	str	r0, [sp, #4]
 800bf60:	f7f4 fae0 	bl	8000524 <__aeabi_i2d>
 800bf64:	4642      	mov	r2, r8
 800bf66:	464b      	mov	r3, r9
 800bf68:	f7f4 fb46 	bl	80005f8 <__aeabi_dmul>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f988 	bl	8000288 <__aeabi_dsub>
 800bf78:	9e01      	ldr	r6, [sp, #4]
 800bf7a:	9f04      	ldr	r7, [sp, #16]
 800bf7c:	3630      	adds	r6, #48	; 0x30
 800bf7e:	f805 6b01 	strb.w	r6, [r5], #1
 800bf82:	9e00      	ldr	r6, [sp, #0]
 800bf84:	1bae      	subs	r6, r5, r6
 800bf86:	42b7      	cmp	r7, r6
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	d134      	bne.n	800bff8 <_dtoa_r+0x708>
 800bf8e:	f7f4 f97d 	bl	800028c <__adddf3>
 800bf92:	4642      	mov	r2, r8
 800bf94:	464b      	mov	r3, r9
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	f7f4 fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 800bf9e:	b9c8      	cbnz	r0, 800bfd4 <_dtoa_r+0x6e4>
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	f7f4 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfac:	b110      	cbz	r0, 800bfb4 <_dtoa_r+0x6c4>
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	07db      	lsls	r3, r3, #31
 800bfb2:	d40f      	bmi.n	800bfd4 <_dtoa_r+0x6e4>
 800bfb4:	4651      	mov	r1, sl
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 fbcc 	bl	800c754 <_Bfree>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfc0:	702b      	strb	r3, [r5, #0]
 800bfc2:	f10b 0301 	add.w	r3, fp, #1
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f43f ace2 	beq.w	800b994 <_dtoa_r+0xa4>
 800bfd0:	601d      	str	r5, [r3, #0]
 800bfd2:	e4df      	b.n	800b994 <_dtoa_r+0xa4>
 800bfd4:	465f      	mov	r7, fp
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	461d      	mov	r5, r3
 800bfda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfde:	2a39      	cmp	r2, #57	; 0x39
 800bfe0:	d106      	bne.n	800bff0 <_dtoa_r+0x700>
 800bfe2:	9a00      	ldr	r2, [sp, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d1f7      	bne.n	800bfd8 <_dtoa_r+0x6e8>
 800bfe8:	9900      	ldr	r1, [sp, #0]
 800bfea:	2230      	movs	r2, #48	; 0x30
 800bfec:	3701      	adds	r7, #1
 800bfee:	700a      	strb	r2, [r1, #0]
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	3201      	adds	r2, #1
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	e790      	b.n	800bf1a <_dtoa_r+0x62a>
 800bff8:	4ba3      	ldr	r3, [pc, #652]	; (800c288 <_dtoa_r+0x998>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7f4 fafc 	bl	80005f8 <__aeabi_dmul>
 800c000:	2200      	movs	r2, #0
 800c002:	2300      	movs	r3, #0
 800c004:	4606      	mov	r6, r0
 800c006:	460f      	mov	r7, r1
 800c008:	f7f4 fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d09e      	beq.n	800bf4e <_dtoa_r+0x65e>
 800c010:	e7d0      	b.n	800bfb4 <_dtoa_r+0x6c4>
 800c012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c014:	2a00      	cmp	r2, #0
 800c016:	f000 80ca 	beq.w	800c1ae <_dtoa_r+0x8be>
 800c01a:	9a07      	ldr	r2, [sp, #28]
 800c01c:	2a01      	cmp	r2, #1
 800c01e:	f300 80ad 	bgt.w	800c17c <_dtoa_r+0x88c>
 800c022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c024:	2a00      	cmp	r2, #0
 800c026:	f000 80a5 	beq.w	800c174 <_dtoa_r+0x884>
 800c02a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c02e:	9e08      	ldr	r6, [sp, #32]
 800c030:	9d05      	ldr	r5, [sp, #20]
 800c032:	9a05      	ldr	r2, [sp, #20]
 800c034:	441a      	add	r2, r3
 800c036:	9205      	str	r2, [sp, #20]
 800c038:	9a06      	ldr	r2, [sp, #24]
 800c03a:	2101      	movs	r1, #1
 800c03c:	441a      	add	r2, r3
 800c03e:	4620      	mov	r0, r4
 800c040:	9206      	str	r2, [sp, #24]
 800c042:	f000 fc87 	bl	800c954 <__i2b>
 800c046:	4607      	mov	r7, r0
 800c048:	b165      	cbz	r5, 800c064 <_dtoa_r+0x774>
 800c04a:	9b06      	ldr	r3, [sp, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd09      	ble.n	800c064 <_dtoa_r+0x774>
 800c050:	42ab      	cmp	r3, r5
 800c052:	9a05      	ldr	r2, [sp, #20]
 800c054:	bfa8      	it	ge
 800c056:	462b      	movge	r3, r5
 800c058:	1ad2      	subs	r2, r2, r3
 800c05a:	9205      	str	r2, [sp, #20]
 800c05c:	9a06      	ldr	r2, [sp, #24]
 800c05e:	1aed      	subs	r5, r5, r3
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	9306      	str	r3, [sp, #24]
 800c064:	9b08      	ldr	r3, [sp, #32]
 800c066:	b1f3      	cbz	r3, 800c0a6 <_dtoa_r+0x7b6>
 800c068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 80a3 	beq.w	800c1b6 <_dtoa_r+0x8c6>
 800c070:	2e00      	cmp	r6, #0
 800c072:	dd10      	ble.n	800c096 <_dtoa_r+0x7a6>
 800c074:	4639      	mov	r1, r7
 800c076:	4632      	mov	r2, r6
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fd2b 	bl	800cad4 <__pow5mult>
 800c07e:	4652      	mov	r2, sl
 800c080:	4601      	mov	r1, r0
 800c082:	4607      	mov	r7, r0
 800c084:	4620      	mov	r0, r4
 800c086:	f000 fc7b 	bl	800c980 <__multiply>
 800c08a:	4651      	mov	r1, sl
 800c08c:	4680      	mov	r8, r0
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fb60 	bl	800c754 <_Bfree>
 800c094:	46c2      	mov	sl, r8
 800c096:	9b08      	ldr	r3, [sp, #32]
 800c098:	1b9a      	subs	r2, r3, r6
 800c09a:	d004      	beq.n	800c0a6 <_dtoa_r+0x7b6>
 800c09c:	4651      	mov	r1, sl
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 fd18 	bl	800cad4 <__pow5mult>
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 fc53 	bl	800c954 <__i2b>
 800c0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	f340 8081 	ble.w	800c1ba <_dtoa_r+0x8ca>
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fd09 	bl	800cad4 <__pow5mult>
 800c0c2:	9b07      	ldr	r3, [sp, #28]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	dd7a      	ble.n	800c1c0 <_dtoa_r+0x8d0>
 800c0ca:	f04f 0800 	mov.w	r8, #0
 800c0ce:	6933      	ldr	r3, [r6, #16]
 800c0d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0d4:	6918      	ldr	r0, [r3, #16]
 800c0d6:	f000 fbef 	bl	800c8b8 <__hi0bits>
 800c0da:	f1c0 0020 	rsb	r0, r0, #32
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	4418      	add	r0, r3
 800c0e2:	f010 001f 	ands.w	r0, r0, #31
 800c0e6:	f000 8094 	beq.w	800c212 <_dtoa_r+0x922>
 800c0ea:	f1c0 0320 	rsb	r3, r0, #32
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	f340 8085 	ble.w	800c1fe <_dtoa_r+0x90e>
 800c0f4:	9b05      	ldr	r3, [sp, #20]
 800c0f6:	f1c0 001c 	rsb	r0, r0, #28
 800c0fa:	4403      	add	r3, r0
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	4403      	add	r3, r0
 800c102:	4405      	add	r5, r0
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dd05      	ble.n	800c118 <_dtoa_r+0x828>
 800c10c:	4651      	mov	r1, sl
 800c10e:	461a      	mov	r2, r3
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fd39 	bl	800cb88 <__lshift>
 800c116:	4682      	mov	sl, r0
 800c118:	9b06      	ldr	r3, [sp, #24]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd05      	ble.n	800c12a <_dtoa_r+0x83a>
 800c11e:	4631      	mov	r1, r6
 800c120:	461a      	mov	r2, r3
 800c122:	4620      	mov	r0, r4
 800c124:	f000 fd30 	bl	800cb88 <__lshift>
 800c128:	4606      	mov	r6, r0
 800c12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d072      	beq.n	800c216 <_dtoa_r+0x926>
 800c130:	4631      	mov	r1, r6
 800c132:	4650      	mov	r0, sl
 800c134:	f000 fd94 	bl	800cc60 <__mcmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	da6c      	bge.n	800c216 <_dtoa_r+0x926>
 800c13c:	2300      	movs	r3, #0
 800c13e:	4651      	mov	r1, sl
 800c140:	220a      	movs	r2, #10
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fb28 	bl	800c798 <__multadd>
 800c148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c14e:	4682      	mov	sl, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 81b0 	beq.w	800c4b6 <_dtoa_r+0xbc6>
 800c156:	2300      	movs	r3, #0
 800c158:	4639      	mov	r1, r7
 800c15a:	220a      	movs	r2, #10
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fb1b 	bl	800c798 <__multadd>
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	4607      	mov	r7, r0
 800c168:	f300 8096 	bgt.w	800c298 <_dtoa_r+0x9a8>
 800c16c:	9b07      	ldr	r3, [sp, #28]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	dc59      	bgt.n	800c226 <_dtoa_r+0x936>
 800c172:	e091      	b.n	800c298 <_dtoa_r+0x9a8>
 800c174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c17a:	e758      	b.n	800c02e <_dtoa_r+0x73e>
 800c17c:	9b04      	ldr	r3, [sp, #16]
 800c17e:	1e5e      	subs	r6, r3, #1
 800c180:	9b08      	ldr	r3, [sp, #32]
 800c182:	42b3      	cmp	r3, r6
 800c184:	bfbf      	itttt	lt
 800c186:	9b08      	ldrlt	r3, [sp, #32]
 800c188:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c18a:	9608      	strlt	r6, [sp, #32]
 800c18c:	1af3      	sublt	r3, r6, r3
 800c18e:	bfb4      	ite	lt
 800c190:	18d2      	addlt	r2, r2, r3
 800c192:	1b9e      	subge	r6, r3, r6
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	bfbc      	itt	lt
 800c198:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c19a:	2600      	movlt	r6, #0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	bfb7      	itett	lt
 800c1a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c1a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c1a8:	1a9d      	sublt	r5, r3, r2
 800c1aa:	2300      	movlt	r3, #0
 800c1ac:	e741      	b.n	800c032 <_dtoa_r+0x742>
 800c1ae:	9e08      	ldr	r6, [sp, #32]
 800c1b0:	9d05      	ldr	r5, [sp, #20]
 800c1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1b4:	e748      	b.n	800c048 <_dtoa_r+0x758>
 800c1b6:	9a08      	ldr	r2, [sp, #32]
 800c1b8:	e770      	b.n	800c09c <_dtoa_r+0x7ac>
 800c1ba:	9b07      	ldr	r3, [sp, #28]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	dc19      	bgt.n	800c1f4 <_dtoa_r+0x904>
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	b9bb      	cbnz	r3, 800c1f4 <_dtoa_r+0x904>
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ca:	b99b      	cbnz	r3, 800c1f4 <_dtoa_r+0x904>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1d2:	0d1b      	lsrs	r3, r3, #20
 800c1d4:	051b      	lsls	r3, r3, #20
 800c1d6:	b183      	cbz	r3, 800c1fa <_dtoa_r+0x90a>
 800c1d8:	9b05      	ldr	r3, [sp, #20]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	9305      	str	r3, [sp, #20]
 800c1de:	9b06      	ldr	r3, [sp, #24]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	9306      	str	r3, [sp, #24]
 800c1e4:	f04f 0801 	mov.w	r8, #1
 800c1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f47f af6f 	bne.w	800c0ce <_dtoa_r+0x7de>
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	e774      	b.n	800c0de <_dtoa_r+0x7ee>
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	e7f6      	b.n	800c1e8 <_dtoa_r+0x8f8>
 800c1fa:	4698      	mov	r8, r3
 800c1fc:	e7f4      	b.n	800c1e8 <_dtoa_r+0x8f8>
 800c1fe:	d082      	beq.n	800c106 <_dtoa_r+0x816>
 800c200:	9a05      	ldr	r2, [sp, #20]
 800c202:	331c      	adds	r3, #28
 800c204:	441a      	add	r2, r3
 800c206:	9205      	str	r2, [sp, #20]
 800c208:	9a06      	ldr	r2, [sp, #24]
 800c20a:	441a      	add	r2, r3
 800c20c:	441d      	add	r5, r3
 800c20e:	9206      	str	r2, [sp, #24]
 800c210:	e779      	b.n	800c106 <_dtoa_r+0x816>
 800c212:	4603      	mov	r3, r0
 800c214:	e7f4      	b.n	800c200 <_dtoa_r+0x910>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dc37      	bgt.n	800c28c <_dtoa_r+0x99c>
 800c21c:	9b07      	ldr	r3, [sp, #28]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	dd34      	ble.n	800c28c <_dtoa_r+0x99c>
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	b963      	cbnz	r3, 800c244 <_dtoa_r+0x954>
 800c22a:	4631      	mov	r1, r6
 800c22c:	2205      	movs	r2, #5
 800c22e:	4620      	mov	r0, r4
 800c230:	f000 fab2 	bl	800c798 <__multadd>
 800c234:	4601      	mov	r1, r0
 800c236:	4606      	mov	r6, r0
 800c238:	4650      	mov	r0, sl
 800c23a:	f000 fd11 	bl	800cc60 <__mcmp>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f73f adbb 	bgt.w	800bdba <_dtoa_r+0x4ca>
 800c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c246:	9d00      	ldr	r5, [sp, #0]
 800c248:	ea6f 0b03 	mvn.w	fp, r3
 800c24c:	f04f 0800 	mov.w	r8, #0
 800c250:	4631      	mov	r1, r6
 800c252:	4620      	mov	r0, r4
 800c254:	f000 fa7e 	bl	800c754 <_Bfree>
 800c258:	2f00      	cmp	r7, #0
 800c25a:	f43f aeab 	beq.w	800bfb4 <_dtoa_r+0x6c4>
 800c25e:	f1b8 0f00 	cmp.w	r8, #0
 800c262:	d005      	beq.n	800c270 <_dtoa_r+0x980>
 800c264:	45b8      	cmp	r8, r7
 800c266:	d003      	beq.n	800c270 <_dtoa_r+0x980>
 800c268:	4641      	mov	r1, r8
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fa72 	bl	800c754 <_Bfree>
 800c270:	4639      	mov	r1, r7
 800c272:	4620      	mov	r0, r4
 800c274:	f000 fa6e 	bl	800c754 <_Bfree>
 800c278:	e69c      	b.n	800bfb4 <_dtoa_r+0x6c4>
 800c27a:	2600      	movs	r6, #0
 800c27c:	4637      	mov	r7, r6
 800c27e:	e7e1      	b.n	800c244 <_dtoa_r+0x954>
 800c280:	46bb      	mov	fp, r7
 800c282:	4637      	mov	r7, r6
 800c284:	e599      	b.n	800bdba <_dtoa_r+0x4ca>
 800c286:	bf00      	nop
 800c288:	40240000 	.word	0x40240000
 800c28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 80c8 	beq.w	800c424 <_dtoa_r+0xb34>
 800c294:	9b04      	ldr	r3, [sp, #16]
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	2d00      	cmp	r5, #0
 800c29a:	dd05      	ble.n	800c2a8 <_dtoa_r+0x9b8>
 800c29c:	4639      	mov	r1, r7
 800c29e:	462a      	mov	r2, r5
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 fc71 	bl	800cb88 <__lshift>
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	f1b8 0f00 	cmp.w	r8, #0
 800c2ac:	d05b      	beq.n	800c366 <_dtoa_r+0xa76>
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 fa0f 	bl	800c6d4 <_Balloc>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	b928      	cbnz	r0, 800c2c6 <_dtoa_r+0x9d6>
 800c2ba:	4b83      	ldr	r3, [pc, #524]	; (800c4c8 <_dtoa_r+0xbd8>)
 800c2bc:	4602      	mov	r2, r0
 800c2be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c2c2:	f7ff bb2e 	b.w	800b922 <_dtoa_r+0x32>
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	3202      	adds	r2, #2
 800c2ca:	0092      	lsls	r2, r2, #2
 800c2cc:	f107 010c 	add.w	r1, r7, #12
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	f002 f95f 	bl	800e594 <memcpy>
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fc54 	bl	800cb88 <__lshift>
 800c2e0:	9b00      	ldr	r3, [sp, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	9308      	str	r3, [sp, #32]
 800c2ee:	9b02      	ldr	r3, [sp, #8]
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	46b8      	mov	r8, r7
 800c2f6:	9306      	str	r3, [sp, #24]
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	9b04      	ldr	r3, [sp, #16]
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	3b01      	subs	r3, #1
 800c300:	4650      	mov	r0, sl
 800c302:	9301      	str	r3, [sp, #4]
 800c304:	f7ff fa6c 	bl	800b7e0 <quorem>
 800c308:	4641      	mov	r1, r8
 800c30a:	9002      	str	r0, [sp, #8]
 800c30c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c310:	4650      	mov	r0, sl
 800c312:	f000 fca5 	bl	800cc60 <__mcmp>
 800c316:	463a      	mov	r2, r7
 800c318:	9005      	str	r0, [sp, #20]
 800c31a:	4631      	mov	r1, r6
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fcbb 	bl	800cc98 <__mdiff>
 800c322:	68c2      	ldr	r2, [r0, #12]
 800c324:	4605      	mov	r5, r0
 800c326:	bb02      	cbnz	r2, 800c36a <_dtoa_r+0xa7a>
 800c328:	4601      	mov	r1, r0
 800c32a:	4650      	mov	r0, sl
 800c32c:	f000 fc98 	bl	800cc60 <__mcmp>
 800c330:	4602      	mov	r2, r0
 800c332:	4629      	mov	r1, r5
 800c334:	4620      	mov	r0, r4
 800c336:	9209      	str	r2, [sp, #36]	; 0x24
 800c338:	f000 fa0c 	bl	800c754 <_Bfree>
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c340:	9d04      	ldr	r5, [sp, #16]
 800c342:	ea43 0102 	orr.w	r1, r3, r2
 800c346:	9b06      	ldr	r3, [sp, #24]
 800c348:	4319      	orrs	r1, r3
 800c34a:	d110      	bne.n	800c36e <_dtoa_r+0xa7e>
 800c34c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c350:	d029      	beq.n	800c3a6 <_dtoa_r+0xab6>
 800c352:	9b05      	ldr	r3, [sp, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	dd02      	ble.n	800c35e <_dtoa_r+0xa6e>
 800c358:	9b02      	ldr	r3, [sp, #8]
 800c35a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c35e:	9b01      	ldr	r3, [sp, #4]
 800c360:	f883 9000 	strb.w	r9, [r3]
 800c364:	e774      	b.n	800c250 <_dtoa_r+0x960>
 800c366:	4638      	mov	r0, r7
 800c368:	e7ba      	b.n	800c2e0 <_dtoa_r+0x9f0>
 800c36a:	2201      	movs	r2, #1
 800c36c:	e7e1      	b.n	800c332 <_dtoa_r+0xa42>
 800c36e:	9b05      	ldr	r3, [sp, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	db04      	blt.n	800c37e <_dtoa_r+0xa8e>
 800c374:	9907      	ldr	r1, [sp, #28]
 800c376:	430b      	orrs	r3, r1
 800c378:	9906      	ldr	r1, [sp, #24]
 800c37a:	430b      	orrs	r3, r1
 800c37c:	d120      	bne.n	800c3c0 <_dtoa_r+0xad0>
 800c37e:	2a00      	cmp	r2, #0
 800c380:	dded      	ble.n	800c35e <_dtoa_r+0xa6e>
 800c382:	4651      	mov	r1, sl
 800c384:	2201      	movs	r2, #1
 800c386:	4620      	mov	r0, r4
 800c388:	f000 fbfe 	bl	800cb88 <__lshift>
 800c38c:	4631      	mov	r1, r6
 800c38e:	4682      	mov	sl, r0
 800c390:	f000 fc66 	bl	800cc60 <__mcmp>
 800c394:	2800      	cmp	r0, #0
 800c396:	dc03      	bgt.n	800c3a0 <_dtoa_r+0xab0>
 800c398:	d1e1      	bne.n	800c35e <_dtoa_r+0xa6e>
 800c39a:	f019 0f01 	tst.w	r9, #1
 800c39e:	d0de      	beq.n	800c35e <_dtoa_r+0xa6e>
 800c3a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3a4:	d1d8      	bne.n	800c358 <_dtoa_r+0xa68>
 800c3a6:	9a01      	ldr	r2, [sp, #4]
 800c3a8:	2339      	movs	r3, #57	; 0x39
 800c3aa:	7013      	strb	r3, [r2, #0]
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	461d      	mov	r5, r3
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3b6:	2a39      	cmp	r2, #57	; 0x39
 800c3b8:	d06c      	beq.n	800c494 <_dtoa_r+0xba4>
 800c3ba:	3201      	adds	r2, #1
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e747      	b.n	800c250 <_dtoa_r+0x960>
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	dd07      	ble.n	800c3d4 <_dtoa_r+0xae4>
 800c3c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3c8:	d0ed      	beq.n	800c3a6 <_dtoa_r+0xab6>
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	f109 0301 	add.w	r3, r9, #1
 800c3d0:	7013      	strb	r3, [r2, #0]
 800c3d2:	e73d      	b.n	800c250 <_dtoa_r+0x960>
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	9a08      	ldr	r2, [sp, #32]
 800c3d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d043      	beq.n	800c468 <_dtoa_r+0xb78>
 800c3e0:	4651      	mov	r1, sl
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	220a      	movs	r2, #10
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 f9d6 	bl	800c798 <__multadd>
 800c3ec:	45b8      	cmp	r8, r7
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	f04f 020a 	mov.w	r2, #10
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	d107      	bne.n	800c40e <_dtoa_r+0xb1e>
 800c3fe:	f000 f9cb 	bl	800c798 <__multadd>
 800c402:	4680      	mov	r8, r0
 800c404:	4607      	mov	r7, r0
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	3301      	adds	r3, #1
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	e775      	b.n	800c2fa <_dtoa_r+0xa0a>
 800c40e:	f000 f9c3 	bl	800c798 <__multadd>
 800c412:	4639      	mov	r1, r7
 800c414:	4680      	mov	r8, r0
 800c416:	2300      	movs	r3, #0
 800c418:	220a      	movs	r2, #10
 800c41a:	4620      	mov	r0, r4
 800c41c:	f000 f9bc 	bl	800c798 <__multadd>
 800c420:	4607      	mov	r7, r0
 800c422:	e7f0      	b.n	800c406 <_dtoa_r+0xb16>
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	9d00      	ldr	r5, [sp, #0]
 800c42a:	4631      	mov	r1, r6
 800c42c:	4650      	mov	r0, sl
 800c42e:	f7ff f9d7 	bl	800b7e0 <quorem>
 800c432:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c436:	9b00      	ldr	r3, [sp, #0]
 800c438:	f805 9b01 	strb.w	r9, [r5], #1
 800c43c:	1aea      	subs	r2, r5, r3
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	4293      	cmp	r3, r2
 800c442:	dd07      	ble.n	800c454 <_dtoa_r+0xb64>
 800c444:	4651      	mov	r1, sl
 800c446:	2300      	movs	r3, #0
 800c448:	220a      	movs	r2, #10
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 f9a4 	bl	800c798 <__multadd>
 800c450:	4682      	mov	sl, r0
 800c452:	e7ea      	b.n	800c42a <_dtoa_r+0xb3a>
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfc8      	it	gt
 800c45a:	461d      	movgt	r5, r3
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	bfd8      	it	le
 800c460:	2501      	movle	r5, #1
 800c462:	441d      	add	r5, r3
 800c464:	f04f 0800 	mov.w	r8, #0
 800c468:	4651      	mov	r1, sl
 800c46a:	2201      	movs	r2, #1
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fb8b 	bl	800cb88 <__lshift>
 800c472:	4631      	mov	r1, r6
 800c474:	4682      	mov	sl, r0
 800c476:	f000 fbf3 	bl	800cc60 <__mcmp>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	dc96      	bgt.n	800c3ac <_dtoa_r+0xabc>
 800c47e:	d102      	bne.n	800c486 <_dtoa_r+0xb96>
 800c480:	f019 0f01 	tst.w	r9, #1
 800c484:	d192      	bne.n	800c3ac <_dtoa_r+0xabc>
 800c486:	462b      	mov	r3, r5
 800c488:	461d      	mov	r5, r3
 800c48a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c48e:	2a30      	cmp	r2, #48	; 0x30
 800c490:	d0fa      	beq.n	800c488 <_dtoa_r+0xb98>
 800c492:	e6dd      	b.n	800c250 <_dtoa_r+0x960>
 800c494:	9a00      	ldr	r2, [sp, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d189      	bne.n	800c3ae <_dtoa_r+0xabe>
 800c49a:	f10b 0b01 	add.w	fp, fp, #1
 800c49e:	2331      	movs	r3, #49	; 0x31
 800c4a0:	e796      	b.n	800c3d0 <_dtoa_r+0xae0>
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <_dtoa_r+0xbdc>)
 800c4a4:	f7ff ba99 	b.w	800b9da <_dtoa_r+0xea>
 800c4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f47f aa6d 	bne.w	800b98a <_dtoa_r+0x9a>
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <_dtoa_r+0xbe0>)
 800c4b2:	f7ff ba92 	b.w	800b9da <_dtoa_r+0xea>
 800c4b6:	9b01      	ldr	r3, [sp, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dcb5      	bgt.n	800c428 <_dtoa_r+0xb38>
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	f73f aeb1 	bgt.w	800c226 <_dtoa_r+0x936>
 800c4c4:	e7b0      	b.n	800c428 <_dtoa_r+0xb38>
 800c4c6:	bf00      	nop
 800c4c8:	0800f0d1 	.word	0x0800f0d1
 800c4cc:	0800f02c 	.word	0x0800f02c
 800c4d0:	0800f055 	.word	0x0800f055

0800c4d4 <_free_r>:
 800c4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d044      	beq.n	800c564 <_free_r+0x90>
 800c4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4de:	9001      	str	r0, [sp, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4e6:	bfb8      	it	lt
 800c4e8:	18e4      	addlt	r4, r4, r3
 800c4ea:	f000 f8e7 	bl	800c6bc <__malloc_lock>
 800c4ee:	4a1e      	ldr	r2, [pc, #120]	; (800c568 <_free_r+0x94>)
 800c4f0:	9801      	ldr	r0, [sp, #4]
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	b933      	cbnz	r3, 800c504 <_free_r+0x30>
 800c4f6:	6063      	str	r3, [r4, #4]
 800c4f8:	6014      	str	r4, [r2, #0]
 800c4fa:	b003      	add	sp, #12
 800c4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c500:	f000 b8e2 	b.w	800c6c8 <__malloc_unlock>
 800c504:	42a3      	cmp	r3, r4
 800c506:	d908      	bls.n	800c51a <_free_r+0x46>
 800c508:	6825      	ldr	r5, [r4, #0]
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	428b      	cmp	r3, r1
 800c50e:	bf01      	itttt	eq
 800c510:	6819      	ldreq	r1, [r3, #0]
 800c512:	685b      	ldreq	r3, [r3, #4]
 800c514:	1949      	addeq	r1, r1, r5
 800c516:	6021      	streq	r1, [r4, #0]
 800c518:	e7ed      	b.n	800c4f6 <_free_r+0x22>
 800c51a:	461a      	mov	r2, r3
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	b10b      	cbz	r3, 800c524 <_free_r+0x50>
 800c520:	42a3      	cmp	r3, r4
 800c522:	d9fa      	bls.n	800c51a <_free_r+0x46>
 800c524:	6811      	ldr	r1, [r2, #0]
 800c526:	1855      	adds	r5, r2, r1
 800c528:	42a5      	cmp	r5, r4
 800c52a:	d10b      	bne.n	800c544 <_free_r+0x70>
 800c52c:	6824      	ldr	r4, [r4, #0]
 800c52e:	4421      	add	r1, r4
 800c530:	1854      	adds	r4, r2, r1
 800c532:	42a3      	cmp	r3, r4
 800c534:	6011      	str	r1, [r2, #0]
 800c536:	d1e0      	bne.n	800c4fa <_free_r+0x26>
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	6053      	str	r3, [r2, #4]
 800c53e:	440c      	add	r4, r1
 800c540:	6014      	str	r4, [r2, #0]
 800c542:	e7da      	b.n	800c4fa <_free_r+0x26>
 800c544:	d902      	bls.n	800c54c <_free_r+0x78>
 800c546:	230c      	movs	r3, #12
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	e7d6      	b.n	800c4fa <_free_r+0x26>
 800c54c:	6825      	ldr	r5, [r4, #0]
 800c54e:	1961      	adds	r1, r4, r5
 800c550:	428b      	cmp	r3, r1
 800c552:	bf04      	itt	eq
 800c554:	6819      	ldreq	r1, [r3, #0]
 800c556:	685b      	ldreq	r3, [r3, #4]
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	bf04      	itt	eq
 800c55c:	1949      	addeq	r1, r1, r5
 800c55e:	6021      	streq	r1, [r4, #0]
 800c560:	6054      	str	r4, [r2, #4]
 800c562:	e7ca      	b.n	800c4fa <_free_r+0x26>
 800c564:	b003      	add	sp, #12
 800c566:	bd30      	pop	{r4, r5, pc}
 800c568:	20002194 	.word	0x20002194

0800c56c <malloc>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <malloc+0xc>)
 800c56e:	4601      	mov	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f000 b823 	b.w	800c5bc <_malloc_r>
 800c576:	bf00      	nop
 800c578:	20000164 	.word	0x20000164

0800c57c <sbrk_aligned>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	4e0e      	ldr	r6, [pc, #56]	; (800c5b8 <sbrk_aligned+0x3c>)
 800c580:	460c      	mov	r4, r1
 800c582:	6831      	ldr	r1, [r6, #0]
 800c584:	4605      	mov	r5, r0
 800c586:	b911      	cbnz	r1, 800c58e <sbrk_aligned+0x12>
 800c588:	f001 fff4 	bl	800e574 <_sbrk_r>
 800c58c:	6030      	str	r0, [r6, #0]
 800c58e:	4621      	mov	r1, r4
 800c590:	4628      	mov	r0, r5
 800c592:	f001 ffef 	bl	800e574 <_sbrk_r>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	d00a      	beq.n	800c5b0 <sbrk_aligned+0x34>
 800c59a:	1cc4      	adds	r4, r0, #3
 800c59c:	f024 0403 	bic.w	r4, r4, #3
 800c5a0:	42a0      	cmp	r0, r4
 800c5a2:	d007      	beq.n	800c5b4 <sbrk_aligned+0x38>
 800c5a4:	1a21      	subs	r1, r4, r0
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f001 ffe4 	bl	800e574 <_sbrk_r>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d101      	bne.n	800c5b4 <sbrk_aligned+0x38>
 800c5b0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	20002198 	.word	0x20002198

0800c5bc <_malloc_r>:
 800c5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c0:	1ccd      	adds	r5, r1, #3
 800c5c2:	f025 0503 	bic.w	r5, r5, #3
 800c5c6:	3508      	adds	r5, #8
 800c5c8:	2d0c      	cmp	r5, #12
 800c5ca:	bf38      	it	cc
 800c5cc:	250c      	movcc	r5, #12
 800c5ce:	2d00      	cmp	r5, #0
 800c5d0:	4607      	mov	r7, r0
 800c5d2:	db01      	blt.n	800c5d8 <_malloc_r+0x1c>
 800c5d4:	42a9      	cmp	r1, r5
 800c5d6:	d905      	bls.n	800c5e4 <_malloc_r+0x28>
 800c5d8:	230c      	movs	r3, #12
 800c5da:	603b      	str	r3, [r7, #0]
 800c5dc:	2600      	movs	r6, #0
 800c5de:	4630      	mov	r0, r6
 800c5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6b8 <_malloc_r+0xfc>
 800c5e8:	f000 f868 	bl	800c6bc <__malloc_lock>
 800c5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f0:	461c      	mov	r4, r3
 800c5f2:	bb5c      	cbnz	r4, 800c64c <_malloc_r+0x90>
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	f7ff ffc0 	bl	800c57c <sbrk_aligned>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	4604      	mov	r4, r0
 800c600:	d155      	bne.n	800c6ae <_malloc_r+0xf2>
 800c602:	f8d8 4000 	ldr.w	r4, [r8]
 800c606:	4626      	mov	r6, r4
 800c608:	2e00      	cmp	r6, #0
 800c60a:	d145      	bne.n	800c698 <_malloc_r+0xdc>
 800c60c:	2c00      	cmp	r4, #0
 800c60e:	d048      	beq.n	800c6a2 <_malloc_r+0xe6>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	4631      	mov	r1, r6
 800c614:	4638      	mov	r0, r7
 800c616:	eb04 0903 	add.w	r9, r4, r3
 800c61a:	f001 ffab 	bl	800e574 <_sbrk_r>
 800c61e:	4581      	cmp	r9, r0
 800c620:	d13f      	bne.n	800c6a2 <_malloc_r+0xe6>
 800c622:	6821      	ldr	r1, [r4, #0]
 800c624:	1a6d      	subs	r5, r5, r1
 800c626:	4629      	mov	r1, r5
 800c628:	4638      	mov	r0, r7
 800c62a:	f7ff ffa7 	bl	800c57c <sbrk_aligned>
 800c62e:	3001      	adds	r0, #1
 800c630:	d037      	beq.n	800c6a2 <_malloc_r+0xe6>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	442b      	add	r3, r5
 800c636:	6023      	str	r3, [r4, #0]
 800c638:	f8d8 3000 	ldr.w	r3, [r8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d038      	beq.n	800c6b2 <_malloc_r+0xf6>
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	42a2      	cmp	r2, r4
 800c644:	d12b      	bne.n	800c69e <_malloc_r+0xe2>
 800c646:	2200      	movs	r2, #0
 800c648:	605a      	str	r2, [r3, #4]
 800c64a:	e00f      	b.n	800c66c <_malloc_r+0xb0>
 800c64c:	6822      	ldr	r2, [r4, #0]
 800c64e:	1b52      	subs	r2, r2, r5
 800c650:	d41f      	bmi.n	800c692 <_malloc_r+0xd6>
 800c652:	2a0b      	cmp	r2, #11
 800c654:	d917      	bls.n	800c686 <_malloc_r+0xca>
 800c656:	1961      	adds	r1, r4, r5
 800c658:	42a3      	cmp	r3, r4
 800c65a:	6025      	str	r5, [r4, #0]
 800c65c:	bf18      	it	ne
 800c65e:	6059      	strne	r1, [r3, #4]
 800c660:	6863      	ldr	r3, [r4, #4]
 800c662:	bf08      	it	eq
 800c664:	f8c8 1000 	streq.w	r1, [r8]
 800c668:	5162      	str	r2, [r4, r5]
 800c66a:	604b      	str	r3, [r1, #4]
 800c66c:	4638      	mov	r0, r7
 800c66e:	f104 060b 	add.w	r6, r4, #11
 800c672:	f000 f829 	bl	800c6c8 <__malloc_unlock>
 800c676:	f026 0607 	bic.w	r6, r6, #7
 800c67a:	1d23      	adds	r3, r4, #4
 800c67c:	1af2      	subs	r2, r6, r3
 800c67e:	d0ae      	beq.n	800c5de <_malloc_r+0x22>
 800c680:	1b9b      	subs	r3, r3, r6
 800c682:	50a3      	str	r3, [r4, r2]
 800c684:	e7ab      	b.n	800c5de <_malloc_r+0x22>
 800c686:	42a3      	cmp	r3, r4
 800c688:	6862      	ldr	r2, [r4, #4]
 800c68a:	d1dd      	bne.n	800c648 <_malloc_r+0x8c>
 800c68c:	f8c8 2000 	str.w	r2, [r8]
 800c690:	e7ec      	b.n	800c66c <_malloc_r+0xb0>
 800c692:	4623      	mov	r3, r4
 800c694:	6864      	ldr	r4, [r4, #4]
 800c696:	e7ac      	b.n	800c5f2 <_malloc_r+0x36>
 800c698:	4634      	mov	r4, r6
 800c69a:	6876      	ldr	r6, [r6, #4]
 800c69c:	e7b4      	b.n	800c608 <_malloc_r+0x4c>
 800c69e:	4613      	mov	r3, r2
 800c6a0:	e7cc      	b.n	800c63c <_malloc_r+0x80>
 800c6a2:	230c      	movs	r3, #12
 800c6a4:	603b      	str	r3, [r7, #0]
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	f000 f80e 	bl	800c6c8 <__malloc_unlock>
 800c6ac:	e797      	b.n	800c5de <_malloc_r+0x22>
 800c6ae:	6025      	str	r5, [r4, #0]
 800c6b0:	e7dc      	b.n	800c66c <_malloc_r+0xb0>
 800c6b2:	605b      	str	r3, [r3, #4]
 800c6b4:	deff      	udf	#255	; 0xff
 800c6b6:	bf00      	nop
 800c6b8:	20002194 	.word	0x20002194

0800c6bc <__malloc_lock>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	; (800c6c4 <__malloc_lock+0x8>)
 800c6be:	f7ff b887 	b.w	800b7d0 <__retarget_lock_acquire_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	20002190 	.word	0x20002190

0800c6c8 <__malloc_unlock>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	; (800c6d0 <__malloc_unlock+0x8>)
 800c6ca:	f7ff b882 	b.w	800b7d2 <__retarget_lock_release_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	20002190 	.word	0x20002190

0800c6d4 <_Balloc>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	69c6      	ldr	r6, [r0, #28]
 800c6d8:	4604      	mov	r4, r0
 800c6da:	460d      	mov	r5, r1
 800c6dc:	b976      	cbnz	r6, 800c6fc <_Balloc+0x28>
 800c6de:	2010      	movs	r0, #16
 800c6e0:	f7ff ff44 	bl	800c56c <malloc>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	61e0      	str	r0, [r4, #28]
 800c6e8:	b920      	cbnz	r0, 800c6f4 <_Balloc+0x20>
 800c6ea:	4b18      	ldr	r3, [pc, #96]	; (800c74c <_Balloc+0x78>)
 800c6ec:	4818      	ldr	r0, [pc, #96]	; (800c750 <_Balloc+0x7c>)
 800c6ee:	216b      	movs	r1, #107	; 0x6b
 800c6f0:	f001 ff66 	bl	800e5c0 <__assert_func>
 800c6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6f8:	6006      	str	r6, [r0, #0]
 800c6fa:	60c6      	str	r6, [r0, #12]
 800c6fc:	69e6      	ldr	r6, [r4, #28]
 800c6fe:	68f3      	ldr	r3, [r6, #12]
 800c700:	b183      	cbz	r3, 800c724 <_Balloc+0x50>
 800c702:	69e3      	ldr	r3, [r4, #28]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c70a:	b9b8      	cbnz	r0, 800c73c <_Balloc+0x68>
 800c70c:	2101      	movs	r1, #1
 800c70e:	fa01 f605 	lsl.w	r6, r1, r5
 800c712:	1d72      	adds	r2, r6, #5
 800c714:	0092      	lsls	r2, r2, #2
 800c716:	4620      	mov	r0, r4
 800c718:	f001 ff70 	bl	800e5fc <_calloc_r>
 800c71c:	b160      	cbz	r0, 800c738 <_Balloc+0x64>
 800c71e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c722:	e00e      	b.n	800c742 <_Balloc+0x6e>
 800c724:	2221      	movs	r2, #33	; 0x21
 800c726:	2104      	movs	r1, #4
 800c728:	4620      	mov	r0, r4
 800c72a:	f001 ff67 	bl	800e5fc <_calloc_r>
 800c72e:	69e3      	ldr	r3, [r4, #28]
 800c730:	60f0      	str	r0, [r6, #12]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1e4      	bne.n	800c702 <_Balloc+0x2e>
 800c738:	2000      	movs	r0, #0
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	6802      	ldr	r2, [r0, #0]
 800c73e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c742:	2300      	movs	r3, #0
 800c744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c748:	e7f7      	b.n	800c73a <_Balloc+0x66>
 800c74a:	bf00      	nop
 800c74c:	0800f062 	.word	0x0800f062
 800c750:	0800f0e2 	.word	0x0800f0e2

0800c754 <_Bfree>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	69c6      	ldr	r6, [r0, #28]
 800c758:	4605      	mov	r5, r0
 800c75a:	460c      	mov	r4, r1
 800c75c:	b976      	cbnz	r6, 800c77c <_Bfree+0x28>
 800c75e:	2010      	movs	r0, #16
 800c760:	f7ff ff04 	bl	800c56c <malloc>
 800c764:	4602      	mov	r2, r0
 800c766:	61e8      	str	r0, [r5, #28]
 800c768:	b920      	cbnz	r0, 800c774 <_Bfree+0x20>
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <_Bfree+0x3c>)
 800c76c:	4809      	ldr	r0, [pc, #36]	; (800c794 <_Bfree+0x40>)
 800c76e:	218f      	movs	r1, #143	; 0x8f
 800c770:	f001 ff26 	bl	800e5c0 <__assert_func>
 800c774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c778:	6006      	str	r6, [r0, #0]
 800c77a:	60c6      	str	r6, [r0, #12]
 800c77c:	b13c      	cbz	r4, 800c78e <_Bfree+0x3a>
 800c77e:	69eb      	ldr	r3, [r5, #28]
 800c780:	6862      	ldr	r2, [r4, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c788:	6021      	str	r1, [r4, #0]
 800c78a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c78e:	bd70      	pop	{r4, r5, r6, pc}
 800c790:	0800f062 	.word	0x0800f062
 800c794:	0800f0e2 	.word	0x0800f0e2

0800c798 <__multadd>:
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	690d      	ldr	r5, [r1, #16]
 800c79e:	4607      	mov	r7, r0
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	461e      	mov	r6, r3
 800c7a4:	f101 0c14 	add.w	ip, r1, #20
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c7ae:	b299      	uxth	r1, r3
 800c7b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c7b4:	0c1e      	lsrs	r6, r3, #16
 800c7b6:	0c0b      	lsrs	r3, r1, #16
 800c7b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c7bc:	b289      	uxth	r1, r1
 800c7be:	3001      	adds	r0, #1
 800c7c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7c4:	4285      	cmp	r5, r0
 800c7c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c7ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7ce:	dcec      	bgt.n	800c7aa <__multadd+0x12>
 800c7d0:	b30e      	cbz	r6, 800c816 <__multadd+0x7e>
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dc19      	bgt.n	800c80c <__multadd+0x74>
 800c7d8:	6861      	ldr	r1, [r4, #4]
 800c7da:	4638      	mov	r0, r7
 800c7dc:	3101      	adds	r1, #1
 800c7de:	f7ff ff79 	bl	800c6d4 <_Balloc>
 800c7e2:	4680      	mov	r8, r0
 800c7e4:	b928      	cbnz	r0, 800c7f2 <__multadd+0x5a>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <__multadd+0x84>)
 800c7ea:	480d      	ldr	r0, [pc, #52]	; (800c820 <__multadd+0x88>)
 800c7ec:	21ba      	movs	r1, #186	; 0xba
 800c7ee:	f001 fee7 	bl	800e5c0 <__assert_func>
 800c7f2:	6922      	ldr	r2, [r4, #16]
 800c7f4:	3202      	adds	r2, #2
 800c7f6:	f104 010c 	add.w	r1, r4, #12
 800c7fa:	0092      	lsls	r2, r2, #2
 800c7fc:	300c      	adds	r0, #12
 800c7fe:	f001 fec9 	bl	800e594 <memcpy>
 800c802:	4621      	mov	r1, r4
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff ffa5 	bl	800c754 <_Bfree>
 800c80a:	4644      	mov	r4, r8
 800c80c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c810:	3501      	adds	r5, #1
 800c812:	615e      	str	r6, [r3, #20]
 800c814:	6125      	str	r5, [r4, #16]
 800c816:	4620      	mov	r0, r4
 800c818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81c:	0800f0d1 	.word	0x0800f0d1
 800c820:	0800f0e2 	.word	0x0800f0e2

0800c824 <__s2b>:
 800c824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	4615      	mov	r5, r2
 800c82c:	461f      	mov	r7, r3
 800c82e:	2209      	movs	r2, #9
 800c830:	3308      	adds	r3, #8
 800c832:	4606      	mov	r6, r0
 800c834:	fb93 f3f2 	sdiv	r3, r3, r2
 800c838:	2100      	movs	r1, #0
 800c83a:	2201      	movs	r2, #1
 800c83c:	429a      	cmp	r2, r3
 800c83e:	db09      	blt.n	800c854 <__s2b+0x30>
 800c840:	4630      	mov	r0, r6
 800c842:	f7ff ff47 	bl	800c6d4 <_Balloc>
 800c846:	b940      	cbnz	r0, 800c85a <__s2b+0x36>
 800c848:	4602      	mov	r2, r0
 800c84a:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <__s2b+0x8c>)
 800c84c:	4819      	ldr	r0, [pc, #100]	; (800c8b4 <__s2b+0x90>)
 800c84e:	21d3      	movs	r1, #211	; 0xd3
 800c850:	f001 feb6 	bl	800e5c0 <__assert_func>
 800c854:	0052      	lsls	r2, r2, #1
 800c856:	3101      	adds	r1, #1
 800c858:	e7f0      	b.n	800c83c <__s2b+0x18>
 800c85a:	9b08      	ldr	r3, [sp, #32]
 800c85c:	6143      	str	r3, [r0, #20]
 800c85e:	2d09      	cmp	r5, #9
 800c860:	f04f 0301 	mov.w	r3, #1
 800c864:	6103      	str	r3, [r0, #16]
 800c866:	dd16      	ble.n	800c896 <__s2b+0x72>
 800c868:	f104 0909 	add.w	r9, r4, #9
 800c86c:	46c8      	mov	r8, r9
 800c86e:	442c      	add	r4, r5
 800c870:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c874:	4601      	mov	r1, r0
 800c876:	3b30      	subs	r3, #48	; 0x30
 800c878:	220a      	movs	r2, #10
 800c87a:	4630      	mov	r0, r6
 800c87c:	f7ff ff8c 	bl	800c798 <__multadd>
 800c880:	45a0      	cmp	r8, r4
 800c882:	d1f5      	bne.n	800c870 <__s2b+0x4c>
 800c884:	f1a5 0408 	sub.w	r4, r5, #8
 800c888:	444c      	add	r4, r9
 800c88a:	1b2d      	subs	r5, r5, r4
 800c88c:	1963      	adds	r3, r4, r5
 800c88e:	42bb      	cmp	r3, r7
 800c890:	db04      	blt.n	800c89c <__s2b+0x78>
 800c892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c896:	340a      	adds	r4, #10
 800c898:	2509      	movs	r5, #9
 800c89a:	e7f6      	b.n	800c88a <__s2b+0x66>
 800c89c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	3b30      	subs	r3, #48	; 0x30
 800c8a4:	220a      	movs	r2, #10
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f7ff ff76 	bl	800c798 <__multadd>
 800c8ac:	e7ee      	b.n	800c88c <__s2b+0x68>
 800c8ae:	bf00      	nop
 800c8b0:	0800f0d1 	.word	0x0800f0d1
 800c8b4:	0800f0e2 	.word	0x0800f0e2

0800c8b8 <__hi0bits>:
 800c8b8:	0c03      	lsrs	r3, r0, #16
 800c8ba:	041b      	lsls	r3, r3, #16
 800c8bc:	b9d3      	cbnz	r3, 800c8f4 <__hi0bits+0x3c>
 800c8be:	0400      	lsls	r0, r0, #16
 800c8c0:	2310      	movs	r3, #16
 800c8c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8c6:	bf04      	itt	eq
 800c8c8:	0200      	lsleq	r0, r0, #8
 800c8ca:	3308      	addeq	r3, #8
 800c8cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8d0:	bf04      	itt	eq
 800c8d2:	0100      	lsleq	r0, r0, #4
 800c8d4:	3304      	addeq	r3, #4
 800c8d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8da:	bf04      	itt	eq
 800c8dc:	0080      	lsleq	r0, r0, #2
 800c8de:	3302      	addeq	r3, #2
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	db05      	blt.n	800c8f0 <__hi0bits+0x38>
 800c8e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8e8:	f103 0301 	add.w	r3, r3, #1
 800c8ec:	bf08      	it	eq
 800c8ee:	2320      	moveq	r3, #32
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	4770      	bx	lr
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e7e4      	b.n	800c8c2 <__hi0bits+0xa>

0800c8f8 <__lo0bits>:
 800c8f8:	6803      	ldr	r3, [r0, #0]
 800c8fa:	f013 0207 	ands.w	r2, r3, #7
 800c8fe:	d00c      	beq.n	800c91a <__lo0bits+0x22>
 800c900:	07d9      	lsls	r1, r3, #31
 800c902:	d422      	bmi.n	800c94a <__lo0bits+0x52>
 800c904:	079a      	lsls	r2, r3, #30
 800c906:	bf49      	itett	mi
 800c908:	085b      	lsrmi	r3, r3, #1
 800c90a:	089b      	lsrpl	r3, r3, #2
 800c90c:	6003      	strmi	r3, [r0, #0]
 800c90e:	2201      	movmi	r2, #1
 800c910:	bf5c      	itt	pl
 800c912:	6003      	strpl	r3, [r0, #0]
 800c914:	2202      	movpl	r2, #2
 800c916:	4610      	mov	r0, r2
 800c918:	4770      	bx	lr
 800c91a:	b299      	uxth	r1, r3
 800c91c:	b909      	cbnz	r1, 800c922 <__lo0bits+0x2a>
 800c91e:	0c1b      	lsrs	r3, r3, #16
 800c920:	2210      	movs	r2, #16
 800c922:	b2d9      	uxtb	r1, r3
 800c924:	b909      	cbnz	r1, 800c92a <__lo0bits+0x32>
 800c926:	3208      	adds	r2, #8
 800c928:	0a1b      	lsrs	r3, r3, #8
 800c92a:	0719      	lsls	r1, r3, #28
 800c92c:	bf04      	itt	eq
 800c92e:	091b      	lsreq	r3, r3, #4
 800c930:	3204      	addeq	r2, #4
 800c932:	0799      	lsls	r1, r3, #30
 800c934:	bf04      	itt	eq
 800c936:	089b      	lsreq	r3, r3, #2
 800c938:	3202      	addeq	r2, #2
 800c93a:	07d9      	lsls	r1, r3, #31
 800c93c:	d403      	bmi.n	800c946 <__lo0bits+0x4e>
 800c93e:	085b      	lsrs	r3, r3, #1
 800c940:	f102 0201 	add.w	r2, r2, #1
 800c944:	d003      	beq.n	800c94e <__lo0bits+0x56>
 800c946:	6003      	str	r3, [r0, #0]
 800c948:	e7e5      	b.n	800c916 <__lo0bits+0x1e>
 800c94a:	2200      	movs	r2, #0
 800c94c:	e7e3      	b.n	800c916 <__lo0bits+0x1e>
 800c94e:	2220      	movs	r2, #32
 800c950:	e7e1      	b.n	800c916 <__lo0bits+0x1e>
	...

0800c954 <__i2b>:
 800c954:	b510      	push	{r4, lr}
 800c956:	460c      	mov	r4, r1
 800c958:	2101      	movs	r1, #1
 800c95a:	f7ff febb 	bl	800c6d4 <_Balloc>
 800c95e:	4602      	mov	r2, r0
 800c960:	b928      	cbnz	r0, 800c96e <__i2b+0x1a>
 800c962:	4b05      	ldr	r3, [pc, #20]	; (800c978 <__i2b+0x24>)
 800c964:	4805      	ldr	r0, [pc, #20]	; (800c97c <__i2b+0x28>)
 800c966:	f240 1145 	movw	r1, #325	; 0x145
 800c96a:	f001 fe29 	bl	800e5c0 <__assert_func>
 800c96e:	2301      	movs	r3, #1
 800c970:	6144      	str	r4, [r0, #20]
 800c972:	6103      	str	r3, [r0, #16]
 800c974:	bd10      	pop	{r4, pc}
 800c976:	bf00      	nop
 800c978:	0800f0d1 	.word	0x0800f0d1
 800c97c:	0800f0e2 	.word	0x0800f0e2

0800c980 <__multiply>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	4691      	mov	r9, r2
 800c986:	690a      	ldr	r2, [r1, #16]
 800c988:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	bfb8      	it	lt
 800c990:	460b      	movlt	r3, r1
 800c992:	460c      	mov	r4, r1
 800c994:	bfbc      	itt	lt
 800c996:	464c      	movlt	r4, r9
 800c998:	4699      	movlt	r9, r3
 800c99a:	6927      	ldr	r7, [r4, #16]
 800c99c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	6861      	ldr	r1, [r4, #4]
 800c9a4:	eb07 060a 	add.w	r6, r7, sl
 800c9a8:	42b3      	cmp	r3, r6
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	bfb8      	it	lt
 800c9ae:	3101      	addlt	r1, #1
 800c9b0:	f7ff fe90 	bl	800c6d4 <_Balloc>
 800c9b4:	b930      	cbnz	r0, 800c9c4 <__multiply+0x44>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	4b44      	ldr	r3, [pc, #272]	; (800cacc <__multiply+0x14c>)
 800c9ba:	4845      	ldr	r0, [pc, #276]	; (800cad0 <__multiply+0x150>)
 800c9bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c9c0:	f001 fdfe 	bl	800e5c0 <__assert_func>
 800c9c4:	f100 0514 	add.w	r5, r0, #20
 800c9c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	4543      	cmp	r3, r8
 800c9d2:	d321      	bcc.n	800ca18 <__multiply+0x98>
 800c9d4:	f104 0314 	add.w	r3, r4, #20
 800c9d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9dc:	f109 0314 	add.w	r3, r9, #20
 800c9e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9e4:	9202      	str	r2, [sp, #8]
 800c9e6:	1b3a      	subs	r2, r7, r4
 800c9e8:	3a15      	subs	r2, #21
 800c9ea:	f022 0203 	bic.w	r2, r2, #3
 800c9ee:	3204      	adds	r2, #4
 800c9f0:	f104 0115 	add.w	r1, r4, #21
 800c9f4:	428f      	cmp	r7, r1
 800c9f6:	bf38      	it	cc
 800c9f8:	2204      	movcc	r2, #4
 800c9fa:	9201      	str	r2, [sp, #4]
 800c9fc:	9a02      	ldr	r2, [sp, #8]
 800c9fe:	9303      	str	r3, [sp, #12]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d80c      	bhi.n	800ca1e <__multiply+0x9e>
 800ca04:	2e00      	cmp	r6, #0
 800ca06:	dd03      	ble.n	800ca10 <__multiply+0x90>
 800ca08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d05b      	beq.n	800cac8 <__multiply+0x148>
 800ca10:	6106      	str	r6, [r0, #16]
 800ca12:	b005      	add	sp, #20
 800ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca18:	f843 2b04 	str.w	r2, [r3], #4
 800ca1c:	e7d8      	b.n	800c9d0 <__multiply+0x50>
 800ca1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca22:	f1ba 0f00 	cmp.w	sl, #0
 800ca26:	d024      	beq.n	800ca72 <__multiply+0xf2>
 800ca28:	f104 0e14 	add.w	lr, r4, #20
 800ca2c:	46a9      	mov	r9, r5
 800ca2e:	f04f 0c00 	mov.w	ip, #0
 800ca32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca36:	f8d9 1000 	ldr.w	r1, [r9]
 800ca3a:	fa1f fb82 	uxth.w	fp, r2
 800ca3e:	b289      	uxth	r1, r1
 800ca40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca48:	f8d9 2000 	ldr.w	r2, [r9]
 800ca4c:	4461      	add	r1, ip
 800ca4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca52:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca5a:	b289      	uxth	r1, r1
 800ca5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca60:	4577      	cmp	r7, lr
 800ca62:	f849 1b04 	str.w	r1, [r9], #4
 800ca66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca6a:	d8e2      	bhi.n	800ca32 <__multiply+0xb2>
 800ca6c:	9a01      	ldr	r2, [sp, #4]
 800ca6e:	f845 c002 	str.w	ip, [r5, r2]
 800ca72:	9a03      	ldr	r2, [sp, #12]
 800ca74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	f1b9 0f00 	cmp.w	r9, #0
 800ca7e:	d021      	beq.n	800cac4 <__multiply+0x144>
 800ca80:	6829      	ldr	r1, [r5, #0]
 800ca82:	f104 0c14 	add.w	ip, r4, #20
 800ca86:	46ae      	mov	lr, r5
 800ca88:	f04f 0a00 	mov.w	sl, #0
 800ca8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ca90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca94:	fb09 220b 	mla	r2, r9, fp, r2
 800ca98:	4452      	add	r2, sl
 800ca9a:	b289      	uxth	r1, r1
 800ca9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800caa0:	f84e 1b04 	str.w	r1, [lr], #4
 800caa4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800caa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800caac:	f8be 1000 	ldrh.w	r1, [lr]
 800cab0:	fb09 110a 	mla	r1, r9, sl, r1
 800cab4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cab8:	4567      	cmp	r7, ip
 800caba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cabe:	d8e5      	bhi.n	800ca8c <__multiply+0x10c>
 800cac0:	9a01      	ldr	r2, [sp, #4]
 800cac2:	50a9      	str	r1, [r5, r2]
 800cac4:	3504      	adds	r5, #4
 800cac6:	e799      	b.n	800c9fc <__multiply+0x7c>
 800cac8:	3e01      	subs	r6, #1
 800caca:	e79b      	b.n	800ca04 <__multiply+0x84>
 800cacc:	0800f0d1 	.word	0x0800f0d1
 800cad0:	0800f0e2 	.word	0x0800f0e2

0800cad4 <__pow5mult>:
 800cad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cad8:	4615      	mov	r5, r2
 800cada:	f012 0203 	ands.w	r2, r2, #3
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	d007      	beq.n	800caf4 <__pow5mult+0x20>
 800cae4:	4c25      	ldr	r4, [pc, #148]	; (800cb7c <__pow5mult+0xa8>)
 800cae6:	3a01      	subs	r2, #1
 800cae8:	2300      	movs	r3, #0
 800caea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800caee:	f7ff fe53 	bl	800c798 <__multadd>
 800caf2:	4607      	mov	r7, r0
 800caf4:	10ad      	asrs	r5, r5, #2
 800caf6:	d03d      	beq.n	800cb74 <__pow5mult+0xa0>
 800caf8:	69f4      	ldr	r4, [r6, #28]
 800cafa:	b97c      	cbnz	r4, 800cb1c <__pow5mult+0x48>
 800cafc:	2010      	movs	r0, #16
 800cafe:	f7ff fd35 	bl	800c56c <malloc>
 800cb02:	4602      	mov	r2, r0
 800cb04:	61f0      	str	r0, [r6, #28]
 800cb06:	b928      	cbnz	r0, 800cb14 <__pow5mult+0x40>
 800cb08:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <__pow5mult+0xac>)
 800cb0a:	481e      	ldr	r0, [pc, #120]	; (800cb84 <__pow5mult+0xb0>)
 800cb0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb10:	f001 fd56 	bl	800e5c0 <__assert_func>
 800cb14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb18:	6004      	str	r4, [r0, #0]
 800cb1a:	60c4      	str	r4, [r0, #12]
 800cb1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb24:	b94c      	cbnz	r4, 800cb3a <__pow5mult+0x66>
 800cb26:	f240 2171 	movw	r1, #625	; 0x271
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ff12 	bl	800c954 <__i2b>
 800cb30:	2300      	movs	r3, #0
 800cb32:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb36:	4604      	mov	r4, r0
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	f04f 0900 	mov.w	r9, #0
 800cb3e:	07eb      	lsls	r3, r5, #31
 800cb40:	d50a      	bpl.n	800cb58 <__pow5mult+0x84>
 800cb42:	4639      	mov	r1, r7
 800cb44:	4622      	mov	r2, r4
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ff1a 	bl	800c980 <__multiply>
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	4680      	mov	r8, r0
 800cb50:	4630      	mov	r0, r6
 800cb52:	f7ff fdff 	bl	800c754 <_Bfree>
 800cb56:	4647      	mov	r7, r8
 800cb58:	106d      	asrs	r5, r5, #1
 800cb5a:	d00b      	beq.n	800cb74 <__pow5mult+0xa0>
 800cb5c:	6820      	ldr	r0, [r4, #0]
 800cb5e:	b938      	cbnz	r0, 800cb70 <__pow5mult+0x9c>
 800cb60:	4622      	mov	r2, r4
 800cb62:	4621      	mov	r1, r4
 800cb64:	4630      	mov	r0, r6
 800cb66:	f7ff ff0b 	bl	800c980 <__multiply>
 800cb6a:	6020      	str	r0, [r4, #0]
 800cb6c:	f8c0 9000 	str.w	r9, [r0]
 800cb70:	4604      	mov	r4, r0
 800cb72:	e7e4      	b.n	800cb3e <__pow5mult+0x6a>
 800cb74:	4638      	mov	r0, r7
 800cb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb7a:	bf00      	nop
 800cb7c:	0800f230 	.word	0x0800f230
 800cb80:	0800f062 	.word	0x0800f062
 800cb84:	0800f0e2 	.word	0x0800f0e2

0800cb88 <__lshift>:
 800cb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	6849      	ldr	r1, [r1, #4]
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb96:	68a3      	ldr	r3, [r4, #8]
 800cb98:	4607      	mov	r7, r0
 800cb9a:	4691      	mov	r9, r2
 800cb9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cba0:	f108 0601 	add.w	r6, r8, #1
 800cba4:	42b3      	cmp	r3, r6
 800cba6:	db0b      	blt.n	800cbc0 <__lshift+0x38>
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f7ff fd93 	bl	800c6d4 <_Balloc>
 800cbae:	4605      	mov	r5, r0
 800cbb0:	b948      	cbnz	r0, 800cbc6 <__lshift+0x3e>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	4b28      	ldr	r3, [pc, #160]	; (800cc58 <__lshift+0xd0>)
 800cbb6:	4829      	ldr	r0, [pc, #164]	; (800cc5c <__lshift+0xd4>)
 800cbb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbbc:	f001 fd00 	bl	800e5c0 <__assert_func>
 800cbc0:	3101      	adds	r1, #1
 800cbc2:	005b      	lsls	r3, r3, #1
 800cbc4:	e7ee      	b.n	800cba4 <__lshift+0x1c>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f100 0114 	add.w	r1, r0, #20
 800cbcc:	f100 0210 	add.w	r2, r0, #16
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	4553      	cmp	r3, sl
 800cbd4:	db33      	blt.n	800cc3e <__lshift+0xb6>
 800cbd6:	6920      	ldr	r0, [r4, #16]
 800cbd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbdc:	f104 0314 	add.w	r3, r4, #20
 800cbe0:	f019 091f 	ands.w	r9, r9, #31
 800cbe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbec:	d02b      	beq.n	800cc46 <__lshift+0xbe>
 800cbee:	f1c9 0e20 	rsb	lr, r9, #32
 800cbf2:	468a      	mov	sl, r1
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	6818      	ldr	r0, [r3, #0]
 800cbf8:	fa00 f009 	lsl.w	r0, r0, r9
 800cbfc:	4310      	orrs	r0, r2
 800cbfe:	f84a 0b04 	str.w	r0, [sl], #4
 800cc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc06:	459c      	cmp	ip, r3
 800cc08:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc0c:	d8f3      	bhi.n	800cbf6 <__lshift+0x6e>
 800cc0e:	ebac 0304 	sub.w	r3, ip, r4
 800cc12:	3b15      	subs	r3, #21
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	3304      	adds	r3, #4
 800cc1a:	f104 0015 	add.w	r0, r4, #21
 800cc1e:	4584      	cmp	ip, r0
 800cc20:	bf38      	it	cc
 800cc22:	2304      	movcc	r3, #4
 800cc24:	50ca      	str	r2, [r1, r3]
 800cc26:	b10a      	cbz	r2, 800cc2c <__lshift+0xa4>
 800cc28:	f108 0602 	add.w	r6, r8, #2
 800cc2c:	3e01      	subs	r6, #1
 800cc2e:	4638      	mov	r0, r7
 800cc30:	612e      	str	r6, [r5, #16]
 800cc32:	4621      	mov	r1, r4
 800cc34:	f7ff fd8e 	bl	800c754 <_Bfree>
 800cc38:	4628      	mov	r0, r5
 800cc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc42:	3301      	adds	r3, #1
 800cc44:	e7c5      	b.n	800cbd2 <__lshift+0x4a>
 800cc46:	3904      	subs	r1, #4
 800cc48:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc50:	459c      	cmp	ip, r3
 800cc52:	d8f9      	bhi.n	800cc48 <__lshift+0xc0>
 800cc54:	e7ea      	b.n	800cc2c <__lshift+0xa4>
 800cc56:	bf00      	nop
 800cc58:	0800f0d1 	.word	0x0800f0d1
 800cc5c:	0800f0e2 	.word	0x0800f0e2

0800cc60 <__mcmp>:
 800cc60:	b530      	push	{r4, r5, lr}
 800cc62:	6902      	ldr	r2, [r0, #16]
 800cc64:	690c      	ldr	r4, [r1, #16]
 800cc66:	1b12      	subs	r2, r2, r4
 800cc68:	d10e      	bne.n	800cc88 <__mcmp+0x28>
 800cc6a:	f100 0314 	add.w	r3, r0, #20
 800cc6e:	3114      	adds	r1, #20
 800cc70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc80:	42a5      	cmp	r5, r4
 800cc82:	d003      	beq.n	800cc8c <__mcmp+0x2c>
 800cc84:	d305      	bcc.n	800cc92 <__mcmp+0x32>
 800cc86:	2201      	movs	r2, #1
 800cc88:	4610      	mov	r0, r2
 800cc8a:	bd30      	pop	{r4, r5, pc}
 800cc8c:	4283      	cmp	r3, r0
 800cc8e:	d3f3      	bcc.n	800cc78 <__mcmp+0x18>
 800cc90:	e7fa      	b.n	800cc88 <__mcmp+0x28>
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295
 800cc96:	e7f7      	b.n	800cc88 <__mcmp+0x28>

0800cc98 <__mdiff>:
 800cc98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	4606      	mov	r6, r0
 800cca0:	4611      	mov	r1, r2
 800cca2:	4620      	mov	r0, r4
 800cca4:	4690      	mov	r8, r2
 800cca6:	f7ff ffdb 	bl	800cc60 <__mcmp>
 800ccaa:	1e05      	subs	r5, r0, #0
 800ccac:	d110      	bne.n	800ccd0 <__mdiff+0x38>
 800ccae:	4629      	mov	r1, r5
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f7ff fd0f 	bl	800c6d4 <_Balloc>
 800ccb6:	b930      	cbnz	r0, 800ccc6 <__mdiff+0x2e>
 800ccb8:	4b3a      	ldr	r3, [pc, #232]	; (800cda4 <__mdiff+0x10c>)
 800ccba:	4602      	mov	r2, r0
 800ccbc:	f240 2137 	movw	r1, #567	; 0x237
 800ccc0:	4839      	ldr	r0, [pc, #228]	; (800cda8 <__mdiff+0x110>)
 800ccc2:	f001 fc7d 	bl	800e5c0 <__assert_func>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd0:	bfa4      	itt	ge
 800ccd2:	4643      	movge	r3, r8
 800ccd4:	46a0      	movge	r8, r4
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccdc:	bfa6      	itte	ge
 800ccde:	461c      	movge	r4, r3
 800cce0:	2500      	movge	r5, #0
 800cce2:	2501      	movlt	r5, #1
 800cce4:	f7ff fcf6 	bl	800c6d4 <_Balloc>
 800cce8:	b920      	cbnz	r0, 800ccf4 <__mdiff+0x5c>
 800ccea:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <__mdiff+0x10c>)
 800ccec:	4602      	mov	r2, r0
 800ccee:	f240 2145 	movw	r1, #581	; 0x245
 800ccf2:	e7e5      	b.n	800ccc0 <__mdiff+0x28>
 800ccf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccf8:	6926      	ldr	r6, [r4, #16]
 800ccfa:	60c5      	str	r5, [r0, #12]
 800ccfc:	f104 0914 	add.w	r9, r4, #20
 800cd00:	f108 0514 	add.w	r5, r8, #20
 800cd04:	f100 0e14 	add.w	lr, r0, #20
 800cd08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd10:	f108 0210 	add.w	r2, r8, #16
 800cd14:	46f2      	mov	sl, lr
 800cd16:	2100      	movs	r1, #0
 800cd18:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd20:	fa11 f88b 	uxtah	r8, r1, fp
 800cd24:	b299      	uxth	r1, r3
 800cd26:	0c1b      	lsrs	r3, r3, #16
 800cd28:	eba8 0801 	sub.w	r8, r8, r1
 800cd2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd34:	fa1f f888 	uxth.w	r8, r8
 800cd38:	1419      	asrs	r1, r3, #16
 800cd3a:	454e      	cmp	r6, r9
 800cd3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd40:	f84a 3b04 	str.w	r3, [sl], #4
 800cd44:	d8e8      	bhi.n	800cd18 <__mdiff+0x80>
 800cd46:	1b33      	subs	r3, r6, r4
 800cd48:	3b15      	subs	r3, #21
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	3304      	adds	r3, #4
 800cd50:	3415      	adds	r4, #21
 800cd52:	42a6      	cmp	r6, r4
 800cd54:	bf38      	it	cc
 800cd56:	2304      	movcc	r3, #4
 800cd58:	441d      	add	r5, r3
 800cd5a:	4473      	add	r3, lr
 800cd5c:	469e      	mov	lr, r3
 800cd5e:	462e      	mov	r6, r5
 800cd60:	4566      	cmp	r6, ip
 800cd62:	d30e      	bcc.n	800cd82 <__mdiff+0xea>
 800cd64:	f10c 0203 	add.w	r2, ip, #3
 800cd68:	1b52      	subs	r2, r2, r5
 800cd6a:	f022 0203 	bic.w	r2, r2, #3
 800cd6e:	3d03      	subs	r5, #3
 800cd70:	45ac      	cmp	ip, r5
 800cd72:	bf38      	it	cc
 800cd74:	2200      	movcc	r2, #0
 800cd76:	4413      	add	r3, r2
 800cd78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd7c:	b17a      	cbz	r2, 800cd9e <__mdiff+0x106>
 800cd7e:	6107      	str	r7, [r0, #16]
 800cd80:	e7a4      	b.n	800cccc <__mdiff+0x34>
 800cd82:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd86:	fa11 f288 	uxtah	r2, r1, r8
 800cd8a:	1414      	asrs	r4, r2, #16
 800cd8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd90:	b292      	uxth	r2, r2
 800cd92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd96:	f84e 2b04 	str.w	r2, [lr], #4
 800cd9a:	1421      	asrs	r1, r4, #16
 800cd9c:	e7e0      	b.n	800cd60 <__mdiff+0xc8>
 800cd9e:	3f01      	subs	r7, #1
 800cda0:	e7ea      	b.n	800cd78 <__mdiff+0xe0>
 800cda2:	bf00      	nop
 800cda4:	0800f0d1 	.word	0x0800f0d1
 800cda8:	0800f0e2 	.word	0x0800f0e2

0800cdac <__ulp>:
 800cdac:	b082      	sub	sp, #8
 800cdae:	ed8d 0b00 	vstr	d0, [sp]
 800cdb2:	9a01      	ldr	r2, [sp, #4]
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <__ulp+0x48>)
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dc08      	bgt.n	800cdd2 <__ulp+0x26>
 800cdc0:	425b      	negs	r3, r3
 800cdc2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cdc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cdca:	da04      	bge.n	800cdd6 <__ulp+0x2a>
 800cdcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cdd0:	4113      	asrs	r3, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	e008      	b.n	800cde8 <__ulp+0x3c>
 800cdd6:	f1a2 0314 	sub.w	r3, r2, #20
 800cdda:	2b1e      	cmp	r3, #30
 800cddc:	bfda      	itte	le
 800cdde:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cde2:	40da      	lsrle	r2, r3
 800cde4:	2201      	movgt	r2, #1
 800cde6:	2300      	movs	r3, #0
 800cde8:	4619      	mov	r1, r3
 800cdea:	4610      	mov	r0, r2
 800cdec:	ec41 0b10 	vmov	d0, r0, r1
 800cdf0:	b002      	add	sp, #8
 800cdf2:	4770      	bx	lr
 800cdf4:	7ff00000 	.word	0x7ff00000

0800cdf8 <__b2d>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	6906      	ldr	r6, [r0, #16]
 800cdfe:	f100 0814 	add.w	r8, r0, #20
 800ce02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce06:	1f37      	subs	r7, r6, #4
 800ce08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7ff fd53 	bl	800c8b8 <__hi0bits>
 800ce12:	f1c0 0320 	rsb	r3, r0, #32
 800ce16:	280a      	cmp	r0, #10
 800ce18:	600b      	str	r3, [r1, #0]
 800ce1a:	491b      	ldr	r1, [pc, #108]	; (800ce88 <__b2d+0x90>)
 800ce1c:	dc15      	bgt.n	800ce4a <__b2d+0x52>
 800ce1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce22:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce26:	45b8      	cmp	r8, r7
 800ce28:	ea43 0501 	orr.w	r5, r3, r1
 800ce2c:	bf34      	ite	cc
 800ce2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce32:	2300      	movcs	r3, #0
 800ce34:	3015      	adds	r0, #21
 800ce36:	fa02 f000 	lsl.w	r0, r2, r0
 800ce3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce3e:	4303      	orrs	r3, r0
 800ce40:	461c      	mov	r4, r3
 800ce42:	ec45 4b10 	vmov	d0, r4, r5
 800ce46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4a:	45b8      	cmp	r8, r7
 800ce4c:	bf3a      	itte	cc
 800ce4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce52:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce56:	2300      	movcs	r3, #0
 800ce58:	380b      	subs	r0, #11
 800ce5a:	d012      	beq.n	800ce82 <__b2d+0x8a>
 800ce5c:	f1c0 0120 	rsb	r1, r0, #32
 800ce60:	fa23 f401 	lsr.w	r4, r3, r1
 800ce64:	4082      	lsls	r2, r0
 800ce66:	4322      	orrs	r2, r4
 800ce68:	4547      	cmp	r7, r8
 800ce6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ce6e:	bf8c      	ite	hi
 800ce70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce74:	2200      	movls	r2, #0
 800ce76:	4083      	lsls	r3, r0
 800ce78:	40ca      	lsrs	r2, r1
 800ce7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	e7de      	b.n	800ce40 <__b2d+0x48>
 800ce82:	ea42 0501 	orr.w	r5, r2, r1
 800ce86:	e7db      	b.n	800ce40 <__b2d+0x48>
 800ce88:	3ff00000 	.word	0x3ff00000

0800ce8c <__d2b>:
 800ce8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce90:	460f      	mov	r7, r1
 800ce92:	2101      	movs	r1, #1
 800ce94:	ec59 8b10 	vmov	r8, r9, d0
 800ce98:	4616      	mov	r6, r2
 800ce9a:	f7ff fc1b 	bl	800c6d4 <_Balloc>
 800ce9e:	4604      	mov	r4, r0
 800cea0:	b930      	cbnz	r0, 800ceb0 <__d2b+0x24>
 800cea2:	4602      	mov	r2, r0
 800cea4:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <__d2b+0xac>)
 800cea6:	4825      	ldr	r0, [pc, #148]	; (800cf3c <__d2b+0xb0>)
 800cea8:	f240 310f 	movw	r1, #783	; 0x30f
 800ceac:	f001 fb88 	bl	800e5c0 <__assert_func>
 800ceb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ceb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceb8:	bb2d      	cbnz	r5, 800cf06 <__d2b+0x7a>
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	f1b8 0300 	subs.w	r3, r8, #0
 800cec0:	d026      	beq.n	800cf10 <__d2b+0x84>
 800cec2:	4668      	mov	r0, sp
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	f7ff fd17 	bl	800c8f8 <__lo0bits>
 800ceca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cece:	b1e8      	cbz	r0, 800cf0c <__d2b+0x80>
 800ced0:	f1c0 0320 	rsb	r3, r0, #32
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	430b      	orrs	r3, r1
 800ceda:	40c2      	lsrs	r2, r0
 800cedc:	6163      	str	r3, [r4, #20]
 800cede:	9201      	str	r2, [sp, #4]
 800cee0:	9b01      	ldr	r3, [sp, #4]
 800cee2:	61a3      	str	r3, [r4, #24]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bf14      	ite	ne
 800cee8:	2202      	movne	r2, #2
 800ceea:	2201      	moveq	r2, #1
 800ceec:	6122      	str	r2, [r4, #16]
 800ceee:	b1bd      	cbz	r5, 800cf20 <__d2b+0x94>
 800cef0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cef4:	4405      	add	r5, r0
 800cef6:	603d      	str	r5, [r7, #0]
 800cef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cefc:	6030      	str	r0, [r6, #0]
 800cefe:	4620      	mov	r0, r4
 800cf00:	b003      	add	sp, #12
 800cf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf0a:	e7d6      	b.n	800ceba <__d2b+0x2e>
 800cf0c:	6161      	str	r1, [r4, #20]
 800cf0e:	e7e7      	b.n	800cee0 <__d2b+0x54>
 800cf10:	a801      	add	r0, sp, #4
 800cf12:	f7ff fcf1 	bl	800c8f8 <__lo0bits>
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	6163      	str	r3, [r4, #20]
 800cf1a:	3020      	adds	r0, #32
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	e7e5      	b.n	800ceec <__d2b+0x60>
 800cf20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf28:	6038      	str	r0, [r7, #0]
 800cf2a:	6918      	ldr	r0, [r3, #16]
 800cf2c:	f7ff fcc4 	bl	800c8b8 <__hi0bits>
 800cf30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf34:	e7e2      	b.n	800cefc <__d2b+0x70>
 800cf36:	bf00      	nop
 800cf38:	0800f0d1 	.word	0x0800f0d1
 800cf3c:	0800f0e2 	.word	0x0800f0e2

0800cf40 <__ratio>:
 800cf40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	4688      	mov	r8, r1
 800cf46:	4669      	mov	r1, sp
 800cf48:	4681      	mov	r9, r0
 800cf4a:	f7ff ff55 	bl	800cdf8 <__b2d>
 800cf4e:	a901      	add	r1, sp, #4
 800cf50:	4640      	mov	r0, r8
 800cf52:	ec55 4b10 	vmov	r4, r5, d0
 800cf56:	f7ff ff4f 	bl	800cdf8 <__b2d>
 800cf5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf62:	eba3 0c02 	sub.w	ip, r3, r2
 800cf66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf70:	ec51 0b10 	vmov	r0, r1, d0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	bfd6      	itet	le
 800cf78:	460a      	movle	r2, r1
 800cf7a:	462a      	movgt	r2, r5
 800cf7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf80:	468b      	mov	fp, r1
 800cf82:	462f      	mov	r7, r5
 800cf84:	bfd4      	ite	le
 800cf86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf8e:	4620      	mov	r0, r4
 800cf90:	ee10 2a10 	vmov	r2, s0
 800cf94:	465b      	mov	r3, fp
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7f3 fc58 	bl	800084c <__aeabi_ddiv>
 800cf9c:	ec41 0b10 	vmov	d0, r0, r1
 800cfa0:	b003      	add	sp, #12
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa6 <__copybits>:
 800cfa6:	3901      	subs	r1, #1
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	1149      	asrs	r1, r1, #5
 800cfac:	6914      	ldr	r4, [r2, #16]
 800cfae:	3101      	adds	r1, #1
 800cfb0:	f102 0314 	add.w	r3, r2, #20
 800cfb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfbc:	1f05      	subs	r5, r0, #4
 800cfbe:	42a3      	cmp	r3, r4
 800cfc0:	d30c      	bcc.n	800cfdc <__copybits+0x36>
 800cfc2:	1aa3      	subs	r3, r4, r2
 800cfc4:	3b11      	subs	r3, #17
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	3211      	adds	r2, #17
 800cfcc:	42a2      	cmp	r2, r4
 800cfce:	bf88      	it	hi
 800cfd0:	2300      	movhi	r3, #0
 800cfd2:	4418      	add	r0, r3
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	4288      	cmp	r0, r1
 800cfd8:	d305      	bcc.n	800cfe6 <__copybits+0x40>
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfe0:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfe4:	e7eb      	b.n	800cfbe <__copybits+0x18>
 800cfe6:	f840 3b04 	str.w	r3, [r0], #4
 800cfea:	e7f4      	b.n	800cfd6 <__copybits+0x30>

0800cfec <__any_on>:
 800cfec:	f100 0214 	add.w	r2, r0, #20
 800cff0:	6900      	ldr	r0, [r0, #16]
 800cff2:	114b      	asrs	r3, r1, #5
 800cff4:	4298      	cmp	r0, r3
 800cff6:	b510      	push	{r4, lr}
 800cff8:	db11      	blt.n	800d01e <__any_on+0x32>
 800cffa:	dd0a      	ble.n	800d012 <__any_on+0x26>
 800cffc:	f011 011f 	ands.w	r1, r1, #31
 800d000:	d007      	beq.n	800d012 <__any_on+0x26>
 800d002:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d006:	fa24 f001 	lsr.w	r0, r4, r1
 800d00a:	fa00 f101 	lsl.w	r1, r0, r1
 800d00e:	428c      	cmp	r4, r1
 800d010:	d10b      	bne.n	800d02a <__any_on+0x3e>
 800d012:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d016:	4293      	cmp	r3, r2
 800d018:	d803      	bhi.n	800d022 <__any_on+0x36>
 800d01a:	2000      	movs	r0, #0
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	4603      	mov	r3, r0
 800d020:	e7f7      	b.n	800d012 <__any_on+0x26>
 800d022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d026:	2900      	cmp	r1, #0
 800d028:	d0f5      	beq.n	800d016 <__any_on+0x2a>
 800d02a:	2001      	movs	r0, #1
 800d02c:	e7f6      	b.n	800d01c <__any_on+0x30>

0800d02e <sulp>:
 800d02e:	b570      	push	{r4, r5, r6, lr}
 800d030:	4604      	mov	r4, r0
 800d032:	460d      	mov	r5, r1
 800d034:	ec45 4b10 	vmov	d0, r4, r5
 800d038:	4616      	mov	r6, r2
 800d03a:	f7ff feb7 	bl	800cdac <__ulp>
 800d03e:	ec51 0b10 	vmov	r0, r1, d0
 800d042:	b17e      	cbz	r6, 800d064 <sulp+0x36>
 800d044:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dd09      	ble.n	800d064 <sulp+0x36>
 800d050:	051b      	lsls	r3, r3, #20
 800d052:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d056:	2400      	movs	r4, #0
 800d058:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d05c:	4622      	mov	r2, r4
 800d05e:	462b      	mov	r3, r5
 800d060:	f7f3 faca 	bl	80005f8 <__aeabi_dmul>
 800d064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d068 <_strtod_l>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	ed2d 8b02 	vpush	{d8}
 800d070:	b09b      	sub	sp, #108	; 0x6c
 800d072:	4604      	mov	r4, r0
 800d074:	9213      	str	r2, [sp, #76]	; 0x4c
 800d076:	2200      	movs	r2, #0
 800d078:	9216      	str	r2, [sp, #88]	; 0x58
 800d07a:	460d      	mov	r5, r1
 800d07c:	f04f 0800 	mov.w	r8, #0
 800d080:	f04f 0900 	mov.w	r9, #0
 800d084:	460a      	mov	r2, r1
 800d086:	9215      	str	r2, [sp, #84]	; 0x54
 800d088:	7811      	ldrb	r1, [r2, #0]
 800d08a:	292b      	cmp	r1, #43	; 0x2b
 800d08c:	d04c      	beq.n	800d128 <_strtod_l+0xc0>
 800d08e:	d83a      	bhi.n	800d106 <_strtod_l+0x9e>
 800d090:	290d      	cmp	r1, #13
 800d092:	d834      	bhi.n	800d0fe <_strtod_l+0x96>
 800d094:	2908      	cmp	r1, #8
 800d096:	d834      	bhi.n	800d102 <_strtod_l+0x9a>
 800d098:	2900      	cmp	r1, #0
 800d09a:	d03d      	beq.n	800d118 <_strtod_l+0xb0>
 800d09c:	2200      	movs	r2, #0
 800d09e:	920a      	str	r2, [sp, #40]	; 0x28
 800d0a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d0a2:	7832      	ldrb	r2, [r6, #0]
 800d0a4:	2a30      	cmp	r2, #48	; 0x30
 800d0a6:	f040 80b4 	bne.w	800d212 <_strtod_l+0x1aa>
 800d0aa:	7872      	ldrb	r2, [r6, #1]
 800d0ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d0b0:	2a58      	cmp	r2, #88	; 0x58
 800d0b2:	d170      	bne.n	800d196 <_strtod_l+0x12e>
 800d0b4:	9302      	str	r3, [sp, #8]
 800d0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	ab16      	add	r3, sp, #88	; 0x58
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	4a8e      	ldr	r2, [pc, #568]	; (800d2f8 <_strtod_l+0x290>)
 800d0c0:	ab17      	add	r3, sp, #92	; 0x5c
 800d0c2:	a915      	add	r1, sp, #84	; 0x54
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f001 fb17 	bl	800e6f8 <__gethex>
 800d0ca:	f010 070f 	ands.w	r7, r0, #15
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	d005      	beq.n	800d0de <_strtod_l+0x76>
 800d0d2:	2f06      	cmp	r7, #6
 800d0d4:	d12a      	bne.n	800d12c <_strtod_l+0xc4>
 800d0d6:	3601      	adds	r6, #1
 800d0d8:	2300      	movs	r3, #0
 800d0da:	9615      	str	r6, [sp, #84]	; 0x54
 800d0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800d0de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f040 857f 	bne.w	800dbe4 <_strtod_l+0xb7c>
 800d0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e8:	b1db      	cbz	r3, 800d122 <_strtod_l+0xba>
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0f0:	ec43 2b10 	vmov	d0, r2, r3
 800d0f4:	b01b      	add	sp, #108	; 0x6c
 800d0f6:	ecbd 8b02 	vpop	{d8}
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	2920      	cmp	r1, #32
 800d100:	d1cc      	bne.n	800d09c <_strtod_l+0x34>
 800d102:	3201      	adds	r2, #1
 800d104:	e7bf      	b.n	800d086 <_strtod_l+0x1e>
 800d106:	292d      	cmp	r1, #45	; 0x2d
 800d108:	d1c8      	bne.n	800d09c <_strtod_l+0x34>
 800d10a:	2101      	movs	r1, #1
 800d10c:	910a      	str	r1, [sp, #40]	; 0x28
 800d10e:	1c51      	adds	r1, r2, #1
 800d110:	9115      	str	r1, [sp, #84]	; 0x54
 800d112:	7852      	ldrb	r2, [r2, #1]
 800d114:	2a00      	cmp	r2, #0
 800d116:	d1c3      	bne.n	800d0a0 <_strtod_l+0x38>
 800d118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d11a:	9515      	str	r5, [sp, #84]	; 0x54
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f040 855f 	bne.w	800dbe0 <_strtod_l+0xb78>
 800d122:	4642      	mov	r2, r8
 800d124:	464b      	mov	r3, r9
 800d126:	e7e3      	b.n	800d0f0 <_strtod_l+0x88>
 800d128:	2100      	movs	r1, #0
 800d12a:	e7ef      	b.n	800d10c <_strtod_l+0xa4>
 800d12c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d12e:	b13a      	cbz	r2, 800d140 <_strtod_l+0xd8>
 800d130:	2135      	movs	r1, #53	; 0x35
 800d132:	a818      	add	r0, sp, #96	; 0x60
 800d134:	f7ff ff37 	bl	800cfa6 <__copybits>
 800d138:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d13a:	4620      	mov	r0, r4
 800d13c:	f7ff fb0a 	bl	800c754 <_Bfree>
 800d140:	3f01      	subs	r7, #1
 800d142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d144:	2f04      	cmp	r7, #4
 800d146:	d806      	bhi.n	800d156 <_strtod_l+0xee>
 800d148:	e8df f007 	tbb	[pc, r7]
 800d14c:	201d0314 	.word	0x201d0314
 800d150:	14          	.byte	0x14
 800d151:	00          	.byte	0x00
 800d152:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d156:	05e9      	lsls	r1, r5, #23
 800d158:	bf48      	it	mi
 800d15a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d15e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d162:	0d1b      	lsrs	r3, r3, #20
 800d164:	051b      	lsls	r3, r3, #20
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1b9      	bne.n	800d0de <_strtod_l+0x76>
 800d16a:	f7fe fb07 	bl	800b77c <__errno>
 800d16e:	2322      	movs	r3, #34	; 0x22
 800d170:	6003      	str	r3, [r0, #0]
 800d172:	e7b4      	b.n	800d0de <_strtod_l+0x76>
 800d174:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d178:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d17c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d180:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d184:	e7e7      	b.n	800d156 <_strtod_l+0xee>
 800d186:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d300 <_strtod_l+0x298>
 800d18a:	e7e4      	b.n	800d156 <_strtod_l+0xee>
 800d18c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d190:	f04f 38ff 	mov.w	r8, #4294967295
 800d194:	e7df      	b.n	800d156 <_strtod_l+0xee>
 800d196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	9215      	str	r2, [sp, #84]	; 0x54
 800d19c:	785b      	ldrb	r3, [r3, #1]
 800d19e:	2b30      	cmp	r3, #48	; 0x30
 800d1a0:	d0f9      	beq.n	800d196 <_strtod_l+0x12e>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d09b      	beq.n	800d0de <_strtod_l+0x76>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	f04f 0a00 	mov.w	sl, #0
 800d1ac:	9304      	str	r3, [sp, #16]
 800d1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d1b6:	46d3      	mov	fp, sl
 800d1b8:	220a      	movs	r2, #10
 800d1ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d1bc:	7806      	ldrb	r6, [r0, #0]
 800d1be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d1c2:	b2d9      	uxtb	r1, r3
 800d1c4:	2909      	cmp	r1, #9
 800d1c6:	d926      	bls.n	800d216 <_strtod_l+0x1ae>
 800d1c8:	494c      	ldr	r1, [pc, #304]	; (800d2fc <_strtod_l+0x294>)
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f001 f9c0 	bl	800e550 <strncmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d030      	beq.n	800d236 <_strtod_l+0x1ce>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	9005      	str	r0, [sp, #20]
 800d1da:	465e      	mov	r6, fp
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2a65      	cmp	r2, #101	; 0x65
 800d1e0:	d001      	beq.n	800d1e6 <_strtod_l+0x17e>
 800d1e2:	2a45      	cmp	r2, #69	; 0x45
 800d1e4:	d113      	bne.n	800d20e <_strtod_l+0x1a6>
 800d1e6:	b91e      	cbnz	r6, 800d1f0 <_strtod_l+0x188>
 800d1e8:	9a04      	ldr	r2, [sp, #16]
 800d1ea:	4302      	orrs	r2, r0
 800d1ec:	d094      	beq.n	800d118 <_strtod_l+0xb0>
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d1f2:	1c6a      	adds	r2, r5, #1
 800d1f4:	9215      	str	r2, [sp, #84]	; 0x54
 800d1f6:	786a      	ldrb	r2, [r5, #1]
 800d1f8:	2a2b      	cmp	r2, #43	; 0x2b
 800d1fa:	d074      	beq.n	800d2e6 <_strtod_l+0x27e>
 800d1fc:	2a2d      	cmp	r2, #45	; 0x2d
 800d1fe:	d078      	beq.n	800d2f2 <_strtod_l+0x28a>
 800d200:	f04f 0c00 	mov.w	ip, #0
 800d204:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d208:	2909      	cmp	r1, #9
 800d20a:	d97f      	bls.n	800d30c <_strtod_l+0x2a4>
 800d20c:	9515      	str	r5, [sp, #84]	; 0x54
 800d20e:	2700      	movs	r7, #0
 800d210:	e09e      	b.n	800d350 <_strtod_l+0x2e8>
 800d212:	2300      	movs	r3, #0
 800d214:	e7c8      	b.n	800d1a8 <_strtod_l+0x140>
 800d216:	f1bb 0f08 	cmp.w	fp, #8
 800d21a:	bfd8      	it	le
 800d21c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d21e:	f100 0001 	add.w	r0, r0, #1
 800d222:	bfda      	itte	le
 800d224:	fb02 3301 	mlale	r3, r2, r1, r3
 800d228:	9309      	strle	r3, [sp, #36]	; 0x24
 800d22a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d22e:	f10b 0b01 	add.w	fp, fp, #1
 800d232:	9015      	str	r0, [sp, #84]	; 0x54
 800d234:	e7c1      	b.n	800d1ba <_strtod_l+0x152>
 800d236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	9215      	str	r2, [sp, #84]	; 0x54
 800d23c:	785a      	ldrb	r2, [r3, #1]
 800d23e:	f1bb 0f00 	cmp.w	fp, #0
 800d242:	d037      	beq.n	800d2b4 <_strtod_l+0x24c>
 800d244:	9005      	str	r0, [sp, #20]
 800d246:	465e      	mov	r6, fp
 800d248:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d24c:	2b09      	cmp	r3, #9
 800d24e:	d912      	bls.n	800d276 <_strtod_l+0x20e>
 800d250:	2301      	movs	r3, #1
 800d252:	e7c4      	b.n	800d1de <_strtod_l+0x176>
 800d254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	9215      	str	r2, [sp, #84]	; 0x54
 800d25a:	785a      	ldrb	r2, [r3, #1]
 800d25c:	3001      	adds	r0, #1
 800d25e:	2a30      	cmp	r2, #48	; 0x30
 800d260:	d0f8      	beq.n	800d254 <_strtod_l+0x1ec>
 800d262:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d266:	2b08      	cmp	r3, #8
 800d268:	f200 84c1 	bhi.w	800dbee <_strtod_l+0xb86>
 800d26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d26e:	9005      	str	r0, [sp, #20]
 800d270:	2000      	movs	r0, #0
 800d272:	930b      	str	r3, [sp, #44]	; 0x2c
 800d274:	4606      	mov	r6, r0
 800d276:	3a30      	subs	r2, #48	; 0x30
 800d278:	f100 0301 	add.w	r3, r0, #1
 800d27c:	d014      	beq.n	800d2a8 <_strtod_l+0x240>
 800d27e:	9905      	ldr	r1, [sp, #20]
 800d280:	4419      	add	r1, r3
 800d282:	9105      	str	r1, [sp, #20]
 800d284:	4633      	mov	r3, r6
 800d286:	eb00 0c06 	add.w	ip, r0, r6
 800d28a:	210a      	movs	r1, #10
 800d28c:	4563      	cmp	r3, ip
 800d28e:	d113      	bne.n	800d2b8 <_strtod_l+0x250>
 800d290:	1833      	adds	r3, r6, r0
 800d292:	2b08      	cmp	r3, #8
 800d294:	f106 0601 	add.w	r6, r6, #1
 800d298:	4406      	add	r6, r0
 800d29a:	dc1a      	bgt.n	800d2d2 <_strtod_l+0x26a>
 800d29c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d29e:	230a      	movs	r3, #10
 800d2a0:	fb03 2301 	mla	r3, r3, r1, r2
 800d2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2aa:	1c51      	adds	r1, r2, #1
 800d2ac:	9115      	str	r1, [sp, #84]	; 0x54
 800d2ae:	7852      	ldrb	r2, [r2, #1]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	e7c9      	b.n	800d248 <_strtod_l+0x1e0>
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	e7d2      	b.n	800d25e <_strtod_l+0x1f6>
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	f103 0301 	add.w	r3, r3, #1
 800d2be:	dc03      	bgt.n	800d2c8 <_strtod_l+0x260>
 800d2c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d2c2:	434f      	muls	r7, r1
 800d2c4:	9709      	str	r7, [sp, #36]	; 0x24
 800d2c6:	e7e1      	b.n	800d28c <_strtod_l+0x224>
 800d2c8:	2b10      	cmp	r3, #16
 800d2ca:	bfd8      	it	le
 800d2cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d2d0:	e7dc      	b.n	800d28c <_strtod_l+0x224>
 800d2d2:	2e10      	cmp	r6, #16
 800d2d4:	bfdc      	itt	le
 800d2d6:	230a      	movle	r3, #10
 800d2d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d2dc:	e7e3      	b.n	800d2a6 <_strtod_l+0x23e>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e780      	b.n	800d1e8 <_strtod_l+0x180>
 800d2e6:	f04f 0c00 	mov.w	ip, #0
 800d2ea:	1caa      	adds	r2, r5, #2
 800d2ec:	9215      	str	r2, [sp, #84]	; 0x54
 800d2ee:	78aa      	ldrb	r2, [r5, #2]
 800d2f0:	e788      	b.n	800d204 <_strtod_l+0x19c>
 800d2f2:	f04f 0c01 	mov.w	ip, #1
 800d2f6:	e7f8      	b.n	800d2ea <_strtod_l+0x282>
 800d2f8:	0800f240 	.word	0x0800f240
 800d2fc:	0800f23c 	.word	0x0800f23c
 800d300:	7ff00000 	.word	0x7ff00000
 800d304:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d306:	1c51      	adds	r1, r2, #1
 800d308:	9115      	str	r1, [sp, #84]	; 0x54
 800d30a:	7852      	ldrb	r2, [r2, #1]
 800d30c:	2a30      	cmp	r2, #48	; 0x30
 800d30e:	d0f9      	beq.n	800d304 <_strtod_l+0x29c>
 800d310:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d314:	2908      	cmp	r1, #8
 800d316:	f63f af7a 	bhi.w	800d20e <_strtod_l+0x1a6>
 800d31a:	3a30      	subs	r2, #48	; 0x30
 800d31c:	9208      	str	r2, [sp, #32]
 800d31e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d320:	920c      	str	r2, [sp, #48]	; 0x30
 800d322:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d324:	1c57      	adds	r7, r2, #1
 800d326:	9715      	str	r7, [sp, #84]	; 0x54
 800d328:	7852      	ldrb	r2, [r2, #1]
 800d32a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d32e:	f1be 0f09 	cmp.w	lr, #9
 800d332:	d938      	bls.n	800d3a6 <_strtod_l+0x33e>
 800d334:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d336:	1a7f      	subs	r7, r7, r1
 800d338:	2f08      	cmp	r7, #8
 800d33a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d33e:	dc03      	bgt.n	800d348 <_strtod_l+0x2e0>
 800d340:	9908      	ldr	r1, [sp, #32]
 800d342:	428f      	cmp	r7, r1
 800d344:	bfa8      	it	ge
 800d346:	460f      	movge	r7, r1
 800d348:	f1bc 0f00 	cmp.w	ip, #0
 800d34c:	d000      	beq.n	800d350 <_strtod_l+0x2e8>
 800d34e:	427f      	negs	r7, r7
 800d350:	2e00      	cmp	r6, #0
 800d352:	d14f      	bne.n	800d3f4 <_strtod_l+0x38c>
 800d354:	9904      	ldr	r1, [sp, #16]
 800d356:	4301      	orrs	r1, r0
 800d358:	f47f aec1 	bne.w	800d0de <_strtod_l+0x76>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f47f aedb 	bne.w	800d118 <_strtod_l+0xb0>
 800d362:	2a69      	cmp	r2, #105	; 0x69
 800d364:	d029      	beq.n	800d3ba <_strtod_l+0x352>
 800d366:	dc26      	bgt.n	800d3b6 <_strtod_l+0x34e>
 800d368:	2a49      	cmp	r2, #73	; 0x49
 800d36a:	d026      	beq.n	800d3ba <_strtod_l+0x352>
 800d36c:	2a4e      	cmp	r2, #78	; 0x4e
 800d36e:	f47f aed3 	bne.w	800d118 <_strtod_l+0xb0>
 800d372:	499b      	ldr	r1, [pc, #620]	; (800d5e0 <_strtod_l+0x578>)
 800d374:	a815      	add	r0, sp, #84	; 0x54
 800d376:	f001 fbff 	bl	800eb78 <__match>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	f43f aecc 	beq.w	800d118 <_strtod_l+0xb0>
 800d380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b28      	cmp	r3, #40	; 0x28
 800d386:	d12f      	bne.n	800d3e8 <_strtod_l+0x380>
 800d388:	4996      	ldr	r1, [pc, #600]	; (800d5e4 <_strtod_l+0x57c>)
 800d38a:	aa18      	add	r2, sp, #96	; 0x60
 800d38c:	a815      	add	r0, sp, #84	; 0x54
 800d38e:	f001 fc07 	bl	800eba0 <__hexnan>
 800d392:	2805      	cmp	r0, #5
 800d394:	d128      	bne.n	800d3e8 <_strtod_l+0x380>
 800d396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d39c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d3a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d3a4:	e69b      	b.n	800d0de <_strtod_l+0x76>
 800d3a6:	9f08      	ldr	r7, [sp, #32]
 800d3a8:	210a      	movs	r1, #10
 800d3aa:	fb01 2107 	mla	r1, r1, r7, r2
 800d3ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d3b2:	9208      	str	r2, [sp, #32]
 800d3b4:	e7b5      	b.n	800d322 <_strtod_l+0x2ba>
 800d3b6:	2a6e      	cmp	r2, #110	; 0x6e
 800d3b8:	e7d9      	b.n	800d36e <_strtod_l+0x306>
 800d3ba:	498b      	ldr	r1, [pc, #556]	; (800d5e8 <_strtod_l+0x580>)
 800d3bc:	a815      	add	r0, sp, #84	; 0x54
 800d3be:	f001 fbdb 	bl	800eb78 <__match>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f43f aea8 	beq.w	800d118 <_strtod_l+0xb0>
 800d3c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ca:	4988      	ldr	r1, [pc, #544]	; (800d5ec <_strtod_l+0x584>)
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	a815      	add	r0, sp, #84	; 0x54
 800d3d0:	9315      	str	r3, [sp, #84]	; 0x54
 800d3d2:	f001 fbd1 	bl	800eb78 <__match>
 800d3d6:	b910      	cbnz	r0, 800d3de <_strtod_l+0x376>
 800d3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3da:	3301      	adds	r3, #1
 800d3dc:	9315      	str	r3, [sp, #84]	; 0x54
 800d3de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d5fc <_strtod_l+0x594>
 800d3e2:	f04f 0800 	mov.w	r8, #0
 800d3e6:	e67a      	b.n	800d0de <_strtod_l+0x76>
 800d3e8:	4881      	ldr	r0, [pc, #516]	; (800d5f0 <_strtod_l+0x588>)
 800d3ea:	f001 f8e1 	bl	800e5b0 <nan>
 800d3ee:	ec59 8b10 	vmov	r8, r9, d0
 800d3f2:	e674      	b.n	800d0de <_strtod_l+0x76>
 800d3f4:	9b05      	ldr	r3, [sp, #20]
 800d3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3f8:	1afb      	subs	r3, r7, r3
 800d3fa:	f1bb 0f00 	cmp.w	fp, #0
 800d3fe:	bf08      	it	eq
 800d400:	46b3      	moveq	fp, r6
 800d402:	2e10      	cmp	r6, #16
 800d404:	9308      	str	r3, [sp, #32]
 800d406:	4635      	mov	r5, r6
 800d408:	bfa8      	it	ge
 800d40a:	2510      	movge	r5, #16
 800d40c:	f7f3 f87a 	bl	8000504 <__aeabi_ui2d>
 800d410:	2e09      	cmp	r6, #9
 800d412:	4680      	mov	r8, r0
 800d414:	4689      	mov	r9, r1
 800d416:	dd13      	ble.n	800d440 <_strtod_l+0x3d8>
 800d418:	4b76      	ldr	r3, [pc, #472]	; (800d5f4 <_strtod_l+0x58c>)
 800d41a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d41e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d422:	f7f3 f8e9 	bl	80005f8 <__aeabi_dmul>
 800d426:	4680      	mov	r8, r0
 800d428:	4650      	mov	r0, sl
 800d42a:	4689      	mov	r9, r1
 800d42c:	f7f3 f86a 	bl	8000504 <__aeabi_ui2d>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4640      	mov	r0, r8
 800d436:	4649      	mov	r1, r9
 800d438:	f7f2 ff28 	bl	800028c <__adddf3>
 800d43c:	4680      	mov	r8, r0
 800d43e:	4689      	mov	r9, r1
 800d440:	2e0f      	cmp	r6, #15
 800d442:	dc38      	bgt.n	800d4b6 <_strtod_l+0x44e>
 800d444:	9b08      	ldr	r3, [sp, #32]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f43f ae49 	beq.w	800d0de <_strtod_l+0x76>
 800d44c:	dd24      	ble.n	800d498 <_strtod_l+0x430>
 800d44e:	2b16      	cmp	r3, #22
 800d450:	dc0b      	bgt.n	800d46a <_strtod_l+0x402>
 800d452:	4968      	ldr	r1, [pc, #416]	; (800d5f4 <_strtod_l+0x58c>)
 800d454:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d45c:	4642      	mov	r2, r8
 800d45e:	464b      	mov	r3, r9
 800d460:	f7f3 f8ca 	bl	80005f8 <__aeabi_dmul>
 800d464:	4680      	mov	r8, r0
 800d466:	4689      	mov	r9, r1
 800d468:	e639      	b.n	800d0de <_strtod_l+0x76>
 800d46a:	9a08      	ldr	r2, [sp, #32]
 800d46c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d470:	4293      	cmp	r3, r2
 800d472:	db20      	blt.n	800d4b6 <_strtod_l+0x44e>
 800d474:	4c5f      	ldr	r4, [pc, #380]	; (800d5f4 <_strtod_l+0x58c>)
 800d476:	f1c6 060f 	rsb	r6, r6, #15
 800d47a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d47e:	4642      	mov	r2, r8
 800d480:	464b      	mov	r3, r9
 800d482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d486:	f7f3 f8b7 	bl	80005f8 <__aeabi_dmul>
 800d48a:	9b08      	ldr	r3, [sp, #32]
 800d48c:	1b9e      	subs	r6, r3, r6
 800d48e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d492:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d496:	e7e3      	b.n	800d460 <_strtod_l+0x3f8>
 800d498:	9b08      	ldr	r3, [sp, #32]
 800d49a:	3316      	adds	r3, #22
 800d49c:	db0b      	blt.n	800d4b6 <_strtod_l+0x44e>
 800d49e:	9b05      	ldr	r3, [sp, #20]
 800d4a0:	1bdf      	subs	r7, r3, r7
 800d4a2:	4b54      	ldr	r3, [pc, #336]	; (800d5f4 <_strtod_l+0x58c>)
 800d4a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	4649      	mov	r1, r9
 800d4b0:	f7f3 f9cc 	bl	800084c <__aeabi_ddiv>
 800d4b4:	e7d6      	b.n	800d464 <_strtod_l+0x3fc>
 800d4b6:	9b08      	ldr	r3, [sp, #32]
 800d4b8:	1b75      	subs	r5, r6, r5
 800d4ba:	441d      	add	r5, r3
 800d4bc:	2d00      	cmp	r5, #0
 800d4be:	dd70      	ble.n	800d5a2 <_strtod_l+0x53a>
 800d4c0:	f015 030f 	ands.w	r3, r5, #15
 800d4c4:	d00a      	beq.n	800d4dc <_strtod_l+0x474>
 800d4c6:	494b      	ldr	r1, [pc, #300]	; (800d5f4 <_strtod_l+0x58c>)
 800d4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4cc:	4642      	mov	r2, r8
 800d4ce:	464b      	mov	r3, r9
 800d4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d4:	f7f3 f890 	bl	80005f8 <__aeabi_dmul>
 800d4d8:	4680      	mov	r8, r0
 800d4da:	4689      	mov	r9, r1
 800d4dc:	f035 050f 	bics.w	r5, r5, #15
 800d4e0:	d04d      	beq.n	800d57e <_strtod_l+0x516>
 800d4e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d4e6:	dd22      	ble.n	800d52e <_strtod_l+0x4c6>
 800d4e8:	2500      	movs	r5, #0
 800d4ea:	46ab      	mov	fp, r5
 800d4ec:	9509      	str	r5, [sp, #36]	; 0x24
 800d4ee:	9505      	str	r5, [sp, #20]
 800d4f0:	2322      	movs	r3, #34	; 0x22
 800d4f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d5fc <_strtod_l+0x594>
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	f04f 0800 	mov.w	r8, #0
 800d4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f43f aded 	beq.w	800d0de <_strtod_l+0x76>
 800d504:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d506:	4620      	mov	r0, r4
 800d508:	f7ff f924 	bl	800c754 <_Bfree>
 800d50c:	9905      	ldr	r1, [sp, #20]
 800d50e:	4620      	mov	r0, r4
 800d510:	f7ff f920 	bl	800c754 <_Bfree>
 800d514:	4659      	mov	r1, fp
 800d516:	4620      	mov	r0, r4
 800d518:	f7ff f91c 	bl	800c754 <_Bfree>
 800d51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff f918 	bl	800c754 <_Bfree>
 800d524:	4629      	mov	r1, r5
 800d526:	4620      	mov	r0, r4
 800d528:	f7ff f914 	bl	800c754 <_Bfree>
 800d52c:	e5d7      	b.n	800d0de <_strtod_l+0x76>
 800d52e:	4b32      	ldr	r3, [pc, #200]	; (800d5f8 <_strtod_l+0x590>)
 800d530:	9304      	str	r3, [sp, #16]
 800d532:	2300      	movs	r3, #0
 800d534:	112d      	asrs	r5, r5, #4
 800d536:	4640      	mov	r0, r8
 800d538:	4649      	mov	r1, r9
 800d53a:	469a      	mov	sl, r3
 800d53c:	2d01      	cmp	r5, #1
 800d53e:	dc21      	bgt.n	800d584 <_strtod_l+0x51c>
 800d540:	b10b      	cbz	r3, 800d546 <_strtod_l+0x4de>
 800d542:	4680      	mov	r8, r0
 800d544:	4689      	mov	r9, r1
 800d546:	492c      	ldr	r1, [pc, #176]	; (800d5f8 <_strtod_l+0x590>)
 800d548:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d54c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d550:	4642      	mov	r2, r8
 800d552:	464b      	mov	r3, r9
 800d554:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d558:	f7f3 f84e 	bl	80005f8 <__aeabi_dmul>
 800d55c:	4b27      	ldr	r3, [pc, #156]	; (800d5fc <_strtod_l+0x594>)
 800d55e:	460a      	mov	r2, r1
 800d560:	400b      	ands	r3, r1
 800d562:	4927      	ldr	r1, [pc, #156]	; (800d600 <_strtod_l+0x598>)
 800d564:	428b      	cmp	r3, r1
 800d566:	4680      	mov	r8, r0
 800d568:	d8be      	bhi.n	800d4e8 <_strtod_l+0x480>
 800d56a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d56e:	428b      	cmp	r3, r1
 800d570:	bf86      	itte	hi
 800d572:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d604 <_strtod_l+0x59c>
 800d576:	f04f 38ff 	movhi.w	r8, #4294967295
 800d57a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d57e:	2300      	movs	r3, #0
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	e07b      	b.n	800d67c <_strtod_l+0x614>
 800d584:	07ea      	lsls	r2, r5, #31
 800d586:	d505      	bpl.n	800d594 <_strtod_l+0x52c>
 800d588:	9b04      	ldr	r3, [sp, #16]
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	2301      	movs	r3, #1
 800d594:	9a04      	ldr	r2, [sp, #16]
 800d596:	3208      	adds	r2, #8
 800d598:	f10a 0a01 	add.w	sl, sl, #1
 800d59c:	106d      	asrs	r5, r5, #1
 800d59e:	9204      	str	r2, [sp, #16]
 800d5a0:	e7cc      	b.n	800d53c <_strtod_l+0x4d4>
 800d5a2:	d0ec      	beq.n	800d57e <_strtod_l+0x516>
 800d5a4:	426d      	negs	r5, r5
 800d5a6:	f015 020f 	ands.w	r2, r5, #15
 800d5aa:	d00a      	beq.n	800d5c2 <_strtod_l+0x55a>
 800d5ac:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <_strtod_l+0x58c>)
 800d5ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	f7f3 f947 	bl	800084c <__aeabi_ddiv>
 800d5be:	4680      	mov	r8, r0
 800d5c0:	4689      	mov	r9, r1
 800d5c2:	112d      	asrs	r5, r5, #4
 800d5c4:	d0db      	beq.n	800d57e <_strtod_l+0x516>
 800d5c6:	2d1f      	cmp	r5, #31
 800d5c8:	dd1e      	ble.n	800d608 <_strtod_l+0x5a0>
 800d5ca:	2500      	movs	r5, #0
 800d5cc:	46ab      	mov	fp, r5
 800d5ce:	9509      	str	r5, [sp, #36]	; 0x24
 800d5d0:	9505      	str	r5, [sp, #20]
 800d5d2:	2322      	movs	r3, #34	; 0x22
 800d5d4:	f04f 0800 	mov.w	r8, #0
 800d5d8:	f04f 0900 	mov.w	r9, #0
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	e78d      	b.n	800d4fc <_strtod_l+0x494>
 800d5e0:	0800f029 	.word	0x0800f029
 800d5e4:	0800f254 	.word	0x0800f254
 800d5e8:	0800f021 	.word	0x0800f021
 800d5ec:	0800f058 	.word	0x0800f058
 800d5f0:	0800f3e5 	.word	0x0800f3e5
 800d5f4:	0800f168 	.word	0x0800f168
 800d5f8:	0800f140 	.word	0x0800f140
 800d5fc:	7ff00000 	.word	0x7ff00000
 800d600:	7ca00000 	.word	0x7ca00000
 800d604:	7fefffff 	.word	0x7fefffff
 800d608:	f015 0310 	ands.w	r3, r5, #16
 800d60c:	bf18      	it	ne
 800d60e:	236a      	movne	r3, #106	; 0x6a
 800d610:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d9b4 <_strtod_l+0x94c>
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	4640      	mov	r0, r8
 800d618:	4649      	mov	r1, r9
 800d61a:	2300      	movs	r3, #0
 800d61c:	07ea      	lsls	r2, r5, #31
 800d61e:	d504      	bpl.n	800d62a <_strtod_l+0x5c2>
 800d620:	e9da 2300 	ldrd	r2, r3, [sl]
 800d624:	f7f2 ffe8 	bl	80005f8 <__aeabi_dmul>
 800d628:	2301      	movs	r3, #1
 800d62a:	106d      	asrs	r5, r5, #1
 800d62c:	f10a 0a08 	add.w	sl, sl, #8
 800d630:	d1f4      	bne.n	800d61c <_strtod_l+0x5b4>
 800d632:	b10b      	cbz	r3, 800d638 <_strtod_l+0x5d0>
 800d634:	4680      	mov	r8, r0
 800d636:	4689      	mov	r9, r1
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	b1bb      	cbz	r3, 800d66c <_strtod_l+0x604>
 800d63c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d640:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d644:	2b00      	cmp	r3, #0
 800d646:	4649      	mov	r1, r9
 800d648:	dd10      	ble.n	800d66c <_strtod_l+0x604>
 800d64a:	2b1f      	cmp	r3, #31
 800d64c:	f340 811e 	ble.w	800d88c <_strtod_l+0x824>
 800d650:	2b34      	cmp	r3, #52	; 0x34
 800d652:	bfde      	ittt	le
 800d654:	f04f 33ff 	movle.w	r3, #4294967295
 800d658:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d65c:	4093      	lslle	r3, r2
 800d65e:	f04f 0800 	mov.w	r8, #0
 800d662:	bfcc      	ite	gt
 800d664:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d668:	ea03 0901 	andle.w	r9, r3, r1
 800d66c:	2200      	movs	r2, #0
 800d66e:	2300      	movs	r3, #0
 800d670:	4640      	mov	r0, r8
 800d672:	4649      	mov	r1, r9
 800d674:	f7f3 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d1a6      	bne.n	800d5ca <_strtod_l+0x562>
 800d67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d682:	4633      	mov	r3, r6
 800d684:	465a      	mov	r2, fp
 800d686:	4620      	mov	r0, r4
 800d688:	f7ff f8cc 	bl	800c824 <__s2b>
 800d68c:	9009      	str	r0, [sp, #36]	; 0x24
 800d68e:	2800      	cmp	r0, #0
 800d690:	f43f af2a 	beq.w	800d4e8 <_strtod_l+0x480>
 800d694:	9a08      	ldr	r2, [sp, #32]
 800d696:	9b05      	ldr	r3, [sp, #20]
 800d698:	2a00      	cmp	r2, #0
 800d69a:	eba3 0307 	sub.w	r3, r3, r7
 800d69e:	bfa8      	it	ge
 800d6a0:	2300      	movge	r3, #0
 800d6a2:	930c      	str	r3, [sp, #48]	; 0x30
 800d6a4:	2500      	movs	r5, #0
 800d6a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d6aa:	9312      	str	r3, [sp, #72]	; 0x48
 800d6ac:	46ab      	mov	fp, r5
 800d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	6859      	ldr	r1, [r3, #4]
 800d6b4:	f7ff f80e 	bl	800c6d4 <_Balloc>
 800d6b8:	9005      	str	r0, [sp, #20]
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	f43f af18 	beq.w	800d4f0 <_strtod_l+0x488>
 800d6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c2:	691a      	ldr	r2, [r3, #16]
 800d6c4:	3202      	adds	r2, #2
 800d6c6:	f103 010c 	add.w	r1, r3, #12
 800d6ca:	0092      	lsls	r2, r2, #2
 800d6cc:	300c      	adds	r0, #12
 800d6ce:	f000 ff61 	bl	800e594 <memcpy>
 800d6d2:	ec49 8b10 	vmov	d0, r8, r9
 800d6d6:	aa18      	add	r2, sp, #96	; 0x60
 800d6d8:	a917      	add	r1, sp, #92	; 0x5c
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7ff fbd6 	bl	800ce8c <__d2b>
 800d6e0:	ec49 8b18 	vmov	d8, r8, r9
 800d6e4:	9016      	str	r0, [sp, #88]	; 0x58
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f43f af02 	beq.w	800d4f0 <_strtod_l+0x488>
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7ff f930 	bl	800c954 <__i2b>
 800d6f4:	4683      	mov	fp, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f aefa 	beq.w	800d4f0 <_strtod_l+0x488>
 800d6fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d6fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d700:	2e00      	cmp	r6, #0
 800d702:	bfab      	itete	ge
 800d704:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d706:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d708:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d70a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d70e:	bfac      	ite	ge
 800d710:	eb06 0a03 	addge.w	sl, r6, r3
 800d714:	1b9f      	sublt	r7, r3, r6
 800d716:	9b04      	ldr	r3, [sp, #16]
 800d718:	1af6      	subs	r6, r6, r3
 800d71a:	4416      	add	r6, r2
 800d71c:	4ba0      	ldr	r3, [pc, #640]	; (800d9a0 <_strtod_l+0x938>)
 800d71e:	3e01      	subs	r6, #1
 800d720:	429e      	cmp	r6, r3
 800d722:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d726:	f280 80c4 	bge.w	800d8b2 <_strtod_l+0x84a>
 800d72a:	1b9b      	subs	r3, r3, r6
 800d72c:	2b1f      	cmp	r3, #31
 800d72e:	eba2 0203 	sub.w	r2, r2, r3
 800d732:	f04f 0101 	mov.w	r1, #1
 800d736:	f300 80b0 	bgt.w	800d89a <_strtod_l+0x832>
 800d73a:	fa01 f303 	lsl.w	r3, r1, r3
 800d73e:	930e      	str	r3, [sp, #56]	; 0x38
 800d740:	2300      	movs	r3, #0
 800d742:	930d      	str	r3, [sp, #52]	; 0x34
 800d744:	eb0a 0602 	add.w	r6, sl, r2
 800d748:	9b04      	ldr	r3, [sp, #16]
 800d74a:	45b2      	cmp	sl, r6
 800d74c:	4417      	add	r7, r2
 800d74e:	441f      	add	r7, r3
 800d750:	4653      	mov	r3, sl
 800d752:	bfa8      	it	ge
 800d754:	4633      	movge	r3, r6
 800d756:	42bb      	cmp	r3, r7
 800d758:	bfa8      	it	ge
 800d75a:	463b      	movge	r3, r7
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	bfc2      	ittt	gt
 800d760:	1af6      	subgt	r6, r6, r3
 800d762:	1aff      	subgt	r7, r7, r3
 800d764:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dd17      	ble.n	800d79e <_strtod_l+0x736>
 800d76e:	4659      	mov	r1, fp
 800d770:	461a      	mov	r2, r3
 800d772:	4620      	mov	r0, r4
 800d774:	f7ff f9ae 	bl	800cad4 <__pow5mult>
 800d778:	4683      	mov	fp, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	f43f aeb8 	beq.w	800d4f0 <_strtod_l+0x488>
 800d780:	4601      	mov	r1, r0
 800d782:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d784:	4620      	mov	r0, r4
 800d786:	f7ff f8fb 	bl	800c980 <__multiply>
 800d78a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f43f aeaf 	beq.w	800d4f0 <_strtod_l+0x488>
 800d792:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d794:	4620      	mov	r0, r4
 800d796:	f7fe ffdd 	bl	800c754 <_Bfree>
 800d79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d79c:	9316      	str	r3, [sp, #88]	; 0x58
 800d79e:	2e00      	cmp	r6, #0
 800d7a0:	f300 808c 	bgt.w	800d8bc <_strtod_l+0x854>
 800d7a4:	9b08      	ldr	r3, [sp, #32]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	dd08      	ble.n	800d7bc <_strtod_l+0x754>
 800d7aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7ac:	9905      	ldr	r1, [sp, #20]
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f7ff f990 	bl	800cad4 <__pow5mult>
 800d7b4:	9005      	str	r0, [sp, #20]
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	f43f ae9a 	beq.w	800d4f0 <_strtod_l+0x488>
 800d7bc:	2f00      	cmp	r7, #0
 800d7be:	dd08      	ble.n	800d7d2 <_strtod_l+0x76a>
 800d7c0:	9905      	ldr	r1, [sp, #20]
 800d7c2:	463a      	mov	r2, r7
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7ff f9df 	bl	800cb88 <__lshift>
 800d7ca:	9005      	str	r0, [sp, #20]
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	f43f ae8f 	beq.w	800d4f0 <_strtod_l+0x488>
 800d7d2:	f1ba 0f00 	cmp.w	sl, #0
 800d7d6:	dd08      	ble.n	800d7ea <_strtod_l+0x782>
 800d7d8:	4659      	mov	r1, fp
 800d7da:	4652      	mov	r2, sl
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f7ff f9d3 	bl	800cb88 <__lshift>
 800d7e2:	4683      	mov	fp, r0
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f43f ae83 	beq.w	800d4f0 <_strtod_l+0x488>
 800d7ea:	9a05      	ldr	r2, [sp, #20]
 800d7ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7ff fa52 	bl	800cc98 <__mdiff>
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f ae7a 	beq.w	800d4f0 <_strtod_l+0x488>
 800d7fc:	68c3      	ldr	r3, [r0, #12]
 800d7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800d800:	2300      	movs	r3, #0
 800d802:	60c3      	str	r3, [r0, #12]
 800d804:	4659      	mov	r1, fp
 800d806:	f7ff fa2b 	bl	800cc60 <__mcmp>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	da60      	bge.n	800d8d0 <_strtod_l+0x868>
 800d80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d810:	ea53 0308 	orrs.w	r3, r3, r8
 800d814:	f040 8084 	bne.w	800d920 <_strtod_l+0x8b8>
 800d818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d17f      	bne.n	800d920 <_strtod_l+0x8b8>
 800d820:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d824:	0d1b      	lsrs	r3, r3, #20
 800d826:	051b      	lsls	r3, r3, #20
 800d828:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d82c:	d978      	bls.n	800d920 <_strtod_l+0x8b8>
 800d82e:	696b      	ldr	r3, [r5, #20]
 800d830:	b913      	cbnz	r3, 800d838 <_strtod_l+0x7d0>
 800d832:	692b      	ldr	r3, [r5, #16]
 800d834:	2b01      	cmp	r3, #1
 800d836:	dd73      	ble.n	800d920 <_strtod_l+0x8b8>
 800d838:	4629      	mov	r1, r5
 800d83a:	2201      	movs	r2, #1
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7ff f9a3 	bl	800cb88 <__lshift>
 800d842:	4659      	mov	r1, fp
 800d844:	4605      	mov	r5, r0
 800d846:	f7ff fa0b 	bl	800cc60 <__mcmp>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	dd68      	ble.n	800d920 <_strtod_l+0x8b8>
 800d84e:	9904      	ldr	r1, [sp, #16]
 800d850:	4a54      	ldr	r2, [pc, #336]	; (800d9a4 <_strtod_l+0x93c>)
 800d852:	464b      	mov	r3, r9
 800d854:	2900      	cmp	r1, #0
 800d856:	f000 8084 	beq.w	800d962 <_strtod_l+0x8fa>
 800d85a:	ea02 0109 	and.w	r1, r2, r9
 800d85e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d862:	dc7e      	bgt.n	800d962 <_strtod_l+0x8fa>
 800d864:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d868:	f77f aeb3 	ble.w	800d5d2 <_strtod_l+0x56a>
 800d86c:	4b4e      	ldr	r3, [pc, #312]	; (800d9a8 <_strtod_l+0x940>)
 800d86e:	4640      	mov	r0, r8
 800d870:	4649      	mov	r1, r9
 800d872:	2200      	movs	r2, #0
 800d874:	f7f2 fec0 	bl	80005f8 <__aeabi_dmul>
 800d878:	4b4a      	ldr	r3, [pc, #296]	; (800d9a4 <_strtod_l+0x93c>)
 800d87a:	400b      	ands	r3, r1
 800d87c:	4680      	mov	r8, r0
 800d87e:	4689      	mov	r9, r1
 800d880:	2b00      	cmp	r3, #0
 800d882:	f47f ae3f 	bne.w	800d504 <_strtod_l+0x49c>
 800d886:	2322      	movs	r3, #34	; 0x22
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	e63b      	b.n	800d504 <_strtod_l+0x49c>
 800d88c:	f04f 32ff 	mov.w	r2, #4294967295
 800d890:	fa02 f303 	lsl.w	r3, r2, r3
 800d894:	ea03 0808 	and.w	r8, r3, r8
 800d898:	e6e8      	b.n	800d66c <_strtod_l+0x604>
 800d89a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d89e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d8a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d8a6:	36e2      	adds	r6, #226	; 0xe2
 800d8a8:	fa01 f306 	lsl.w	r3, r1, r6
 800d8ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d8b0:	e748      	b.n	800d744 <_strtod_l+0x6dc>
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d8ba:	e743      	b.n	800d744 <_strtod_l+0x6dc>
 800d8bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8be:	4632      	mov	r2, r6
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff f961 	bl	800cb88 <__lshift>
 800d8c6:	9016      	str	r0, [sp, #88]	; 0x58
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f47f af6b 	bne.w	800d7a4 <_strtod_l+0x73c>
 800d8ce:	e60f      	b.n	800d4f0 <_strtod_l+0x488>
 800d8d0:	46ca      	mov	sl, r9
 800d8d2:	d171      	bne.n	800d9b8 <_strtod_l+0x950>
 800d8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8da:	b352      	cbz	r2, 800d932 <_strtod_l+0x8ca>
 800d8dc:	4a33      	ldr	r2, [pc, #204]	; (800d9ac <_strtod_l+0x944>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d12a      	bne.n	800d938 <_strtod_l+0x8d0>
 800d8e2:	9b04      	ldr	r3, [sp, #16]
 800d8e4:	4641      	mov	r1, r8
 800d8e6:	b1fb      	cbz	r3, 800d928 <_strtod_l+0x8c0>
 800d8e8:	4b2e      	ldr	r3, [pc, #184]	; (800d9a4 <_strtod_l+0x93c>)
 800d8ea:	ea09 0303 	and.w	r3, r9, r3
 800d8ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f6:	d81a      	bhi.n	800d92e <_strtod_l+0x8c6>
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d902:	4299      	cmp	r1, r3
 800d904:	d118      	bne.n	800d938 <_strtod_l+0x8d0>
 800d906:	4b2a      	ldr	r3, [pc, #168]	; (800d9b0 <_strtod_l+0x948>)
 800d908:	459a      	cmp	sl, r3
 800d90a:	d102      	bne.n	800d912 <_strtod_l+0x8aa>
 800d90c:	3101      	adds	r1, #1
 800d90e:	f43f adef 	beq.w	800d4f0 <_strtod_l+0x488>
 800d912:	4b24      	ldr	r3, [pc, #144]	; (800d9a4 <_strtod_l+0x93c>)
 800d914:	ea0a 0303 	and.w	r3, sl, r3
 800d918:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d91c:	f04f 0800 	mov.w	r8, #0
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1a2      	bne.n	800d86c <_strtod_l+0x804>
 800d926:	e5ed      	b.n	800d504 <_strtod_l+0x49c>
 800d928:	f04f 33ff 	mov.w	r3, #4294967295
 800d92c:	e7e9      	b.n	800d902 <_strtod_l+0x89a>
 800d92e:	4613      	mov	r3, r2
 800d930:	e7e7      	b.n	800d902 <_strtod_l+0x89a>
 800d932:	ea53 0308 	orrs.w	r3, r3, r8
 800d936:	d08a      	beq.n	800d84e <_strtod_l+0x7e6>
 800d938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d93a:	b1e3      	cbz	r3, 800d976 <_strtod_l+0x90e>
 800d93c:	ea13 0f0a 	tst.w	r3, sl
 800d940:	d0ee      	beq.n	800d920 <_strtod_l+0x8b8>
 800d942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d944:	9a04      	ldr	r2, [sp, #16]
 800d946:	4640      	mov	r0, r8
 800d948:	4649      	mov	r1, r9
 800d94a:	b1c3      	cbz	r3, 800d97e <_strtod_l+0x916>
 800d94c:	f7ff fb6f 	bl	800d02e <sulp>
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	ec51 0b18 	vmov	r0, r1, d8
 800d958:	f7f2 fc98 	bl	800028c <__adddf3>
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	e7de      	b.n	800d920 <_strtod_l+0x8b8>
 800d962:	4013      	ands	r3, r2
 800d964:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d968:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d96c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d970:	f04f 38ff 	mov.w	r8, #4294967295
 800d974:	e7d4      	b.n	800d920 <_strtod_l+0x8b8>
 800d976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d978:	ea13 0f08 	tst.w	r3, r8
 800d97c:	e7e0      	b.n	800d940 <_strtod_l+0x8d8>
 800d97e:	f7ff fb56 	bl	800d02e <sulp>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	ec51 0b18 	vmov	r0, r1, d8
 800d98a:	f7f2 fc7d 	bl	8000288 <__aeabi_dsub>
 800d98e:	2200      	movs	r2, #0
 800d990:	2300      	movs	r3, #0
 800d992:	4680      	mov	r8, r0
 800d994:	4689      	mov	r9, r1
 800d996:	f7f3 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0c0      	beq.n	800d920 <_strtod_l+0x8b8>
 800d99e:	e618      	b.n	800d5d2 <_strtod_l+0x56a>
 800d9a0:	fffffc02 	.word	0xfffffc02
 800d9a4:	7ff00000 	.word	0x7ff00000
 800d9a8:	39500000 	.word	0x39500000
 800d9ac:	000fffff 	.word	0x000fffff
 800d9b0:	7fefffff 	.word	0x7fefffff
 800d9b4:	0800f268 	.word	0x0800f268
 800d9b8:	4659      	mov	r1, fp
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f7ff fac0 	bl	800cf40 <__ratio>
 800d9c0:	ec57 6b10 	vmov	r6, r7, d0
 800d9c4:	ee10 0a10 	vmov	r0, s0
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9ce:	4639      	mov	r1, r7
 800d9d0:	f7f3 f88e 	bl	8000af0 <__aeabi_dcmple>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d071      	beq.n	800dabc <_strtod_l+0xa54>
 800d9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d17c      	bne.n	800dad8 <_strtod_l+0xa70>
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	d15a      	bne.n	800da9a <_strtod_l+0xa32>
 800d9e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d15d      	bne.n	800daa8 <_strtod_l+0xa40>
 800d9ec:	4b90      	ldr	r3, [pc, #576]	; (800dc30 <_strtod_l+0xbc8>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	f7f3 f872 	bl	8000adc <__aeabi_dcmplt>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d15c      	bne.n	800dab6 <_strtod_l+0xa4e>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	4639      	mov	r1, r7
 800da00:	4b8c      	ldr	r3, [pc, #560]	; (800dc34 <_strtod_l+0xbcc>)
 800da02:	2200      	movs	r2, #0
 800da04:	f7f2 fdf8 	bl	80005f8 <__aeabi_dmul>
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800da10:	9606      	str	r6, [sp, #24]
 800da12:	9307      	str	r3, [sp, #28]
 800da14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800da1c:	4b86      	ldr	r3, [pc, #536]	; (800dc38 <_strtod_l+0xbd0>)
 800da1e:	ea0a 0303 	and.w	r3, sl, r3
 800da22:	930d      	str	r3, [sp, #52]	; 0x34
 800da24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da26:	4b85      	ldr	r3, [pc, #532]	; (800dc3c <_strtod_l+0xbd4>)
 800da28:	429a      	cmp	r2, r3
 800da2a:	f040 8090 	bne.w	800db4e <_strtod_l+0xae6>
 800da2e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800da32:	ec49 8b10 	vmov	d0, r8, r9
 800da36:	f7ff f9b9 	bl	800cdac <__ulp>
 800da3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da3e:	ec51 0b10 	vmov	r0, r1, d0
 800da42:	f7f2 fdd9 	bl	80005f8 <__aeabi_dmul>
 800da46:	4642      	mov	r2, r8
 800da48:	464b      	mov	r3, r9
 800da4a:	f7f2 fc1f 	bl	800028c <__adddf3>
 800da4e:	460b      	mov	r3, r1
 800da50:	4979      	ldr	r1, [pc, #484]	; (800dc38 <_strtod_l+0xbd0>)
 800da52:	4a7b      	ldr	r2, [pc, #492]	; (800dc40 <_strtod_l+0xbd8>)
 800da54:	4019      	ands	r1, r3
 800da56:	4291      	cmp	r1, r2
 800da58:	4680      	mov	r8, r0
 800da5a:	d944      	bls.n	800dae6 <_strtod_l+0xa7e>
 800da5c:	ee18 2a90 	vmov	r2, s17
 800da60:	4b78      	ldr	r3, [pc, #480]	; (800dc44 <_strtod_l+0xbdc>)
 800da62:	429a      	cmp	r2, r3
 800da64:	d104      	bne.n	800da70 <_strtod_l+0xa08>
 800da66:	ee18 3a10 	vmov	r3, s16
 800da6a:	3301      	adds	r3, #1
 800da6c:	f43f ad40 	beq.w	800d4f0 <_strtod_l+0x488>
 800da70:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dc44 <_strtod_l+0xbdc>
 800da74:	f04f 38ff 	mov.w	r8, #4294967295
 800da78:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da7a:	4620      	mov	r0, r4
 800da7c:	f7fe fe6a 	bl	800c754 <_Bfree>
 800da80:	9905      	ldr	r1, [sp, #20]
 800da82:	4620      	mov	r0, r4
 800da84:	f7fe fe66 	bl	800c754 <_Bfree>
 800da88:	4659      	mov	r1, fp
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7fe fe62 	bl	800c754 <_Bfree>
 800da90:	4629      	mov	r1, r5
 800da92:	4620      	mov	r0, r4
 800da94:	f7fe fe5e 	bl	800c754 <_Bfree>
 800da98:	e609      	b.n	800d6ae <_strtod_l+0x646>
 800da9a:	f1b8 0f01 	cmp.w	r8, #1
 800da9e:	d103      	bne.n	800daa8 <_strtod_l+0xa40>
 800daa0:	f1b9 0f00 	cmp.w	r9, #0
 800daa4:	f43f ad95 	beq.w	800d5d2 <_strtod_l+0x56a>
 800daa8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dc00 <_strtod_l+0xb98>
 800daac:	4f60      	ldr	r7, [pc, #384]	; (800dc30 <_strtod_l+0xbc8>)
 800daae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dab2:	2600      	movs	r6, #0
 800dab4:	e7ae      	b.n	800da14 <_strtod_l+0x9ac>
 800dab6:	4f5f      	ldr	r7, [pc, #380]	; (800dc34 <_strtod_l+0xbcc>)
 800dab8:	2600      	movs	r6, #0
 800daba:	e7a7      	b.n	800da0c <_strtod_l+0x9a4>
 800dabc:	4b5d      	ldr	r3, [pc, #372]	; (800dc34 <_strtod_l+0xbcc>)
 800dabe:	4630      	mov	r0, r6
 800dac0:	4639      	mov	r1, r7
 800dac2:	2200      	movs	r2, #0
 800dac4:	f7f2 fd98 	bl	80005f8 <__aeabi_dmul>
 800dac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daca:	4606      	mov	r6, r0
 800dacc:	460f      	mov	r7, r1
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d09c      	beq.n	800da0c <_strtod_l+0x9a4>
 800dad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dad6:	e79d      	b.n	800da14 <_strtod_l+0x9ac>
 800dad8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dc08 <_strtod_l+0xba0>
 800dadc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dae0:	ec57 6b17 	vmov	r6, r7, d7
 800dae4:	e796      	b.n	800da14 <_strtod_l+0x9ac>
 800dae6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	46ca      	mov	sl, r9
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1c2      	bne.n	800da78 <_strtod_l+0xa10>
 800daf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800daf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daf8:	0d1b      	lsrs	r3, r3, #20
 800dafa:	051b      	lsls	r3, r3, #20
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d1bb      	bne.n	800da78 <_strtod_l+0xa10>
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f3 f8d8 	bl	8000cb8 <__aeabi_d2lz>
 800db08:	f7f2 fd48 	bl	800059c <__aeabi_l2d>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 fbb8 	bl	8000288 <__aeabi_dsub>
 800db18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db1e:	ea43 0308 	orr.w	r3, r3, r8
 800db22:	4313      	orrs	r3, r2
 800db24:	4606      	mov	r6, r0
 800db26:	460f      	mov	r7, r1
 800db28:	d054      	beq.n	800dbd4 <_strtod_l+0xb6c>
 800db2a:	a339      	add	r3, pc, #228	; (adr r3, 800dc10 <_strtod_l+0xba8>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f7f2 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800db34:	2800      	cmp	r0, #0
 800db36:	f47f ace5 	bne.w	800d504 <_strtod_l+0x49c>
 800db3a:	a337      	add	r3, pc, #220	; (adr r3, 800dc18 <_strtod_l+0xbb0>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d095      	beq.n	800da78 <_strtod_l+0xa10>
 800db4c:	e4da      	b.n	800d504 <_strtod_l+0x49c>
 800db4e:	9b04      	ldr	r3, [sp, #16]
 800db50:	b333      	cbz	r3, 800dba0 <_strtod_l+0xb38>
 800db52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db58:	d822      	bhi.n	800dba0 <_strtod_l+0xb38>
 800db5a:	a331      	add	r3, pc, #196	; (adr r3, 800dc20 <_strtod_l+0xbb8>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	4630      	mov	r0, r6
 800db62:	4639      	mov	r1, r7
 800db64:	f7f2 ffc4 	bl	8000af0 <__aeabi_dcmple>
 800db68:	b1a0      	cbz	r0, 800db94 <_strtod_l+0xb2c>
 800db6a:	4639      	mov	r1, r7
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7f3 f81b 	bl	8000ba8 <__aeabi_d2uiz>
 800db72:	2801      	cmp	r0, #1
 800db74:	bf38      	it	cc
 800db76:	2001      	movcc	r0, #1
 800db78:	f7f2 fcc4 	bl	8000504 <__aeabi_ui2d>
 800db7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db7e:	4606      	mov	r6, r0
 800db80:	460f      	mov	r7, r1
 800db82:	bb23      	cbnz	r3, 800dbce <_strtod_l+0xb66>
 800db84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db88:	9010      	str	r0, [sp, #64]	; 0x40
 800db8a:	9311      	str	r3, [sp, #68]	; 0x44
 800db8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800db94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db9c:	1a9b      	subs	r3, r3, r2
 800db9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dba0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dba4:	eeb0 0a48 	vmov.f32	s0, s16
 800dba8:	eef0 0a68 	vmov.f32	s1, s17
 800dbac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dbb0:	f7ff f8fc 	bl	800cdac <__ulp>
 800dbb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dbb8:	ec53 2b10 	vmov	r2, r3, d0
 800dbbc:	f7f2 fd1c 	bl	80005f8 <__aeabi_dmul>
 800dbc0:	ec53 2b18 	vmov	r2, r3, d8
 800dbc4:	f7f2 fb62 	bl	800028c <__adddf3>
 800dbc8:	4680      	mov	r8, r0
 800dbca:	4689      	mov	r9, r1
 800dbcc:	e78d      	b.n	800daea <_strtod_l+0xa82>
 800dbce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dbd2:	e7db      	b.n	800db8c <_strtod_l+0xb24>
 800dbd4:	a314      	add	r3, pc, #80	; (adr r3, 800dc28 <_strtod_l+0xbc0>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800dbde:	e7b3      	b.n	800db48 <_strtod_l+0xae0>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	930a      	str	r3, [sp, #40]	; 0x28
 800dbe4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dbe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbe8:	6013      	str	r3, [r2, #0]
 800dbea:	f7ff ba7c 	b.w	800d0e6 <_strtod_l+0x7e>
 800dbee:	2a65      	cmp	r2, #101	; 0x65
 800dbf0:	f43f ab75 	beq.w	800d2de <_strtod_l+0x276>
 800dbf4:	2a45      	cmp	r2, #69	; 0x45
 800dbf6:	f43f ab72 	beq.w	800d2de <_strtod_l+0x276>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f7ff bbaa 	b.w	800d354 <_strtod_l+0x2ec>
 800dc00:	00000000 	.word	0x00000000
 800dc04:	bff00000 	.word	0xbff00000
 800dc08:	00000000 	.word	0x00000000
 800dc0c:	3ff00000 	.word	0x3ff00000
 800dc10:	94a03595 	.word	0x94a03595
 800dc14:	3fdfffff 	.word	0x3fdfffff
 800dc18:	35afe535 	.word	0x35afe535
 800dc1c:	3fe00000 	.word	0x3fe00000
 800dc20:	ffc00000 	.word	0xffc00000
 800dc24:	41dfffff 	.word	0x41dfffff
 800dc28:	94a03595 	.word	0x94a03595
 800dc2c:	3fcfffff 	.word	0x3fcfffff
 800dc30:	3ff00000 	.word	0x3ff00000
 800dc34:	3fe00000 	.word	0x3fe00000
 800dc38:	7ff00000 	.word	0x7ff00000
 800dc3c:	7fe00000 	.word	0x7fe00000
 800dc40:	7c9fffff 	.word	0x7c9fffff
 800dc44:	7fefffff 	.word	0x7fefffff

0800dc48 <_strtod_r>:
 800dc48:	4b01      	ldr	r3, [pc, #4]	; (800dc50 <_strtod_r+0x8>)
 800dc4a:	f7ff ba0d 	b.w	800d068 <_strtod_l>
 800dc4e:	bf00      	nop
 800dc50:	20000168 	.word	0x20000168

0800dc54 <_strtol_l.constprop.0>:
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc5a:	d001      	beq.n	800dc60 <_strtol_l.constprop.0+0xc>
 800dc5c:	2b24      	cmp	r3, #36	; 0x24
 800dc5e:	d906      	bls.n	800dc6e <_strtol_l.constprop.0+0x1a>
 800dc60:	f7fd fd8c 	bl	800b77c <__errno>
 800dc64:	2316      	movs	r3, #22
 800dc66:	6003      	str	r3, [r0, #0]
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd54 <_strtol_l.constprop.0+0x100>
 800dc72:	460d      	mov	r5, r1
 800dc74:	462e      	mov	r6, r5
 800dc76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dc7e:	f017 0708 	ands.w	r7, r7, #8
 800dc82:	d1f7      	bne.n	800dc74 <_strtol_l.constprop.0+0x20>
 800dc84:	2c2d      	cmp	r4, #45	; 0x2d
 800dc86:	d132      	bne.n	800dcee <_strtol_l.constprop.0+0x9a>
 800dc88:	782c      	ldrb	r4, [r5, #0]
 800dc8a:	2701      	movs	r7, #1
 800dc8c:	1cb5      	adds	r5, r6, #2
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d05b      	beq.n	800dd4a <_strtol_l.constprop.0+0xf6>
 800dc92:	2b10      	cmp	r3, #16
 800dc94:	d109      	bne.n	800dcaa <_strtol_l.constprop.0+0x56>
 800dc96:	2c30      	cmp	r4, #48	; 0x30
 800dc98:	d107      	bne.n	800dcaa <_strtol_l.constprop.0+0x56>
 800dc9a:	782c      	ldrb	r4, [r5, #0]
 800dc9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dca0:	2c58      	cmp	r4, #88	; 0x58
 800dca2:	d14d      	bne.n	800dd40 <_strtol_l.constprop.0+0xec>
 800dca4:	786c      	ldrb	r4, [r5, #1]
 800dca6:	2310      	movs	r3, #16
 800dca8:	3502      	adds	r5, #2
 800dcaa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dcae:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcb2:	f04f 0e00 	mov.w	lr, #0
 800dcb6:	fbb8 f9f3 	udiv	r9, r8, r3
 800dcba:	4676      	mov	r6, lr
 800dcbc:	fb03 8a19 	mls	sl, r3, r9, r8
 800dcc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dcc4:	f1bc 0f09 	cmp.w	ip, #9
 800dcc8:	d816      	bhi.n	800dcf8 <_strtol_l.constprop.0+0xa4>
 800dcca:	4664      	mov	r4, ip
 800dccc:	42a3      	cmp	r3, r4
 800dcce:	dd24      	ble.n	800dd1a <_strtol_l.constprop.0+0xc6>
 800dcd0:	f1be 3fff 	cmp.w	lr, #4294967295
 800dcd4:	d008      	beq.n	800dce8 <_strtol_l.constprop.0+0x94>
 800dcd6:	45b1      	cmp	r9, r6
 800dcd8:	d31c      	bcc.n	800dd14 <_strtol_l.constprop.0+0xc0>
 800dcda:	d101      	bne.n	800dce0 <_strtol_l.constprop.0+0x8c>
 800dcdc:	45a2      	cmp	sl, r4
 800dcde:	db19      	blt.n	800dd14 <_strtol_l.constprop.0+0xc0>
 800dce0:	fb06 4603 	mla	r6, r6, r3, r4
 800dce4:	f04f 0e01 	mov.w	lr, #1
 800dce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcec:	e7e8      	b.n	800dcc0 <_strtol_l.constprop.0+0x6c>
 800dcee:	2c2b      	cmp	r4, #43	; 0x2b
 800dcf0:	bf04      	itt	eq
 800dcf2:	782c      	ldrbeq	r4, [r5, #0]
 800dcf4:	1cb5      	addeq	r5, r6, #2
 800dcf6:	e7ca      	b.n	800dc8e <_strtol_l.constprop.0+0x3a>
 800dcf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcfc:	f1bc 0f19 	cmp.w	ip, #25
 800dd00:	d801      	bhi.n	800dd06 <_strtol_l.constprop.0+0xb2>
 800dd02:	3c37      	subs	r4, #55	; 0x37
 800dd04:	e7e2      	b.n	800dccc <_strtol_l.constprop.0+0x78>
 800dd06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd0a:	f1bc 0f19 	cmp.w	ip, #25
 800dd0e:	d804      	bhi.n	800dd1a <_strtol_l.constprop.0+0xc6>
 800dd10:	3c57      	subs	r4, #87	; 0x57
 800dd12:	e7db      	b.n	800dccc <_strtol_l.constprop.0+0x78>
 800dd14:	f04f 3eff 	mov.w	lr, #4294967295
 800dd18:	e7e6      	b.n	800dce8 <_strtol_l.constprop.0+0x94>
 800dd1a:	f1be 3fff 	cmp.w	lr, #4294967295
 800dd1e:	d105      	bne.n	800dd2c <_strtol_l.constprop.0+0xd8>
 800dd20:	2322      	movs	r3, #34	; 0x22
 800dd22:	6003      	str	r3, [r0, #0]
 800dd24:	4646      	mov	r6, r8
 800dd26:	b942      	cbnz	r2, 800dd3a <_strtol_l.constprop.0+0xe6>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	e79e      	b.n	800dc6a <_strtol_l.constprop.0+0x16>
 800dd2c:	b107      	cbz	r7, 800dd30 <_strtol_l.constprop.0+0xdc>
 800dd2e:	4276      	negs	r6, r6
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	d0f9      	beq.n	800dd28 <_strtol_l.constprop.0+0xd4>
 800dd34:	f1be 0f00 	cmp.w	lr, #0
 800dd38:	d000      	beq.n	800dd3c <_strtol_l.constprop.0+0xe8>
 800dd3a:	1e69      	subs	r1, r5, #1
 800dd3c:	6011      	str	r1, [r2, #0]
 800dd3e:	e7f3      	b.n	800dd28 <_strtol_l.constprop.0+0xd4>
 800dd40:	2430      	movs	r4, #48	; 0x30
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1b1      	bne.n	800dcaa <_strtol_l.constprop.0+0x56>
 800dd46:	2308      	movs	r3, #8
 800dd48:	e7af      	b.n	800dcaa <_strtol_l.constprop.0+0x56>
 800dd4a:	2c30      	cmp	r4, #48	; 0x30
 800dd4c:	d0a5      	beq.n	800dc9a <_strtol_l.constprop.0+0x46>
 800dd4e:	230a      	movs	r3, #10
 800dd50:	e7ab      	b.n	800dcaa <_strtol_l.constprop.0+0x56>
 800dd52:	bf00      	nop
 800dd54:	0800f291 	.word	0x0800f291

0800dd58 <_strtol_r>:
 800dd58:	f7ff bf7c 	b.w	800dc54 <_strtol_l.constprop.0>

0800dd5c <__ssputs_r>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	688e      	ldr	r6, [r1, #8]
 800dd62:	461f      	mov	r7, r3
 800dd64:	42be      	cmp	r6, r7
 800dd66:	680b      	ldr	r3, [r1, #0]
 800dd68:	4682      	mov	sl, r0
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	d82c      	bhi.n	800ddca <__ssputs_r+0x6e>
 800dd70:	898a      	ldrh	r2, [r1, #12]
 800dd72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd76:	d026      	beq.n	800ddc6 <__ssputs_r+0x6a>
 800dd78:	6965      	ldr	r5, [r4, #20]
 800dd7a:	6909      	ldr	r1, [r1, #16]
 800dd7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd80:	eba3 0901 	sub.w	r9, r3, r1
 800dd84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd88:	1c7b      	adds	r3, r7, #1
 800dd8a:	444b      	add	r3, r9
 800dd8c:	106d      	asrs	r5, r5, #1
 800dd8e:	429d      	cmp	r5, r3
 800dd90:	bf38      	it	cc
 800dd92:	461d      	movcc	r5, r3
 800dd94:	0553      	lsls	r3, r2, #21
 800dd96:	d527      	bpl.n	800dde8 <__ssputs_r+0x8c>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7fe fc0f 	bl	800c5bc <_malloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	b360      	cbz	r0, 800ddfc <__ssputs_r+0xa0>
 800dda2:	6921      	ldr	r1, [r4, #16]
 800dda4:	464a      	mov	r2, r9
 800dda6:	f000 fbf5 	bl	800e594 <memcpy>
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	6126      	str	r6, [r4, #16]
 800ddb8:	6165      	str	r5, [r4, #20]
 800ddba:	444e      	add	r6, r9
 800ddbc:	eba5 0509 	sub.w	r5, r5, r9
 800ddc0:	6026      	str	r6, [r4, #0]
 800ddc2:	60a5      	str	r5, [r4, #8]
 800ddc4:	463e      	mov	r6, r7
 800ddc6:	42be      	cmp	r6, r7
 800ddc8:	d900      	bls.n	800ddcc <__ssputs_r+0x70>
 800ddca:	463e      	mov	r6, r7
 800ddcc:	6820      	ldr	r0, [r4, #0]
 800ddce:	4632      	mov	r2, r6
 800ddd0:	4641      	mov	r1, r8
 800ddd2:	f000 fba3 	bl	800e51c <memmove>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	1b9b      	subs	r3, r3, r6
 800ddda:	60a3      	str	r3, [r4, #8]
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	4433      	add	r3, r6
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	2000      	movs	r0, #0
 800dde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde8:	462a      	mov	r2, r5
 800ddea:	f000 ff86 	bl	800ecfa <_realloc_r>
 800ddee:	4606      	mov	r6, r0
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d1e0      	bne.n	800ddb6 <__ssputs_r+0x5a>
 800ddf4:	6921      	ldr	r1, [r4, #16]
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	f7fe fb6c 	bl	800c4d4 <_free_r>
 800ddfc:	230c      	movs	r3, #12
 800ddfe:	f8ca 3000 	str.w	r3, [sl]
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de08:	81a3      	strh	r3, [r4, #12]
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295
 800de0e:	e7e9      	b.n	800dde4 <__ssputs_r+0x88>

0800de10 <_svfiprintf_r>:
 800de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	4698      	mov	r8, r3
 800de16:	898b      	ldrh	r3, [r1, #12]
 800de18:	061b      	lsls	r3, r3, #24
 800de1a:	b09d      	sub	sp, #116	; 0x74
 800de1c:	4607      	mov	r7, r0
 800de1e:	460d      	mov	r5, r1
 800de20:	4614      	mov	r4, r2
 800de22:	d50e      	bpl.n	800de42 <_svfiprintf_r+0x32>
 800de24:	690b      	ldr	r3, [r1, #16]
 800de26:	b963      	cbnz	r3, 800de42 <_svfiprintf_r+0x32>
 800de28:	2140      	movs	r1, #64	; 0x40
 800de2a:	f7fe fbc7 	bl	800c5bc <_malloc_r>
 800de2e:	6028      	str	r0, [r5, #0]
 800de30:	6128      	str	r0, [r5, #16]
 800de32:	b920      	cbnz	r0, 800de3e <_svfiprintf_r+0x2e>
 800de34:	230c      	movs	r3, #12
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	e0d0      	b.n	800dfe0 <_svfiprintf_r+0x1d0>
 800de3e:	2340      	movs	r3, #64	; 0x40
 800de40:	616b      	str	r3, [r5, #20]
 800de42:	2300      	movs	r3, #0
 800de44:	9309      	str	r3, [sp, #36]	; 0x24
 800de46:	2320      	movs	r3, #32
 800de48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de50:	2330      	movs	r3, #48	; 0x30
 800de52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dff8 <_svfiprintf_r+0x1e8>
 800de56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5a:	f04f 0901 	mov.w	r9, #1
 800de5e:	4623      	mov	r3, r4
 800de60:	469a      	mov	sl, r3
 800de62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de66:	b10a      	cbz	r2, 800de6c <_svfiprintf_r+0x5c>
 800de68:	2a25      	cmp	r2, #37	; 0x25
 800de6a:	d1f9      	bne.n	800de60 <_svfiprintf_r+0x50>
 800de6c:	ebba 0b04 	subs.w	fp, sl, r4
 800de70:	d00b      	beq.n	800de8a <_svfiprintf_r+0x7a>
 800de72:	465b      	mov	r3, fp
 800de74:	4622      	mov	r2, r4
 800de76:	4629      	mov	r1, r5
 800de78:	4638      	mov	r0, r7
 800de7a:	f7ff ff6f 	bl	800dd5c <__ssputs_r>
 800de7e:	3001      	adds	r0, #1
 800de80:	f000 80a9 	beq.w	800dfd6 <_svfiprintf_r+0x1c6>
 800de84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de86:	445a      	add	r2, fp
 800de88:	9209      	str	r2, [sp, #36]	; 0x24
 800de8a:	f89a 3000 	ldrb.w	r3, [sl]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 80a1 	beq.w	800dfd6 <_svfiprintf_r+0x1c6>
 800de94:	2300      	movs	r3, #0
 800de96:	f04f 32ff 	mov.w	r2, #4294967295
 800de9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de9e:	f10a 0a01 	add.w	sl, sl, #1
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	9307      	str	r3, [sp, #28]
 800dea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deaa:	931a      	str	r3, [sp, #104]	; 0x68
 800deac:	4654      	mov	r4, sl
 800deae:	2205      	movs	r2, #5
 800deb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb4:	4850      	ldr	r0, [pc, #320]	; (800dff8 <_svfiprintf_r+0x1e8>)
 800deb6:	f7f2 f98b 	bl	80001d0 <memchr>
 800deba:	9a04      	ldr	r2, [sp, #16]
 800debc:	b9d8      	cbnz	r0, 800def6 <_svfiprintf_r+0xe6>
 800debe:	06d0      	lsls	r0, r2, #27
 800dec0:	bf44      	itt	mi
 800dec2:	2320      	movmi	r3, #32
 800dec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec8:	0711      	lsls	r1, r2, #28
 800deca:	bf44      	itt	mi
 800decc:	232b      	movmi	r3, #43	; 0x2b
 800dece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded2:	f89a 3000 	ldrb.w	r3, [sl]
 800ded6:	2b2a      	cmp	r3, #42	; 0x2a
 800ded8:	d015      	beq.n	800df06 <_svfiprintf_r+0xf6>
 800deda:	9a07      	ldr	r2, [sp, #28]
 800dedc:	4654      	mov	r4, sl
 800dede:	2000      	movs	r0, #0
 800dee0:	f04f 0c0a 	mov.w	ip, #10
 800dee4:	4621      	mov	r1, r4
 800dee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deea:	3b30      	subs	r3, #48	; 0x30
 800deec:	2b09      	cmp	r3, #9
 800deee:	d94d      	bls.n	800df8c <_svfiprintf_r+0x17c>
 800def0:	b1b0      	cbz	r0, 800df20 <_svfiprintf_r+0x110>
 800def2:	9207      	str	r2, [sp, #28]
 800def4:	e014      	b.n	800df20 <_svfiprintf_r+0x110>
 800def6:	eba0 0308 	sub.w	r3, r0, r8
 800defa:	fa09 f303 	lsl.w	r3, r9, r3
 800defe:	4313      	orrs	r3, r2
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	46a2      	mov	sl, r4
 800df04:	e7d2      	b.n	800deac <_svfiprintf_r+0x9c>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	1d19      	adds	r1, r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	9103      	str	r1, [sp, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	bfbb      	ittet	lt
 800df12:	425b      	neglt	r3, r3
 800df14:	f042 0202 	orrlt.w	r2, r2, #2
 800df18:	9307      	strge	r3, [sp, #28]
 800df1a:	9307      	strlt	r3, [sp, #28]
 800df1c:	bfb8      	it	lt
 800df1e:	9204      	strlt	r2, [sp, #16]
 800df20:	7823      	ldrb	r3, [r4, #0]
 800df22:	2b2e      	cmp	r3, #46	; 0x2e
 800df24:	d10c      	bne.n	800df40 <_svfiprintf_r+0x130>
 800df26:	7863      	ldrb	r3, [r4, #1]
 800df28:	2b2a      	cmp	r3, #42	; 0x2a
 800df2a:	d134      	bne.n	800df96 <_svfiprintf_r+0x186>
 800df2c:	9b03      	ldr	r3, [sp, #12]
 800df2e:	1d1a      	adds	r2, r3, #4
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	9203      	str	r2, [sp, #12]
 800df34:	2b00      	cmp	r3, #0
 800df36:	bfb8      	it	lt
 800df38:	f04f 33ff 	movlt.w	r3, #4294967295
 800df3c:	3402      	adds	r4, #2
 800df3e:	9305      	str	r3, [sp, #20]
 800df40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e008 <_svfiprintf_r+0x1f8>
 800df44:	7821      	ldrb	r1, [r4, #0]
 800df46:	2203      	movs	r2, #3
 800df48:	4650      	mov	r0, sl
 800df4a:	f7f2 f941 	bl	80001d0 <memchr>
 800df4e:	b138      	cbz	r0, 800df60 <_svfiprintf_r+0x150>
 800df50:	9b04      	ldr	r3, [sp, #16]
 800df52:	eba0 000a 	sub.w	r0, r0, sl
 800df56:	2240      	movs	r2, #64	; 0x40
 800df58:	4082      	lsls	r2, r0
 800df5a:	4313      	orrs	r3, r2
 800df5c:	3401      	adds	r4, #1
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df64:	4825      	ldr	r0, [pc, #148]	; (800dffc <_svfiprintf_r+0x1ec>)
 800df66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df6a:	2206      	movs	r2, #6
 800df6c:	f7f2 f930 	bl	80001d0 <memchr>
 800df70:	2800      	cmp	r0, #0
 800df72:	d038      	beq.n	800dfe6 <_svfiprintf_r+0x1d6>
 800df74:	4b22      	ldr	r3, [pc, #136]	; (800e000 <_svfiprintf_r+0x1f0>)
 800df76:	bb1b      	cbnz	r3, 800dfc0 <_svfiprintf_r+0x1b0>
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	3307      	adds	r3, #7
 800df7c:	f023 0307 	bic.w	r3, r3, #7
 800df80:	3308      	adds	r3, #8
 800df82:	9303      	str	r3, [sp, #12]
 800df84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df86:	4433      	add	r3, r6
 800df88:	9309      	str	r3, [sp, #36]	; 0x24
 800df8a:	e768      	b.n	800de5e <_svfiprintf_r+0x4e>
 800df8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df90:	460c      	mov	r4, r1
 800df92:	2001      	movs	r0, #1
 800df94:	e7a6      	b.n	800dee4 <_svfiprintf_r+0xd4>
 800df96:	2300      	movs	r3, #0
 800df98:	3401      	adds	r4, #1
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	4619      	mov	r1, r3
 800df9e:	f04f 0c0a 	mov.w	ip, #10
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfa8:	3a30      	subs	r2, #48	; 0x30
 800dfaa:	2a09      	cmp	r2, #9
 800dfac:	d903      	bls.n	800dfb6 <_svfiprintf_r+0x1a6>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0c6      	beq.n	800df40 <_svfiprintf_r+0x130>
 800dfb2:	9105      	str	r1, [sp, #20]
 800dfb4:	e7c4      	b.n	800df40 <_svfiprintf_r+0x130>
 800dfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfba:	4604      	mov	r4, r0
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e7f0      	b.n	800dfa2 <_svfiprintf_r+0x192>
 800dfc0:	ab03      	add	r3, sp, #12
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	462a      	mov	r2, r5
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	; (800e004 <_svfiprintf_r+0x1f4>)
 800dfc8:	a904      	add	r1, sp, #16
 800dfca:	4638      	mov	r0, r7
 800dfcc:	f7fc fc88 	bl	800a8e0 <_printf_float>
 800dfd0:	1c42      	adds	r2, r0, #1
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	d1d6      	bne.n	800df84 <_svfiprintf_r+0x174>
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	065b      	lsls	r3, r3, #25
 800dfda:	f53f af2d 	bmi.w	800de38 <_svfiprintf_r+0x28>
 800dfde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfe0:	b01d      	add	sp, #116	; 0x74
 800dfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	462a      	mov	r2, r5
 800dfec:	4b05      	ldr	r3, [pc, #20]	; (800e004 <_svfiprintf_r+0x1f4>)
 800dfee:	a904      	add	r1, sp, #16
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7fc ff19 	bl	800ae28 <_printf_i>
 800dff6:	e7eb      	b.n	800dfd0 <_svfiprintf_r+0x1c0>
 800dff8:	0800f391 	.word	0x0800f391
 800dffc:	0800f39b 	.word	0x0800f39b
 800e000:	0800a8e1 	.word	0x0800a8e1
 800e004:	0800dd5d 	.word	0x0800dd5d
 800e008:	0800f397 	.word	0x0800f397

0800e00c <__sfputc_r>:
 800e00c:	6893      	ldr	r3, [r2, #8]
 800e00e:	3b01      	subs	r3, #1
 800e010:	2b00      	cmp	r3, #0
 800e012:	b410      	push	{r4}
 800e014:	6093      	str	r3, [r2, #8]
 800e016:	da08      	bge.n	800e02a <__sfputc_r+0x1e>
 800e018:	6994      	ldr	r4, [r2, #24]
 800e01a:	42a3      	cmp	r3, r4
 800e01c:	db01      	blt.n	800e022 <__sfputc_r+0x16>
 800e01e:	290a      	cmp	r1, #10
 800e020:	d103      	bne.n	800e02a <__sfputc_r+0x1e>
 800e022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e026:	f000 b9e3 	b.w	800e3f0 <__swbuf_r>
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	1c58      	adds	r0, r3, #1
 800e02e:	6010      	str	r0, [r2, #0]
 800e030:	7019      	strb	r1, [r3, #0]
 800e032:	4608      	mov	r0, r1
 800e034:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <__sfputs_r>:
 800e03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	4614      	mov	r4, r2
 800e042:	18d5      	adds	r5, r2, r3
 800e044:	42ac      	cmp	r4, r5
 800e046:	d101      	bne.n	800e04c <__sfputs_r+0x12>
 800e048:	2000      	movs	r0, #0
 800e04a:	e007      	b.n	800e05c <__sfputs_r+0x22>
 800e04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e050:	463a      	mov	r2, r7
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ffda 	bl	800e00c <__sfputc_r>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d1f3      	bne.n	800e044 <__sfputs_r+0xa>
 800e05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e060 <_vfiprintf_r>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	460d      	mov	r5, r1
 800e066:	b09d      	sub	sp, #116	; 0x74
 800e068:	4614      	mov	r4, r2
 800e06a:	4698      	mov	r8, r3
 800e06c:	4606      	mov	r6, r0
 800e06e:	b118      	cbz	r0, 800e078 <_vfiprintf_r+0x18>
 800e070:	6a03      	ldr	r3, [r0, #32]
 800e072:	b90b      	cbnz	r3, 800e078 <_vfiprintf_r+0x18>
 800e074:	f7fd fa84 	bl	800b580 <__sinit>
 800e078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e07a:	07d9      	lsls	r1, r3, #31
 800e07c:	d405      	bmi.n	800e08a <_vfiprintf_r+0x2a>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	059a      	lsls	r2, r3, #22
 800e082:	d402      	bmi.n	800e08a <_vfiprintf_r+0x2a>
 800e084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e086:	f7fd fba3 	bl	800b7d0 <__retarget_lock_acquire_recursive>
 800e08a:	89ab      	ldrh	r3, [r5, #12]
 800e08c:	071b      	lsls	r3, r3, #28
 800e08e:	d501      	bpl.n	800e094 <_vfiprintf_r+0x34>
 800e090:	692b      	ldr	r3, [r5, #16]
 800e092:	b99b      	cbnz	r3, 800e0bc <_vfiprintf_r+0x5c>
 800e094:	4629      	mov	r1, r5
 800e096:	4630      	mov	r0, r6
 800e098:	f000 f9e8 	bl	800e46c <__swsetup_r>
 800e09c:	b170      	cbz	r0, 800e0bc <_vfiprintf_r+0x5c>
 800e09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a0:	07dc      	lsls	r4, r3, #31
 800e0a2:	d504      	bpl.n	800e0ae <_vfiprintf_r+0x4e>
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	b01d      	add	sp, #116	; 0x74
 800e0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ae:	89ab      	ldrh	r3, [r5, #12]
 800e0b0:	0598      	lsls	r0, r3, #22
 800e0b2:	d4f7      	bmi.n	800e0a4 <_vfiprintf_r+0x44>
 800e0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0b6:	f7fd fb8c 	bl	800b7d2 <__retarget_lock_release_recursive>
 800e0ba:	e7f3      	b.n	800e0a4 <_vfiprintf_r+0x44>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c0:	2320      	movs	r3, #32
 800e0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ca:	2330      	movs	r3, #48	; 0x30
 800e0cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e280 <_vfiprintf_r+0x220>
 800e0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0d4:	f04f 0901 	mov.w	r9, #1
 800e0d8:	4623      	mov	r3, r4
 800e0da:	469a      	mov	sl, r3
 800e0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e0:	b10a      	cbz	r2, 800e0e6 <_vfiprintf_r+0x86>
 800e0e2:	2a25      	cmp	r2, #37	; 0x25
 800e0e4:	d1f9      	bne.n	800e0da <_vfiprintf_r+0x7a>
 800e0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ea:	d00b      	beq.n	800e104 <_vfiprintf_r+0xa4>
 800e0ec:	465b      	mov	r3, fp
 800e0ee:	4622      	mov	r2, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f7ff ffa1 	bl	800e03a <__sfputs_r>
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	f000 80a9 	beq.w	800e250 <_vfiprintf_r+0x1f0>
 800e0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e100:	445a      	add	r2, fp
 800e102:	9209      	str	r2, [sp, #36]	; 0x24
 800e104:	f89a 3000 	ldrb.w	r3, [sl]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 80a1 	beq.w	800e250 <_vfiprintf_r+0x1f0>
 800e10e:	2300      	movs	r3, #0
 800e110:	f04f 32ff 	mov.w	r2, #4294967295
 800e114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e118:	f10a 0a01 	add.w	sl, sl, #1
 800e11c:	9304      	str	r3, [sp, #16]
 800e11e:	9307      	str	r3, [sp, #28]
 800e120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e124:	931a      	str	r3, [sp, #104]	; 0x68
 800e126:	4654      	mov	r4, sl
 800e128:	2205      	movs	r2, #5
 800e12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e12e:	4854      	ldr	r0, [pc, #336]	; (800e280 <_vfiprintf_r+0x220>)
 800e130:	f7f2 f84e 	bl	80001d0 <memchr>
 800e134:	9a04      	ldr	r2, [sp, #16]
 800e136:	b9d8      	cbnz	r0, 800e170 <_vfiprintf_r+0x110>
 800e138:	06d1      	lsls	r1, r2, #27
 800e13a:	bf44      	itt	mi
 800e13c:	2320      	movmi	r3, #32
 800e13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e142:	0713      	lsls	r3, r2, #28
 800e144:	bf44      	itt	mi
 800e146:	232b      	movmi	r3, #43	; 0x2b
 800e148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e14c:	f89a 3000 	ldrb.w	r3, [sl]
 800e150:	2b2a      	cmp	r3, #42	; 0x2a
 800e152:	d015      	beq.n	800e180 <_vfiprintf_r+0x120>
 800e154:	9a07      	ldr	r2, [sp, #28]
 800e156:	4654      	mov	r4, sl
 800e158:	2000      	movs	r0, #0
 800e15a:	f04f 0c0a 	mov.w	ip, #10
 800e15e:	4621      	mov	r1, r4
 800e160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e164:	3b30      	subs	r3, #48	; 0x30
 800e166:	2b09      	cmp	r3, #9
 800e168:	d94d      	bls.n	800e206 <_vfiprintf_r+0x1a6>
 800e16a:	b1b0      	cbz	r0, 800e19a <_vfiprintf_r+0x13a>
 800e16c:	9207      	str	r2, [sp, #28]
 800e16e:	e014      	b.n	800e19a <_vfiprintf_r+0x13a>
 800e170:	eba0 0308 	sub.w	r3, r0, r8
 800e174:	fa09 f303 	lsl.w	r3, r9, r3
 800e178:	4313      	orrs	r3, r2
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	46a2      	mov	sl, r4
 800e17e:	e7d2      	b.n	800e126 <_vfiprintf_r+0xc6>
 800e180:	9b03      	ldr	r3, [sp, #12]
 800e182:	1d19      	adds	r1, r3, #4
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	9103      	str	r1, [sp, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	bfbb      	ittet	lt
 800e18c:	425b      	neglt	r3, r3
 800e18e:	f042 0202 	orrlt.w	r2, r2, #2
 800e192:	9307      	strge	r3, [sp, #28]
 800e194:	9307      	strlt	r3, [sp, #28]
 800e196:	bfb8      	it	lt
 800e198:	9204      	strlt	r2, [sp, #16]
 800e19a:	7823      	ldrb	r3, [r4, #0]
 800e19c:	2b2e      	cmp	r3, #46	; 0x2e
 800e19e:	d10c      	bne.n	800e1ba <_vfiprintf_r+0x15a>
 800e1a0:	7863      	ldrb	r3, [r4, #1]
 800e1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a4:	d134      	bne.n	800e210 <_vfiprintf_r+0x1b0>
 800e1a6:	9b03      	ldr	r3, [sp, #12]
 800e1a8:	1d1a      	adds	r2, r3, #4
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	9203      	str	r2, [sp, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bfb8      	it	lt
 800e1b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1b6:	3402      	adds	r4, #2
 800e1b8:	9305      	str	r3, [sp, #20]
 800e1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e290 <_vfiprintf_r+0x230>
 800e1be:	7821      	ldrb	r1, [r4, #0]
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	4650      	mov	r0, sl
 800e1c4:	f7f2 f804 	bl	80001d0 <memchr>
 800e1c8:	b138      	cbz	r0, 800e1da <_vfiprintf_r+0x17a>
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	eba0 000a 	sub.w	r0, r0, sl
 800e1d0:	2240      	movs	r2, #64	; 0x40
 800e1d2:	4082      	lsls	r2, r0
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	3401      	adds	r4, #1
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1de:	4829      	ldr	r0, [pc, #164]	; (800e284 <_vfiprintf_r+0x224>)
 800e1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1e4:	2206      	movs	r2, #6
 800e1e6:	f7f1 fff3 	bl	80001d0 <memchr>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d03f      	beq.n	800e26e <_vfiprintf_r+0x20e>
 800e1ee:	4b26      	ldr	r3, [pc, #152]	; (800e288 <_vfiprintf_r+0x228>)
 800e1f0:	bb1b      	cbnz	r3, 800e23a <_vfiprintf_r+0x1da>
 800e1f2:	9b03      	ldr	r3, [sp, #12]
 800e1f4:	3307      	adds	r3, #7
 800e1f6:	f023 0307 	bic.w	r3, r3, #7
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e200:	443b      	add	r3, r7
 800e202:	9309      	str	r3, [sp, #36]	; 0x24
 800e204:	e768      	b.n	800e0d8 <_vfiprintf_r+0x78>
 800e206:	fb0c 3202 	mla	r2, ip, r2, r3
 800e20a:	460c      	mov	r4, r1
 800e20c:	2001      	movs	r0, #1
 800e20e:	e7a6      	b.n	800e15e <_vfiprintf_r+0xfe>
 800e210:	2300      	movs	r3, #0
 800e212:	3401      	adds	r4, #1
 800e214:	9305      	str	r3, [sp, #20]
 800e216:	4619      	mov	r1, r3
 800e218:	f04f 0c0a 	mov.w	ip, #10
 800e21c:	4620      	mov	r0, r4
 800e21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e222:	3a30      	subs	r2, #48	; 0x30
 800e224:	2a09      	cmp	r2, #9
 800e226:	d903      	bls.n	800e230 <_vfiprintf_r+0x1d0>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0c6      	beq.n	800e1ba <_vfiprintf_r+0x15a>
 800e22c:	9105      	str	r1, [sp, #20]
 800e22e:	e7c4      	b.n	800e1ba <_vfiprintf_r+0x15a>
 800e230:	fb0c 2101 	mla	r1, ip, r1, r2
 800e234:	4604      	mov	r4, r0
 800e236:	2301      	movs	r3, #1
 800e238:	e7f0      	b.n	800e21c <_vfiprintf_r+0x1bc>
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	462a      	mov	r2, r5
 800e240:	4b12      	ldr	r3, [pc, #72]	; (800e28c <_vfiprintf_r+0x22c>)
 800e242:	a904      	add	r1, sp, #16
 800e244:	4630      	mov	r0, r6
 800e246:	f7fc fb4b 	bl	800a8e0 <_printf_float>
 800e24a:	4607      	mov	r7, r0
 800e24c:	1c78      	adds	r0, r7, #1
 800e24e:	d1d6      	bne.n	800e1fe <_vfiprintf_r+0x19e>
 800e250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e252:	07d9      	lsls	r1, r3, #31
 800e254:	d405      	bmi.n	800e262 <_vfiprintf_r+0x202>
 800e256:	89ab      	ldrh	r3, [r5, #12]
 800e258:	059a      	lsls	r2, r3, #22
 800e25a:	d402      	bmi.n	800e262 <_vfiprintf_r+0x202>
 800e25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e25e:	f7fd fab8 	bl	800b7d2 <__retarget_lock_release_recursive>
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	065b      	lsls	r3, r3, #25
 800e266:	f53f af1d 	bmi.w	800e0a4 <_vfiprintf_r+0x44>
 800e26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e26c:	e71c      	b.n	800e0a8 <_vfiprintf_r+0x48>
 800e26e:	ab03      	add	r3, sp, #12
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	462a      	mov	r2, r5
 800e274:	4b05      	ldr	r3, [pc, #20]	; (800e28c <_vfiprintf_r+0x22c>)
 800e276:	a904      	add	r1, sp, #16
 800e278:	4630      	mov	r0, r6
 800e27a:	f7fc fdd5 	bl	800ae28 <_printf_i>
 800e27e:	e7e4      	b.n	800e24a <_vfiprintf_r+0x1ea>
 800e280:	0800f391 	.word	0x0800f391
 800e284:	0800f39b 	.word	0x0800f39b
 800e288:	0800a8e1 	.word	0x0800a8e1
 800e28c:	0800e03b 	.word	0x0800e03b
 800e290:	0800f397 	.word	0x0800f397

0800e294 <__sflush_r>:
 800e294:	898a      	ldrh	r2, [r1, #12]
 800e296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29a:	4605      	mov	r5, r0
 800e29c:	0710      	lsls	r0, r2, #28
 800e29e:	460c      	mov	r4, r1
 800e2a0:	d458      	bmi.n	800e354 <__sflush_r+0xc0>
 800e2a2:	684b      	ldr	r3, [r1, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dc05      	bgt.n	800e2b4 <__sflush_r+0x20>
 800e2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	dc02      	bgt.n	800e2b4 <__sflush_r+0x20>
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2b6:	2e00      	cmp	r6, #0
 800e2b8:	d0f9      	beq.n	800e2ae <__sflush_r+0x1a>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2c0:	682f      	ldr	r7, [r5, #0]
 800e2c2:	6a21      	ldr	r1, [r4, #32]
 800e2c4:	602b      	str	r3, [r5, #0]
 800e2c6:	d032      	beq.n	800e32e <__sflush_r+0x9a>
 800e2c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	075a      	lsls	r2, r3, #29
 800e2ce:	d505      	bpl.n	800e2dc <__sflush_r+0x48>
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	1ac0      	subs	r0, r0, r3
 800e2d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2d6:	b10b      	cbz	r3, 800e2dc <__sflush_r+0x48>
 800e2d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e2da:	1ac0      	subs	r0, r0, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4602      	mov	r2, r0
 800e2e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2e2:	6a21      	ldr	r1, [r4, #32]
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	47b0      	blx	r6
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	89a3      	ldrh	r3, [r4, #12]
 800e2ec:	d106      	bne.n	800e2fc <__sflush_r+0x68>
 800e2ee:	6829      	ldr	r1, [r5, #0]
 800e2f0:	291d      	cmp	r1, #29
 800e2f2:	d82b      	bhi.n	800e34c <__sflush_r+0xb8>
 800e2f4:	4a29      	ldr	r2, [pc, #164]	; (800e39c <__sflush_r+0x108>)
 800e2f6:	410a      	asrs	r2, r1
 800e2f8:	07d6      	lsls	r6, r2, #31
 800e2fa:	d427      	bmi.n	800e34c <__sflush_r+0xb8>
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	6062      	str	r2, [r4, #4]
 800e300:	04d9      	lsls	r1, r3, #19
 800e302:	6922      	ldr	r2, [r4, #16]
 800e304:	6022      	str	r2, [r4, #0]
 800e306:	d504      	bpl.n	800e312 <__sflush_r+0x7e>
 800e308:	1c42      	adds	r2, r0, #1
 800e30a:	d101      	bne.n	800e310 <__sflush_r+0x7c>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	b903      	cbnz	r3, 800e312 <__sflush_r+0x7e>
 800e310:	6560      	str	r0, [r4, #84]	; 0x54
 800e312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e314:	602f      	str	r7, [r5, #0]
 800e316:	2900      	cmp	r1, #0
 800e318:	d0c9      	beq.n	800e2ae <__sflush_r+0x1a>
 800e31a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e31e:	4299      	cmp	r1, r3
 800e320:	d002      	beq.n	800e328 <__sflush_r+0x94>
 800e322:	4628      	mov	r0, r5
 800e324:	f7fe f8d6 	bl	800c4d4 <_free_r>
 800e328:	2000      	movs	r0, #0
 800e32a:	6360      	str	r0, [r4, #52]	; 0x34
 800e32c:	e7c0      	b.n	800e2b0 <__sflush_r+0x1c>
 800e32e:	2301      	movs	r3, #1
 800e330:	4628      	mov	r0, r5
 800e332:	47b0      	blx	r6
 800e334:	1c41      	adds	r1, r0, #1
 800e336:	d1c8      	bne.n	800e2ca <__sflush_r+0x36>
 800e338:	682b      	ldr	r3, [r5, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d0c5      	beq.n	800e2ca <__sflush_r+0x36>
 800e33e:	2b1d      	cmp	r3, #29
 800e340:	d001      	beq.n	800e346 <__sflush_r+0xb2>
 800e342:	2b16      	cmp	r3, #22
 800e344:	d101      	bne.n	800e34a <__sflush_r+0xb6>
 800e346:	602f      	str	r7, [r5, #0]
 800e348:	e7b1      	b.n	800e2ae <__sflush_r+0x1a>
 800e34a:	89a3      	ldrh	r3, [r4, #12]
 800e34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e350:	81a3      	strh	r3, [r4, #12]
 800e352:	e7ad      	b.n	800e2b0 <__sflush_r+0x1c>
 800e354:	690f      	ldr	r7, [r1, #16]
 800e356:	2f00      	cmp	r7, #0
 800e358:	d0a9      	beq.n	800e2ae <__sflush_r+0x1a>
 800e35a:	0793      	lsls	r3, r2, #30
 800e35c:	680e      	ldr	r6, [r1, #0]
 800e35e:	bf08      	it	eq
 800e360:	694b      	ldreq	r3, [r1, #20]
 800e362:	600f      	str	r7, [r1, #0]
 800e364:	bf18      	it	ne
 800e366:	2300      	movne	r3, #0
 800e368:	eba6 0807 	sub.w	r8, r6, r7
 800e36c:	608b      	str	r3, [r1, #8]
 800e36e:	f1b8 0f00 	cmp.w	r8, #0
 800e372:	dd9c      	ble.n	800e2ae <__sflush_r+0x1a>
 800e374:	6a21      	ldr	r1, [r4, #32]
 800e376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e378:	4643      	mov	r3, r8
 800e37a:	463a      	mov	r2, r7
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b0      	blx	r6
 800e380:	2800      	cmp	r0, #0
 800e382:	dc06      	bgt.n	800e392 <__sflush_r+0xfe>
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	e78e      	b.n	800e2b0 <__sflush_r+0x1c>
 800e392:	4407      	add	r7, r0
 800e394:	eba8 0800 	sub.w	r8, r8, r0
 800e398:	e7e9      	b.n	800e36e <__sflush_r+0xda>
 800e39a:	bf00      	nop
 800e39c:	dfbffffe 	.word	0xdfbffffe

0800e3a0 <_fflush_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	690b      	ldr	r3, [r1, #16]
 800e3a4:	4605      	mov	r5, r0
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	b913      	cbnz	r3, 800e3b0 <_fflush_r+0x10>
 800e3aa:	2500      	movs	r5, #0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	b118      	cbz	r0, 800e3ba <_fflush_r+0x1a>
 800e3b2:	6a03      	ldr	r3, [r0, #32]
 800e3b4:	b90b      	cbnz	r3, 800e3ba <_fflush_r+0x1a>
 800e3b6:	f7fd f8e3 	bl	800b580 <__sinit>
 800e3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d0f3      	beq.n	800e3aa <_fflush_r+0xa>
 800e3c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3c4:	07d0      	lsls	r0, r2, #31
 800e3c6:	d404      	bmi.n	800e3d2 <_fflush_r+0x32>
 800e3c8:	0599      	lsls	r1, r3, #22
 800e3ca:	d402      	bmi.n	800e3d2 <_fflush_r+0x32>
 800e3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3ce:	f7fd f9ff 	bl	800b7d0 <__retarget_lock_acquire_recursive>
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	f7ff ff5d 	bl	800e294 <__sflush_r>
 800e3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3dc:	07da      	lsls	r2, r3, #31
 800e3de:	4605      	mov	r5, r0
 800e3e0:	d4e4      	bmi.n	800e3ac <_fflush_r+0xc>
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	059b      	lsls	r3, r3, #22
 800e3e6:	d4e1      	bmi.n	800e3ac <_fflush_r+0xc>
 800e3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3ea:	f7fd f9f2 	bl	800b7d2 <__retarget_lock_release_recursive>
 800e3ee:	e7dd      	b.n	800e3ac <_fflush_r+0xc>

0800e3f0 <__swbuf_r>:
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	460e      	mov	r6, r1
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b118      	cbz	r0, 800e402 <__swbuf_r+0x12>
 800e3fa:	6a03      	ldr	r3, [r0, #32]
 800e3fc:	b90b      	cbnz	r3, 800e402 <__swbuf_r+0x12>
 800e3fe:	f7fd f8bf 	bl	800b580 <__sinit>
 800e402:	69a3      	ldr	r3, [r4, #24]
 800e404:	60a3      	str	r3, [r4, #8]
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	071a      	lsls	r2, r3, #28
 800e40a:	d525      	bpl.n	800e458 <__swbuf_r+0x68>
 800e40c:	6923      	ldr	r3, [r4, #16]
 800e40e:	b31b      	cbz	r3, 800e458 <__swbuf_r+0x68>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	6922      	ldr	r2, [r4, #16]
 800e414:	1a98      	subs	r0, r3, r2
 800e416:	6963      	ldr	r3, [r4, #20]
 800e418:	b2f6      	uxtb	r6, r6
 800e41a:	4283      	cmp	r3, r0
 800e41c:	4637      	mov	r7, r6
 800e41e:	dc04      	bgt.n	800e42a <__swbuf_r+0x3a>
 800e420:	4621      	mov	r1, r4
 800e422:	4628      	mov	r0, r5
 800e424:	f7ff ffbc 	bl	800e3a0 <_fflush_r>
 800e428:	b9e0      	cbnz	r0, 800e464 <__swbuf_r+0x74>
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	60a3      	str	r3, [r4, #8]
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	1c5a      	adds	r2, r3, #1
 800e434:	6022      	str	r2, [r4, #0]
 800e436:	701e      	strb	r6, [r3, #0]
 800e438:	6962      	ldr	r2, [r4, #20]
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d004      	beq.n	800e44a <__swbuf_r+0x5a>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	07db      	lsls	r3, r3, #31
 800e444:	d506      	bpl.n	800e454 <__swbuf_r+0x64>
 800e446:	2e0a      	cmp	r6, #10
 800e448:	d104      	bne.n	800e454 <__swbuf_r+0x64>
 800e44a:	4621      	mov	r1, r4
 800e44c:	4628      	mov	r0, r5
 800e44e:	f7ff ffa7 	bl	800e3a0 <_fflush_r>
 800e452:	b938      	cbnz	r0, 800e464 <__swbuf_r+0x74>
 800e454:	4638      	mov	r0, r7
 800e456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e458:	4621      	mov	r1, r4
 800e45a:	4628      	mov	r0, r5
 800e45c:	f000 f806 	bl	800e46c <__swsetup_r>
 800e460:	2800      	cmp	r0, #0
 800e462:	d0d5      	beq.n	800e410 <__swbuf_r+0x20>
 800e464:	f04f 37ff 	mov.w	r7, #4294967295
 800e468:	e7f4      	b.n	800e454 <__swbuf_r+0x64>
	...

0800e46c <__swsetup_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4b2a      	ldr	r3, [pc, #168]	; (800e518 <__swsetup_r+0xac>)
 800e470:	4605      	mov	r5, r0
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	460c      	mov	r4, r1
 800e476:	b118      	cbz	r0, 800e480 <__swsetup_r+0x14>
 800e478:	6a03      	ldr	r3, [r0, #32]
 800e47a:	b90b      	cbnz	r3, 800e480 <__swsetup_r+0x14>
 800e47c:	f7fd f880 	bl	800b580 <__sinit>
 800e480:	89a3      	ldrh	r3, [r4, #12]
 800e482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e486:	0718      	lsls	r0, r3, #28
 800e488:	d422      	bmi.n	800e4d0 <__swsetup_r+0x64>
 800e48a:	06d9      	lsls	r1, r3, #27
 800e48c:	d407      	bmi.n	800e49e <__swsetup_r+0x32>
 800e48e:	2309      	movs	r3, #9
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e496:	81a3      	strh	r3, [r4, #12]
 800e498:	f04f 30ff 	mov.w	r0, #4294967295
 800e49c:	e034      	b.n	800e508 <__swsetup_r+0x9c>
 800e49e:	0758      	lsls	r0, r3, #29
 800e4a0:	d512      	bpl.n	800e4c8 <__swsetup_r+0x5c>
 800e4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4a4:	b141      	cbz	r1, 800e4b8 <__swsetup_r+0x4c>
 800e4a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	d002      	beq.n	800e4b4 <__swsetup_r+0x48>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7fe f810 	bl	800c4d4 <_free_r>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	6363      	str	r3, [r4, #52]	; 0x34
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6063      	str	r3, [r4, #4]
 800e4c4:	6923      	ldr	r3, [r4, #16]
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	f043 0308 	orr.w	r3, r3, #8
 800e4ce:	81a3      	strh	r3, [r4, #12]
 800e4d0:	6923      	ldr	r3, [r4, #16]
 800e4d2:	b94b      	cbnz	r3, 800e4e8 <__swsetup_r+0x7c>
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4de:	d003      	beq.n	800e4e8 <__swsetup_r+0x7c>
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f000 fc7e 	bl	800ede4 <__smakebuf_r>
 800e4e8:	89a0      	ldrh	r0, [r4, #12]
 800e4ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4ee:	f010 0301 	ands.w	r3, r0, #1
 800e4f2:	d00a      	beq.n	800e50a <__swsetup_r+0x9e>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	60a3      	str	r3, [r4, #8]
 800e4f8:	6963      	ldr	r3, [r4, #20]
 800e4fa:	425b      	negs	r3, r3
 800e4fc:	61a3      	str	r3, [r4, #24]
 800e4fe:	6923      	ldr	r3, [r4, #16]
 800e500:	b943      	cbnz	r3, 800e514 <__swsetup_r+0xa8>
 800e502:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e506:	d1c4      	bne.n	800e492 <__swsetup_r+0x26>
 800e508:	bd38      	pop	{r3, r4, r5, pc}
 800e50a:	0781      	lsls	r1, r0, #30
 800e50c:	bf58      	it	pl
 800e50e:	6963      	ldrpl	r3, [r4, #20]
 800e510:	60a3      	str	r3, [r4, #8]
 800e512:	e7f4      	b.n	800e4fe <__swsetup_r+0x92>
 800e514:	2000      	movs	r0, #0
 800e516:	e7f7      	b.n	800e508 <__swsetup_r+0x9c>
 800e518:	20000164 	.word	0x20000164

0800e51c <memmove>:
 800e51c:	4288      	cmp	r0, r1
 800e51e:	b510      	push	{r4, lr}
 800e520:	eb01 0402 	add.w	r4, r1, r2
 800e524:	d902      	bls.n	800e52c <memmove+0x10>
 800e526:	4284      	cmp	r4, r0
 800e528:	4623      	mov	r3, r4
 800e52a:	d807      	bhi.n	800e53c <memmove+0x20>
 800e52c:	1e43      	subs	r3, r0, #1
 800e52e:	42a1      	cmp	r1, r4
 800e530:	d008      	beq.n	800e544 <memmove+0x28>
 800e532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e53a:	e7f8      	b.n	800e52e <memmove+0x12>
 800e53c:	4402      	add	r2, r0
 800e53e:	4601      	mov	r1, r0
 800e540:	428a      	cmp	r2, r1
 800e542:	d100      	bne.n	800e546 <memmove+0x2a>
 800e544:	bd10      	pop	{r4, pc}
 800e546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e54e:	e7f7      	b.n	800e540 <memmove+0x24>

0800e550 <strncmp>:
 800e550:	b510      	push	{r4, lr}
 800e552:	b16a      	cbz	r2, 800e570 <strncmp+0x20>
 800e554:	3901      	subs	r1, #1
 800e556:	1884      	adds	r4, r0, r2
 800e558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e55c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e560:	429a      	cmp	r2, r3
 800e562:	d103      	bne.n	800e56c <strncmp+0x1c>
 800e564:	42a0      	cmp	r0, r4
 800e566:	d001      	beq.n	800e56c <strncmp+0x1c>
 800e568:	2a00      	cmp	r2, #0
 800e56a:	d1f5      	bne.n	800e558 <strncmp+0x8>
 800e56c:	1ad0      	subs	r0, r2, r3
 800e56e:	bd10      	pop	{r4, pc}
 800e570:	4610      	mov	r0, r2
 800e572:	e7fc      	b.n	800e56e <strncmp+0x1e>

0800e574 <_sbrk_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4d06      	ldr	r5, [pc, #24]	; (800e590 <_sbrk_r+0x1c>)
 800e578:	2300      	movs	r3, #0
 800e57a:	4604      	mov	r4, r0
 800e57c:	4608      	mov	r0, r1
 800e57e:	602b      	str	r3, [r5, #0]
 800e580:	f7f3 fa0e 	bl	80019a0 <_sbrk>
 800e584:	1c43      	adds	r3, r0, #1
 800e586:	d102      	bne.n	800e58e <_sbrk_r+0x1a>
 800e588:	682b      	ldr	r3, [r5, #0]
 800e58a:	b103      	cbz	r3, 800e58e <_sbrk_r+0x1a>
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	bd38      	pop	{r3, r4, r5, pc}
 800e590:	2000218c 	.word	0x2000218c

0800e594 <memcpy>:
 800e594:	440a      	add	r2, r1
 800e596:	4291      	cmp	r1, r2
 800e598:	f100 33ff 	add.w	r3, r0, #4294967295
 800e59c:	d100      	bne.n	800e5a0 <memcpy+0xc>
 800e59e:	4770      	bx	lr
 800e5a0:	b510      	push	{r4, lr}
 800e5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5aa:	4291      	cmp	r1, r2
 800e5ac:	d1f9      	bne.n	800e5a2 <memcpy+0xe>
 800e5ae:	bd10      	pop	{r4, pc}

0800e5b0 <nan>:
 800e5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5b8 <nan+0x8>
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	00000000 	.word	0x00000000
 800e5bc:	7ff80000 	.word	0x7ff80000

0800e5c0 <__assert_func>:
 800e5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5c2:	4614      	mov	r4, r2
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <__assert_func+0x2c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	68d8      	ldr	r0, [r3, #12]
 800e5ce:	b14c      	cbz	r4, 800e5e4 <__assert_func+0x24>
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <__assert_func+0x30>)
 800e5d2:	9100      	str	r1, [sp, #0]
 800e5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5d8:	4906      	ldr	r1, [pc, #24]	; (800e5f4 <__assert_func+0x34>)
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f000 fbca 	bl	800ed74 <fiprintf>
 800e5e0:	f000 fc5e 	bl	800eea0 <abort>
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <__assert_func+0x38>)
 800e5e6:	461c      	mov	r4, r3
 800e5e8:	e7f3      	b.n	800e5d2 <__assert_func+0x12>
 800e5ea:	bf00      	nop
 800e5ec:	20000164 	.word	0x20000164
 800e5f0:	0800f3aa 	.word	0x0800f3aa
 800e5f4:	0800f3b7 	.word	0x0800f3b7
 800e5f8:	0800f3e5 	.word	0x0800f3e5

0800e5fc <_calloc_r>:
 800e5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5fe:	fba1 2402 	umull	r2, r4, r1, r2
 800e602:	b94c      	cbnz	r4, 800e618 <_calloc_r+0x1c>
 800e604:	4611      	mov	r1, r2
 800e606:	9201      	str	r2, [sp, #4]
 800e608:	f7fd ffd8 	bl	800c5bc <_malloc_r>
 800e60c:	9a01      	ldr	r2, [sp, #4]
 800e60e:	4605      	mov	r5, r0
 800e610:	b930      	cbnz	r0, 800e620 <_calloc_r+0x24>
 800e612:	4628      	mov	r0, r5
 800e614:	b003      	add	sp, #12
 800e616:	bd30      	pop	{r4, r5, pc}
 800e618:	220c      	movs	r2, #12
 800e61a:	6002      	str	r2, [r0, #0]
 800e61c:	2500      	movs	r5, #0
 800e61e:	e7f8      	b.n	800e612 <_calloc_r+0x16>
 800e620:	4621      	mov	r1, r4
 800e622:	f7fd f858 	bl	800b6d6 <memset>
 800e626:	e7f4      	b.n	800e612 <_calloc_r+0x16>

0800e628 <rshift>:
 800e628:	6903      	ldr	r3, [r0, #16]
 800e62a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e62e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e632:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e636:	f100 0414 	add.w	r4, r0, #20
 800e63a:	dd45      	ble.n	800e6c8 <rshift+0xa0>
 800e63c:	f011 011f 	ands.w	r1, r1, #31
 800e640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e648:	d10c      	bne.n	800e664 <rshift+0x3c>
 800e64a:	f100 0710 	add.w	r7, r0, #16
 800e64e:	4629      	mov	r1, r5
 800e650:	42b1      	cmp	r1, r6
 800e652:	d334      	bcc.n	800e6be <rshift+0x96>
 800e654:	1a9b      	subs	r3, r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	1eea      	subs	r2, r5, #3
 800e65a:	4296      	cmp	r6, r2
 800e65c:	bf38      	it	cc
 800e65e:	2300      	movcc	r3, #0
 800e660:	4423      	add	r3, r4
 800e662:	e015      	b.n	800e690 <rshift+0x68>
 800e664:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e668:	f1c1 0820 	rsb	r8, r1, #32
 800e66c:	40cf      	lsrs	r7, r1
 800e66e:	f105 0e04 	add.w	lr, r5, #4
 800e672:	46a1      	mov	r9, r4
 800e674:	4576      	cmp	r6, lr
 800e676:	46f4      	mov	ip, lr
 800e678:	d815      	bhi.n	800e6a6 <rshift+0x7e>
 800e67a:	1a9a      	subs	r2, r3, r2
 800e67c:	0092      	lsls	r2, r2, #2
 800e67e:	3a04      	subs	r2, #4
 800e680:	3501      	adds	r5, #1
 800e682:	42ae      	cmp	r6, r5
 800e684:	bf38      	it	cc
 800e686:	2200      	movcc	r2, #0
 800e688:	18a3      	adds	r3, r4, r2
 800e68a:	50a7      	str	r7, [r4, r2]
 800e68c:	b107      	cbz	r7, 800e690 <rshift+0x68>
 800e68e:	3304      	adds	r3, #4
 800e690:	1b1a      	subs	r2, r3, r4
 800e692:	42a3      	cmp	r3, r4
 800e694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e698:	bf08      	it	eq
 800e69a:	2300      	moveq	r3, #0
 800e69c:	6102      	str	r2, [r0, #16]
 800e69e:	bf08      	it	eq
 800e6a0:	6143      	streq	r3, [r0, #20]
 800e6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a6:	f8dc c000 	ldr.w	ip, [ip]
 800e6aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6ae:	ea4c 0707 	orr.w	r7, ip, r7
 800e6b2:	f849 7b04 	str.w	r7, [r9], #4
 800e6b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6ba:	40cf      	lsrs	r7, r1
 800e6bc:	e7da      	b.n	800e674 <rshift+0x4c>
 800e6be:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6c6:	e7c3      	b.n	800e650 <rshift+0x28>
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	e7e1      	b.n	800e690 <rshift+0x68>

0800e6cc <__hexdig_fun>:
 800e6cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e6d0:	2b09      	cmp	r3, #9
 800e6d2:	d802      	bhi.n	800e6da <__hexdig_fun+0xe>
 800e6d4:	3820      	subs	r0, #32
 800e6d6:	b2c0      	uxtb	r0, r0
 800e6d8:	4770      	bx	lr
 800e6da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e6de:	2b05      	cmp	r3, #5
 800e6e0:	d801      	bhi.n	800e6e6 <__hexdig_fun+0x1a>
 800e6e2:	3847      	subs	r0, #71	; 0x47
 800e6e4:	e7f7      	b.n	800e6d6 <__hexdig_fun+0xa>
 800e6e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d801      	bhi.n	800e6f2 <__hexdig_fun+0x26>
 800e6ee:	3827      	subs	r0, #39	; 0x27
 800e6f0:	e7f1      	b.n	800e6d6 <__hexdig_fun+0xa>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <__gethex>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	4617      	mov	r7, r2
 800e6fe:	680a      	ldr	r2, [r1, #0]
 800e700:	b085      	sub	sp, #20
 800e702:	f102 0b02 	add.w	fp, r2, #2
 800e706:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e70a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e70e:	4681      	mov	r9, r0
 800e710:	468a      	mov	sl, r1
 800e712:	9302      	str	r3, [sp, #8]
 800e714:	32fe      	adds	r2, #254	; 0xfe
 800e716:	eb02 030b 	add.w	r3, r2, fp
 800e71a:	46d8      	mov	r8, fp
 800e71c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	2830      	cmp	r0, #48	; 0x30
 800e724:	d0f7      	beq.n	800e716 <__gethex+0x1e>
 800e726:	f7ff ffd1 	bl	800e6cc <__hexdig_fun>
 800e72a:	4604      	mov	r4, r0
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d138      	bne.n	800e7a2 <__gethex+0xaa>
 800e730:	49a7      	ldr	r1, [pc, #668]	; (800e9d0 <__gethex+0x2d8>)
 800e732:	2201      	movs	r2, #1
 800e734:	4640      	mov	r0, r8
 800e736:	f7ff ff0b 	bl	800e550 <strncmp>
 800e73a:	4606      	mov	r6, r0
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d169      	bne.n	800e814 <__gethex+0x11c>
 800e740:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e744:	465d      	mov	r5, fp
 800e746:	f7ff ffc1 	bl	800e6cc <__hexdig_fun>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d064      	beq.n	800e818 <__gethex+0x120>
 800e74e:	465a      	mov	r2, fp
 800e750:	7810      	ldrb	r0, [r2, #0]
 800e752:	2830      	cmp	r0, #48	; 0x30
 800e754:	4690      	mov	r8, r2
 800e756:	f102 0201 	add.w	r2, r2, #1
 800e75a:	d0f9      	beq.n	800e750 <__gethex+0x58>
 800e75c:	f7ff ffb6 	bl	800e6cc <__hexdig_fun>
 800e760:	2301      	movs	r3, #1
 800e762:	fab0 f480 	clz	r4, r0
 800e766:	0964      	lsrs	r4, r4, #5
 800e768:	465e      	mov	r6, fp
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	4642      	mov	r2, r8
 800e76e:	4615      	mov	r5, r2
 800e770:	3201      	adds	r2, #1
 800e772:	7828      	ldrb	r0, [r5, #0]
 800e774:	f7ff ffaa 	bl	800e6cc <__hexdig_fun>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d1f8      	bne.n	800e76e <__gethex+0x76>
 800e77c:	4994      	ldr	r1, [pc, #592]	; (800e9d0 <__gethex+0x2d8>)
 800e77e:	2201      	movs	r2, #1
 800e780:	4628      	mov	r0, r5
 800e782:	f7ff fee5 	bl	800e550 <strncmp>
 800e786:	b978      	cbnz	r0, 800e7a8 <__gethex+0xb0>
 800e788:	b946      	cbnz	r6, 800e79c <__gethex+0xa4>
 800e78a:	1c6e      	adds	r6, r5, #1
 800e78c:	4632      	mov	r2, r6
 800e78e:	4615      	mov	r5, r2
 800e790:	3201      	adds	r2, #1
 800e792:	7828      	ldrb	r0, [r5, #0]
 800e794:	f7ff ff9a 	bl	800e6cc <__hexdig_fun>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d1f8      	bne.n	800e78e <__gethex+0x96>
 800e79c:	1b73      	subs	r3, r6, r5
 800e79e:	009e      	lsls	r6, r3, #2
 800e7a0:	e004      	b.n	800e7ac <__gethex+0xb4>
 800e7a2:	2400      	movs	r4, #0
 800e7a4:	4626      	mov	r6, r4
 800e7a6:	e7e1      	b.n	800e76c <__gethex+0x74>
 800e7a8:	2e00      	cmp	r6, #0
 800e7aa:	d1f7      	bne.n	800e79c <__gethex+0xa4>
 800e7ac:	782b      	ldrb	r3, [r5, #0]
 800e7ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e7b2:	2b50      	cmp	r3, #80	; 0x50
 800e7b4:	d13d      	bne.n	800e832 <__gethex+0x13a>
 800e7b6:	786b      	ldrb	r3, [r5, #1]
 800e7b8:	2b2b      	cmp	r3, #43	; 0x2b
 800e7ba:	d02f      	beq.n	800e81c <__gethex+0x124>
 800e7bc:	2b2d      	cmp	r3, #45	; 0x2d
 800e7be:	d031      	beq.n	800e824 <__gethex+0x12c>
 800e7c0:	1c69      	adds	r1, r5, #1
 800e7c2:	f04f 0b00 	mov.w	fp, #0
 800e7c6:	7808      	ldrb	r0, [r1, #0]
 800e7c8:	f7ff ff80 	bl	800e6cc <__hexdig_fun>
 800e7cc:	1e42      	subs	r2, r0, #1
 800e7ce:	b2d2      	uxtb	r2, r2
 800e7d0:	2a18      	cmp	r2, #24
 800e7d2:	d82e      	bhi.n	800e832 <__gethex+0x13a>
 800e7d4:	f1a0 0210 	sub.w	r2, r0, #16
 800e7d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7dc:	f7ff ff76 	bl	800e6cc <__hexdig_fun>
 800e7e0:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7e4:	fa5f fc8c 	uxtb.w	ip, ip
 800e7e8:	f1bc 0f18 	cmp.w	ip, #24
 800e7ec:	d91d      	bls.n	800e82a <__gethex+0x132>
 800e7ee:	f1bb 0f00 	cmp.w	fp, #0
 800e7f2:	d000      	beq.n	800e7f6 <__gethex+0xfe>
 800e7f4:	4252      	negs	r2, r2
 800e7f6:	4416      	add	r6, r2
 800e7f8:	f8ca 1000 	str.w	r1, [sl]
 800e7fc:	b1dc      	cbz	r4, 800e836 <__gethex+0x13e>
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	bf14      	ite	ne
 800e804:	f04f 0800 	movne.w	r8, #0
 800e808:	f04f 0806 	moveq.w	r8, #6
 800e80c:	4640      	mov	r0, r8
 800e80e:	b005      	add	sp, #20
 800e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e814:	4645      	mov	r5, r8
 800e816:	4626      	mov	r6, r4
 800e818:	2401      	movs	r4, #1
 800e81a:	e7c7      	b.n	800e7ac <__gethex+0xb4>
 800e81c:	f04f 0b00 	mov.w	fp, #0
 800e820:	1ca9      	adds	r1, r5, #2
 800e822:	e7d0      	b.n	800e7c6 <__gethex+0xce>
 800e824:	f04f 0b01 	mov.w	fp, #1
 800e828:	e7fa      	b.n	800e820 <__gethex+0x128>
 800e82a:	230a      	movs	r3, #10
 800e82c:	fb03 0002 	mla	r0, r3, r2, r0
 800e830:	e7d0      	b.n	800e7d4 <__gethex+0xdc>
 800e832:	4629      	mov	r1, r5
 800e834:	e7e0      	b.n	800e7f8 <__gethex+0x100>
 800e836:	eba5 0308 	sub.w	r3, r5, r8
 800e83a:	3b01      	subs	r3, #1
 800e83c:	4621      	mov	r1, r4
 800e83e:	2b07      	cmp	r3, #7
 800e840:	dc0a      	bgt.n	800e858 <__gethex+0x160>
 800e842:	4648      	mov	r0, r9
 800e844:	f7fd ff46 	bl	800c6d4 <_Balloc>
 800e848:	4604      	mov	r4, r0
 800e84a:	b940      	cbnz	r0, 800e85e <__gethex+0x166>
 800e84c:	4b61      	ldr	r3, [pc, #388]	; (800e9d4 <__gethex+0x2dc>)
 800e84e:	4602      	mov	r2, r0
 800e850:	21e4      	movs	r1, #228	; 0xe4
 800e852:	4861      	ldr	r0, [pc, #388]	; (800e9d8 <__gethex+0x2e0>)
 800e854:	f7ff feb4 	bl	800e5c0 <__assert_func>
 800e858:	3101      	adds	r1, #1
 800e85a:	105b      	asrs	r3, r3, #1
 800e85c:	e7ef      	b.n	800e83e <__gethex+0x146>
 800e85e:	f100 0a14 	add.w	sl, r0, #20
 800e862:	2300      	movs	r3, #0
 800e864:	495a      	ldr	r1, [pc, #360]	; (800e9d0 <__gethex+0x2d8>)
 800e866:	f8cd a004 	str.w	sl, [sp, #4]
 800e86a:	469b      	mov	fp, r3
 800e86c:	45a8      	cmp	r8, r5
 800e86e:	d342      	bcc.n	800e8f6 <__gethex+0x1fe>
 800e870:	9801      	ldr	r0, [sp, #4]
 800e872:	f840 bb04 	str.w	fp, [r0], #4
 800e876:	eba0 000a 	sub.w	r0, r0, sl
 800e87a:	1080      	asrs	r0, r0, #2
 800e87c:	6120      	str	r0, [r4, #16]
 800e87e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e882:	4658      	mov	r0, fp
 800e884:	f7fe f818 	bl	800c8b8 <__hi0bits>
 800e888:	683d      	ldr	r5, [r7, #0]
 800e88a:	eba8 0000 	sub.w	r0, r8, r0
 800e88e:	42a8      	cmp	r0, r5
 800e890:	dd59      	ble.n	800e946 <__gethex+0x24e>
 800e892:	eba0 0805 	sub.w	r8, r0, r5
 800e896:	4641      	mov	r1, r8
 800e898:	4620      	mov	r0, r4
 800e89a:	f7fe fba7 	bl	800cfec <__any_on>
 800e89e:	4683      	mov	fp, r0
 800e8a0:	b1b8      	cbz	r0, 800e8d2 <__gethex+0x1da>
 800e8a2:	f108 33ff 	add.w	r3, r8, #4294967295
 800e8a6:	1159      	asrs	r1, r3, #5
 800e8a8:	f003 021f 	and.w	r2, r3, #31
 800e8ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8b0:	f04f 0b01 	mov.w	fp, #1
 800e8b4:	fa0b f202 	lsl.w	r2, fp, r2
 800e8b8:	420a      	tst	r2, r1
 800e8ba:	d00a      	beq.n	800e8d2 <__gethex+0x1da>
 800e8bc:	455b      	cmp	r3, fp
 800e8be:	dd06      	ble.n	800e8ce <__gethex+0x1d6>
 800e8c0:	f1a8 0102 	sub.w	r1, r8, #2
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f7fe fb91 	bl	800cfec <__any_on>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d138      	bne.n	800e940 <__gethex+0x248>
 800e8ce:	f04f 0b02 	mov.w	fp, #2
 800e8d2:	4641      	mov	r1, r8
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7ff fea7 	bl	800e628 <rshift>
 800e8da:	4446      	add	r6, r8
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	42b3      	cmp	r3, r6
 800e8e0:	da41      	bge.n	800e966 <__gethex+0x26e>
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4648      	mov	r0, r9
 800e8e6:	f7fd ff35 	bl	800c754 <_Bfree>
 800e8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e8f4:	e78a      	b.n	800e80c <__gethex+0x114>
 800e8f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e8fa:	2a2e      	cmp	r2, #46	; 0x2e
 800e8fc:	d014      	beq.n	800e928 <__gethex+0x230>
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	d106      	bne.n	800e910 <__gethex+0x218>
 800e902:	9b01      	ldr	r3, [sp, #4]
 800e904:	f843 bb04 	str.w	fp, [r3], #4
 800e908:	f04f 0b00 	mov.w	fp, #0
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	465b      	mov	r3, fp
 800e910:	7828      	ldrb	r0, [r5, #0]
 800e912:	9303      	str	r3, [sp, #12]
 800e914:	f7ff feda 	bl	800e6cc <__hexdig_fun>
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	f000 000f 	and.w	r0, r0, #15
 800e91e:	4098      	lsls	r0, r3
 800e920:	ea4b 0b00 	orr.w	fp, fp, r0
 800e924:	3304      	adds	r3, #4
 800e926:	e7a1      	b.n	800e86c <__gethex+0x174>
 800e928:	45a8      	cmp	r8, r5
 800e92a:	d8e8      	bhi.n	800e8fe <__gethex+0x206>
 800e92c:	2201      	movs	r2, #1
 800e92e:	4628      	mov	r0, r5
 800e930:	9303      	str	r3, [sp, #12]
 800e932:	f7ff fe0d 	bl	800e550 <strncmp>
 800e936:	4926      	ldr	r1, [pc, #152]	; (800e9d0 <__gethex+0x2d8>)
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d1df      	bne.n	800e8fe <__gethex+0x206>
 800e93e:	e795      	b.n	800e86c <__gethex+0x174>
 800e940:	f04f 0b03 	mov.w	fp, #3
 800e944:	e7c5      	b.n	800e8d2 <__gethex+0x1da>
 800e946:	da0b      	bge.n	800e960 <__gethex+0x268>
 800e948:	eba5 0800 	sub.w	r8, r5, r0
 800e94c:	4621      	mov	r1, r4
 800e94e:	4642      	mov	r2, r8
 800e950:	4648      	mov	r0, r9
 800e952:	f7fe f919 	bl	800cb88 <__lshift>
 800e956:	eba6 0608 	sub.w	r6, r6, r8
 800e95a:	4604      	mov	r4, r0
 800e95c:	f100 0a14 	add.w	sl, r0, #20
 800e960:	f04f 0b00 	mov.w	fp, #0
 800e964:	e7ba      	b.n	800e8dc <__gethex+0x1e4>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	42b3      	cmp	r3, r6
 800e96a:	dd73      	ble.n	800ea54 <__gethex+0x35c>
 800e96c:	1b9e      	subs	r6, r3, r6
 800e96e:	42b5      	cmp	r5, r6
 800e970:	dc34      	bgt.n	800e9dc <__gethex+0x2e4>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2b02      	cmp	r3, #2
 800e976:	d023      	beq.n	800e9c0 <__gethex+0x2c8>
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d025      	beq.n	800e9c8 <__gethex+0x2d0>
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d115      	bne.n	800e9ac <__gethex+0x2b4>
 800e980:	42b5      	cmp	r5, r6
 800e982:	d113      	bne.n	800e9ac <__gethex+0x2b4>
 800e984:	2d01      	cmp	r5, #1
 800e986:	d10b      	bne.n	800e9a0 <__gethex+0x2a8>
 800e988:	9a02      	ldr	r2, [sp, #8]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	2301      	movs	r3, #1
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	f8ca 3000 	str.w	r3, [sl]
 800e996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e998:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e99c:	601c      	str	r4, [r3, #0]
 800e99e:	e735      	b.n	800e80c <__gethex+0x114>
 800e9a0:	1e69      	subs	r1, r5, #1
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f7fe fb22 	bl	800cfec <__any_on>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d1ed      	bne.n	800e988 <__gethex+0x290>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4648      	mov	r0, r9
 800e9b0:	f7fd fed0 	bl	800c754 <_Bfree>
 800e9b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	6013      	str	r3, [r2, #0]
 800e9ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e9be:	e725      	b.n	800e80c <__gethex+0x114>
 800e9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1f2      	bne.n	800e9ac <__gethex+0x2b4>
 800e9c6:	e7df      	b.n	800e988 <__gethex+0x290>
 800e9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1dc      	bne.n	800e988 <__gethex+0x290>
 800e9ce:	e7ed      	b.n	800e9ac <__gethex+0x2b4>
 800e9d0:	0800f23c 	.word	0x0800f23c
 800e9d4:	0800f0d1 	.word	0x0800f0d1
 800e9d8:	0800f3e6 	.word	0x0800f3e6
 800e9dc:	f106 38ff 	add.w	r8, r6, #4294967295
 800e9e0:	f1bb 0f00 	cmp.w	fp, #0
 800e9e4:	d133      	bne.n	800ea4e <__gethex+0x356>
 800e9e6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ea:	d004      	beq.n	800e9f6 <__gethex+0x2fe>
 800e9ec:	4641      	mov	r1, r8
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7fe fafc 	bl	800cfec <__any_on>
 800e9f4:	4683      	mov	fp, r0
 800e9f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ea00:	f008 081f 	and.w	r8, r8, #31
 800ea04:	fa03 f308 	lsl.w	r3, r3, r8
 800ea08:	4213      	tst	r3, r2
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	bf18      	it	ne
 800ea10:	f04b 0b02 	orrne.w	fp, fp, #2
 800ea14:	1bad      	subs	r5, r5, r6
 800ea16:	f7ff fe07 	bl	800e628 <rshift>
 800ea1a:	687e      	ldr	r6, [r7, #4]
 800ea1c:	f04f 0802 	mov.w	r8, #2
 800ea20:	f1bb 0f00 	cmp.w	fp, #0
 800ea24:	d04a      	beq.n	800eabc <__gethex+0x3c4>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d016      	beq.n	800ea5a <__gethex+0x362>
 800ea2c:	2b03      	cmp	r3, #3
 800ea2e:	d018      	beq.n	800ea62 <__gethex+0x36a>
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d109      	bne.n	800ea48 <__gethex+0x350>
 800ea34:	f01b 0f02 	tst.w	fp, #2
 800ea38:	d006      	beq.n	800ea48 <__gethex+0x350>
 800ea3a:	f8da 3000 	ldr.w	r3, [sl]
 800ea3e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ea42:	f01b 0f01 	tst.w	fp, #1
 800ea46:	d10f      	bne.n	800ea68 <__gethex+0x370>
 800ea48:	f048 0810 	orr.w	r8, r8, #16
 800ea4c:	e036      	b.n	800eabc <__gethex+0x3c4>
 800ea4e:	f04f 0b01 	mov.w	fp, #1
 800ea52:	e7d0      	b.n	800e9f6 <__gethex+0x2fe>
 800ea54:	f04f 0801 	mov.w	r8, #1
 800ea58:	e7e2      	b.n	800ea20 <__gethex+0x328>
 800ea5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea5c:	f1c3 0301 	rsb	r3, r3, #1
 800ea60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d0ef      	beq.n	800ea48 <__gethex+0x350>
 800ea68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea6c:	f104 0214 	add.w	r2, r4, #20
 800ea70:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	4694      	mov	ip, r2
 800ea7e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ea82:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ea86:	d01e      	beq.n	800eac6 <__gethex+0x3ce>
 800ea88:	3101      	adds	r1, #1
 800ea8a:	f8cc 1000 	str.w	r1, [ip]
 800ea8e:	f1b8 0f02 	cmp.w	r8, #2
 800ea92:	f104 0214 	add.w	r2, r4, #20
 800ea96:	d13d      	bne.n	800eb14 <__gethex+0x41c>
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	42ab      	cmp	r3, r5
 800ea9e:	d10b      	bne.n	800eab8 <__gethex+0x3c0>
 800eaa0:	1169      	asrs	r1, r5, #5
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	f005 051f 	and.w	r5, r5, #31
 800eaa8:	fa03 f505 	lsl.w	r5, r3, r5
 800eaac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eab0:	421d      	tst	r5, r3
 800eab2:	bf18      	it	ne
 800eab4:	f04f 0801 	movne.w	r8, #1
 800eab8:	f048 0820 	orr.w	r8, r8, #32
 800eabc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eabe:	601c      	str	r4, [r3, #0]
 800eac0:	9b02      	ldr	r3, [sp, #8]
 800eac2:	601e      	str	r6, [r3, #0]
 800eac4:	e6a2      	b.n	800e80c <__gethex+0x114>
 800eac6:	4290      	cmp	r0, r2
 800eac8:	f842 3c04 	str.w	r3, [r2, #-4]
 800eacc:	d8d6      	bhi.n	800ea7c <__gethex+0x384>
 800eace:	68a2      	ldr	r2, [r4, #8]
 800ead0:	4593      	cmp	fp, r2
 800ead2:	db17      	blt.n	800eb04 <__gethex+0x40c>
 800ead4:	6861      	ldr	r1, [r4, #4]
 800ead6:	4648      	mov	r0, r9
 800ead8:	3101      	adds	r1, #1
 800eada:	f7fd fdfb 	bl	800c6d4 <_Balloc>
 800eade:	4682      	mov	sl, r0
 800eae0:	b918      	cbnz	r0, 800eaea <__gethex+0x3f2>
 800eae2:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <__gethex+0x458>)
 800eae4:	4602      	mov	r2, r0
 800eae6:	2184      	movs	r1, #132	; 0x84
 800eae8:	e6b3      	b.n	800e852 <__gethex+0x15a>
 800eaea:	6922      	ldr	r2, [r4, #16]
 800eaec:	3202      	adds	r2, #2
 800eaee:	f104 010c 	add.w	r1, r4, #12
 800eaf2:	0092      	lsls	r2, r2, #2
 800eaf4:	300c      	adds	r0, #12
 800eaf6:	f7ff fd4d 	bl	800e594 <memcpy>
 800eafa:	4621      	mov	r1, r4
 800eafc:	4648      	mov	r0, r9
 800eafe:	f7fd fe29 	bl	800c754 <_Bfree>
 800eb02:	4654      	mov	r4, sl
 800eb04:	6922      	ldr	r2, [r4, #16]
 800eb06:	1c51      	adds	r1, r2, #1
 800eb08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eb0c:	6121      	str	r1, [r4, #16]
 800eb0e:	2101      	movs	r1, #1
 800eb10:	6151      	str	r1, [r2, #20]
 800eb12:	e7bc      	b.n	800ea8e <__gethex+0x396>
 800eb14:	6921      	ldr	r1, [r4, #16]
 800eb16:	4559      	cmp	r1, fp
 800eb18:	dd0b      	ble.n	800eb32 <__gethex+0x43a>
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f7ff fd83 	bl	800e628 <rshift>
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	3601      	adds	r6, #1
 800eb26:	42b3      	cmp	r3, r6
 800eb28:	f6ff aedb 	blt.w	800e8e2 <__gethex+0x1ea>
 800eb2c:	f04f 0801 	mov.w	r8, #1
 800eb30:	e7c2      	b.n	800eab8 <__gethex+0x3c0>
 800eb32:	f015 051f 	ands.w	r5, r5, #31
 800eb36:	d0f9      	beq.n	800eb2c <__gethex+0x434>
 800eb38:	9b01      	ldr	r3, [sp, #4]
 800eb3a:	441a      	add	r2, r3
 800eb3c:	f1c5 0520 	rsb	r5, r5, #32
 800eb40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800eb44:	f7fd feb8 	bl	800c8b8 <__hi0bits>
 800eb48:	42a8      	cmp	r0, r5
 800eb4a:	dbe6      	blt.n	800eb1a <__gethex+0x422>
 800eb4c:	e7ee      	b.n	800eb2c <__gethex+0x434>
 800eb4e:	bf00      	nop
 800eb50:	0800f0d1 	.word	0x0800f0d1

0800eb54 <L_shift>:
 800eb54:	f1c2 0208 	rsb	r2, r2, #8
 800eb58:	0092      	lsls	r2, r2, #2
 800eb5a:	b570      	push	{r4, r5, r6, lr}
 800eb5c:	f1c2 0620 	rsb	r6, r2, #32
 800eb60:	6843      	ldr	r3, [r0, #4]
 800eb62:	6804      	ldr	r4, [r0, #0]
 800eb64:	fa03 f506 	lsl.w	r5, r3, r6
 800eb68:	432c      	orrs	r4, r5
 800eb6a:	40d3      	lsrs	r3, r2
 800eb6c:	6004      	str	r4, [r0, #0]
 800eb6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb72:	4288      	cmp	r0, r1
 800eb74:	d3f4      	bcc.n	800eb60 <L_shift+0xc>
 800eb76:	bd70      	pop	{r4, r5, r6, pc}

0800eb78 <__match>:
 800eb78:	b530      	push	{r4, r5, lr}
 800eb7a:	6803      	ldr	r3, [r0, #0]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb82:	b914      	cbnz	r4, 800eb8a <__match+0x12>
 800eb84:	6003      	str	r3, [r0, #0]
 800eb86:	2001      	movs	r0, #1
 800eb88:	bd30      	pop	{r4, r5, pc}
 800eb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eb92:	2d19      	cmp	r5, #25
 800eb94:	bf98      	it	ls
 800eb96:	3220      	addls	r2, #32
 800eb98:	42a2      	cmp	r2, r4
 800eb9a:	d0f0      	beq.n	800eb7e <__match+0x6>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	e7f3      	b.n	800eb88 <__match+0x10>

0800eba0 <__hexnan>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	680b      	ldr	r3, [r1, #0]
 800eba6:	6801      	ldr	r1, [r0, #0]
 800eba8:	115e      	asrs	r6, r3, #5
 800ebaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ebae:	f013 031f 	ands.w	r3, r3, #31
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	bf18      	it	ne
 800ebb6:	3604      	addne	r6, #4
 800ebb8:	2500      	movs	r5, #0
 800ebba:	1f37      	subs	r7, r6, #4
 800ebbc:	4682      	mov	sl, r0
 800ebbe:	4690      	mov	r8, r2
 800ebc0:	9301      	str	r3, [sp, #4]
 800ebc2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebc6:	46b9      	mov	r9, r7
 800ebc8:	463c      	mov	r4, r7
 800ebca:	9502      	str	r5, [sp, #8]
 800ebcc:	46ab      	mov	fp, r5
 800ebce:	784a      	ldrb	r2, [r1, #1]
 800ebd0:	1c4b      	adds	r3, r1, #1
 800ebd2:	9303      	str	r3, [sp, #12]
 800ebd4:	b342      	cbz	r2, 800ec28 <__hexnan+0x88>
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	9105      	str	r1, [sp, #20]
 800ebda:	9204      	str	r2, [sp, #16]
 800ebdc:	f7ff fd76 	bl	800e6cc <__hexdig_fun>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d14f      	bne.n	800ec84 <__hexnan+0xe4>
 800ebe4:	9a04      	ldr	r2, [sp, #16]
 800ebe6:	9905      	ldr	r1, [sp, #20]
 800ebe8:	2a20      	cmp	r2, #32
 800ebea:	d818      	bhi.n	800ec1e <__hexnan+0x7e>
 800ebec:	9b02      	ldr	r3, [sp, #8]
 800ebee:	459b      	cmp	fp, r3
 800ebf0:	dd13      	ble.n	800ec1a <__hexnan+0x7a>
 800ebf2:	454c      	cmp	r4, r9
 800ebf4:	d206      	bcs.n	800ec04 <__hexnan+0x64>
 800ebf6:	2d07      	cmp	r5, #7
 800ebf8:	dc04      	bgt.n	800ec04 <__hexnan+0x64>
 800ebfa:	462a      	mov	r2, r5
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7ff ffa8 	bl	800eb54 <L_shift>
 800ec04:	4544      	cmp	r4, r8
 800ec06:	d950      	bls.n	800ecaa <__hexnan+0x10a>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ec0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec12:	f8cd b008 	str.w	fp, [sp, #8]
 800ec16:	464c      	mov	r4, r9
 800ec18:	461d      	mov	r5, r3
 800ec1a:	9903      	ldr	r1, [sp, #12]
 800ec1c:	e7d7      	b.n	800ebce <__hexnan+0x2e>
 800ec1e:	2a29      	cmp	r2, #41	; 0x29
 800ec20:	d155      	bne.n	800ecce <__hexnan+0x12e>
 800ec22:	3102      	adds	r1, #2
 800ec24:	f8ca 1000 	str.w	r1, [sl]
 800ec28:	f1bb 0f00 	cmp.w	fp, #0
 800ec2c:	d04f      	beq.n	800ecce <__hexnan+0x12e>
 800ec2e:	454c      	cmp	r4, r9
 800ec30:	d206      	bcs.n	800ec40 <__hexnan+0xa0>
 800ec32:	2d07      	cmp	r5, #7
 800ec34:	dc04      	bgt.n	800ec40 <__hexnan+0xa0>
 800ec36:	462a      	mov	r2, r5
 800ec38:	4649      	mov	r1, r9
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7ff ff8a 	bl	800eb54 <L_shift>
 800ec40:	4544      	cmp	r4, r8
 800ec42:	d934      	bls.n	800ecae <__hexnan+0x10e>
 800ec44:	f1a8 0204 	sub.w	r2, r8, #4
 800ec48:	4623      	mov	r3, r4
 800ec4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec52:	429f      	cmp	r7, r3
 800ec54:	d2f9      	bcs.n	800ec4a <__hexnan+0xaa>
 800ec56:	1b3b      	subs	r3, r7, r4
 800ec58:	f023 0303 	bic.w	r3, r3, #3
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	3e03      	subs	r6, #3
 800ec60:	3401      	adds	r4, #1
 800ec62:	42a6      	cmp	r6, r4
 800ec64:	bf38      	it	cc
 800ec66:	2304      	movcc	r3, #4
 800ec68:	4443      	add	r3, r8
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f843 2b04 	str.w	r2, [r3], #4
 800ec70:	429f      	cmp	r7, r3
 800ec72:	d2fb      	bcs.n	800ec6c <__hexnan+0xcc>
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	b91b      	cbnz	r3, 800ec80 <__hexnan+0xe0>
 800ec78:	4547      	cmp	r7, r8
 800ec7a:	d126      	bne.n	800ecca <__hexnan+0x12a>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	2005      	movs	r0, #5
 800ec82:	e025      	b.n	800ecd0 <__hexnan+0x130>
 800ec84:	3501      	adds	r5, #1
 800ec86:	2d08      	cmp	r5, #8
 800ec88:	f10b 0b01 	add.w	fp, fp, #1
 800ec8c:	dd06      	ble.n	800ec9c <__hexnan+0xfc>
 800ec8e:	4544      	cmp	r4, r8
 800ec90:	d9c3      	bls.n	800ec1a <__hexnan+0x7a>
 800ec92:	2300      	movs	r3, #0
 800ec94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec98:	2501      	movs	r5, #1
 800ec9a:	3c04      	subs	r4, #4
 800ec9c:	6822      	ldr	r2, [r4, #0]
 800ec9e:	f000 000f 	and.w	r0, r0, #15
 800eca2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eca6:	6020      	str	r0, [r4, #0]
 800eca8:	e7b7      	b.n	800ec1a <__hexnan+0x7a>
 800ecaa:	2508      	movs	r5, #8
 800ecac:	e7b5      	b.n	800ec1a <__hexnan+0x7a>
 800ecae:	9b01      	ldr	r3, [sp, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d0df      	beq.n	800ec74 <__hexnan+0xd4>
 800ecb4:	f1c3 0320 	rsb	r3, r3, #32
 800ecb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecbc:	40da      	lsrs	r2, r3
 800ecbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecc8:	e7d4      	b.n	800ec74 <__hexnan+0xd4>
 800ecca:	3f04      	subs	r7, #4
 800eccc:	e7d2      	b.n	800ec74 <__hexnan+0xd4>
 800ecce:	2004      	movs	r0, #4
 800ecd0:	b007      	add	sp, #28
 800ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecd6 <__ascii_mbtowc>:
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	b901      	cbnz	r1, 800ecdc <__ascii_mbtowc+0x6>
 800ecda:	a901      	add	r1, sp, #4
 800ecdc:	b142      	cbz	r2, 800ecf0 <__ascii_mbtowc+0x1a>
 800ecde:	b14b      	cbz	r3, 800ecf4 <__ascii_mbtowc+0x1e>
 800ece0:	7813      	ldrb	r3, [r2, #0]
 800ece2:	600b      	str	r3, [r1, #0]
 800ece4:	7812      	ldrb	r2, [r2, #0]
 800ece6:	1e10      	subs	r0, r2, #0
 800ece8:	bf18      	it	ne
 800ecea:	2001      	movne	r0, #1
 800ecec:	b002      	add	sp, #8
 800ecee:	4770      	bx	lr
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	e7fb      	b.n	800ecec <__ascii_mbtowc+0x16>
 800ecf4:	f06f 0001 	mvn.w	r0, #1
 800ecf8:	e7f8      	b.n	800ecec <__ascii_mbtowc+0x16>

0800ecfa <_realloc_r>:
 800ecfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfe:	4680      	mov	r8, r0
 800ed00:	4614      	mov	r4, r2
 800ed02:	460e      	mov	r6, r1
 800ed04:	b921      	cbnz	r1, 800ed10 <_realloc_r+0x16>
 800ed06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	f7fd bc56 	b.w	800c5bc <_malloc_r>
 800ed10:	b92a      	cbnz	r2, 800ed1e <_realloc_r+0x24>
 800ed12:	f7fd fbdf 	bl	800c4d4 <_free_r>
 800ed16:	4625      	mov	r5, r4
 800ed18:	4628      	mov	r0, r5
 800ed1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed1e:	f000 f8c6 	bl	800eeae <_malloc_usable_size_r>
 800ed22:	4284      	cmp	r4, r0
 800ed24:	4607      	mov	r7, r0
 800ed26:	d802      	bhi.n	800ed2e <_realloc_r+0x34>
 800ed28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed2c:	d812      	bhi.n	800ed54 <_realloc_r+0x5a>
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4640      	mov	r0, r8
 800ed32:	f7fd fc43 	bl	800c5bc <_malloc_r>
 800ed36:	4605      	mov	r5, r0
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d0ed      	beq.n	800ed18 <_realloc_r+0x1e>
 800ed3c:	42bc      	cmp	r4, r7
 800ed3e:	4622      	mov	r2, r4
 800ed40:	4631      	mov	r1, r6
 800ed42:	bf28      	it	cs
 800ed44:	463a      	movcs	r2, r7
 800ed46:	f7ff fc25 	bl	800e594 <memcpy>
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4640      	mov	r0, r8
 800ed4e:	f7fd fbc1 	bl	800c4d4 <_free_r>
 800ed52:	e7e1      	b.n	800ed18 <_realloc_r+0x1e>
 800ed54:	4635      	mov	r5, r6
 800ed56:	e7df      	b.n	800ed18 <_realloc_r+0x1e>

0800ed58 <__ascii_wctomb>:
 800ed58:	b149      	cbz	r1, 800ed6e <__ascii_wctomb+0x16>
 800ed5a:	2aff      	cmp	r2, #255	; 0xff
 800ed5c:	bf85      	ittet	hi
 800ed5e:	238a      	movhi	r3, #138	; 0x8a
 800ed60:	6003      	strhi	r3, [r0, #0]
 800ed62:	700a      	strbls	r2, [r1, #0]
 800ed64:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed68:	bf98      	it	ls
 800ed6a:	2001      	movls	r0, #1
 800ed6c:	4770      	bx	lr
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4770      	bx	lr
	...

0800ed74 <fiprintf>:
 800ed74:	b40e      	push	{r1, r2, r3}
 800ed76:	b503      	push	{r0, r1, lr}
 800ed78:	4601      	mov	r1, r0
 800ed7a:	ab03      	add	r3, sp, #12
 800ed7c:	4805      	ldr	r0, [pc, #20]	; (800ed94 <fiprintf+0x20>)
 800ed7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed82:	6800      	ldr	r0, [r0, #0]
 800ed84:	9301      	str	r3, [sp, #4]
 800ed86:	f7ff f96b 	bl	800e060 <_vfiprintf_r>
 800ed8a:	b002      	add	sp, #8
 800ed8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed90:	b003      	add	sp, #12
 800ed92:	4770      	bx	lr
 800ed94:	20000164 	.word	0x20000164

0800ed98 <__swhatbuf_r>:
 800ed98:	b570      	push	{r4, r5, r6, lr}
 800ed9a:	460c      	mov	r4, r1
 800ed9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eda0:	2900      	cmp	r1, #0
 800eda2:	b096      	sub	sp, #88	; 0x58
 800eda4:	4615      	mov	r5, r2
 800eda6:	461e      	mov	r6, r3
 800eda8:	da0d      	bge.n	800edc6 <__swhatbuf_r+0x2e>
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800edb0:	f04f 0100 	mov.w	r1, #0
 800edb4:	bf0c      	ite	eq
 800edb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800edba:	2340      	movne	r3, #64	; 0x40
 800edbc:	2000      	movs	r0, #0
 800edbe:	6031      	str	r1, [r6, #0]
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	b016      	add	sp, #88	; 0x58
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	466a      	mov	r2, sp
 800edc8:	f000 f848 	bl	800ee5c <_fstat_r>
 800edcc:	2800      	cmp	r0, #0
 800edce:	dbec      	blt.n	800edaa <__swhatbuf_r+0x12>
 800edd0:	9901      	ldr	r1, [sp, #4]
 800edd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800edd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800edda:	4259      	negs	r1, r3
 800eddc:	4159      	adcs	r1, r3
 800edde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede2:	e7eb      	b.n	800edbc <__swhatbuf_r+0x24>

0800ede4 <__smakebuf_r>:
 800ede4:	898b      	ldrh	r3, [r1, #12]
 800ede6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ede8:	079d      	lsls	r5, r3, #30
 800edea:	4606      	mov	r6, r0
 800edec:	460c      	mov	r4, r1
 800edee:	d507      	bpl.n	800ee00 <__smakebuf_r+0x1c>
 800edf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	2301      	movs	r3, #1
 800edfa:	6163      	str	r3, [r4, #20]
 800edfc:	b002      	add	sp, #8
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	ab01      	add	r3, sp, #4
 800ee02:	466a      	mov	r2, sp
 800ee04:	f7ff ffc8 	bl	800ed98 <__swhatbuf_r>
 800ee08:	9900      	ldr	r1, [sp, #0]
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7fd fbd5 	bl	800c5bc <_malloc_r>
 800ee12:	b948      	cbnz	r0, 800ee28 <__smakebuf_r+0x44>
 800ee14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee18:	059a      	lsls	r2, r3, #22
 800ee1a:	d4ef      	bmi.n	800edfc <__smakebuf_r+0x18>
 800ee1c:	f023 0303 	bic.w	r3, r3, #3
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	e7e3      	b.n	800edf0 <__smakebuf_r+0xc>
 800ee28:	89a3      	ldrh	r3, [r4, #12]
 800ee2a:	6020      	str	r0, [r4, #0]
 800ee2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee30:	81a3      	strh	r3, [r4, #12]
 800ee32:	9b00      	ldr	r3, [sp, #0]
 800ee34:	6163      	str	r3, [r4, #20]
 800ee36:	9b01      	ldr	r3, [sp, #4]
 800ee38:	6120      	str	r0, [r4, #16]
 800ee3a:	b15b      	cbz	r3, 800ee54 <__smakebuf_r+0x70>
 800ee3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee40:	4630      	mov	r0, r6
 800ee42:	f000 f81d 	bl	800ee80 <_isatty_r>
 800ee46:	b128      	cbz	r0, 800ee54 <__smakebuf_r+0x70>
 800ee48:	89a3      	ldrh	r3, [r4, #12]
 800ee4a:	f023 0303 	bic.w	r3, r3, #3
 800ee4e:	f043 0301 	orr.w	r3, r3, #1
 800ee52:	81a3      	strh	r3, [r4, #12]
 800ee54:	89a3      	ldrh	r3, [r4, #12]
 800ee56:	431d      	orrs	r5, r3
 800ee58:	81a5      	strh	r5, [r4, #12]
 800ee5a:	e7cf      	b.n	800edfc <__smakebuf_r+0x18>

0800ee5c <_fstat_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d07      	ldr	r5, [pc, #28]	; (800ee7c <_fstat_r+0x20>)
 800ee60:	2300      	movs	r3, #0
 800ee62:	4604      	mov	r4, r0
 800ee64:	4608      	mov	r0, r1
 800ee66:	4611      	mov	r1, r2
 800ee68:	602b      	str	r3, [r5, #0]
 800ee6a:	f7f2 fd70 	bl	800194e <_fstat>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	d102      	bne.n	800ee78 <_fstat_r+0x1c>
 800ee72:	682b      	ldr	r3, [r5, #0]
 800ee74:	b103      	cbz	r3, 800ee78 <_fstat_r+0x1c>
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	bd38      	pop	{r3, r4, r5, pc}
 800ee7a:	bf00      	nop
 800ee7c:	2000218c 	.word	0x2000218c

0800ee80 <_isatty_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d06      	ldr	r5, [pc, #24]	; (800ee9c <_isatty_r+0x1c>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	f7f2 fd6f 	bl	800196e <_isatty>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_isatty_r+0x1a>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_isatty_r+0x1a>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	2000218c 	.word	0x2000218c

0800eea0 <abort>:
 800eea0:	b508      	push	{r3, lr}
 800eea2:	2006      	movs	r0, #6
 800eea4:	f000 f834 	bl	800ef10 <raise>
 800eea8:	2001      	movs	r0, #1
 800eeaa:	f7f2 fd1d 	bl	80018e8 <_exit>

0800eeae <_malloc_usable_size_r>:
 800eeae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb2:	1f18      	subs	r0, r3, #4
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	bfbc      	itt	lt
 800eeb8:	580b      	ldrlt	r3, [r1, r0]
 800eeba:	18c0      	addlt	r0, r0, r3
 800eebc:	4770      	bx	lr

0800eebe <_raise_r>:
 800eebe:	291f      	cmp	r1, #31
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4604      	mov	r4, r0
 800eec4:	460d      	mov	r5, r1
 800eec6:	d904      	bls.n	800eed2 <_raise_r+0x14>
 800eec8:	2316      	movs	r3, #22
 800eeca:	6003      	str	r3, [r0, #0]
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	bd38      	pop	{r3, r4, r5, pc}
 800eed2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eed4:	b112      	cbz	r2, 800eedc <_raise_r+0x1e>
 800eed6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeda:	b94b      	cbnz	r3, 800eef0 <_raise_r+0x32>
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 f831 	bl	800ef44 <_getpid_r>
 800eee2:	462a      	mov	r2, r5
 800eee4:	4601      	mov	r1, r0
 800eee6:	4620      	mov	r0, r4
 800eee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeec:	f000 b818 	b.w	800ef20 <_kill_r>
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d00a      	beq.n	800ef0a <_raise_r+0x4c>
 800eef4:	1c59      	adds	r1, r3, #1
 800eef6:	d103      	bne.n	800ef00 <_raise_r+0x42>
 800eef8:	2316      	movs	r3, #22
 800eefa:	6003      	str	r3, [r0, #0]
 800eefc:	2001      	movs	r0, #1
 800eefe:	e7e7      	b.n	800eed0 <_raise_r+0x12>
 800ef00:	2400      	movs	r4, #0
 800ef02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef06:	4628      	mov	r0, r5
 800ef08:	4798      	blx	r3
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7e0      	b.n	800eed0 <_raise_r+0x12>
	...

0800ef10 <raise>:
 800ef10:	4b02      	ldr	r3, [pc, #8]	; (800ef1c <raise+0xc>)
 800ef12:	4601      	mov	r1, r0
 800ef14:	6818      	ldr	r0, [r3, #0]
 800ef16:	f7ff bfd2 	b.w	800eebe <_raise_r>
 800ef1a:	bf00      	nop
 800ef1c:	20000164 	.word	0x20000164

0800ef20 <_kill_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d07      	ldr	r5, [pc, #28]	; (800ef40 <_kill_r+0x20>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	602b      	str	r3, [r5, #0]
 800ef2e:	f7f2 fccb 	bl	80018c8 <_kill>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	d102      	bne.n	800ef3c <_kill_r+0x1c>
 800ef36:	682b      	ldr	r3, [r5, #0]
 800ef38:	b103      	cbz	r3, 800ef3c <_kill_r+0x1c>
 800ef3a:	6023      	str	r3, [r4, #0]
 800ef3c:	bd38      	pop	{r3, r4, r5, pc}
 800ef3e:	bf00      	nop
 800ef40:	2000218c 	.word	0x2000218c

0800ef44 <_getpid_r>:
 800ef44:	f7f2 bcb8 	b.w	80018b8 <_getpid>

0800ef48 <_init>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	bf00      	nop
 800ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4e:	bc08      	pop	{r3}
 800ef50:	469e      	mov	lr, r3
 800ef52:	4770      	bx	lr

0800ef54 <_fini>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr
