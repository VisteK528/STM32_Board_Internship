
MyBoardIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800efc8  0800efc8  0001efc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4b0  0800f4b0  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4b0  0800f4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4b8  0800f4b8  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4bc  0800f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800f4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  200002d4  0800f794  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000219c  0800f794  0002219c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d099  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a91  00000000  00000000  0003d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00041e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001231  00000000  00000000  00043670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba3f  00000000  00000000  000448a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002098e  00000000  00000000  000702e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f518d  00000000  00000000  00090c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077c4  00000000  00000000  00185dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800efb0 	.word	0x0800efb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800efb0 	.word	0x0800efb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_CAN1_Init+0x60>)
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <MX_CAN1_Init+0x64>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_CAN1_Init+0x60>)
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_CAN1_Init+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_CAN1_Init+0x60>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_CAN1_Init+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_CAN1_Init+0x60>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_CAN1_Init+0x60>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_CAN1_Init+0x60>)
 8001020:	2200      	movs	r2, #0
 8001022:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_CAN1_Init+0x60>)
 8001026:	2200      	movs	r2, #0
 8001028:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_CAN1_Init+0x60>)
 800102c:	2200      	movs	r2, #0
 800102e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_CAN1_Init+0x60>)
 8001032:	2200      	movs	r2, #0
 8001034:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_CAN1_Init+0x60>)
 8001038:	2200      	movs	r2, #0
 800103a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_CAN1_Init+0x60>)
 800103e:	f000 fe59 	bl	8001cf4 <HAL_CAN_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 fa3e 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002f0 	.word	0x200002f0
 8001054:	40006400 	.word	0x40006400

08001058 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_CAN_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d128      	bne.n	80010cc <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_CAN_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010bc:	2309      	movs	r3, #9
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_CAN_MspInit+0x84>)
 80010c8:	f001 f822 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40006400 	.word	0x40006400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x118>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <MX_GPIO_Init+0x118>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_GPIO_Init+0x118>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_RESET_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2111      	movs	r1, #17
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 f981 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4824      	ldr	r0, [pc, #144]	; (80011fc <MX_GPIO_Init+0x11c>)
 800116a:	f001 f97b 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PUSHBUTTON_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0x120>)
 8001184:	f000 ffc4 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FLASH_RESET_Pin|FLASH_CS_Pin;
 8001188:	2311      	movs	r3, #17
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f000 ffb5 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011c0:	f000 ffa6 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011da:	f000 ff99 	bl	8002110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2017      	movs	r0, #23
 80011e4:	f000 ff5d 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e8:	2017      	movs	r0, #23
 80011ea:	f000 ff76 	bl	80020da <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800

08001204 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_I2C1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_I2C1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_I2C1_Init+0x74>)
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <MX_I2C1_Init+0x7c>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_I2C1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_I2C1_Init+0x74>)
 8001240:	f001 f94b 	bl	80024da <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 f93d 	bl	80014c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <MX_I2C1_Init+0x74>)
 8001252:	f001 fec3 	bl	8002fdc <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 f934 	bl	80014c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_I2C1_Init+0x74>)
 8001264:	f001 ff05 	bl	8003072 <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f92b 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000318 	.word	0x20000318
 800127c:	40005400 	.word	0x40005400
 8001280:	10909cec 	.word	0x10909cec

08001284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	; 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a fa4a 	bl	800b73e <memset>
  if(i2cHandle->Instance==I2C1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_I2C_MspInit+0xb0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13a      	bne.n	800132a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 f809 	bl	80052d8 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f000 f8fc 	bl	80014c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0xb8>)
 800130e:	f000 feff 	bl	8002110 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0xb4>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	37b0      	adds	r7, #176	; 0xb0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400

08001340 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f008 fcba 	bl	8009ccc <CDC_Transmit_FS>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_write+0x40>)
 800135e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_write+0x40>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d0f1      	beq.n	800134c <_write+0xc>

    if (USBD_FAIL == rc) {
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_write+0x40>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d101      	bne.n	8001374 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001370:	2300      	movs	r3, #0
 8001372:	e000      	b.n	8001376 <_write+0x36>
    }
    return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000036c 	.word	0x2000036c

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001388:	b08e      	sub	sp, #56	; 0x38
 800138a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fc19 	bl	8001bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f838 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff fea4 	bl	80010e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001398:	f7ff ff34 	bl	8001204 <MX_I2C1_Init>
  MX_CAN1_Init();
 800139c:	f7ff fe28 	bl	8000ff0 <MX_CAN1_Init>
  MX_QUADSPI_Init();
 80013a0:	f000 f9b6 	bl	8001710 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 80013a4:	f000 fb58 	bl	8001a58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80013a8:	f008 fbd2 	bl	8009b50 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MPU6050_DATA data;

  MPU6050_Init(&hi2c1);
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <main+0x78>)
 80013ae:	f000 f8cd 	bl	800154c <MPU6050_Init>

  while (1)
  {
	  MPU6050_ReadData(&hi2c1, &data);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <main+0x78>)
 80013b8:	f000 f966 	bl	8001688 <MPU6050_ReadData>

	  printf("AccelX: %.02f\tAccelY: %.02f\tAccelZ: %.02f\r\n", data.accel[0], data.accel[1], data.accel[2]);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8c2 	bl	8000548 <__aeabi_f2d>
 80013c4:	4680      	mov	r8, r0
 80013c6:	4689      	mov	r9, r1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8bc 	bl	8000548 <__aeabi_f2d>
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013e4:	e9cd 4500 	strd	r4, r5, [sp]
 80013e8:	4642      	mov	r2, r8
 80013ea:	464b      	mov	r3, r9
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <main+0x7c>)
 80013ee:	f00a f931 	bl	800b654 <iprintf>
	  HAL_Delay(50);
 80013f2:	2032      	movs	r0, #50	; 0x32
 80013f4:	f000 fc5a 	bl	8001cac <HAL_Delay>
	  MPU6050_ReadData(&hi2c1, &data);
 80013f8:	e7db      	b.n	80013b2 <main+0x2e>
 80013fa:	bf00      	nop
 80013fc:	20000318 	.word	0x20000318
 8001400:	0800efc8 	.word	0x0800efc8

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00a f993 	bl	800b73e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142a:	f003 f833 	bl	8004494 <HAL_PWREx_ControlVoltageScaling>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001434:	f000 f848 	bl	80014c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001438:	f003 f80e 	bl	8004458 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xc0>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xc0>)
 8001444:	f023 0318 	bic.w	r3, r3, #24
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800144c:	2314      	movs	r3, #20
 800144e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800145c:	2360      	movs	r3, #96	; 0x60
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001464:	2301      	movs	r3, #1
 8001466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800146c:	2328      	movs	r3, #40	; 0x28
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001470:	2307      	movs	r3, #7
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f003 f929 	bl	80046d8 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800148c:	f000 f81c 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2303      	movs	r3, #3
 8001496:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2104      	movs	r1, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fcf1 	bl	8004e90 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014b4:	f000 f808 	bl	80014c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014b8:	f004 f9f8 	bl	80058ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80014bc:	bf00      	nop
 80014be:	3758      	adds	r7, #88	; 0x58
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>

080014d2 <MPU6050_read_from_single_register>:
#include "../Inc/mpu6050.h"

static uint8_t MPU6050_read_from_single_register(I2C_HandleTypeDef* i2c, uint8_t address){
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b088      	sub	sp, #32
 80014d6:	af04      	add	r7, sp, #16
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDR<<1, address, 1, &data, 1, 100);
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	21d0      	movs	r1, #208	; 0xd0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f001 f99f 	bl	8002838 <HAL_I2C_Mem_Read>
	return data;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MPU6050_read_from_double_register>:

static uint16_t MPU6050_read_from_double_register(I2C_HandleTypeDef* i2c, uint8_t high_address, uint8_t low_address){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	4613      	mov	r3, r2
 8001512:	70bb      	strb	r3, [r7, #2]
	uint16_t data;
	uint8_t high_byte, low_byte;

	high_byte = MPU6050_read_from_single_register(i2c, high_address);
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffda 	bl	80014d2 <MPU6050_read_from_single_register>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	low_byte = MPU6050_read_from_single_register(i2c, low_address);
 8001522:	78bb      	ldrb	r3, [r7, #2]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffd3 	bl	80014d2 <MPU6050_read_from_single_register>
 800152c:	4603      	mov	r3, r0
 800152e:	73bb      	strb	r3, [r7, #14]

	data = ( high_byte << 8 ) | low_byte;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	81bb      	strh	r3, [r7, #12]
	return data;
 8001540:	89bb      	ldrh	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef* i2c){
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af04      	add	r7, sp, #16
 8001552:	6078      	str	r0, [r7, #4]
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR<<1, WHO_I_AM, 1, &check, 1, 100);
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2301      	movs	r3, #1
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f107 030f 	add.w	r3, r7, #15
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2275      	movs	r2, #117	; 0x75
 8001566:	21d0      	movs	r1, #208	; 0xd0
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <MPU6050_Init+0xb8>)
 800156a:	f001 f965 	bl	8002838 <HAL_I2C_Mem_Read>

	/* If value of the WHO_I_AM register (address 0x75) is equal to 0x68 then
	 * the sensor is present and ready to be set up
	 *
	 * */
	if(check != 0x68){
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b68      	cmp	r3, #104	; 0x68
 8001572:	d001      	beq.n	8001578 <MPU6050_Init+0x2c>
		return 1;
 8001574:	2301      	movs	r3, #1
 8001576:	e040      	b.n	80015fa <MPU6050_Init+0xae>
	}

	// We need to wake up the sensor by writing the 0x00 value to the PWR_MGMT_1 (0x6B) register
	data = 0x00;
 8001578:	2300      	movs	r3, #0
 800157a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, PWR_MGMT_1, 1, &data, 1, 1000);
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2301      	movs	r3, #1
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f107 030e 	add.w	r3, r7, #14
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	226b      	movs	r2, #107	; 0x6b
 8001590:	21d0      	movs	r1, #208	; 0xd0
 8001592:	481c      	ldr	r0, [pc, #112]	; (8001604 <MPU6050_Init+0xb8>)
 8001594:	f001 f83c 	bl	8002610 <HAL_I2C_Mem_Write>

	// Set DATA rate to 1KHz by writing 0x07 to the SMPRT_DIV(0x19) register
	data = 0x07;
 8001598:	2307      	movs	r3, #7
 800159a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, SMPRT_DIV, 1, &data, 1, 1000);
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	2301      	movs	r3, #1
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	f107 030e 	add.w	r3, r7, #14
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2301      	movs	r3, #1
 80015ae:	2219      	movs	r2, #25
 80015b0:	21d0      	movs	r1, #208	; 0xd0
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MPU6050_Init+0xb8>)
 80015b4:	f001 f82c 	bl	8002610 <HAL_I2C_Mem_Write>

	// Set accelerometer configuration in ACCEL_CONFIG register
	// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +- 2g
	data = 0x00;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, ACCEL_CONFIG, 1, &data, 1, 1000);
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 030e 	add.w	r3, r7, #14
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	221c      	movs	r2, #28
 80015d0:	21d0      	movs	r1, #208	; 0xd0
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <MPU6050_Init+0xb8>)
 80015d4:	f001 f81c 	bl	8002610 <HAL_I2C_Mem_Write>

	// Set gyroscope configuration in GYRO_CONFIG register
	// XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 -> +-250 deg/s
	data = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR<<1, GYRO_CONFIG, 1, &data, 1, 1000);
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 030e 	add.w	r3, r7, #14
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	221b      	movs	r2, #27
 80015f0:	21d0      	movs	r1, #208	; 0xd0
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <MPU6050_Init+0xb8>)
 80015f4:	f001 f80c 	bl	8002610 <HAL_I2C_Mem_Write>
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000318 	.word	0x20000318

08001608 <MPU6050_ReadRawData>:

uint8_t MPU6050_ReadRawData(I2C_HandleTypeDef* i2c, MPU6050_DATA* data){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	data->raw_accel[0] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_XOUT_H, ACCEL_XOUT_L);
 8001612:	223c      	movs	r2, #60	; 0x3c
 8001614:	213b      	movs	r1, #59	; 0x3b
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff74 	bl	8001504 <MPU6050_read_from_double_register>
 800161c:	4603      	mov	r3, r0
 800161e:	b21a      	sxth	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	801a      	strh	r2, [r3, #0]
	data->raw_accel[1] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_YOUT_H, ACCEL_YOUT_L);
 8001624:	223e      	movs	r2, #62	; 0x3e
 8001626:	213d      	movs	r1, #61	; 0x3d
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff6b 	bl	8001504 <MPU6050_read_from_double_register>
 800162e:	4603      	mov	r3, r0
 8001630:	b21a      	sxth	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	805a      	strh	r2, [r3, #2]
	data->raw_accel[2] = (int16_t)MPU6050_read_from_double_register(i2c, ACCEL_ZOUT_H, ACCEL_ZOUT_L);
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	213f      	movs	r1, #63	; 0x3f
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff62 	bl	8001504 <MPU6050_read_from_double_register>
 8001640:	4603      	mov	r3, r0
 8001642:	b21a      	sxth	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	809a      	strh	r2, [r3, #4]

	data->raw_gyro[0] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_XOUT_H, GYRO_XOUT_L);
 8001648:	2244      	movs	r2, #68	; 0x44
 800164a:	2143      	movs	r1, #67	; 0x43
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff59 	bl	8001504 <MPU6050_read_from_double_register>
 8001652:	4603      	mov	r3, r0
 8001654:	b21a      	sxth	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	80da      	strh	r2, [r3, #6]
	data->raw_gyro[1] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_YOUT_H, GYRO_YOUT_L);
 800165a:	2246      	movs	r2, #70	; 0x46
 800165c:	2145      	movs	r1, #69	; 0x45
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff50 	bl	8001504 <MPU6050_read_from_double_register>
 8001664:	4603      	mov	r3, r0
 8001666:	b21a      	sxth	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	811a      	strh	r2, [r3, #8]
	data->raw_gyro[2] = (int16_t)MPU6050_read_from_double_register(i2c, GYRO_ZOUT_H, GYRO_ZOUT_L);
 800166c:	2248      	movs	r2, #72	; 0x48
 800166e:	2147      	movs	r1, #71	; 0x47
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff47 	bl	8001504 <MPU6050_read_from_double_register>
 8001676:	4603      	mov	r3, r0
 8001678:	b21a      	sxth	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	815a      	strh	r2, [r3, #10]
	return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <MPU6050_ReadData>:

uint8_t MPU6050_ReadData(I2C_HandleTypeDef* i2c, MPU6050_DATA* data){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	MPU6050_ReadRawData(i2c, data);
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffb7 	bl	8001608 <MPU6050_ReadRawData>

	// +- 2g and 250 deg/s

	for(uint8_t i = 0; i < 3; i++){
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e02b      	b.n	80016f8 <MPU6050_ReadData+0x70>
		data->accel[i] = (float)data->raw_accel[i] / 16384.f;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001708 <MPU6050_ReadData+0x80>
 80016b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	3302      	adds	r3, #2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	edc3 7a00 	vstr	s15, [r3]
		data->gyro[i] = (float)data->raw_gyro[i] / 131.f;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800170c <MPU6050_ReadData+0x84>
 80016e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	3306      	adds	r3, #6
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; i++){
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d9d0      	bls.n	80016a0 <MPU6050_ReadData+0x18>
	}
	return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	46800000 	.word	0x46800000
 800170c:	43030000 	.word	0x43030000

08001710 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_QUADSPI_Init+0x44>)
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <MX_QUADSPI_Init+0x48>)
 8001718:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_QUADSPI_Init+0x44>)
 800171c:	22ff      	movs	r2, #255	; 0xff
 800171e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_QUADSPI_Init+0x44>)
 8001722:	2201      	movs	r2, #1
 8001724:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_QUADSPI_Init+0x44>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_QUADSPI_Init+0x44>)
 800172e:	2201      	movs	r2, #1
 8001730:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_QUADSPI_Init+0x44>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_QUADSPI_Init+0x44>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_QUADSPI_Init+0x44>)
 8001740:	f002 ff0e 	bl	8004560 <HAL_QSPI_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800174a:	f7ff febd 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000370 	.word	0x20000370
 8001758:	a0001000 	.word	0xa0001000

0800175c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_QSPI_MspInit+0xb8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d145      	bne.n	800180a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6513      	str	r3, [r2, #80]	; 0x50
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_QSPI_MspInit+0xbc>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017d6:	230a      	movs	r3, #10
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f000 fc94 	bl	8002110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80017e8:	f640 4303 	movw	r3, #3075	; 0xc03
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017fa:	230a      	movs	r3, #10
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_QSPI_MspInit+0xc0>)
 8001806:	f000 fc83 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	a0001000 	.word	0xa0001000
 8001818:	40021000 	.word	0x40021000
 800181c:	48000400 	.word	0x48000400

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x44>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	; 0x60
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x44>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x44>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x44>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f000 f9da 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80018c0:	2020      	movs	r0, #32
 80018c2:	f000 fde7 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <OTG_FS_IRQHandler+0x10>)
 80018d2:	f001 fd6d 	bl	80033b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001924 	.word	0x20001924

080018e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_kill>:

int _kill(int pid, int sig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018fa:	f009 ff73 	bl	800b7e4 <__errno>
 80018fe:	4603      	mov	r3, r0
 8001900:	2216      	movs	r2, #22
 8001902:	601a      	str	r2, [r3, #0]
  return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_exit>:

void _exit (int status)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe7 	bl	80018f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001922:	e7fe      	b.n	8001922 <_exit+0x12>

08001924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
  }

  return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_close>:
  }
  return len;
}

int _close(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f009 fef4 	bl	800b7e4 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20018000 	.word	0x20018000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200003b4 	.word	0x200003b4
 8001a30:	200021a0 	.word	0x200021a0

08001a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_USART2_UART_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a9c:	f004 f8e8 	bl	8005c70 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f7ff fd0f 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200003b8 	.word	0x200003b8
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0ac      	sub	sp, #176	; 0xb0
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2288      	movs	r2, #136	; 0x88
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f009 fe30 	bl	800b73e <memset>
  if(uartHandle->Instance==USART2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_UART_MspInit+0xb0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13b      	bne.n	8001b60 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fbef 	bl	80052d8 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fce2 	bl	80014c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b34:	230c      	movs	r3, #12
 8001b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f000 fad8 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b60:	bf00      	nop
 8001b62:	37b0      	adds	r7, #176	; 0xb0
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40021000 	.word	0x40021000

08001b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b74:	f7ff ff5e 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <LoopForever+0xe>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b90:	4c0a      	ldr	r4, [pc, #40]	; (8001bbc <LoopForever+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f009 fe27 	bl	800b7f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba2:	f7ff fbef 	bl	8001384 <main>

08001ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001bb4:	0800f4c0 	.word	0x0800f4c0
  ldr r2, =_sbss
 8001bb8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001bbc:	2000219c 	.word	0x2000219c

08001bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_2_IRQHandler>

08001bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 fa5d 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f80e 	bl	8001bf4 <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	e001      	b.n	8001be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be4:	f7ff fe1c 	bl	8001820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_InitTick+0x70>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_InitTick+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fa69 	bl	80020f6 <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d809      	bhi.n	8001c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 fa33 	bl	80020a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_InitTick+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e004      	b.n	8001c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e001      	b.n	8001c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000440 	.word	0x20000440

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000440 	.word	0x20000440

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f9a0 	bl	8001058 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff ffb4 	bl	8001c94 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ffb0 	bl	8001c94 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff ff8e 	bl	8001c94 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff ff8a 	bl	8001c94 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	e17f      	b.n	8002420 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8171 	beq.w	800241a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x40>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d118      	bne.n	80021f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80ac 	beq.w	800241a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6613      	str	r3, [r2, #96]	; 0x60
 80022ce:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022da:	4a5a      	ldr	r2, [pc, #360]	; (8002444 <HAL_GPIO_Init+0x334>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x242>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_GPIO_Init+0x338>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x23e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_GPIO_Init+0x33c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x23a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_GPIO_Init+0x340>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x236>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x344>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x232>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_GPIO_Init+0x348>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x22e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_GPIO_Init+0x34c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x22a>
 8002336:	2306      	movs	r3, #6
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800233a:	2307      	movs	r3, #7
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002352:	2300      	movs	r3, #0
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002364:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_GPIO_Init+0x350>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae78 	bne.w	8002120 <HAL_GPIO_Init+0x10>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	48000c00 	.word	0x48000c00
 8002454:	48001000 	.word	0x48001000
 8002458:	48001400 	.word	0x48001400
 800245c:	48001800 	.word	0x48001800
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002480:	e002      	b.n	8002488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f806 	bl	80024c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e08d      	b.n	8002608 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe febf 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2224      	movs	r2, #36	; 0x24
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e006      	b.n	8002562 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002560:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d108      	bne.n	800257c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e007      	b.n	800258c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800259a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69d9      	ldr	r1, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	460b      	mov	r3, r1
 8002624:	813b      	strh	r3, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	f040 80f9 	bne.w	800282a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_I2C_Mem_Write+0x34>
 800263e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0ed      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_I2C_Mem_Write+0x4e>
 800265a:	2302      	movs	r3, #2
 800265c:	e0e6      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002666:	f7ff fb15 	bl	8001c94 <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2319      	movs	r3, #25
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fac3 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d1      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2221      	movs	r2, #33	; 0x21
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b0:	88f8      	ldrh	r0, [r7, #6]
 80026b2:	893a      	ldrh	r2, [r7, #8]
 80026b4:	8979      	ldrh	r1, [r7, #10]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4603      	mov	r3, r0
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f9d3 	bl	8002a6c <I2C_RequestMemoryWrite>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0a9      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	d90e      	bls.n	8002700 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	22ff      	movs	r2, #255	; 0xff
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fc3d 	bl	8002f78 <I2C_TransferConfig>
 80026fe:	e00f      	b.n	8002720 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	b2da      	uxtb	r2, r3
 8002710:	8979      	ldrh	r1, [r7, #10]
 8002712:	2300      	movs	r3, #0
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fc2c 	bl	8002f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fabc 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e07b      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d034      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x1c8>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d130      	bne.n	80027d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fa3f 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e04d      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d90e      	bls.n	80027b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	8979      	ldrh	r1, [r7, #10]
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fbe1 	bl	8002f78 <I2C_TransferConfig>
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fbd0 	bl	8002f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d19e      	bne.n	8002720 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 faa2 	bl	8002d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e01a      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_I2C_Mem_Write+0x224>)
 800280a:	400b      	ands	r3, r1
 800280c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	fe00e800 	.word	0xfe00e800

08002838 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	460b      	mov	r3, r1
 800284c:	813b      	strh	r3, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80fd 	bne.w	8002a5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_I2C_Mem_Read+0x34>
 8002866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0f1      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Mem_Read+0x4e>
 8002882:	2302      	movs	r3, #2
 8002884:	e0ea      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800288e:	f7ff fa01 	bl	8001c94 <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2319      	movs	r3, #25
 800289a:	2201      	movs	r2, #1
 800289c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f9af 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d5      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2222      	movs	r2, #34	; 0x22
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d8:	88f8      	ldrh	r0, [r7, #6]
 80028da:	893a      	ldrh	r2, [r7, #8]
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4603      	mov	r3, r0
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f913 	bl	8002b14 <I2C_RequestMemoryRead>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0ad      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d90e      	bls.n	8002928 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22ff      	movs	r2, #255	; 0xff
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	b2da      	uxtb	r2, r3
 8002916:	8979      	ldrh	r1, [r7, #10]
 8002918:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <HAL_I2C_Mem_Read+0x22c>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fb29 	bl	8002f78 <I2C_TransferConfig>
 8002926:	e00f      	b.n	8002948 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	b2da      	uxtb	r2, r3
 8002938:	8979      	ldrh	r1, [r7, #10]
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_I2C_Mem_Read+0x22c>)
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fb18 	bl	8002f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2200      	movs	r2, #0
 8002950:	2104      	movs	r1, #4
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f956 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07c      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d034      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x1d0>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d130      	bne.n	8002a08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	2200      	movs	r2, #0
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f927 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e04d      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d90e      	bls.n	80029e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	22ff      	movs	r2, #255	; 0xff
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	8979      	ldrh	r1, [r7, #10]
 80029d8:	2300      	movs	r3, #0
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fac9 	bl	8002f78 <I2C_TransferConfig>
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	8979      	ldrh	r1, [r7, #10]
 80029fa:	2300      	movs	r3, #0
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fab8 	bl	8002f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d19a      	bne.n	8002948 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f98a 	bl	8002d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e01a      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_I2C_Mem_Read+0x230>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	80002400 	.word	0x80002400
 8002a68:	fe00e800 	.word	0xfe00e800

08002a6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <I2C_RequestMemoryWrite+0xa4>)
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fa6f 	bl	8002f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8ff 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02c      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
 8002abe:	e015      	b.n	8002aec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8e5 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e012      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae2:	893b      	ldrh	r3, [r7, #8]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f884 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	80002000 	.word	0x80002000

08002b14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <I2C_RequestMemoryRead+0xa4>)
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa1c 	bl	8002f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f8ac 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02c      	b.n	8002bae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
 8002b64:	e015      	b.n	8002b92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f892 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e012      	b.n	8002bae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2140      	movs	r1, #64	; 0x40
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f831 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80002000 	.word	0x80002000

08002bbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d103      	bne.n	8002bda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	619a      	str	r2, [r3, #24]
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c14:	e031      	b.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d02d      	beq.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff f839 	bl	8001c94 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d122      	bne.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d113      	bne.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0be      	beq.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cae:	e033      	b.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f87f 	bl	8002db8 <I2C_IsErrorOccurred>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e031      	b.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d025      	beq.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fe ffe2 	bl	8001c94 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11a      	bne.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d013      	beq.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d1c4      	bne.n	8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3c:	e02f      	b.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f838 	bl	8002db8 <I2C_IsErrorOccurred>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e02d      	b.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe ff9f 	bl	8001c94 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11a      	bne.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d013      	beq.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d1c8      	bne.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d068      	beq.n	8002eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2210      	movs	r2, #16
 8002dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dec:	e049      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d045      	beq.n	8002e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe ff4d 	bl	8001c94 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_IsErrorOccurred+0x54>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13a      	bne.n	8002e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d121      	bne.n	8002e74 <I2C_IsErrorOccurred+0xbc>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e36:	d01d      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d01a      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e4e:	f7fe ff21 	bl	8001c94 <HAL_GetTick>
 8002e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e54:	e00e      	b.n	8002e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e56:	f7fe ff1d 	bl	8001c94 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b19      	cmp	r3, #25
 8002e62:	d907      	bls.n	8002e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e72:	e006      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1e9      	bne.n	8002e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d003      	beq.n	8002e98 <I2C_IsErrorOccurred+0xe0>
 8002e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0aa      	beq.n	8002dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fe45 	bl	8002bbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <I2C_IsErrorOccurred+0x1bc>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	817b      	strh	r3, [r7, #10]
 8002f86:	4613      	mov	r3, r2
 8002f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f90:	7a7b      	ldrb	r3, [r7, #9]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <I2C_TransferConfig+0x60>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	ea02 0103 	and.w	r1, r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	03ff63ff 	.word	0x03ff63ff

08002fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d138      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e032      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d139      	bne.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003092:	2302      	movs	r3, #2
 8003094:	e033      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800310a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310c:	b08f      	sub	sp, #60	; 0x3c
 800310e:	af0a      	add	r7, sp, #40	; 0x28
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e116      	b.n	800334a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f006 ff22 	bl	8009f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2203      	movs	r2, #3
 8003140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fb7d 	bl	800685a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	687e      	ldr	r6, [r7, #4]
 8003168:	466d      	mov	r5, sp
 800316a:	f106 0410 	add.w	r4, r6, #16
 800316e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317a:	e885 0003 	stmia.w	r5, {r0, r1}
 800317e:	1d33      	adds	r3, r6, #4
 8003180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f003 fa8f 	bl	80066a6 <USB_CoreInit>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0d7      	b.n	800334a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fb6b 	bl	800687c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e04a      	b.n	8003242 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	333d      	adds	r3, #61	; 0x3d
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	333c      	adds	r3, #60	; 0x3c
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	b298      	uxth	r0, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3356      	adds	r3, #86	; 0x56
 80031e8:	4602      	mov	r2, r0
 80031ea:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3340      	adds	r3, #64	; 0x40
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	; 0x44
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3348      	adds	r3, #72	; 0x48
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334c      	adds	r3, #76	; 0x4c
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	3301      	adds	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3af      	bcc.n	80031ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e044      	b.n	80032dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3301      	adds	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3b5      	bcc.n	8003252 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	687e      	ldr	r6, [r7, #4]
 80032ee:	466d      	mov	r5, sp
 80032f0:	f106 0410 	add.w	r4, r6, #16
 80032f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003300:	e885 0003 	stmia.w	r5, {r0, r1}
 8003304:	1d33      	adds	r3, r6, #4
 8003306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f003 fb03 	bl	8006914 <USB_DevInit>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e014      	b.n	800334a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 f869 	bl	8004410 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fab1 	bl	80078aa <USB_DevDisconnect>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003352 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_PCD_Start+0x1c>
 800336a:	2302      	movs	r3, #2
 800336c:	e01c      	b.n	80033a8 <HAL_PCD_Start+0x56>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fa52 	bl	8006838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f004 fa65 	bl	8007868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b08d      	sub	sp, #52	; 0x34
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fb23 	bl	8007a12 <USB_GetMode>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 847e 	bne.w	8003cd0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 fa87 	bl	80078ec <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8474 	beq.w	8003cce <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fa74 	bl	80078ec <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d107      	bne.n	800341e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f002 0202 	and.w	r2, r2, #2
 800341c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f004 fa62 	bl	80078ec <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d161      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	3304      	adds	r3, #4
 8003460:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	0c5b      	lsrs	r3, r3, #17
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b02      	cmp	r3, #2
 800346c:	d124      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d035      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6a38      	ldr	r0, [r7, #32]
 800348e:	f004 f899 	bl	80075c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800349e:	441a      	add	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b0:	441a      	add	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	615a      	str	r2, [r3, #20]
 80034b6:	e016      	b.n	80034e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	0c5b      	lsrs	r3, r3, #17
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d110      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034ca:	2208      	movs	r2, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	6a38      	ldr	r0, [r7, #32]
 80034d0:	f004 f878 	bl	80075c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e0:	441a      	add	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0210 	orr.w	r2, r2, #16
 80034f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 f9f6 	bl	80078ec <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003506:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800350a:	f040 80a7 	bne.w	800365c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 f9fb 	bl	8007912 <USB_ReadDevAllOutEpInterrupt>
 800351c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800351e:	e099      	b.n	8003654 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 808e 	beq.w	8003648 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f004 fa1f 	bl	800797a <USB_ReadDevOutEPInterrupt>
 800353c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	2301      	movs	r3, #1
 8003558:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fe7d 	bl	800425c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00c      	beq.n	8003586 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	461a      	mov	r2, r3
 800357a:	2308      	movs	r3, #8
 800357c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800357e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 feb9 	bl	80042f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	2310      	movs	r3, #16
 80035a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d030      	beq.n	800360e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b80      	cmp	r3, #128	; 0x80
 80035b6:	d109      	bne.n	80035cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f006 fe16 	bl	800a228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	2302      	movs	r3, #2
 800360c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	2320      	movs	r3, #32
 8003628:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	461a      	mov	r2, r3
 8003642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003646:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	3301      	adds	r3, #1
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	f47f af62 	bne.w	8003520 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f004 f943 	bl	80078ec <USB_ReadInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003670:	f040 80a4 	bne.w	80037bc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f004 f964 	bl	8007946 <USB_ReadDevAllInEpInterrupt>
 800367e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003684:	e096      	b.n	80037b4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 808b 	beq.w	80037a8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f004 f98a 	bl	80079b6 <USB_ReadDevInEPInterrupt>
 80036a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d020      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	2201      	movs	r2, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69f9      	ldr	r1, [r7, #28]
 80036ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ce:	4013      	ands	r3, r2
 80036d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2301      	movs	r3, #1
 80036e2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f006 fd07 	bl	800a0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	2308      	movs	r3, #8
 800370a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003722:	461a      	mov	r2, r3
 8003724:	2310      	movs	r3, #16
 8003726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	461a      	mov	r2, r3
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d023      	beq.n	8003796 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800374e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003750:	6a38      	ldr	r0, [r7, #32]
 8003752:	f003 fa21 	bl	8006b98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	3338      	adds	r3, #56	; 0x38
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	3304      	adds	r3, #4
 8003768:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d108      	bne.n	8003784 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f006 fd64 	bl	800a24c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2302      	movs	r3, #2
 8003794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fcd2 	bl	800414c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f af65 	bne.w	8003686 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 f893 	bl	80078ec <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d122      	bne.n	8003818 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037f8:	2100      	movs	r1, #0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f006 ff98 	bl	800a730 <HAL_PCDEx_LPM_Callback>
 8003800:	e002      	b.n	8003808 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f006 fce8 	bl	800a1d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f004 f865 	bl	80078ec <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d112      	bne.n	8003854 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f006 fca4 	bl	800a18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 f847 	bl	80078ec <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d121      	bne.n	80038ae <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003878:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800389e:	2101      	movs	r1, #1
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f006 ff45 	bl	800a730 <HAL_PCDEx_LPM_Callback>
 80038a6:	e002      	b.n	80038ae <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f006 fc6f 	bl	800a18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 f81a 	bl	80078ec <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	f040 80b5 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2110      	movs	r1, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 f959 	bl	8006b98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ea:	e046      	b.n	800397a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800391e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003932:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003972:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	3301      	adds	r3, #1
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	429a      	cmp	r2, r3
 8003982:	d3b3      	bcc.n	80038ec <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003992:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003996:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d016      	beq.n	80039ce <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b0:	f043 030b 	orr.w	r3, r3, #11
 80039b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c6:	f043 030b 	orr.w	r3, r3, #11
 80039ca:	6453      	str	r3, [r2, #68]	; 0x44
 80039cc:	e015      	b.n	80039fa <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f4:	f043 030b 	orr.w	r3, r3, #11
 80039f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f004 f82a 	bl	8007a74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 ff59 	bl	80078ec <USB_ReadInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	d124      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 ffef 	bl	8007a2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f003 f91c 	bl	8006c92 <USB_GetDevSpeed>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	f001 fb9f 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 8003a6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	4620      	mov	r0, r4
 8003a76:	f002 fe43 	bl	8006700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f006 fb67 	bl	800a14e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 ff29 	bl	80078ec <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d10a      	bne.n	8003aba <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f006 fb44 	bl	800a132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f002 0208 	and.w	r2, r2, #8
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 ff14 	bl	80078ec <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d122      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ada:	2301      	movs	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	e014      	b.n	8003b0a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 faf3 	bl	80040ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	3301      	adds	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3e5      	bcc.n	8003ae0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fee7 	bl	80078ec <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b28:	d13b      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e02b      	b.n	8003b88 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3340      	adds	r3, #64	; 0x40
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d115      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da12      	bge.n	8003b82 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	333f      	adds	r3, #63	; 0x3f
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fab4 	bl	80040ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3ce      	bcc.n	8003b30 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fea0 	bl	80078ec <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb6:	d155      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	e045      	b.n	8003c4a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d12e      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da2b      	bge.n	8003c44 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c40:	6053      	str	r3, [r2, #4]
            break;
 8003c42:	e007      	b.n	8003c54 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	3301      	adds	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3b4      	bcc.n	8003bbe <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 fe3f 	bl	80078ec <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d10a      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f006 faf8 	bl	800a270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 fe29 	bl	80078ec <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d115      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f006 fae8 	bl	800a28c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	e000      	b.n	8003cd0 <HAL_PCD_IRQHandler+0x920>
      return;
 8003cce:	bf00      	nop
    }
  }
}
 8003cd0:	3734      	adds	r7, #52	; 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_SetAddress+0x1a>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e013      	b.n	8003d18 <HAL_PCD_SetAddress+0x42>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 fd87 	bl	800781c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	70fb      	strb	r3, [r7, #3]
 8003d32:	460b      	mov	r3, r1
 8003d34:	803b      	strh	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0f      	bge.n	8003d66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3338      	adds	r3, #56	; 0x38
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	705a      	strb	r2, [r3, #1]
 8003d64:	e00f      	b.n	8003d86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d92:	883a      	ldrh	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	78ba      	ldrb	r2, [r7, #2]
 8003d9c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d102      	bne.n	8003dbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_PCD_EP_Open+0xaa>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e00e      	b.n	8003de8 <HAL_PCD_EP_Open+0xc8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 ff79 	bl	8006cd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da0f      	bge.n	8003e24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	3338      	adds	r3, #56	; 0x38
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	705a      	strb	r2, [r3, #1]
 8003e22:	e00f      	b.n	8003e44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_PCD_EP_Close+0x6e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_Close+0x8c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f002 ffb7 	bl	8006de0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	7afb      	ldrb	r3, [r7, #11]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f003 f85d 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	460b      	mov	r3, r1
 8003f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	7afb      	ldrb	r3, [r7, #11]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3338      	adds	r3, #56	; 0x38
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2201      	movs	r2, #1
 8003f56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 f814 	bl	8006f98 <USB_EPStartXfer>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d901      	bls.n	8003f98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e04e      	b.n	8004036 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0f      	bge.n	8003fc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3338      	adds	r3, #56	; 0x38
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	705a      	strb	r2, [r3, #1]
 8003fbe:	e00d      	b.n	8003fdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_PCD_EP_SetStall+0x82>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e01c      	b.n	8004036 <HAL_PCD_EP_SetStall+0xbc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	4618      	mov	r0, r3
 800400c:	f003 fb32 	bl	8007674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f003 fd24 	bl	8007a74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d901      	bls.n	800405c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e042      	b.n	80040e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800405c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004060:	2b00      	cmp	r3, #0
 8004062:	da0f      	bge.n	8004084 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	3338      	adds	r3, #56	; 0x38
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	705a      	strb	r2, [r3, #1]
 8004082:	e00f      	b.n	80040a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_EP_ClrStall+0x86>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e00e      	b.n	80040e2 <HAL_PCD_EP_ClrStall+0xa4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 fb3c 	bl	8007750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da0c      	bge.n	8004118 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3338      	adds	r3, #56	; 0x38
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e00c      	b.n	8004132 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	4618      	mov	r0, r3
 800413a:	f003 f95f 	bl	80073fc <USB_EPStopXfer>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004142:	7afb      	ldrb	r3, [r7, #11]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	3338      	adds	r3, #56	; 0x38
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	3304      	adds	r3, #4
 8004172:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	429a      	cmp	r2, r3
 800417e:	d901      	bls.n	8004184 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e067      	b.n	8004254 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	429a      	cmp	r2, r3
 8004198:	d902      	bls.n	80041a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3303      	adds	r3, #3
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041a8:	e026      	b.n	80041f8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d902      	bls.n	80041c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3303      	adds	r3, #3
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	6978      	ldr	r0, [r7, #20]
 80041dc:	f003 f9b8 	bl	8007550 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d809      	bhi.n	8004222 <PCD_WriteEmptyTxFifo+0xd6>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004216:	429a      	cmp	r2, r3
 8004218:	d203      	bcs.n	8004222 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1c3      	bne.n	80041aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	429a      	cmp	r2, r3
 800422c:	d811      	bhi.n	8004252 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	2201      	movs	r2, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	43db      	mvns	r3, r3
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424e:	4013      	ands	r3, r2
 8004250:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	333c      	adds	r3, #60	; 0x3c
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <PCD_EP_OutXfrComplete_int+0x98>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d124      	bne.n	80042dc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	e01a      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	461a      	mov	r2, r3
 80042ca:	2320      	movs	r3, #32
 80042cc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f005 fef7 	bl	800a0c8 <HAL_PCD_DataOutStageCallback>
 80042da:	e005      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f005 fef0 	bl	800a0c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	4f54310a 	.word	0x4f54310a

080042f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	333c      	adds	r3, #60	; 0x3c
 8004310:	3304      	adds	r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a0c      	ldr	r2, [pc, #48]	; (800435c <PCD_EP_OutSetupPacket_int+0x64>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d90e      	bls.n	800434c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f005 fea9 	bl	800a0a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	4f54300a 	.word	0x4f54300a

08004360 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
 800436c:	4613      	mov	r3, r2
 800436e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d107      	bne.n	800438e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800437e:	883b      	ldrh	r3, [r7, #0]
 8004380:	0419      	lsls	r1, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	430a      	orrs	r2, r1
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
 800438c:	e028      	b.n	80043e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	0c1b      	lsrs	r3, r3, #16
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e00d      	b.n	80043be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3340      	adds	r3, #64	; 0x40
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4413      	add	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	3301      	adds	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3ec      	bcc.n	80043a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043c8:	883b      	ldrh	r3, [r7, #0]
 80043ca:	0418      	lsls	r0, r3, #16
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4302      	orrs	r2, r0
 80043d8:	3340      	adds	r3, #64	; 0x40
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	f043 0303 	orr.w	r3, r3, #3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40007000 	.word	0x40007000

08004478 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_PWREx_GetVoltageRange+0x18>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40007000 	.word	0x40007000

08004494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a2:	d130      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b0:	d038      	beq.n	8004524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ba:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2232      	movs	r2, #50	; 0x32
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0c9b      	lsrs	r3, r3, #18
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044d8:	e002      	b.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d102      	bne.n	80044f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f2      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d110      	bne.n	8004524 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e00f      	b.n	8004526 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d007      	beq.n	8004524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800451c:	4a05      	ldr	r2, [pc, #20]	; (8004534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004522:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40007000 	.word	0x40007000
 8004538:	20000000 	.word	0x20000000
 800453c:	431bde83 	.word	0x431bde83

08004540 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_PWREx_EnableVddUSB+0x1c>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454e:	6053      	str	r3, [r2, #4]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000

08004560 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7fd fb94 	bl	8001c94 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e063      	b.n	8004640 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fd f8e5 	bl	800175c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004592:	f241 3188 	movw	r1, #5000	; 0x1388
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f858 	bl	800464c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	2120      	movs	r1, #32
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f850 	bl	8004668 <QSPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80045cc:	7afb      	ldrb	r3, [r7, #11]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d131      	bne.n	8004636 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6852      	ldr	r2, [r2, #4]
 80045e4:	0611      	lsls	r1, r2, #24
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68d2      	ldr	r2, [r2, #12]
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_QSPI_Init+0xe8>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6912      	ldr	r2, [r2, #16]
 8004602:	0411      	lsls	r1, r2, #16
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6952      	ldr	r2, [r2, #20]
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6992      	ldr	r2, [r2, #24]
 800460e:	4311      	orrs	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800463e:	7afb      	ldrb	r3, [r7, #11]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	ffe0f8fe 	.word	0xffe0f8fe

0800464c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004678:	e01a      	b.n	80046b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d016      	beq.n	80046b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fd fb07 	bl	8001c94 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2204      	movs	r2, #4
 800469c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e00e      	b.n	80046ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1d6      	bne.n	800467a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e3ca      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ea:	4b97      	ldr	r3, [pc, #604]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046f4:	4b94      	ldr	r3, [pc, #592]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 80e4 	beq.w	80048d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_RCC_OscConfig+0x4a>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	f040 808b 	bne.w	8004830 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 8087 	bne.w	8004830 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e3a2      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	4b82      	ldr	r3, [pc, #520]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <HAL_RCC_OscConfig+0x7c>
 800474a:	4b7f      	ldr	r3, [pc, #508]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004752:	e005      	b.n	8004760 <HAL_RCC_OscConfig+0x88>
 8004754:	4b7c      	ldr	r3, [pc, #496]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	4293      	cmp	r3, r2
 8004762:	d223      	bcs.n	80047ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fd55 	bl	8005218 <RCC_SetFlashLatencyFromMSIRange>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e383      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004778:	4b73      	ldr	r3, [pc, #460]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a72      	ldr	r2, [pc, #456]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800477e:	f043 0308 	orr.w	r3, r3, #8
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b70      	ldr	r3, [pc, #448]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	496d      	ldr	r1, [pc, #436]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	4968      	ldr	r1, [pc, #416]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
 80047aa:	e025      	b.n	80047f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ac:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a65      	ldr	r2, [pc, #404]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047b2:	f043 0308 	orr.w	r3, r3, #8
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b63      	ldr	r3, [pc, #396]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	4960      	ldr	r1, [pc, #384]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ca:	4b5f      	ldr	r3, [pc, #380]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	495b      	ldr	r1, [pc, #364]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd15 	bl	8005218 <RCC_SetFlashLatencyFromMSIRange>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e343      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047f8:	f000 fc4a 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b52      	ldr	r3, [pc, #328]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	4950      	ldr	r1, [pc, #320]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	4a4e      	ldr	r2, [pc, #312]	; (8004950 <HAL_RCC_OscConfig+0x278>)
 8004816:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004818:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <HAL_RCC_OscConfig+0x27c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd f9e9 	bl	8001bf4 <HAL_InitTick>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d052      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	e327      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004838:	4b43      	ldr	r3, [pc, #268]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a42      	ldr	r2, [pc, #264]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004844:	f7fd fa26 	bl	8001c94 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800484c:	f7fd fa22 	bl	8001c94 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e310      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485e:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a36      	ldr	r2, [pc, #216]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4931      	ldr	r1, [pc, #196]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004888:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	492c      	ldr	r1, [pc, #176]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	e01a      	b.n	80048d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800489e:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048aa:	f7fd f9f3 	bl	8001c94 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048b2:	f7fd f9ef 	bl	8001c94 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e2dd      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x1da>
 80048d0:	e000      	b.n	80048d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d074      	beq.n	80049ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d005      	beq.n	80048f2 <HAL_RCC_OscConfig+0x21a>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d10e      	bne.n	800490a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d10b      	bne.n	800490a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d064      	beq.n	80049c8 <HAL_RCC_OscConfig+0x2f0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d160      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e2ba      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x24a>
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e026      	b.n	8004970 <HAL_RCC_OscConfig+0x298>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800492a:	d115      	bne.n	8004958 <HAL_RCC_OscConfig+0x280>
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a05      	ldr	r2, [pc, #20]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 8004932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a02      	ldr	r2, [pc, #8]	; (8004948 <HAL_RCC_OscConfig+0x270>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e014      	b.n	8004970 <HAL_RCC_OscConfig+0x298>
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	0800f03c 	.word	0x0800f03c
 8004950:	20000000 	.word	0x20000000
 8004954:	20000004 	.word	0x20000004
 8004958:	4ba0      	ldr	r3, [pc, #640]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a9f      	ldr	r2, [pc, #636]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a9c      	ldr	r2, [pc, #624]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd f98c 	bl	8001c94 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd f988 	bl	8001c94 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e276      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004992:	4b92      	ldr	r3, [pc, #584]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x2a8>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd f978 	bl	8001c94 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd f974 	bl	8001c94 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e262      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2d0>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d060      	beq.n	8004a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_OscConfig+0x310>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d119      	bne.n	8004a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d116      	bne.n	8004a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e8:	4b7c      	ldr	r3, [pc, #496]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_OscConfig+0x328>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e23f      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	4973      	ldr	r1, [pc, #460]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a14:	e040      	b.n	8004a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d023      	beq.n	8004a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1e:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6e      	ldr	r2, [pc, #440]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f933 	bl	8001c94 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd f92f 	bl	8001c94 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e21d      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a44:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	495f      	ldr	r1, [pc, #380]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
 8004a64:	e018      	b.n	8004a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b5d      	ldr	r3, [pc, #372]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5c      	ldr	r2, [pc, #368]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fd f90f 	bl	8001c94 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fd f90b 	bl	8001c94 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1f9      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d03c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab2:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd f8ea 	bl	8001c94 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd f8e6 	bl	8001c94 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1d4      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x3ec>
 8004ae4:	e01b      	b.n	8004b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aec:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fd f8cd 	bl	8001c94 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afe:	f7fd f8c9 	bl	8001c94 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1b7      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b10:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ef      	bne.n	8004afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a6 	beq.w	8004c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b30:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6593      	str	r3, [r2, #88]	; 0x58
 8004b48:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b54:	2301      	movs	r3, #1
 8004b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_RCC_OscConfig+0x508>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d118      	bne.n	8004b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_RCC_OscConfig+0x508>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <HAL_RCC_OscConfig+0x508>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b70:	f7fd f890 	bl	8001c94 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fd f88c 	bl	8001c94 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e17a      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <HAL_RCC_OscConfig+0x508>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d108      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4d8>
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bae:	e029      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d115      	bne.n	8004be4 <HAL_RCC_OscConfig+0x50c>
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd8:	e014      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40007000 	.word	0x40007000
 8004be4:	4b9c      	ldr	r3, [pc, #624]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a9b      	ldr	r2, [pc, #620]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf4:	4b98      	ldr	r3, [pc, #608]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	4a97      	ldr	r2, [pc, #604]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d016      	beq.n	8004c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd f842 	bl	8001c94 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fd f83e 	bl	8001c94 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e12a      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2a:	4b8b      	ldr	r3, [pc, #556]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ed      	beq.n	8004c14 <HAL_RCC_OscConfig+0x53c>
 8004c38:	e015      	b.n	8004c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fd f82b 	bl	8001c94 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fd f827 	bl	8001c94 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e113      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c58:	4b7f      	ldr	r3, [pc, #508]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ed      	bne.n	8004c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6c:	4b7a      	ldr	r3, [pc, #488]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	4a79      	ldr	r2, [pc, #484]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80fe 	beq.w	8004e7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	f040 80d0 	bne.w	8004e2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c8c:	4b72      	ldr	r3, [pc, #456]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f003 0203 	and.w	r2, r3, #3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d130      	bne.n	8004d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	3b01      	subs	r3, #1
 8004cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d127      	bne.n	8004d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11f      	bne.n	8004d02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ccc:	2a07      	cmp	r2, #7
 8004cce:	bf14      	ite	ne
 8004cd0:	2201      	movne	r2, #1
 8004cd2:	2200      	moveq	r2, #0
 8004cd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d06e      	beq.n	8004de0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d069      	beq.n	8004ddc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d08:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d14:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0ad      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d24:	4b4c      	ldr	r3, [pc, #304]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a4b      	ldr	r2, [pc, #300]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d30:	f7fc ffb0 	bl	8001c94 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fc ffac 	bl	8001c94 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e09a      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4a:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d56:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <HAL_RCC_OscConfig+0x784>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d66:	3a01      	subs	r2, #1
 8004d68:	0112      	lsls	r2, r2, #4
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d70:	0212      	lsls	r2, r2, #8
 8004d72:	4311      	orrs	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d78:	0852      	lsrs	r2, r2, #1
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	0552      	lsls	r2, r2, #21
 8004d7e:	4311      	orrs	r1, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d84:	0852      	lsrs	r2, r2, #1
 8004d86:	3a01      	subs	r2, #1
 8004d88:	0652      	lsls	r2, r2, #25
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d90:	0912      	lsrs	r2, r2, #4
 8004d92:	0452      	lsls	r2, r2, #17
 8004d94:	430a      	orrs	r2, r1
 8004d96:	4930      	ldr	r1, [pc, #192]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2d      	ldr	r2, [pc, #180]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004da6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004db4:	f7fc ff6e 	bl	8001c94 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fc ff6a 	bl	8001c94 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e058      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dda:	e050      	b.n	8004e7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e04f      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d148      	bne.n	8004e7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004df8:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e04:	f7fc ff46 	bl	8001c94 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fc ff42 	bl	8001c94 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e030      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x734>
 8004e2a:	e028      	b.n	8004e7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d023      	beq.n	8004e7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <HAL_RCC_OscConfig+0x780>)
 8004e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3e:	f7fc ff29 	bl	8001c94 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e44:	e00c      	b.n	8004e60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fc ff25 	bl	8001c94 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d905      	bls.n	8004e60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e013      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_OscConfig+0x7b0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ec      	bne.n	8004e46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_RCC_OscConfig+0x7b0>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4905      	ldr	r1, [pc, #20]	; (8004e88 <HAL_RCC_OscConfig+0x7b0>)
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCC_OscConfig+0x7b4>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	60cb      	str	r3, [r1, #12]
 8004e78:	e001      	b.n	8004e7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	feeefffc 	.word	0xfeeefffc

08004e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0e7      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b75      	ldr	r3, [pc, #468]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d910      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b72      	ldr	r3, [pc, #456]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 0207 	bic.w	r2, r3, #7
 8004eba:	4970      	ldr	r1, [pc, #448]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b6e      	ldr	r3, [pc, #440]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cf      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d908      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef0:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4960      	ldr	r1, [pc, #384]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04c      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f16:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d121      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0a6      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2e:	4b54      	ldr	r3, [pc, #336]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d115      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e09a      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f46:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e08e      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f56:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e086      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b46      	ldr	r3, [pc, #280]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4943      	ldr	r1, [pc, #268]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fc fe8c 	bl	8001c94 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fc fe88 	bl	8001c94 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e06e      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b3a      	ldr	r3, [pc, #232]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	4b31      	ldr	r3, [pc, #196]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d208      	bcs.n	8004fd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc4:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	492b      	ldr	r1, [pc, #172]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd6:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d210      	bcs.n	8005006 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 0207 	bic.w	r2, r3, #7
 8004fec:	4923      	ldr	r1, [pc, #140]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_ClockConfig+0x1ec>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e036      	b.n	8005074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4910      	ldr	r1, [pc, #64]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005044:	f000 f824 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCC_ClockConfig+0x1f0>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	490b      	ldr	r1, [pc, #44]	; (8005084 <HAL_RCC_ClockConfig+0x1f4>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	4a09      	ldr	r2, [pc, #36]	; (8005088 <HAL_RCC_ClockConfig+0x1f8>)
 8005062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCC_ClockConfig+0x1fc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fc fdc3 	bl	8001bf4 <HAL_InitTick>
 800506e:	4603      	mov	r3, r0
 8005070:	72fb      	strb	r3, [r7, #11]

  return status;
 8005072:	7afb      	ldrb	r3, [r7, #11]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40022000 	.word	0x40022000
 8005080:	40021000 	.word	0x40021000
 8005084:	0800f03c 	.word	0x0800f03c
 8005088:	20000000 	.word	0x20000000
 800508c:	20000004 	.word	0x20000004

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509e:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a8:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d121      	bne.n	8005102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d11e      	bne.n	8005102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e005      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050e0:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050ec:	4a2b      	ldr	r2, [pc, #172]	; (800519c <HAL_RCC_GetSysClockFreq+0x10c>)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d102      	bne.n	800510e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e004      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d101      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d134      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800511e:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d003      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0xa6>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d003      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0xac>
 8005134:	e005      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005138:	617b      	str	r3, [r7, #20]
      break;
 800513a:	e005      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800513e:	617b      	str	r3, [r7, #20]
      break;
 8005140:	e002      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	617b      	str	r3, [r7, #20]
      break;
 8005146:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	3301      	adds	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	fb03 f202 	mul.w	r2, r3, r2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	0e5b      	lsrs	r3, r3, #25
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	3301      	adds	r3, #1
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005188:	69bb      	ldr	r3, [r7, #24]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3724      	adds	r7, #36	; 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	0800f054 	.word	0x0800f054
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	017d7840 	.word	0x017d7840

080051a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4904      	ldr	r1, [pc, #16]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	0800f04c 	.word	0x0800f04c

080051ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051f0:	f7ff ffda 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	0adb      	lsrs	r3, r3, #11
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	4904      	ldr	r1, [pc, #16]	; (8005214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000
 8005214:	0800f04c 	.word	0x0800f04c

08005218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005230:	f7ff f922 	bl	8004478 <HAL_PWREx_GetVoltageRange>
 8005234:	6178      	str	r0, [r7, #20]
 8005236:	e014      	b.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005250:	f7ff f912 	bl	8004478 <HAL_PWREx_GetVoltageRange>
 8005254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005260:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d10b      	bne.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d919      	bls.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2ba0      	cmp	r3, #160	; 0xa0
 8005274:	d902      	bls.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005276:	2302      	movs	r3, #2
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e013      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800527c:	2301      	movs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e010      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d902      	bls.n	800528e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005288:	2303      	movs	r3, #3
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e00a      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d102      	bne.n	800529a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005294:	2302      	movs	r3, #2
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e004      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d101      	bne.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a0:	2301      	movs	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 0207 	bic.w	r2, r3, #7
 80052ac:	4909      	ldr	r1, [pc, #36]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40022000 	.word	0x40022000

080052d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052e0:	2300      	movs	r3, #0
 80052e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052e4:	2300      	movs	r3, #0
 80052e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d041      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052fc:	d02a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005302:	d824      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800530a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800530e:	d81e      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005318:	d010      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800531a:	e018      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800531c:	4b86      	ldr	r3, [pc, #536]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a85      	ldr	r2, [pc, #532]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f000 facb 	bl	80058cc <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800533a:	e00c      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3320      	adds	r3, #32
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fbb6 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	74fb      	strb	r3, [r7, #19]
      break;
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800535c:	4b76      	ldr	r3, [pc, #472]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536a:	4973      	ldr	r1, [pc, #460]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005372:	e001      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d041      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005388:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800538c:	d02a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800538e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005392:	d824      	bhi.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005398:	d008      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800539a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539e:	d81e      	bhi.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053a8:	d010      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053aa:	e018      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053ac:	4b62      	ldr	r3, [pc, #392]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a61      	ldr	r2, [pc, #388]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b8:	e015      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fa83 	bl	80058cc <RCCEx_PLLSAI1_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ca:	e00c      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3320      	adds	r3, #32
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fb6e 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	74fb      	strb	r3, [r7, #19]
      break;
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053fa:	494f      	ldr	r1, [pc, #316]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005402:	e001      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a0 	beq.w	8005556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800541a:	4b47      	ldr	r3, [pc, #284]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005430:	4b41      	ldr	r3, [pc, #260]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	4a40      	ldr	r2, [pc, #256]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543a:	6593      	str	r3, [r2, #88]	; 0x58
 800543c:	4b3e      	ldr	r3, [pc, #248]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005448:	2301      	movs	r3, #1
 800544a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800544c:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3a      	ldr	r2, [pc, #232]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005458:	f7fc fc1c 	bl	8001c94 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800545e:	e009      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005460:	f7fc fc18 	bl	8001c94 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d902      	bls.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	74fb      	strb	r3, [r7, #19]
        break;
 8005472:	e005      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ef      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d15c      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d019      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	4a20      	ldr	r2, [pc, #128]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e2:	f7fc fbd7 	bl	8001c94 <HAL_GetTick>
 80054e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e8:	e00b      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fc fbd3 	bl	8001c94 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d902      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005500:	e006      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ec      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10c      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005526:	4904      	ldr	r1, [pc, #16]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800552e:	e009      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005544:	7c7b      	ldrb	r3, [r7, #17]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d105      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b9e      	ldr	r3, [pc, #632]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	4a9d      	ldr	r2, [pc, #628]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005562:	4b98      	ldr	r3, [pc, #608]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f023 0203 	bic.w	r2, r3, #3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	4994      	ldr	r1, [pc, #592]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005584:	4b8f      	ldr	r3, [pc, #572]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f023 020c 	bic.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	498c      	ldr	r1, [pc, #560]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055a6:	4b87      	ldr	r3, [pc, #540]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	4983      	ldr	r1, [pc, #524]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055c8:	4b7e      	ldr	r3, [pc, #504]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	497b      	ldr	r1, [pc, #492]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055ea:	4b76      	ldr	r3, [pc, #472]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f8:	4972      	ldr	r1, [pc, #456]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560c:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561a:	496a      	ldr	r1, [pc, #424]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562e:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	4961      	ldr	r1, [pc, #388]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005650:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	4959      	ldr	r1, [pc, #356]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005672:	4b54      	ldr	r3, [pc, #336]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	4950      	ldr	r1, [pc, #320]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005694:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	4948      	ldr	r1, [pc, #288]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b6:	4b43      	ldr	r3, [pc, #268]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	493f      	ldr	r1, [pc, #252]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d028      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	4937      	ldr	r1, [pc, #220]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f6:	d106      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4a31      	ldr	r2, [pc, #196]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005702:	60d3      	str	r3, [r2, #12]
 8005704:	e011      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800570e:	d10c      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f8d8 	bl	80058cc <RCCEx_PLLSAI1_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d028      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005736:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	491f      	ldr	r1, [pc, #124]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d106      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005760:	60d3      	str	r3, [r2, #12]
 8005762:	e011      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800576c:	d10c      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	2101      	movs	r1, #1
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f8a9 	bl	80058cc <RCCEx_PLLSAI1_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a2:	4908      	ldr	r1, [pc, #32]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b2:	d109      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a02      	ldr	r2, [pc, #8]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
 80057c0:	e014      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f877 	bl	80058cc <RCCEx_PLLSAI1_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02f      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005806:	4928      	ldr	r1, [pc, #160]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005816:	d10d      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f854 	bl	80058cc <RCCEx_PLLSAI1_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	74bb      	strb	r3, [r7, #18]
 8005832:	e011      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583c:	d10c      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3320      	adds	r3, #32
 8005842:	2102      	movs	r1, #2
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f935 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005864:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005872:	490d      	ldr	r1, [pc, #52]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	4904      	ldr	r1, [pc, #16]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800589e:	7cbb      	ldrb	r3, [r7, #18]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000

080058cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058da:	4b75      	ldr	r3, [pc, #468]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058e6:	4b72      	ldr	r3, [pc, #456]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0203 	and.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10d      	bne.n	8005912 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
       ||
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
       ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d047      	beq.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
 8005916:	e044      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d018      	beq.n	8005952 <RCCEx_PLLSAI1_Config+0x86>
 8005920:	2b03      	cmp	r3, #3
 8005922:	d825      	bhi.n	8005970 <RCCEx_PLLSAI1_Config+0xa4>
 8005924:	2b01      	cmp	r3, #1
 8005926:	d002      	beq.n	800592e <RCCEx_PLLSAI1_Config+0x62>
 8005928:	2b02      	cmp	r3, #2
 800592a:	d009      	beq.n	8005940 <RCCEx_PLLSAI1_Config+0x74>
 800592c:	e020      	b.n	8005970 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592e:	4b60      	ldr	r3, [pc, #384]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11d      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593e:	e01a      	b.n	8005976 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005940:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005950:	e013      	b.n	800597a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595e:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596e:	e006      	b.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
      break;
 8005974:	e004      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	430b      	orrs	r3, r1
 800599c:	4944      	ldr	r1, [pc, #272]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d17d      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059a8:	4b41      	ldr	r3, [pc, #260]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fc f96e 	bl	8001c94 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ba:	e009      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059bc:	f7fc f96a 	bl	8001c94 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
        break;
 80059ce:	e005      	b.n	80059dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d0:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ef      	bne.n	80059bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d160      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e8:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	0211      	lsls	r1, r2, #8
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68d2      	ldr	r2, [r2, #12]
 80059fe:	0912      	lsrs	r2, r2, #4
 8005a00:	0452      	lsls	r2, r2, #17
 8005a02:	430a      	orrs	r2, r1
 8005a04:	492a      	ldr	r1, [pc, #168]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]
 8005a0a:	e027      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d112      	bne.n	8005a38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6892      	ldr	r2, [r2, #8]
 8005a22:	0211      	lsls	r1, r2, #8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6912      	ldr	r2, [r2, #16]
 8005a28:	0852      	lsrs	r2, r2, #1
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	0552      	lsls	r2, r2, #21
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	491f      	ldr	r1, [pc, #124]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]
 8005a36:	e011      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6892      	ldr	r2, [r2, #8]
 8005a48:	0211      	lsls	r1, r2, #8
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6952      	ldr	r2, [r2, #20]
 8005a4e:	0852      	lsrs	r2, r2, #1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0652      	lsls	r2, r2, #25
 8005a54:	430a      	orrs	r2, r1
 8005a56:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a5c:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc f914 	bl	8001c94 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a6e:	e009      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a70:	f7fc f910 	bl	8001c94 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d902      	bls.n	8005a84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	73fb      	strb	r3, [r7, #15]
          break;
 8005a82:	e005      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ac2:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d018      	beq.n	8005b00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0203 	and.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d10d      	bne.n	8005afa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ae6:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
       ||
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d047      	beq.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e044      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d018      	beq.n	8005b3a <RCCEx_PLLSAI2_Config+0x86>
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d825      	bhi.n	8005b58 <RCCEx_PLLSAI2_Config+0xa4>
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d002      	beq.n	8005b16 <RCCEx_PLLSAI2_Config+0x62>
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d009      	beq.n	8005b28 <RCCEx_PLLSAI2_Config+0x74>
 8005b14:	e020      	b.n	8005b58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b16:	4b55      	ldr	r3, [pc, #340]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d11d      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b26:	e01a      	b.n	8005b5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b28:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d116      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b38:	e013      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b46:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b56:	e006      	b.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e004      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10d      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b6e:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	430b      	orrs	r3, r1
 8005b84:	4939      	ldr	r1, [pc, #228]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d167      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b90:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fc f87a 	bl	8001c94 <HAL_GetTick>
 8005ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba2:	e009      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba4:	f7fc f876 	bl	8001c94 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d902      	bls.n	8005bb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb6:	e005      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ef      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d14a      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d111      	bne.n	8005bf4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd0:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6892      	ldr	r2, [r2, #8]
 8005be0:	0211      	lsls	r1, r2, #8
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68d2      	ldr	r2, [r2, #12]
 8005be6:	0912      	lsrs	r2, r2, #4
 8005be8:	0452      	lsls	r2, r2, #17
 8005bea:	430a      	orrs	r2, r1
 8005bec:	491f      	ldr	r1, [pc, #124]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	614b      	str	r3, [r1, #20]
 8005bf2:	e011      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6892      	ldr	r2, [r2, #8]
 8005c04:	0211      	lsls	r1, r2, #8
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6912      	ldr	r2, [r2, #16]
 8005c0a:	0852      	lsrs	r2, r2, #1
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0652      	lsls	r2, r2, #25
 8005c10:	430a      	orrs	r2, r1
 8005c12:	4916      	ldr	r1, [pc, #88]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c18:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fc f836 	bl	8001c94 <HAL_GetTick>
 8005c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2a:	e009      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2c:	f7fc f832 	bl	8001c94 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3e:	e005      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ef      	beq.n	8005c2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000

08005c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e040      	b.n	8005d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fb ff10 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fae0 	bl	800627c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f825 	bl	8005d0c <UART_SetConfig>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e01b      	b.n	8005d04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fb5f 	bl	80063c0 <UART_CheckIdleState>
 8005d02:	4603      	mov	r3, r0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b08a      	sub	sp, #40	; 0x28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4ba4      	ldr	r3, [pc, #656]	; (8005fcc <UART_SetConfig+0x2c0>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a99      	ldr	r2, [pc, #612]	; (8005fd0 <UART_SetConfig+0x2c4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	4313      	orrs	r3, r2
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a90      	ldr	r2, [pc, #576]	; (8005fd4 <UART_SetConfig+0x2c8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d126      	bne.n	8005de4 <UART_SetConfig+0xd8>
 8005d96:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0xd0>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0xa0>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e116      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e112      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e10e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e10a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e106      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a7c      	ldr	r2, [pc, #496]	; (8005fdc <UART_SetConfig+0x2d0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d138      	bne.n	8005e60 <UART_SetConfig+0x154>
 8005dee:	4b7a      	ldr	r3, [pc, #488]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	d82d      	bhi.n	8005e58 <UART_SetConfig+0x14c>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0xf8>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005e59 	.word	0x08005e59
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e49 	.word	0x08005e49
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	08005e59 	.word	0x08005e59
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e0d8      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e0d4      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e0d0      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e0cc      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e0c8      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a5e      	ldr	r2, [pc, #376]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d125      	bne.n	8005eb6 <UART_SetConfig+0x1aa>
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d016      	beq.n	8005ea6 <UART_SetConfig+0x19a>
 8005e78:	2b30      	cmp	r3, #48	; 0x30
 8005e7a:	d818      	bhi.n	8005eae <UART_SetConfig+0x1a2>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d00a      	beq.n	8005e96 <UART_SetConfig+0x18a>
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d814      	bhi.n	8005eae <UART_SetConfig+0x1a2>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <UART_SetConfig+0x182>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d008      	beq.n	8005e9e <UART_SetConfig+0x192>
 8005e8c:	e00f      	b.n	8005eae <UART_SetConfig+0x1a2>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e94:	e0ad      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e96:	2302      	movs	r3, #2
 8005e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9c:	e0a9      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005e9e:	2304      	movs	r3, #4
 8005ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea4:	e0a5      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eac:	e0a1      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eae:	2310      	movs	r3, #16
 8005eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb4:	e09d      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <UART_SetConfig+0x2d8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d125      	bne.n	8005f0c <UART_SetConfig+0x200>
 8005ec0:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ecc:	d016      	beq.n	8005efc <UART_SetConfig+0x1f0>
 8005ece:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed0:	d818      	bhi.n	8005f04 <UART_SetConfig+0x1f8>
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d00a      	beq.n	8005eec <UART_SetConfig+0x1e0>
 8005ed6:	2b80      	cmp	r3, #128	; 0x80
 8005ed8:	d814      	bhi.n	8005f04 <UART_SetConfig+0x1f8>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <UART_SetConfig+0x1d8>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d008      	beq.n	8005ef4 <UART_SetConfig+0x1e8>
 8005ee2:	e00f      	b.n	8005f04 <UART_SetConfig+0x1f8>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e082      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005eec:	2302      	movs	r3, #2
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e07e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e07a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e076      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e072      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <UART_SetConfig+0x2dc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d12a      	bne.n	8005f6c <UART_SetConfig+0x260>
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f24:	d01a      	beq.n	8005f5c <UART_SetConfig+0x250>
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2a:	d81b      	bhi.n	8005f64 <UART_SetConfig+0x258>
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f30:	d00c      	beq.n	8005f4c <UART_SetConfig+0x240>
 8005f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f36:	d815      	bhi.n	8005f64 <UART_SetConfig+0x258>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <UART_SetConfig+0x238>
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f40:	d008      	beq.n	8005f54 <UART_SetConfig+0x248>
 8005f42:	e00f      	b.n	8005f64 <UART_SetConfig+0x258>
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e052      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e04e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e04a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e046      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e042      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <UART_SetConfig+0x2c4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d13a      	bne.n	8005fec <UART_SetConfig+0x2e0>
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f84:	d01a      	beq.n	8005fbc <UART_SetConfig+0x2b0>
 8005f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8a:	d81b      	bhi.n	8005fc4 <UART_SetConfig+0x2b8>
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f90:	d00c      	beq.n	8005fac <UART_SetConfig+0x2a0>
 8005f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f96:	d815      	bhi.n	8005fc4 <UART_SetConfig+0x2b8>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <UART_SetConfig+0x298>
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d008      	beq.n	8005fb4 <UART_SetConfig+0x2a8>
 8005fa2:	e00f      	b.n	8005fc4 <UART_SetConfig+0x2b8>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e022      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e01e      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e01a      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e016      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e012      	b.n	8005ff2 <UART_SetConfig+0x2e6>
 8005fcc:	efff69f3 	.word	0xefff69f3
 8005fd0:	40008000 	.word	0x40008000
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40004800 	.word	0x40004800
 8005fe4:	40004c00 	.word	0x40004c00
 8005fe8:	40005000 	.word	0x40005000
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a9f      	ldr	r2, [pc, #636]	; (8006274 <UART_SetConfig+0x568>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d17a      	bne.n	80060f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006000:	2b08      	cmp	r3, #8
 8006002:	d824      	bhi.n	800604e <UART_SetConfig+0x342>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x300>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006031 	.word	0x08006031
 8006010:	0800604f 	.word	0x0800604f
 8006014:	08006039 	.word	0x08006039
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800603f 	.word	0x0800603f
 8006020:	0800604f 	.word	0x0800604f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800604f 	.word	0x0800604f
 800602c:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006030:	f7ff f8c6 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8006034:	61f8      	str	r0, [r7, #28]
        break;
 8006036:	e010      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b8f      	ldr	r3, [pc, #572]	; (8006278 <UART_SetConfig+0x56c>)
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e00d      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7ff f827 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8006042:	61f8      	str	r0, [r7, #28]
        break;
 8006044:	e009      	b.n	800605a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604a:	61fb      	str	r3, [r7, #28]
        break;
 800604c:	e005      	b.n	800605a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80fb 	beq.w	8006258 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	4413      	add	r3, r2
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	429a      	cmp	r2, r3
 8006070:	d305      	bcc.n	800607e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	429a      	cmp	r2, r3
 800607c:	d903      	bls.n	8006086 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006084:	e0e8      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	461c      	mov	r4, r3
 800608c:	4615      	mov	r5, r2
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	022b      	lsls	r3, r5, #8
 8006098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800609c:	0222      	lsls	r2, r4, #8
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6849      	ldr	r1, [r1, #4]
 80060a2:	0849      	lsrs	r1, r1, #1
 80060a4:	2000      	movs	r0, #0
 80060a6:	4688      	mov	r8, r1
 80060a8:	4681      	mov	r9, r0
 80060aa:	eb12 0a08 	adds.w	sl, r2, r8
 80060ae:	eb43 0b09 	adc.w	fp, r3, r9
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c0:	4650      	mov	r0, sl
 80060c2:	4659      	mov	r1, fp
 80060c4:	f7fa fde0 	bl	8000c88 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d6:	d308      	bcc.n	80060ea <UART_SetConfig+0x3de>
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d204      	bcs.n	80060ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	60da      	str	r2, [r3, #12]
 80060e8:	e0b6      	b.n	8006258 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060f0:	e0b2      	b.n	8006258 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fa:	d15e      	bne.n	80061ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006100:	2b08      	cmp	r3, #8
 8006102:	d828      	bhi.n	8006156 <UART_SetConfig+0x44a>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <UART_SetConfig+0x400>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	08006157 	.word	0x08006157
 800611c:	08006147 	.word	0x08006147
 8006120:	08006157 	.word	0x08006157
 8006124:	08006157 	.word	0x08006157
 8006128:	08006157 	.word	0x08006157
 800612c:	0800614f 	.word	0x0800614f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006130:	f7ff f846 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8006134:	61f8      	str	r0, [r7, #28]
        break;
 8006136:	e014      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7ff f858 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e010      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006140:	4b4d      	ldr	r3, [pc, #308]	; (8006278 <UART_SetConfig+0x56c>)
 8006142:	61fb      	str	r3, [r7, #28]
        break;
 8006144:	e00d      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006146:	f7fe ffa3 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800614a:	61f8      	str	r0, [r7, #28]
        break;
 800614c:	e009      	b.n	8006162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e005      	b.n	8006162 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d077      	beq.n	8006258 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	441a      	add	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b0f      	cmp	r3, #15
 8006182:	d916      	bls.n	80061b2 <UART_SetConfig+0x4a6>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618a:	d212      	bcs.n	80061b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f023 030f 	bic.w	r3, r3, #15
 8006194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	8afb      	ldrh	r3, [r7, #22]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	8afa      	ldrh	r2, [r7, #22]
 80061ae:	60da      	str	r2, [r3, #12]
 80061b0:	e052      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b8:	e04e      	b.n	8006258 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d827      	bhi.n	8006212 <UART_SetConfig+0x506>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x4bc>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe ffe8 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fffa 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 80061f8:	61f8      	str	r0, [r7, #28]
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <UART_SetConfig+0x56c>)
 80061fe:	61fb      	str	r3, [r7, #28]
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe ff45 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8006206:	61f8      	str	r0, [r7, #28]
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800621c:	bf00      	nop
    }

    if (pclk != 0U)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d019      	beq.n	8006258 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	085a      	lsrs	r2, r3, #1
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b0f      	cmp	r3, #15
 800623c:	d909      	bls.n	8006252 <UART_SetConfig+0x546>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d205      	bcs.n	8006252 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e002      	b.n	8006258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	40008000 	.word	0x40008000
 8006278:	00f42400 	.word	0x00f42400

0800627c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01a      	beq.n	8006392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637a:	d10a      	bne.n	8006392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b098      	sub	sp, #96	; 0x60
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d0:	f7fb fc60 	bl	8001c94 <HAL_GetTick>
 80063d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d12e      	bne.n	8006442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	2200      	movs	r2, #0
 80063ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f88c 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d021      	beq.n	8006442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e062      	b.n	8006508 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d149      	bne.n	80064e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006458:	2200      	movs	r2, #0
 800645a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f856 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d03c      	beq.n	80064e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
 800648a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e6      	bne.n	800646a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e011      	b.n	8006508 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3758      	adds	r7, #88	; 0x58
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e049      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d045      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fb fbb3 	bl	8001c94 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e048      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d031      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b08      	cmp	r3, #8
 800655e:	d110      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2208      	movs	r2, #8
 8006566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f838 	bl	80065de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2208      	movs	r2, #8
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e029      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006590:	d111      	bne.n	80065b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800659a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f81e 	bl	80065de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e00f      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4013      	ands	r3, r2
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	bf0c      	ite	eq
 80065c6:	2301      	moveq	r3, #1
 80065c8:	2300      	movne	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d0a6      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065de:	b480      	push	{r7}
 80065e0:	b095      	sub	sp, #84	; 0x54
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800660a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e6      	bne.n	80065e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	61fb      	str	r3, [r7, #28]
   return(result);
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800663e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	2b01      	cmp	r3, #1
 8006652:	d118      	bne.n	8006686 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	60bb      	str	r3, [r7, #8]
   return(result);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0310 	bic.w	r3, r3, #16
 8006668:	647b      	str	r3, [r7, #68]	; 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e6      	bne.n	8006654 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	669a      	str	r2, [r3, #104]	; 0x68
}
 800669a:	bf00      	nop
 800669c:	3754      	adds	r7, #84	; 0x54
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066a6:	b084      	sub	sp, #16
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	f107 001c 	add.w	r0, r7, #28
 80066b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fa1d 	bl	8007b04 <USB_CoreReset>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80066ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
 80066e0:	e005      	b.n	80066ee <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fa:	b004      	add	sp, #16
 80066fc:	4770      	bx	lr
	...

08006700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d165      	bne.n	80067e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a3e      	ldr	r2, [pc, #248]	; (8006810 <USB_SetTurnaroundTime+0x110>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0x2a>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a3d      	ldr	r2, [pc, #244]	; (8006814 <USB_SetTurnaroundTime+0x114>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d202      	bcs.n	800672a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006724:	230f      	movs	r3, #15
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e05c      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a39      	ldr	r2, [pc, #228]	; (8006814 <USB_SetTurnaroundTime+0x114>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d306      	bcc.n	8006740 <USB_SetTurnaroundTime+0x40>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a38      	ldr	r2, [pc, #224]	; (8006818 <USB_SetTurnaroundTime+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d202      	bcs.n	8006740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800673a:	230e      	movs	r3, #14
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e051      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a35      	ldr	r2, [pc, #212]	; (8006818 <USB_SetTurnaroundTime+0x118>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d306      	bcc.n	8006756 <USB_SetTurnaroundTime+0x56>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a34      	ldr	r2, [pc, #208]	; (800681c <USB_SetTurnaroundTime+0x11c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d202      	bcs.n	8006756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006750:	230d      	movs	r3, #13
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e046      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <USB_SetTurnaroundTime+0x11c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d306      	bcc.n	800676c <USB_SetTurnaroundTime+0x6c>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <USB_SetTurnaroundTime+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d802      	bhi.n	800676c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006766:	230c      	movs	r3, #12
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e03b      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <USB_SetTurnaroundTime+0x120>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d906      	bls.n	8006782 <USB_SetTurnaroundTime+0x82>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <USB_SetTurnaroundTime+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d802      	bhi.n	8006782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800677c:	230b      	movs	r3, #11
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e030      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <USB_SetTurnaroundTime+0x124>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d906      	bls.n	8006798 <USB_SetTurnaroundTime+0x98>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <USB_SetTurnaroundTime+0x128>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d802      	bhi.n	8006798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006792:	230a      	movs	r3, #10
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e025      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <USB_SetTurnaroundTime+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d906      	bls.n	80067ae <USB_SetTurnaroundTime+0xae>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4a22      	ldr	r2, [pc, #136]	; (800682c <USB_SetTurnaroundTime+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d202      	bcs.n	80067ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067a8:	2309      	movs	r3, #9
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e01a      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a1e      	ldr	r2, [pc, #120]	; (800682c <USB_SetTurnaroundTime+0x12c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d306      	bcc.n	80067c4 <USB_SetTurnaroundTime+0xc4>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <USB_SetTurnaroundTime+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d802      	bhi.n	80067c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067be:	2308      	movs	r3, #8
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e00f      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <USB_SetTurnaroundTime+0x130>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d906      	bls.n	80067da <USB_SetTurnaroundTime+0xda>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4a19      	ldr	r2, [pc, #100]	; (8006834 <USB_SetTurnaroundTime+0x134>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d202      	bcs.n	80067da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067d4:	2307      	movs	r3, #7
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e004      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067da:	2306      	movs	r3, #6
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	e001      	b.n	80067e4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067e0:	2309      	movs	r3, #9
 80067e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	00d8acbf 	.word	0x00d8acbf
 8006814:	00e4e1c0 	.word	0x00e4e1c0
 8006818:	00f42400 	.word	0x00f42400
 800681c:	01067380 	.word	0x01067380
 8006820:	011a499f 	.word	0x011a499f
 8006824:	01312cff 	.word	0x01312cff
 8006828:	014ca43f 	.word	0x014ca43f
 800682c:	016e3600 	.word	0x016e3600
 8006830:	01a6ab1f 	.word	0x01a6ab1f
 8006834:	01e84800 	.word	0x01e84800

08006838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f043 0201 	orr.w	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d115      	bne.n	80068ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068aa:	2001      	movs	r0, #1
 80068ac:	f7fb f9fe 	bl	8001cac <HAL_Delay>
      ms++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 f8ab 	bl	8007a12 <USB_GetMode>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d01e      	beq.n	8006900 <USB_SetCurrentMode+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b31      	cmp	r3, #49	; 0x31
 80068c6:	d9f0      	bls.n	80068aa <USB_SetCurrentMode+0x2e>
 80068c8:	e01a      	b.n	8006900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d115      	bne.n	80068fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068dc:	2001      	movs	r0, #1
 80068de:	f7fb f9e5 	bl	8001cac <HAL_Delay>
      ms++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f892 	bl	8007a12 <USB_GetMode>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <USB_SetCurrentMode+0x84>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b31      	cmp	r3, #49	; 0x31
 80068f8:	d9f0      	bls.n	80068dc <USB_SetCurrentMode+0x60>
 80068fa:	e001      	b.n	8006900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e005      	b.n	800690c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b32      	cmp	r3, #50	; 0x32
 8006904:	d101      	bne.n	800690a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006914:	b084      	sub	sp, #16
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	e009      	b.n	8006948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3340      	adds	r3, #64	; 0x40
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	2200      	movs	r2, #0
 8006940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b0e      	cmp	r3, #14
 800694c:	d9f2      	bls.n	8006934 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11c      	bne.n	800698e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e005      	b.n	800699a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069a6:	2103      	movs	r1, #3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f959 	bl	8006c60 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ae:	2110      	movs	r1, #16
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f8f1 	bl	8006b98 <USB_FlushTxFifo>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f91d 	bl	8006c00 <USB_FlushRxFifo>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e043      	b.n	8006a82 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a10:	d118      	bne.n	8006a44 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	461a      	mov	r2, r3
 8006a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e013      	b.n	8006a56 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e008      	b.n	8006a56 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	461a      	mov	r2, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	461a      	mov	r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	461a      	mov	r2, r3
 8006a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3b7      	bcc.n	80069fa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	e043      	b.n	8006b18 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa6:	d118      	bne.n	8006ada <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	461a      	mov	r2, r3
 8006abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e013      	b.n	8006aec <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e008      	b.n	8006aec <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	461a      	mov	r2, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3301      	adds	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d3b7      	bcc.n	8006a90 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f043 0210 	orr.w	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <USB_DevInit+0x280>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f043 0208 	orr.w	r2, r3, #8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d107      	bne.n	8006b82 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b8e:	b004      	add	sp, #16
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	803c3800 	.word	0x803c3800

08006b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <USB_FlushTxFifo+0x64>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d901      	bls.n	8006bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e01b      	b.n	8006bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	daf2      	bge.n	8006ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <USB_FlushTxFifo+0x64>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e006      	b.n	8006bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d0f0      	beq.n	8006bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	00030d40 	.word	0x00030d40

08006c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a11      	ldr	r2, [pc, #68]	; (8006c5c <USB_FlushRxFifo+0x5c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e018      	b.n	8006c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	daf2      	bge.n	8006c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <USB_FlushRxFifo+0x5c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e006      	b.n	8006c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d0f0      	beq.n	8006c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	00030d40 	.word	0x00030d40

08006c60 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0306 	and.w	r3, r3, #6
 8006caa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d002      	beq.n	8006cb8 <USB_GetDevSpeed+0x26>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d102      	bne.n	8006cbe <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	75fb      	strb	r3, [r7, #23]
 8006cbc:	e001      	b.n	8006cc2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006cbe:	230f      	movs	r3, #15
 8006cc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d13a      	bne.n	8006d62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d155      	bne.n	8006dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	791b      	ldrb	r3, [r3, #4]
 8006d3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	059b      	lsls	r3, r3, #22
 8006d46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e036      	b.n	8006dd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	2101      	movs	r1, #1
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	041b      	lsls	r3, r3, #16
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d80:	4313      	orrs	r3, r2
 8006d82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11a      	bne.n	8006dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006db6:	430b      	orrs	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d161      	bne.n	8006ec0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e12:	d11f      	bne.n	8006e54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	43db      	mvns	r3, r3
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	0159      	lsls	r1, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	440b      	add	r3, r1
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <USB_DeactivateEndpoint+0x1b0>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	600b      	str	r3, [r1, #0]
 8006ebe:	e060      	b.n	8006f82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed6:	d11f      	bne.n	8006f18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	43db      	mvns	r3, r3
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4013      	ands	r3, r2
 8006f3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	43db      	mvns	r3, r3
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	0159      	lsls	r1, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <USB_DeactivateEndpoint+0x1b4>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	ec337800 	.word	0xec337800
 8006f94:	eff37800 	.word	0xeff37800

08006f98 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 8128 	bne.w	8007206 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d132      	bne.n	8007024 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	0cdb      	lsrs	r3, r3, #19
 800701e:	04db      	lsls	r3, r3, #19
 8007020:	6113      	str	r3, [r2, #16]
 8007022:	e092      	b.n	800714a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	0cdb      	lsrs	r3, r3, #19
 8007040:	04db      	lsls	r3, r3, #19
 8007042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007066:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d11a      	bne.n	80070a4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a0:	6113      	str	r3, [r2, #16]
 80070a2:	e01b      	b.n	80070dc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6919      	ldr	r1, [r3, #16]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	440b      	add	r3, r1
 80070bc:	1e59      	subs	r1, r3, #1
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070c6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070c8:	4b8d      	ldr	r3, [pc, #564]	; (8007300 <USB_EPStartXfer+0x368>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	6939      	ldr	r1, [r7, #16]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070d8:	4313      	orrs	r3, r2
 80070da:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f2:	6939      	ldr	r1, [r7, #16]
 80070f4:	0148      	lsls	r0, r1, #5
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	4401      	add	r1, r0
 80070fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070fe:	4313      	orrs	r3, r2
 8007100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11f      	bne.n	800714a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007148:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007168:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d015      	beq.n	800719e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8139 	beq.w	80073ee <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007198:	4313      	orrs	r3, r2
 800719a:	634b      	str	r3, [r1, #52]	; 0x34
 800719c:	e127      	b.n	80073ee <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d110      	bne.n	80071d0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e00f      	b.n	80071f0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ee:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68d9      	ldr	r1, [r3, #12]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9a6 	bl	8007550 <USB_WritePacket>
 8007204:	e0f3      	b.n	80073ee <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007220:	0cdb      	lsrs	r3, r3, #19
 8007222:	04db      	lsls	r3, r3, #19
 8007224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007248:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d12f      	bne.n	80072b0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727e:	6939      	ldr	r1, [r7, #16]
 8007280:	0148      	lsls	r0, r1, #5
 8007282:	6979      	ldr	r1, [r7, #20]
 8007284:	4401      	add	r1, r0
 8007286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800728a:	4313      	orrs	r3, r2
 800728c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ac:	6113      	str	r3, [r2, #16]
 80072ae:	e061      	b.n	8007374 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d125      	bne.n	8007304 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	0148      	lsls	r0, r1, #5
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	4401      	add	r1, r0
 80072d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072da:	4313      	orrs	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072fc:	6113      	str	r3, [r2, #16]
 80072fe:	e039      	b.n	8007374 <USB_EPStartXfer+0x3dc>
 8007300:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4413      	add	r3, r2
 800730e:	1e5a      	subs	r2, r3, #1
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	89fa      	ldrh	r2, [r7, #14]
 8007320:	fb03 f202 	mul.w	r2, r3, r2
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	04d9      	lsls	r1, r3, #19
 800733a:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <USB_EPStartXfer+0x460>)
 800733c:	400b      	ands	r3, r1
 800733e:	6939      	ldr	r1, [r7, #16]
 8007340:	0148      	lsls	r0, r1, #5
 8007342:	6979      	ldr	r1, [r7, #20]
 8007344:	4401      	add	r1, r0
 8007346:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800734a:	4313      	orrs	r3, r2
 800734c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007364:	6939      	ldr	r1, [r7, #16]
 8007366:	0148      	lsls	r0, r1, #5
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	4401      	add	r1, r0
 800736c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007370:	4313      	orrs	r3, r2
 8007372:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	791b      	ldrb	r3, [r3, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d128      	bne.n	80073ce <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d110      	bne.n	80073ae <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e00f      	b.n	80073ce <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073cc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	1ff80000 	.word	0x1ff80000

080073fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d14a      	bne.n	80074b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800742e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007432:	f040 8086 	bne.w	8007542 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007458:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	7812      	ldrb	r2, [r2, #0]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800747c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f242 7210 	movw	r2, #10000	; 0x2710
 800748a:	4293      	cmp	r3, r2
 800748c:	d902      	bls.n	8007494 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
          break;
 8007492:	e056      	b.n	8007542 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ac:	d0e7      	beq.n	800747e <USB_EPStopXfer+0x82>
 80074ae:	e048      	b.n	8007542 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c8:	d13b      	bne.n	8007542 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007510:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f242 7210 	movw	r2, #10000	; 0x2710
 800751e:	4293      	cmp	r3, r2
 8007520:	d902      	bls.n	8007528 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
          break;
 8007526:	e00c      	b.n	8007542 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007540:	d0e7      	beq.n	8007512 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	460b      	mov	r3, r1
 8007560:	71fb      	strb	r3, [r7, #7]
 8007562:	4613      	mov	r3, r2
 8007564:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800756e:	88bb      	ldrh	r3, [r7, #4]
 8007570:	3303      	adds	r3, #3
 8007572:	089b      	lsrs	r3, r3, #2
 8007574:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e018      	b.n	80075ae <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	031a      	lsls	r2, r3, #12
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	461a      	mov	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	3301      	adds	r3, #1
 8007594:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3301      	adds	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	3301      	adds	r3, #1
 80075a0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3301      	adds	r3, #1
 80075a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3e2      	bcc.n	800757c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3724      	adds	r7, #36	; 0x24
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b08b      	sub	sp, #44	; 0x2c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
 80075ee:	e014      	b.n	800761a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	3301      	adds	r3, #1
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	3301      	adds	r3, #1
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3301      	adds	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	3301      	adds	r3, #1
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d3e6      	bcc.n	80075f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01e      	beq.n	8007666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	461a      	mov	r2, r3
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	b2da      	uxtb	r2, r3
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	701a      	strb	r2, [r3, #0]
      i++;
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	3301      	adds	r3, #1
 8007652:	623b      	str	r3, [r7, #32]
      pDest++;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	3301      	adds	r3, #1
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800765a:	8bfb      	ldrh	r3, [r7, #30]
 800765c:	3b01      	subs	r3, #1
 800765e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007660:	8bfb      	ldrh	r3, [r7, #30]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ea      	bne.n	800763c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007668:	4618      	mov	r0, r3
 800766a:	372c      	adds	r7, #44	; 0x2c
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d12c      	bne.n	80076ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	db12      	blt.n	80076c8 <USB_EPSetStall+0x54>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00f      	beq.n	80076c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e02b      	b.n	8007742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db12      	blt.n	8007722 <USB_EPSetStall+0xae>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00f      	beq.n	8007722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d128      	bne.n	80077be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800778a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	791b      	ldrb	r3, [r3, #4]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d003      	beq.n	800779c <USB_EPClearStall+0x4c>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d138      	bne.n	800780e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e027      	b.n	800780e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	791b      	ldrb	r3, [r3, #4]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d003      	beq.n	80077ee <USB_EPClearStall+0x9e>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d10f      	bne.n	800780e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800783e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007856:	4313      	orrs	r3, r2
 8007858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007896:	f023 0302 	bic.w	r3, r3, #2
 800789a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078c4:	f023 0303 	bic.w	r3, r3, #3
 80078c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d8:	f043 0302 	orr.w	r3, r3, #2
 80078dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4013      	ands	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007904:	68fb      	ldr	r3, [r7, #12]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	4013      	ands	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	0c1b      	lsrs	r3, r3, #16
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	b29b      	uxth	r3, r3
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4013      	ands	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079a8:	68bb      	ldr	r3, [r7, #8]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	01db      	lsls	r3, r3, #7
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4013      	ands	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a04:	68bb      	ldr	r3, [r7, #8]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a4c:	f023 0307 	bic.w	r3, r3, #7
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	333c      	adds	r3, #60	; 0x3c
 8007a86:	3304      	adds	r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <USB_EP0_OutStart+0x8c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d90a      	bls.n	8007aaa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa4:	d101      	bne.n	8007aaa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e024      	b.n	8007af4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad8:	f043 0318 	orr.w	r3, r3, #24
 8007adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007af0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	4f54300a 	.word	0x4f54300a

08007b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <USB_CoreReset+0x64>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d901      	bls.n	8007b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e01b      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	daf2      	bge.n	8007b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f043 0201 	orr.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <USB_CoreReset+0x64>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d901      	bls.n	8007b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e006      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d0f0      	beq.n	8007b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	00030d40 	.word	0x00030d40

08007b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b7c:	f002 fe26 	bl	800a7cc <USBD_static_malloc>
 8007b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	32b0      	adds	r2, #176	; 0xb0
 8007b92:	2100      	movs	r1, #0
 8007b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0d4      	b.n	8007d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f003 fdcb 	bl	800b73e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32b0      	adds	r2, #176	; 0xb0
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32b0      	adds	r2, #176	; 0xb0
 8007bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d138      	bne.n	8007c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bd4:	4b5e      	ldr	r3, [pc, #376]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007bd6:	7819      	ldrb	r1, [r3, #0]
 8007bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bdc:	2202      	movs	r2, #2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f002 fbe0 	bl	800a3a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007be4:	4b5a      	ldr	r3, [pc, #360]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3324      	adds	r3, #36	; 0x24
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bfe:	4b55      	ldr	r3, [pc, #340]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c06:	2202      	movs	r2, #2
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 fbcb 	bl	800a3a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c0e:	4b51      	ldr	r3, [pc, #324]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f003 020f 	and.w	r2, r3, #15
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c26:	2201      	movs	r2, #1
 8007c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c2a:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3326      	adds	r3, #38	; 0x26
 8007c40:	2210      	movs	r2, #16
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e035      	b.n	8007cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c46:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007c48:	7819      	ldrb	r1, [r3, #0]
 8007c4a:	2340      	movs	r3, #64	; 0x40
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fba8 	bl	800a3a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c54:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 020f 	and.w	r2, r3, #15
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c6e:	4b39      	ldr	r3, [pc, #228]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c70:	7819      	ldrb	r1, [r3, #0]
 8007c72:	2340      	movs	r3, #64	; 0x40
 8007c74:	2202      	movs	r2, #2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 fb94 	bl	800a3a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c7c:	4b35      	ldr	r3, [pc, #212]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	f003 020f 	and.w	r2, r3, #15
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c94:	2201      	movs	r2, #1
 8007c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c98:	4b2f      	ldr	r3, [pc, #188]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 020f 	and.w	r2, r3, #15
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	3326      	adds	r3, #38	; 0x26
 8007cae:	2210      	movs	r2, #16
 8007cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb2:	4b29      	ldr	r3, [pc, #164]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	2203      	movs	r2, #3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f002 fb72 	bl	800a3a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3324      	adds	r3, #36	; 0x24
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33b0      	adds	r3, #176	; 0xb0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e018      	b.n	8007d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7c1b      	ldrb	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007d1e:	7819      	ldrb	r1, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f002 fcb4 	bl	800a698 <USBD_LL_PrepareReceive>
 8007d30:	e008      	b.n	8007d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007d34:	7819      	ldrb	r1, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d3c:	2340      	movs	r3, #64	; 0x40
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 fcaa 	bl	800a698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000093 	.word	0x20000093
 8007d54:	20000094 	.word	0x20000094
 8007d58:	20000095 	.word	0x20000095

08007d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d68:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <USBD_CDC_DeInit+0xf8>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f002 fb56 	bl	800a420 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d74:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <USBD_CDC_DeInit+0xf8>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3324      	adds	r3, #36	; 0x24
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d8e:	4b32      	ldr	r3, [pc, #200]	; (8007e58 <USBD_CDC_DeInit+0xfc>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f002 fb43 	bl	800a420 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d9a:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <USBD_CDC_DeInit+0xfc>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 020f 	and.w	r2, r3, #15
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007db2:	2200      	movs	r2, #0
 8007db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007db6:	4b29      	ldr	r3, [pc, #164]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f002 fb2f 	bl	800a420 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007dc2:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3324      	adds	r3, #36	; 0x24
 8007dd8:	2200      	movs	r2, #0
 8007dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ddc:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 020f 	and.w	r2, r3, #15
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3326      	adds	r3, #38	; 0x26
 8007df2:	2200      	movs	r2, #0
 8007df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	32b0      	adds	r2, #176	; 0xb0
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01f      	beq.n	8007e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	33b0      	adds	r3, #176	; 0xb0
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32b0      	adds	r2, #176	; 0xb0
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fcdc 	bl	800a7e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32b0      	adds	r2, #176	; 0xb0
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000093 	.word	0x20000093
 8007e58:	20000094 	.word	0x20000094
 8007e5c:	20000095 	.word	0x20000095

08007e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	; 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0bf      	b.n	8008010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d050      	beq.n	8007f3e <USBD_CDC_Setup+0xde>
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	f040 80af 	bne.w	8008000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d03a      	beq.n	8007f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da1b      	bge.n	8007eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	33b0      	adds	r3, #176	; 0xb0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	88d2      	ldrh	r2, [r2, #6]
 8007ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	2b07      	cmp	r3, #7
 8007ed8:	bf28      	it	cs
 8007eda:	2307      	movcs	r3, #7
 8007edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	89fa      	ldrh	r2, [r7, #14]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fdb3 	bl	8009a50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007eea:	e090      	b.n	800800e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785a      	ldrb	r2, [r3, #1]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b3f      	cmp	r3, #63	; 0x3f
 8007efc:	d803      	bhi.n	8007f06 <USBD_CDC_Setup+0xa6>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	e000      	b.n	8007f08 <USBD_CDC_Setup+0xa8>
 8007f06:	2240      	movs	r2, #64	; 0x40
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f0e:	6939      	ldr	r1, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f16:	461a      	mov	r2, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fdc5 	bl	8009aa8 <USBD_CtlPrepareRx>
      break;
 8007f1e:	e076      	b.n	800800e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	33b0      	adds	r3, #176	; 0xb0
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7850      	ldrb	r0, [r2, #1]
 8007f36:	2200      	movs	r2, #0
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	4798      	blx	r3
      break;
 8007f3c:	e067      	b.n	800800e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b0b      	cmp	r3, #11
 8007f44:	d851      	bhi.n	8007fea <USBD_CDC_Setup+0x18a>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <USBD_CDC_Setup+0xec>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007ff9 	.word	0x08007ff9
 8007f54:	08007feb 	.word	0x08007feb
 8007f58:	08007feb 	.word	0x08007feb
 8007f5c:	08007feb 	.word	0x08007feb
 8007f60:	08007feb 	.word	0x08007feb
 8007f64:	08007feb 	.word	0x08007feb
 8007f68:	08007feb 	.word	0x08007feb
 8007f6c:	08007feb 	.word	0x08007feb
 8007f70:	08007feb 	.word	0x08007feb
 8007f74:	08007fa7 	.word	0x08007fa7
 8007f78:	08007fd1 	.word	0x08007fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d107      	bne.n	8007f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f88:	f107 030a 	add.w	r3, r7, #10
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fd5d 	bl	8009a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f96:	e032      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fce7 	bl	800996e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fa4:	e02b      	b.n	8007ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d107      	bne.n	8007fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fb2:	f107 030d 	add.w	r3, r7, #13
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fd48 	bl	8009a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fc0:	e01d      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fcd2 	bl	800996e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fce:	e016      	b.n	8007ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d00f      	beq.n	8007ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fcc5 	bl	800996e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fe8:	e008      	b.n	8007ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fcbe 	bl	800996e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff6:	e002      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
          break;
 8007ff8:	bf00      	nop
 8007ffa:	e008      	b.n	800800e <USBD_CDC_Setup+0x1ae>
          break;
 8007ffc:	bf00      	nop
      }
      break;
 8007ffe:	e006      	b.n	800800e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fcb3 	bl	800996e <USBD_CtlError>
      ret = USBD_FAIL;
 8008008:	2303      	movs	r3, #3
 800800a:	75fb      	strb	r3, [r7, #23]
      break;
 800800c:	bf00      	nop
  }

  return (uint8_t)ret;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800802a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	32b0      	adds	r2, #176	; 0xb0
 8008036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	e065      	b.n	800810e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	32b0      	adds	r2, #176	; 0xb0
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3318      	adds	r3, #24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02f      	beq.n	80080cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3318      	adds	r3, #24
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	f003 010f 	and.w	r1, r3, #15
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	460b      	mov	r3, r1
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	440b      	add	r3, r1
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4403      	add	r3, r0
 8008094:	3344      	adds	r3, #68	; 0x44
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	fbb2 f1f3 	udiv	r1, r2, r3
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	f003 020f 	and.w	r2, r3, #15
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	3318      	adds	r3, #24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080be:	78f9      	ldrb	r1, [r7, #3]
 80080c0:	2300      	movs	r3, #0
 80080c2:	2200      	movs	r2, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f002 faaf 	bl	800a628 <USBD_LL_Transmit>
 80080ca:	e01f      	b.n	800810c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	; 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d010      	beq.n	800810c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	33b0      	adds	r3, #176	; 0xb0
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	32b0      	adds	r2, #176	; 0xb0
 800812c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e01a      	b.n	800817e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 fadb 	bl	800a708 <USBD_LL_GetRxDataSize>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	33b0      	adds	r3, #176	; 0xb0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008178:	4611      	mov	r1, r2
 800817a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	32b0      	adds	r2, #176	; 0xb0
 8008198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e025      	b.n	80081f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	33b0      	adds	r3, #176	; 0xb0
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01a      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x6c>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081c2:	2bff      	cmp	r3, #255	; 0xff
 80081c4:	d015      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	33b0      	adds	r3, #176	; 0xb0
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80081de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081e6:	b292      	uxth	r2, r2
 80081e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008204:	2182      	movs	r1, #130	; 0x82
 8008206:	4818      	ldr	r0, [pc, #96]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008208:	f000 fd4f 	bl	8008caa <USBD_GetEpDesc>
 800820c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800820e:	2101      	movs	r1, #1
 8008210:	4815      	ldr	r0, [pc, #84]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008212:	f000 fd4a 	bl	8008caa <USBD_GetEpDesc>
 8008216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008218:	2181      	movs	r1, #129	; 0x81
 800821a:	4813      	ldr	r0, [pc, #76]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800821c:	f000 fd45 	bl	8008caa <USBD_GetEpDesc>
 8008220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2210      	movs	r2, #16
 800822c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d006      	beq.n	8008242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2200      	movs	r2, #0
 8008238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823c:	711a      	strb	r2, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d006      	beq.n	8008256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2243      	movs	r2, #67	; 0x43
 800825a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000050 	.word	0x20000050

0800826c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008274:	2182      	movs	r1, #130	; 0x82
 8008276:	4818      	ldr	r0, [pc, #96]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008278:	f000 fd17 	bl	8008caa <USBD_GetEpDesc>
 800827c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800827e:	2101      	movs	r1, #1
 8008280:	4815      	ldr	r0, [pc, #84]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008282:	f000 fd12 	bl	8008caa <USBD_GetEpDesc>
 8008286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	4813      	ldr	r0, [pc, #76]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800828c:	f000 fd0d 	bl	8008caa <USBD_GetEpDesc>
 8008290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2210      	movs	r2, #16
 800829c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2200      	movs	r2, #0
 80082a8:	711a      	strb	r2, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f042 0202 	orr.w	r2, r2, #2
 80082b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	711a      	strb	r2, [r3, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f042 0202 	orr.w	r2, r2, #2
 80082c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2243      	movs	r2, #67	; 0x43
 80082ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000050 	.word	0x20000050

080082dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082e4:	2182      	movs	r1, #130	; 0x82
 80082e6:	4818      	ldr	r0, [pc, #96]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082e8:	f000 fcdf 	bl	8008caa <USBD_GetEpDesc>
 80082ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ee:	2101      	movs	r1, #1
 80082f0:	4815      	ldr	r0, [pc, #84]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082f2:	f000 fcda 	bl	8008caa <USBD_GetEpDesc>
 80082f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082f8:	2181      	movs	r1, #129	; 0x81
 80082fa:	4813      	ldr	r0, [pc, #76]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082fc:	f000 fcd5 	bl	8008caa <USBD_GetEpDesc>
 8008300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2210      	movs	r2, #16
 800830c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2200      	movs	r2, #0
 8008318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800831c:	711a      	strb	r2, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008330:	711a      	strb	r2, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2243      	movs	r2, #67	; 0x43
 800833a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000050 	.word	0x20000050

0800834c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	220a      	movs	r2, #10
 8008358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800835a:	4b03      	ldr	r3, [pc, #12]	; (8008368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	2000000c 	.word	0x2000000c

0800836c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	e009      	b.n	8008394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	33b0      	adds	r3, #176	; 0xb0
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	32b0      	adds	r2, #176	; 0xb0
 80083b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e008      	b.n	80083d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	32b0      	adds	r2, #176	; 0xb0
 80083f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	e004      	b.n	8008412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
	...

08008420 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32b0      	adds	r2, #176	; 0xb0
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	e025      	b.n	8008492 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11f      	bne.n	8008490 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2201      	movs	r2, #1
 8008454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <USBD_CDC_TransmitPacket+0x7c>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	f003 020f 	and.w	r2, r3, #15
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4403      	add	r3, r0
 8008472:	3318      	adds	r3, #24
 8008474:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <USBD_CDC_TransmitPacket+0x7c>)
 8008478:	7819      	ldrb	r1, [r3, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f002 f8ce 	bl	800a628 <USBD_LL_Transmit>

    ret = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000093 	.word	0x20000093

080084a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	32b0      	adds	r2, #176	; 0xb0
 80084b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32b0      	adds	r2, #176	; 0xb0
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e018      	b.n	8008500 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7c1b      	ldrb	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <USBD_CDC_ReceivePacket+0x68>)
 80084d8:	7819      	ldrb	r1, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 f8d7 	bl	800a698 <USBD_LL_PrepareReceive>
 80084ea:	e008      	b.n	80084fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <USBD_CDC_ReceivePacket+0x68>)
 80084ee:	7819      	ldrb	r1, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f002 f8cd 	bl	800a698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000094 	.word	0x20000094

0800850c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	e01f      	b.n	8008564 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 fea5 	bl	800a2a8 <USBD_LL_Init>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008562:	7dfb      	ldrb	r3, [r7, #23]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e025      	b.n	80085d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32ae      	adds	r2, #174	; 0xae
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	32ae      	adds	r2, #174	; 0xae
 80085aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	f107 020e 	add.w	r2, r7, #14
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	4602      	mov	r2, r0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fead 	bl	800a340 <USBD_LL_Start>
 80085e6:	4603      	mov	r3, r0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	4611      	mov	r1, r2
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f001 f938 	bl	80098fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008698:	461a      	mov	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d01a      	beq.n	80086e4 <USBD_LL_SetupStage+0x72>
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d822      	bhi.n	80086f8 <USBD_LL_SetupStage+0x86>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <USBD_LL_SetupStage+0x4a>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d00a      	beq.n	80086d0 <USBD_LL_SetupStage+0x5e>
 80086ba:	e01d      	b.n	80086f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fb65 	bl	8008d94 <USBD_StdDevReq>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
      break;
 80086ce:	e020      	b.n	8008712 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fbcd 	bl	8008e78 <USBD_StdItfReq>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
      break;
 80086e2:	e016      	b.n	8008712 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fc2f 	bl	8008f50 <USBD_StdEPReq>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
      break;
 80086f6:	e00c      	b.n	8008712 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fec0 	bl	800a48c <USBD_LL_StallEP>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
      break;
 8008710:	bf00      	nop
  }

  return ret;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	460b      	mov	r3, r1
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d16e      	bne.n	8008812 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800873a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008742:	2b03      	cmp	r3, #3
 8008744:	f040 8098 	bne.w	8008878 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d913      	bls.n	800877c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	1ad2      	subs	r2, r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	4293      	cmp	r3, r2
 800876c:	bf28      	it	cs
 800876e:	4613      	movcs	r3, r2
 8008770:	461a      	mov	r2, r3
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 f9b4 	bl	8009ae2 <USBD_CtlContinueRx>
 800877a:	e07d      	b.n	8008878 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2b02      	cmp	r3, #2
 8008788:	d014      	beq.n	80087b4 <USBD_LL_DataOutStage+0x98>
 800878a:	2b02      	cmp	r3, #2
 800878c:	d81d      	bhi.n	80087ca <USBD_LL_DataOutStage+0xae>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <USBD_LL_DataOutStage+0x7c>
 8008792:	2b01      	cmp	r3, #1
 8008794:	d003      	beq.n	800879e <USBD_LL_DataOutStage+0x82>
 8008796:	e018      	b.n	80087ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	75bb      	strb	r3, [r7, #22]
            break;
 800879c:	e018      	b.n	80087d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fa64 	bl	8008c76 <USBD_CoreFindIF>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75bb      	strb	r3, [r7, #22]
            break;
 80087b2:	e00d      	b.n	80087d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fa66 	bl	8008c90 <USBD_CoreFindEP>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75bb      	strb	r3, [r7, #22]
            break;
 80087c8:	e002      	b.n	80087d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75bb      	strb	r3, [r7, #22]
            break;
 80087ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087d0:	7dbb      	ldrb	r3, [r7, #22]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d119      	bne.n	800880a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d113      	bne.n	800880a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087e2:	7dba      	ldrb	r2, [r7, #22]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	32ae      	adds	r2, #174	; 0xae
 80087e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087f2:	7dba      	ldrb	r2, [r7, #22]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087fa:	7dba      	ldrb	r2, [r7, #22]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	32ae      	adds	r2, #174	; 0xae
 8008800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 f97a 	bl	8009b04 <USBD_CtlSendStatus>
 8008810:	e032      	b.n	8008878 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008812:	7afb      	ldrb	r3, [r7, #11]
 8008814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008818:	b2db      	uxtb	r3, r3
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fa37 	bl	8008c90 <USBD_CoreFindEP>
 8008822:	4603      	mov	r3, r0
 8008824:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008826:	7dbb      	ldrb	r3, [r7, #22]
 8008828:	2bff      	cmp	r3, #255	; 0xff
 800882a:	d025      	beq.n	8008878 <USBD_LL_DataOutStage+0x15c>
 800882c:	7dbb      	ldrb	r3, [r7, #22]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d122      	bne.n	8008878 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d117      	bne.n	800886e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800883e:	7dba      	ldrb	r2, [r7, #22]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	32ae      	adds	r2, #174	; 0xae
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00f      	beq.n	800886e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800884e:	7dba      	ldrb	r2, [r7, #22]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008856:	7dba      	ldrb	r2, [r7, #22]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	32ae      	adds	r2, #174	; 0xae
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	7afa      	ldrb	r2, [r7, #11]
 8008864:	4611      	mov	r1, r2
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	4798      	blx	r3
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	e000      	b.n	800887a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b086      	sub	sp, #24
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	460b      	mov	r3, r1
 800888c:	607a      	str	r2, [r7, #4]
 800888e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d16f      	bne.n	8008976 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3314      	adds	r3, #20
 800889a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d15a      	bne.n	800895c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d914      	bls.n	80088dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	1ad2      	subs	r2, r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f001 f8dc 	bl	8009a86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ce:	2300      	movs	r3, #0
 80088d0:	2200      	movs	r2, #0
 80088d2:	2100      	movs	r1, #0
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fedf 	bl	800a698 <USBD_LL_PrepareReceive>
 80088da:	e03f      	b.n	800895c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d11c      	bne.n	8008922 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d316      	bcc.n	8008922 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088fe:	429a      	cmp	r2, r3
 8008900:	d20f      	bcs.n	8008922 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f001 f8bd 	bl	8009a86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f001 febc 	bl	800a698 <USBD_LL_PrepareReceive>
 8008920:	e01c      	b.n	800895c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d10f      	bne.n	800894e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800894e:	2180      	movs	r1, #128	; 0x80
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f001 fd9b 	bl	800a48c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f001 f8e7 	bl	8009b2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03a      	beq.n	80089dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff fe42 	bl	80085f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008974:	e032      	b.n	80089dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008976:	7afb      	ldrb	r3, [r7, #11]
 8008978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800897c:	b2db      	uxtb	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f985 	bl	8008c90 <USBD_CoreFindEP>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2bff      	cmp	r3, #255	; 0xff
 800898e:	d025      	beq.n	80089dc <USBD_LL_DataInStage+0x15a>
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d122      	bne.n	80089dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d11c      	bne.n	80089dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089a2:	7dfa      	ldrb	r2, [r7, #23]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	32ae      	adds	r2, #174	; 0xae
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d014      	beq.n	80089dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089b2:	7dfa      	ldrb	r2, [r7, #23]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089ba:	7dfa      	ldrb	r2, [r7, #23]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	32ae      	adds	r2, #174	; 0xae
 80089c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	7afa      	ldrb	r2, [r7, #11]
 80089c8:	4611      	mov	r1, r2
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	4798      	blx	r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089d2:	7dbb      	ldrb	r3, [r7, #22]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089d8:	7dbb      	ldrb	r3, [r7, #22]
 80089da:	e000      	b.n	80089de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d014      	beq.n	8008a4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00e      	beq.n	8008a4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6852      	ldr	r2, [r2, #4]
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a4c:	2340      	movs	r3, #64	; 0x40
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 fca6 	bl	800a3a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2240      	movs	r2, #64	; 0x40
 8008a64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2180      	movs	r1, #128	; 0x80
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fc98 	bl	800a3a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2240      	movs	r2, #64	; 0x40
 8008a7e:	621a      	str	r2, [r3, #32]

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d006      	beq.n	8008acc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d106      	bne.n	8008b04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d110      	bne.n	8008b48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	32ae      	adds	r2, #174	; 0xae
 8008b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e01c      	b.n	8008bae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d115      	bne.n	8008bac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32ae      	adds	r2, #174	; 0xae
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32ae      	adds	r2, #174	; 0xae
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	32ae      	adds	r2, #174	; 0xae
 8008bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e01c      	b.n	8008c12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d115      	bne.n	8008c10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32ae      	adds	r2, #174	; 0xae
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	32ae      	adds	r2, #174	; 0xae
 8008c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00e      	beq.n	8008c6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6852      	ldr	r2, [r2, #4]
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	885b      	ldrh	r3, [r3, #2]
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d920      	bls.n	8008d14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cda:	e013      	b.n	8008d04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008cdc:	f107 030a 	add.w	r3, r7, #10
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f000 f81b 	bl	8008d1e <USBD_GetNextDesc>
 8008ce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d108      	bne.n	8008d04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	789b      	ldrb	r3, [r3, #2]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d008      	beq.n	8008d12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	897b      	ldrh	r3, [r7, #10]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d8e5      	bhi.n	8008cdc <USBD_GetEpDesc+0x32>
 8008d10:	e000      	b.n	8008d14 <USBD_GetEpDesc+0x6a>
          break;
 8008d12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d14:	693b      	ldr	r3, [r7, #16]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	881a      	ldrh	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d76:	8a3b      	ldrh	r3, [r7, #16]
 8008d78:	021b      	lsls	r3, r3, #8
 8008d7a:	b21a      	sxth	r2, r3
 8008d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	b21b      	sxth	r3, r3
 8008d84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d86:	89fb      	ldrh	r3, [r7, #14]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	d005      	beq.n	8008dba <USBD_StdDevReq+0x26>
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d857      	bhi.n	8008e62 <USBD_StdDevReq+0xce>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <USBD_StdDevReq+0x42>
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d153      	bne.n	8008e62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	32ae      	adds	r2, #174	; 0xae
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd4:	e04a      	b.n	8008e6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d83b      	bhi.n	8008e56 <USBD_StdDevReq+0xc2>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_StdDevReq+0x50>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008e4d 	.word	0x08008e4d
 8008dec:	08008e57 	.word	0x08008e57
 8008df0:	08008e43 	.word	0x08008e43
 8008df4:	08008e57 	.word	0x08008e57
 8008df8:	08008e17 	.word	0x08008e17
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e57 	.word	0x08008e57
 8008e04:	08008e2f 	.word	0x08008e2f
 8008e08:	08008e21 	.word	0x08008e21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa3c 	bl	800928c <USBD_GetDescriptor>
          break;
 8008e14:	e024      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fbcb 	bl	80095b4 <USBD_SetAddress>
          break;
 8008e1e:	e01f      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fc0a 	bl	800963c <USBD_SetConfig>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e2c:	e018      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fcad 	bl	8009790 <USBD_GetConfig>
          break;
 8008e36:	e013      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fcde 	bl	80097fc <USBD_GetStatus>
          break;
 8008e40:	e00e      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fd0d 	bl	8009864 <USBD_SetFeature>
          break;
 8008e4a:	e009      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fd31 	bl	80098b6 <USBD_ClrFeature>
          break;
 8008e54:	e004      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fd88 	bl	800996e <USBD_CtlError>
          break;
 8008e5e:	bf00      	nop
      }
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fd82 	bl	800996e <USBD_CtlError>
      break;
 8008e6a:	bf00      	nop
  }

  return ret;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop

08008e78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	d005      	beq.n	8008e9e <USBD_StdItfReq+0x26>
 8008e92:	2b40      	cmp	r3, #64	; 0x40
 8008e94:	d852      	bhi.n	8008f3c <USBD_StdItfReq+0xc4>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <USBD_StdItfReq+0x26>
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d14e      	bne.n	8008f3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d840      	bhi.n	8008f2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	889b      	ldrh	r3, [r3, #4]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d836      	bhi.n	8008f24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fed9 	bl	8008c76 <USBD_CoreFindIF>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2bff      	cmp	r3, #255	; 0xff
 8008ecc:	d01d      	beq.n	8008f0a <USBD_StdItfReq+0x92>
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11a      	bne.n	8008f0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ed4:	7bba      	ldrb	r2, [r7, #14]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	; 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00f      	beq.n	8008f04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ee4:	7bba      	ldrb	r2, [r7, #14]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008eec:	7bba      	ldrb	r2, [r7, #14]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32ae      	adds	r2, #174	; 0xae
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f02:	e004      	b.n	8008f0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f04:	2303      	movs	r3, #3
 8008f06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f08:	e001      	b.n	8008f0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USBD_StdItfReq+0xc0>
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fdf1 	bl	8009b04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f22:	e009      	b.n	8008f38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fd21 	bl	800996e <USBD_CtlError>
          break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fd1c 	bl	800996e <USBD_CtlError>
          break;
 8008f36:	e000      	b.n	8008f3a <USBD_StdItfReq+0xc2>
          break;
 8008f38:	bf00      	nop
      }
      break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fd15 	bl	800996e <USBD_CtlError>
      break;
 8008f44:	bf00      	nop
  }

  return ret;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d007      	beq.n	8008f80 <USBD_StdEPReq+0x30>
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	f200 817f 	bhi.w	8009274 <USBD_StdEPReq+0x324>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d02a      	beq.n	8008fd0 <USBD_StdEPReq+0x80>
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	f040 817a 	bne.w	8009274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fe83 	bl	8008c90 <USBD_CoreFindEP>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f8e:	7b7b      	ldrb	r3, [r7, #13]
 8008f90:	2bff      	cmp	r3, #255	; 0xff
 8008f92:	f000 8174 	beq.w	800927e <USBD_StdEPReq+0x32e>
 8008f96:	7b7b      	ldrb	r3, [r7, #13]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 8170 	bne.w	800927e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f9e:	7b7a      	ldrb	r2, [r7, #13]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fa6:	7b7a      	ldrb	r2, [r7, #13]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32ae      	adds	r2, #174	; 0xae
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 8163 	beq.w	800927e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fb8:	7b7a      	ldrb	r2, [r7, #13]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32ae      	adds	r2, #174	; 0xae
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fce:	e156      	b.n	800927e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d008      	beq.n	8008fea <USBD_StdEPReq+0x9a>
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	f300 8145 	bgt.w	8009268 <USBD_StdEPReq+0x318>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 809b 	beq.w	800911a <USBD_StdEPReq+0x1ca>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d03c      	beq.n	8009062 <USBD_StdEPReq+0x112>
 8008fe8:	e13e      	b.n	8009268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d002      	beq.n	8008ffc <USBD_StdEPReq+0xac>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d016      	beq.n	8009028 <USBD_StdEPReq+0xd8>
 8008ffa:	e02c      	b.n	8009056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <USBD_StdEPReq+0xce>
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b80      	cmp	r3, #128	; 0x80
 8009006:	d00a      	beq.n	800901e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 fa3d 	bl	800a48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fa39 	bl	800a48c <USBD_LL_StallEP>
 800901a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800901c:	e020      	b.n	8009060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fca4 	bl	800996e <USBD_CtlError>
              break;
 8009026:	e01b      	b.n	8009060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10e      	bne.n	800904e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <USBD_StdEPReq+0xfe>
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	d008      	beq.n	800904e <USBD_StdEPReq+0xfe>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	88db      	ldrh	r3, [r3, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fa1f 	bl	800a48c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fd58 	bl	8009b04 <USBD_CtlSendStatus>

              break;
 8009054:	e004      	b.n	8009060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc88 	bl	800996e <USBD_CtlError>
              break;
 800905e:	bf00      	nop
          }
          break;
 8009060:	e107      	b.n	8009272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0x124>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d016      	beq.n	80090a0 <USBD_StdEPReq+0x150>
 8009072:	e04b      	b.n	800910c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <USBD_StdEPReq+0x146>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d00a      	beq.n	8009096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 fa01 	bl	800a48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f9fd 	bl	800a48c <USBD_LL_StallEP>
 8009092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009094:	e040      	b.n	8009118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc68 	bl	800996e <USBD_CtlError>
              break;
 800909e:	e03b      	b.n	8009118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d136      	bne.n	8009116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fa1e 	bl	800a4f8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fd21 	bl	8009b04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fde2 	bl	8008c90 <USBD_CoreFindEP>
 80090cc:	4603      	mov	r3, r0
 80090ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090d0:	7b7b      	ldrb	r3, [r7, #13]
 80090d2:	2bff      	cmp	r3, #255	; 0xff
 80090d4:	d01f      	beq.n	8009116 <USBD_StdEPReq+0x1c6>
 80090d6:	7b7b      	ldrb	r3, [r7, #13]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11c      	bne.n	8009116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090dc:	7b7a      	ldrb	r2, [r7, #13]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090e4:	7b7a      	ldrb	r2, [r7, #13]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32ae      	adds	r2, #174	; 0xae
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090f4:	7b7a      	ldrb	r2, [r7, #13]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32ae      	adds	r2, #174	; 0xae
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800910a:	e004      	b.n	8009116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fc2d 	bl	800996e <USBD_CtlError>
              break;
 8009114:	e000      	b.n	8009118 <USBD_StdEPReq+0x1c8>
              break;
 8009116:	bf00      	nop
          }
          break;
 8009118:	e0ab      	b.n	8009272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d002      	beq.n	800912c <USBD_StdEPReq+0x1dc>
 8009126:	2b03      	cmp	r3, #3
 8009128:	d032      	beq.n	8009190 <USBD_StdEPReq+0x240>
 800912a:	e097      	b.n	800925c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d007      	beq.n	8009142 <USBD_StdEPReq+0x1f2>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d004      	beq.n	8009142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fc17 	bl	800996e <USBD_CtlError>
                break;
 8009140:	e091      	b.n	8009266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da0b      	bge.n	8009162 <USBD_StdEPReq+0x212>
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	3310      	adds	r3, #16
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	3304      	adds	r3, #4
 8009160:	e00b      	b.n	800917a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2202      	movs	r2, #2
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc61 	bl	8009a50 <USBD_CtlSendData>
              break;
 800918e:	e06a      	b.n	8009266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da11      	bge.n	80091bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 020f 	and.w	r2, r3, #15
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	3324      	adds	r3, #36	; 0x24
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d117      	bne.n	80091e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fbda 	bl	800996e <USBD_CtlError>
                  break;
 80091ba:	e054      	b.n	8009266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	f003 020f 	and.w	r2, r3, #15
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fbc7 	bl	800996e <USBD_CtlError>
                  break;
 80091e0:	e041      	b.n	8009266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da0b      	bge.n	8009202 <USBD_StdEPReq+0x2b2>
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	3310      	adds	r3, #16
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	3304      	adds	r3, #4
 8009200:	e00b      	b.n	800921a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	3304      	adds	r3, #4
 800921a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <USBD_StdEPReq+0x2d8>
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b80      	cmp	r3, #128	; 0x80
 8009226:	d103      	bne.n	8009230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e00e      	b.n	800924e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 f995 	bl	800a564 <USBD_LL_IsStallEP>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e002      	b.n	800924e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2202      	movs	r2, #2
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fbfb 	bl	8009a50 <USBD_CtlSendData>
              break;
 800925a:	e004      	b.n	8009266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb85 	bl	800996e <USBD_CtlError>
              break;
 8009264:	bf00      	nop
          }
          break;
 8009266:	e004      	b.n	8009272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fb7f 	bl	800996e <USBD_CtlError>
          break;
 8009270:	bf00      	nop
      }
      break;
 8009272:	e005      	b.n	8009280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fb79 	bl	800996e <USBD_CtlError>
      break;
 800927c:	e000      	b.n	8009280 <USBD_StdEPReq+0x330>
      break;
 800927e:	bf00      	nop
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	2b0e      	cmp	r3, #14
 80092ae:	f200 8152 	bhi.w	8009556 <USBD_GetDescriptor+0x2ca>
 80092b2:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBD_GetDescriptor+0x2c>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	08009329 	.word	0x08009329
 80092bc:	08009341 	.word	0x08009341
 80092c0:	08009381 	.word	0x08009381
 80092c4:	08009557 	.word	0x08009557
 80092c8:	08009557 	.word	0x08009557
 80092cc:	080094f7 	.word	0x080094f7
 80092d0:	08009523 	.word	0x08009523
 80092d4:	08009557 	.word	0x08009557
 80092d8:	08009557 	.word	0x08009557
 80092dc:	08009557 	.word	0x08009557
 80092e0:	08009557 	.word	0x08009557
 80092e4:	08009557 	.word	0x08009557
 80092e8:	08009557 	.word	0x08009557
 80092ec:	08009557 	.word	0x08009557
 80092f0:	080092f5 	.word	0x080092f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009316:	e126      	b.n	8009566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fb27 	bl	800996e <USBD_CtlError>
        err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
      break;
 8009326:	e11e      	b.n	8009566 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7c12      	ldrb	r2, [r2, #16]
 8009334:	f107 0108 	add.w	r1, r7, #8
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
 800933c:	60f8      	str	r0, [r7, #12]
      break;
 800933e:	e112      	b.n	8009566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7c1b      	ldrb	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10d      	bne.n	8009364 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	f107 0208 	add.w	r2, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	2202      	movs	r2, #2
 8009360:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009362:	e100      	b.n	8009566 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	f107 0208 	add.w	r2, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
      break;
 800937e:	e0f2      	b.n	8009566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b05      	cmp	r3, #5
 8009388:	f200 80ac 	bhi.w	80094e4 <USBD_GetDescriptor+0x258>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <USBD_GetDescriptor+0x108>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093ad 	.word	0x080093ad
 8009398:	080093e1 	.word	0x080093e1
 800939c:	08009415 	.word	0x08009415
 80093a0:	08009449 	.word	0x08009449
 80093a4:	0800947d 	.word	0x0800947d
 80093a8:	080094b1 	.word	0x080094b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	7c12      	ldrb	r2, [r2, #16]
 80093c4:	f107 0108 	add.w	r1, r7, #8
 80093c8:	4610      	mov	r0, r2
 80093ca:	4798      	blx	r3
 80093cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ce:	e091      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 facb 	bl	800996e <USBD_CtlError>
            err++;
 80093d8:	7afb      	ldrb	r3, [r7, #11]
 80093da:	3301      	adds	r3, #1
 80093dc:	72fb      	strb	r3, [r7, #11]
          break;
 80093de:	e089      	b.n	80094f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	f107 0108 	add.w	r1, r7, #8
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009402:	e077      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fab1 	bl	800996e <USBD_CtlError>
            err++;
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	3301      	adds	r3, #1
 8009410:	72fb      	strb	r3, [r7, #11]
          break;
 8009412:	e06f      	b.n	80094f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	7c12      	ldrb	r2, [r2, #16]
 800942c:	f107 0108 	add.w	r1, r7, #8
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009436:	e05d      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa97 	bl	800996e <USBD_CtlError>
            err++;
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	3301      	adds	r3, #1
 8009444:	72fb      	strb	r3, [r7, #11]
          break;
 8009446:	e055      	b.n	80094f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7c12      	ldrb	r2, [r2, #16]
 8009460:	f107 0108 	add.w	r1, r7, #8
 8009464:	4610      	mov	r0, r2
 8009466:	4798      	blx	r3
 8009468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946a:	e043      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fa7d 	bl	800996e <USBD_CtlError>
            err++;
 8009474:	7afb      	ldrb	r3, [r7, #11]
 8009476:	3301      	adds	r3, #1
 8009478:	72fb      	strb	r3, [r7, #11]
          break;
 800947a:	e03b      	b.n	80094f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7c12      	ldrb	r2, [r2, #16]
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949e:	e029      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa63 	bl	800996e <USBD_CtlError>
            err++;
 80094a8:	7afb      	ldrb	r3, [r7, #11]
 80094aa:	3301      	adds	r3, #1
 80094ac:	72fb      	strb	r3, [r7, #11]
          break;
 80094ae:	e021      	b.n	80094f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e00f      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa49 	bl	800996e <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e007      	b.n	80094f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa41 	bl	800996e <USBD_CtlError>
          err++;
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	3301      	adds	r3, #1
 80094f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094f2:	bf00      	nop
      }
      break;
 80094f4:	e037      	b.n	8009566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7c1b      	ldrb	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	f107 0208 	add.w	r2, r7, #8
 800950a:	4610      	mov	r0, r2
 800950c:	4798      	blx	r3
 800950e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009510:	e029      	b.n	8009566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fa2a 	bl	800996e <USBD_CtlError>
        err++;
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	3301      	adds	r3, #1
 800951e:	72fb      	strb	r3, [r7, #11]
      break;
 8009520:	e021      	b.n	8009566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7c1b      	ldrb	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10d      	bne.n	8009546 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f107 0208 	add.w	r2, r7, #8
 8009536:	4610      	mov	r0, r2
 8009538:	4798      	blx	r3
 800953a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	2207      	movs	r2, #7
 8009542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009544:	e00f      	b.n	8009566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fa10 	bl	800996e <USBD_CtlError>
        err++;
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	3301      	adds	r3, #1
 8009552:	72fb      	strb	r3, [r7, #11]
      break;
 8009554:	e007      	b.n	8009566 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fa08 	bl	800996e <USBD_CtlError>
      err++;
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	3301      	adds	r3, #1
 8009562:	72fb      	strb	r3, [r7, #11]
      break;
 8009564:	bf00      	nop
  }

  if (err != 0U)
 8009566:	7afb      	ldrb	r3, [r7, #11]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11e      	bne.n	80095aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	88db      	ldrh	r3, [r3, #6]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d016      	beq.n	80095a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009574:	893b      	ldrh	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	88da      	ldrh	r2, [r3, #6]
 800957e:	893b      	ldrh	r3, [r7, #8]
 8009580:	4293      	cmp	r3, r2
 8009582:	bf28      	it	cs
 8009584:	4613      	movcs	r3, r2
 8009586:	b29b      	uxth	r3, r3
 8009588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800958a:	893b      	ldrh	r3, [r7, #8]
 800958c:	461a      	mov	r2, r3
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa5d 	bl	8009a50 <USBD_CtlSendData>
 8009596:	e009      	b.n	80095ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9e7 	bl	800996e <USBD_CtlError>
 80095a0:	e004      	b.n	80095ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 faae 	bl	8009b04 <USBD_CtlSendStatus>
 80095a8:	e000      	b.n	80095ac <USBD_GetDescriptor+0x320>
    return;
 80095aa:	bf00      	nop
  }
}
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop

080095b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	889b      	ldrh	r3, [r3, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d131      	bne.n	800962a <USBD_SetAddress+0x76>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	88db      	ldrh	r3, [r3, #6]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d12d      	bne.n	800962a <USBD_SetAddress+0x76>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	2b7f      	cmp	r3, #127	; 0x7f
 80095d4:	d829      	bhi.n	800962a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d104      	bne.n	80095f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f9bc 	bl	800996e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f6:	e01d      	b.n	8009634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7bfa      	ldrb	r2, [r7, #15]
 80095fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 ffd9 	bl	800a5bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa7a 	bl	8009b04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961e:	e009      	b.n	8009634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009628:	e004      	b.n	8009634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f99e 	bl	800996e <USBD_CtlError>
  }
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	885b      	ldrh	r3, [r3, #2]
 800964e:	b2da      	uxtb	r2, r3
 8009650:	4b4e      	ldr	r3, [pc, #312]	; (800978c <USBD_SetConfig+0x150>)
 8009652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009654:	4b4d      	ldr	r3, [pc, #308]	; (800978c <USBD_SetConfig+0x150>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d905      	bls.n	8009668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f985 	bl	800996e <USBD_CtlError>
    return USBD_FAIL;
 8009664:	2303      	movs	r3, #3
 8009666:	e08c      	b.n	8009782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d002      	beq.n	800967a <USBD_SetConfig+0x3e>
 8009674:	2b03      	cmp	r3, #3
 8009676:	d029      	beq.n	80096cc <USBD_SetConfig+0x90>
 8009678:	e075      	b.n	8009766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800967a:	4b44      	ldr	r3, [pc, #272]	; (800978c <USBD_SetConfig+0x150>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d020      	beq.n	80096c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009682:	4b42      	ldr	r3, [pc, #264]	; (800978c <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800968c:	4b3f      	ldr	r3, [pc, #252]	; (800978c <USBD_SetConfig+0x150>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe ffb7 	bl	8008606 <USBD_SetClassConfig>
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d008      	beq.n	80096b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f962 	bl	800996e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2202      	movs	r2, #2
 80096ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096b2:	e065      	b.n	8009780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fa25 	bl	8009b04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2203      	movs	r2, #3
 80096be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096c2:	e05d      	b.n	8009780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa1d 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 80096ca:	e059      	b.n	8009780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096cc:	4b2f      	ldr	r3, [pc, #188]	; (800978c <USBD_SetConfig+0x150>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d112      	bne.n	80096fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096dc:	4b2b      	ldr	r3, [pc, #172]	; (800978c <USBD_SetConfig+0x150>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096e6:	4b29      	ldr	r3, [pc, #164]	; (800978c <USBD_SetConfig+0x150>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7fe ffa6 	bl	800863e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa06 	bl	8009b04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096f8:	e042      	b.n	8009780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <USBD_SetConfig+0x150>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d02a      	beq.n	800975e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fe ff94 	bl	800863e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <USBD_SetConfig+0x150>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009720:	4b1a      	ldr	r3, [pc, #104]	; (800978c <USBD_SetConfig+0x150>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fe ff6d 	bl	8008606 <USBD_SetClassConfig>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00f      	beq.n	8009756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f918 	bl	800996e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fe ff79 	bl	800863e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009754:	e014      	b.n	8009780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f9d4 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 800975c:	e010      	b.n	8009780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f9d0 	bl	8009b04 <USBD_CtlSendStatus>
      break;
 8009764:	e00c      	b.n	8009780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f900 	bl	800996e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <USBD_SetConfig+0x150>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7fe ff62 	bl	800863e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800977a:	2303      	movs	r3, #3
 800977c:	73fb      	strb	r3, [r7, #15]
      break;
 800977e:	bf00      	nop
  }

  return ret;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000444 	.word	0x20000444

08009790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	88db      	ldrh	r3, [r3, #6]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d004      	beq.n	80097ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f8e2 	bl	800996e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097aa:	e023      	b.n	80097f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	dc02      	bgt.n	80097be <USBD_GetConfig+0x2e>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dc03      	bgt.n	80097c4 <USBD_GetConfig+0x34>
 80097bc:	e015      	b.n	80097ea <USBD_GetConfig+0x5a>
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d00b      	beq.n	80097da <USBD_GetConfig+0x4a>
 80097c2:	e012      	b.n	80097ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3308      	adds	r3, #8
 80097ce:	2201      	movs	r2, #1
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f93c 	bl	8009a50 <USBD_CtlSendData>
        break;
 80097d8:	e00c      	b.n	80097f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3304      	adds	r3, #4
 80097de:	2201      	movs	r2, #1
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f934 	bl	8009a50 <USBD_CtlSendData>
        break;
 80097e8:	e004      	b.n	80097f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f8be 	bl	800996e <USBD_CtlError>
        break;
 80097f2:	bf00      	nop
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	2b02      	cmp	r3, #2
 8009812:	d81e      	bhi.n	8009852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	88db      	ldrh	r3, [r3, #6]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d004      	beq.n	8009826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f8a5 	bl	800996e <USBD_CtlError>
        break;
 8009824:	e01a      	b.n	800985c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f043 0202 	orr.w	r2, r3, #2
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	330c      	adds	r3, #12
 8009846:	2202      	movs	r2, #2
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f900 	bl	8009a50 <USBD_CtlSendData>
      break;
 8009850:	e004      	b.n	800985c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f88a 	bl	800996e <USBD_CtlError>
      break;
 800985a:	bf00      	nop
  }
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d107      	bne.n	8009886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f940 	bl	8009b04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009884:	e013      	b.n	80098ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	885b      	ldrh	r3, [r3, #2]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d10b      	bne.n	80098a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	889b      	ldrh	r3, [r3, #4]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b29b      	uxth	r3, r3
 8009896:	b2da      	uxtb	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f930 	bl	8009b04 <USBD_CtlSendStatus>
}
 80098a4:	e003      	b.n	80098ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f860 	bl	800996e <USBD_CtlError>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d80b      	bhi.n	80098e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	885b      	ldrh	r3, [r3, #2]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10c      	bne.n	80098f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f910 	bl	8009b04 <USBD_CtlSendStatus>
      }
      break;
 80098e4:	e004      	b.n	80098f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f840 	bl	800996e <USBD_CtlError>
      break;
 80098ee:	e000      	b.n	80098f2 <USBD_ClrFeature+0x3c>
      break;
 80098f0:	bf00      	nop
  }
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	781a      	ldrb	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3301      	adds	r3, #1
 8009914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fa17 	bl	8008d58 <SWAPBYTE>
 800992a:	4603      	mov	r3, r0
 800992c:	461a      	mov	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff fa0a 	bl	8008d58 <SWAPBYTE>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff f9fd 	bl	8008d58 <SWAPBYTE>
 800995e:	4603      	mov	r3, r0
 8009960:	461a      	mov	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	80da      	strh	r2, [r3, #6]
}
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009978:	2180      	movs	r1, #128	; 0x80
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fd86 	bl	800a48c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009980:	2100      	movs	r1, #0
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fd82 	bl	800a48c <USBD_LL_StallEP>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d036      	beq.n	8009a14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f000 f836 	bl	8009a1c <USBD_GetLen>
 80099b0:	4603      	mov	r3, r0
 80099b2:	3301      	adds	r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	4413      	add	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	3301      	adds	r3, #1
 80099ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4413      	add	r3, r2
 80099d6:	2203      	movs	r2, #3
 80099d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	3301      	adds	r3, #1
 80099de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099e0:	e013      	b.n	8009a0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4413      	add	r3, r2
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3301      	adds	r3, #1
 80099f2:	613b      	str	r3, [r7, #16]
    idx++;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	3301      	adds	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	4413      	add	r3, r2
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	3301      	adds	r3, #1
 8009a08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e7      	bne.n	80099e2 <USBD_GetString+0x52>
 8009a12:	e000      	b.n	8009a16 <USBD_GetString+0x86>
    return;
 8009a14:	bf00      	nop
  }
}
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a2c:	e005      	b.n	8009a3a <USBD_GetLen+0x1e>
  {
    len++;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	3301      	adds	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f5      	bne.n	8009a2e <USBD_GetLen+0x12>
  }

  return len;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	2100      	movs	r1, #0
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fdd6 	bl	800a628 <USBD_LL_Transmit>

  return USBD_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	2100      	movs	r1, #0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fdc5 	bl	800a628 <USBD_LL_Transmit>

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fde0 	bl	800a698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	2100      	movs	r1, #0
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fdcf 	bl	800a698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b14:	2300      	movs	r3, #0
 8009b16:	2200      	movs	r2, #0
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fd84 	bl	800a628 <USBD_LL_Transmit>

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2205      	movs	r2, #5
 8009b36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fda9 	bl	800a698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4912      	ldr	r1, [pc, #72]	; (8009ba0 <MX_USB_DEVICE_Init+0x50>)
 8009b58:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fe fcd7 	bl	800850c <USBD_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b64:	f7f7 fcb0 	bl	80014c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b68:	490f      	ldr	r1, [pc, #60]	; (8009ba8 <MX_USB_DEVICE_Init+0x58>)
 8009b6a:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b6c:	f7fe fcfe 	bl	800856c <USBD_RegisterClass>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b76:	f7f7 fca7 	bl	80014c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b7a:	490c      	ldr	r1, [pc, #48]	; (8009bac <MX_USB_DEVICE_Init+0x5c>)
 8009b7c:	4809      	ldr	r0, [pc, #36]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b7e:	f7fe fbf5 	bl	800836c <USBD_CDC_RegisterInterface>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b88:	f7f7 fc9e 	bl	80014c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b8c:	4805      	ldr	r0, [pc, #20]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b8e:	f7fe fd23 	bl	80085d8 <USBD_Start>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b98:	f7f7 fc96 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200000ac 	.word	0x200000ac
 8009ba4:	20000448 	.word	0x20000448
 8009ba8:	20000018 	.word	0x20000018
 8009bac:	20000098 	.word	0x20000098

08009bb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4905      	ldr	r1, [pc, #20]	; (8009bcc <CDC_Init_FS+0x1c>)
 8009bb8:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <CDC_Init_FS+0x20>)
 8009bba:	f7fe fbf1 	bl	80083a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bbe:	4905      	ldr	r1, [pc, #20]	; (8009bd4 <CDC_Init_FS+0x24>)
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <CDC_Init_FS+0x20>)
 8009bc2:	f7fe fc0f 	bl	80083e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000f24 	.word	0x20000f24
 8009bd0:	20000448 	.word	0x20000448
 8009bd4:	20000724 	.word	0x20000724

08009bd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	2b23      	cmp	r3, #35	; 0x23
 8009bfc:	d84a      	bhi.n	8009c94 <CDC_Control_FS+0xac>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <CDC_Control_FS+0x1c>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c95 	.word	0x08009c95
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c95 	.word	0x08009c95
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009c95 	.word	0x08009c95
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c95 	.word	0x08009c95
 8009c64:	08009c95 	.word	0x08009c95
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009c95 	.word	0x08009c95
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c95 	.word	0x08009c95
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c95 	.word	0x08009c95
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009c95 	.word	0x08009c95
 8009c8c:	08009c95 	.word	0x08009c95
 8009c90:	08009c95 	.word	0x08009c95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c94:	bf00      	nop
  }

  return (USBD_OK);
 8009c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <CDC_Receive_FS+0x24>)
 8009cb2:	f7fe fb97 	bl	80083e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cb6:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <CDC_Receive_FS+0x24>)
 8009cb8:	f7fe fbf2 	bl	80084a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000448 	.word	0x20000448

08009ccc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <CDC_Transmit_FS+0x48>)
 8009cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e00b      	b.n	8009d0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cf2:	887b      	ldrh	r3, [r7, #2]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4806      	ldr	r0, [pc, #24]	; (8009d14 <CDC_Transmit_FS+0x48>)
 8009cfa:	f7fe fb51 	bl	80083a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <CDC_Transmit_FS+0x48>)
 8009d00:	f7fe fb8e 	bl	8008420 <USBD_CDC_TransmitPacket>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000448 	.word	0x20000448

08009d18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
	...

08009d3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2212      	movs	r2, #18
 8009d4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	200000cc 	.word	0x200000cc

08009d60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d72:	4b03      	ldr	r3, [pc, #12]	; (8009d80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	200000ec 	.word	0x200000ec

08009d84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d105      	bne.n	8009da2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	4907      	ldr	r1, [pc, #28]	; (8009db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d9a:	4808      	ldr	r0, [pc, #32]	; (8009dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8009d9c:	f7ff fdf8 	bl	8009990 <USBD_GetString>
 8009da0:	e004      	b.n	8009dac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4904      	ldr	r1, [pc, #16]	; (8009db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009da6:	4805      	ldr	r0, [pc, #20]	; (8009dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8009da8:	f7ff fdf2 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dac:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20001724 	.word	0x20001724
 8009dbc:	0800eff4 	.word	0x0800eff4

08009dc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	4904      	ldr	r1, [pc, #16]	; (8009de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009dd0:	4804      	ldr	r0, [pc, #16]	; (8009de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009dd2:	f7ff fddd 	bl	8009990 <USBD_GetString>
  return USBD_StrDesc;
 8009dd6:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	20001724 	.word	0x20001724
 8009de4:	0800f00c 	.word	0x0800f00c

08009de8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	221a      	movs	r2, #26
 8009df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dfa:	f000 f855 	bl	8009ea8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dfe:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	200000f0 	.word	0x200000f0

08009e0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	4907      	ldr	r1, [pc, #28]	; (8009e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e22:	4808      	ldr	r0, [pc, #32]	; (8009e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e24:	f7ff fdb4 	bl	8009990 <USBD_GetString>
 8009e28:	e004      	b.n	8009e34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	4904      	ldr	r1, [pc, #16]	; (8009e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e2e:	4805      	ldr	r0, [pc, #20]	; (8009e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e30:	f7ff fdae 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e34:	4b02      	ldr	r3, [pc, #8]	; (8009e40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001724 	.word	0x20001724
 8009e44:	0800f020 	.word	0x0800f020

08009e48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4907      	ldr	r1, [pc, #28]	; (8009e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e5e:	4808      	ldr	r0, [pc, #32]	; (8009e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e60:	f7ff fd96 	bl	8009990 <USBD_GetString>
 8009e64:	e004      	b.n	8009e70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	4904      	ldr	r1, [pc, #16]	; (8009e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e6a:	4805      	ldr	r0, [pc, #20]	; (8009e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e6c:	f7ff fd90 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e70:	4b02      	ldr	r3, [pc, #8]	; (8009e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20001724 	.word	0x20001724
 8009e80:	0800f02c 	.word	0x0800f02c

08009e84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	220c      	movs	r2, #12
 8009e94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e96:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	200000e0 	.word	0x200000e0

08009ea8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <Get_SerialNum+0x44>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <Get_SerialNum+0x48>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eba:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <Get_SerialNum+0x4c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ece:	2208      	movs	r2, #8
 8009ed0:	4909      	ldr	r1, [pc, #36]	; (8009ef8 <Get_SerialNum+0x50>)
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 f814 	bl	8009f00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ed8:	2204      	movs	r2, #4
 8009eda:	4908      	ldr	r1, [pc, #32]	; (8009efc <Get_SerialNum+0x54>)
 8009edc:	68b8      	ldr	r0, [r7, #8]
 8009ede:	f000 f80f 	bl	8009f00 <IntToUnicode>
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	1fff7590 	.word	0x1fff7590
 8009ef0:	1fff7594 	.word	0x1fff7594
 8009ef4:	1fff7598 	.word	0x1fff7598
 8009ef8:	200000f2 	.word	0x200000f2
 8009efc:	20000102 	.word	0x20000102

08009f00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f12:	2300      	movs	r3, #0
 8009f14:	75fb      	strb	r3, [r7, #23]
 8009f16:	e027      	b.n	8009f68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	0f1b      	lsrs	r3, r3, #28
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	d80b      	bhi.n	8009f38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	0f1b      	lsrs	r3, r3, #28
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	440b      	add	r3, r1
 8009f30:	3230      	adds	r2, #48	; 0x30
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e00a      	b.n	8009f4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	0f1b      	lsrs	r3, r3, #28
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4619      	mov	r1, r3
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	440b      	add	r3, r1
 8009f48:	3237      	adds	r2, #55	; 0x37
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	3301      	adds	r3, #1
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	3301      	adds	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
 8009f68:	7dfa      	ldrb	r2, [r7, #23]
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d3d3      	bcc.n	8009f18 <IntToUnicode+0x18>
  }
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b0ac      	sub	sp, #176	; 0xb0
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	609a      	str	r2, [r3, #8]
 8009f94:	60da      	str	r2, [r3, #12]
 8009f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f98:	f107 0314 	add.w	r3, r7, #20
 8009f9c:	2288      	movs	r2, #136	; 0x88
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 fbcc 	bl	800b73e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fae:	d173      	bne.n	800a098 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fb4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009fb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009fc6:	2318      	movs	r3, #24
 8009fc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009fd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009fdc:	f107 0314 	add.w	r3, r7, #20
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fb f979 	bl	80052d8 <HAL_RCCEx_PeriphCLKConfig>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009fec:	f7f7 fa6c 	bl	80014c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 8009ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff4:	4a2a      	ldr	r2, [pc, #168]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ffc:	4b28      	ldr	r3, [pc, #160]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a008:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a00c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a010:	2302      	movs	r3, #2
 800a012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a016:	2300      	movs	r3, #0
 800a018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a01c:	2303      	movs	r3, #3
 800a01e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a022:	230a      	movs	r3, #10
 800a024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a02c:	4619      	mov	r1, r3
 800a02e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a032:	f7f8 f86d 	bl	8002110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a036:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03a:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a03c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a040:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a042:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a04e:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d114      	bne.n	800a084 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05e:	4a10      	ldr	r2, [pc, #64]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a064:	6593      	str	r3, [r2, #88]	; 0x58
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a072:	f7fa fa65 	bl	8004540 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a076:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07a:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <HAL_PCD_MspInit+0x120>)
 800a07c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a080:	6593      	str	r3, [r2, #88]	; 0x58
 800a082:	e001      	b.n	800a088 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a084:	f7fa fa5c 	bl	8004540 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	2043      	movs	r0, #67	; 0x43
 800a08e:	f7f8 f808 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a092:	2043      	movs	r0, #67	; 0x43
 800a094:	f7f8 f821 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a098:	bf00      	nop
 800a09a:	37b0      	adds	r7, #176	; 0xb0
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	40021000 	.word	0x40021000

0800a0a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7fe fad9 	bl	8008672 <USBD_LL_SetupStage>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	78fb      	ldrb	r3, [r7, #3]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7fe fb13 	bl	800871c <USBD_LL_DataOutStage>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	3348      	adds	r3, #72	; 0x48
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	4619      	mov	r1, r3
 800a126:	f7fe fbac 	bl	8008882 <USBD_LL_DataInStage>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe fce6 	bl	8008b12 <USBD_LL_SOF>
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d001      	beq.n	800a166 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a162:	f7f7 f9b1 	bl	80014c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a16c:	7bfa      	ldrb	r2, [r7, #15]
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe fc8a 	bl	8008a8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fc32 	bl	80089e6 <USBD_LL_Reset>
}
 800a182:	bf00      	nop
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6812      	ldr	r2, [r2, #0]
 800a1a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fc79 	bl	8008aaa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <HAL_PCD_SuspendCallback+0x48>)
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	4a03      	ldr	r2, [pc, #12]	; (800a1d4 <HAL_PCD_SuspendCallback+0x48>)
 800a1c6:	f043 0306 	orr.w	r3, r3, #6
 800a1ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	e000ed00 	.word	0xe000ed00

0800a1d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1f2:	f023 0301 	bic.w	r3, r3, #1
 800a1f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a200:	4b08      	ldr	r3, [pc, #32]	; (800a224 <HAL_PCD_ResumeCallback+0x4c>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	4a07      	ldr	r2, [pc, #28]	; (800a224 <HAL_PCD_ResumeCallback+0x4c>)
 800a206:	f023 0306 	bic.w	r3, r3, #6
 800a20a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a20c:	f000 faf6 	bl	800a7fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fc63 	bl	8008ae2 <USBD_LL_Resume>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	e000ed00 	.word	0xe000ed00

0800a228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fcb9 	bl	8008bb6 <USBD_LL_IsoOUTIncomplete>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fc75 	bl	8008b52 <USBD_LL_IsoINIncomplete>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fccb 	bl	8008c1a <USBD_LL_DevConnected>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fcc8 	bl	8008c30 <USBD_LL_DevDisconnected>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d13c      	bne.n	800a332 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a2b8:	4a20      	ldr	r2, [pc, #128]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	; (800a33c <USBD_LL_Init+0x94>)
 800a2c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2c8:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <USBD_LL_Init+0x94>)
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2d6:	4b19      	ldr	r3, [pc, #100]	; (800a33c <USBD_LL_Init+0x94>)
 800a2d8:	2202      	movs	r2, #2
 800a2da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <USBD_LL_Init+0x94>)
 800a2de:	2202      	movs	r2, #2
 800a2e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2e2:	4b16      	ldr	r3, [pc, #88]	; (800a33c <USBD_LL_Init+0x94>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2e8:	4b14      	ldr	r3, [pc, #80]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <USBD_LL_Init+0x94>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a2f4:	4b11      	ldr	r3, [pc, #68]	; (800a33c <USBD_LL_Init+0x94>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <USBD_LL_Init+0x94>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a300:	4b0e      	ldr	r3, [pc, #56]	; (800a33c <USBD_LL_Init+0x94>)
 800a302:	2200      	movs	r2, #0
 800a304:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a306:	480d      	ldr	r0, [pc, #52]	; (800a33c <USBD_LL_Init+0x94>)
 800a308:	f7f8 feff 	bl	800310a <HAL_PCD_Init>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a312:	f7f7 f8d9 	bl	80014c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a316:	2180      	movs	r1, #128	; 0x80
 800a318:	4808      	ldr	r0, [pc, #32]	; (800a33c <USBD_LL_Init+0x94>)
 800a31a:	f7fa f868 	bl	80043ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a31e:	2240      	movs	r2, #64	; 0x40
 800a320:	2100      	movs	r1, #0
 800a322:	4806      	ldr	r0, [pc, #24]	; (800a33c <USBD_LL_Init+0x94>)
 800a324:	f7fa f81c 	bl	8004360 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a328:	2280      	movs	r2, #128	; 0x80
 800a32a:	2101      	movs	r1, #1
 800a32c:	4803      	ldr	r0, [pc, #12]	; (800a33c <USBD_LL_Init+0x94>)
 800a32e:	f7fa f817 	bl	8004360 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20001924 	.word	0x20001924

0800a340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a356:	4618      	mov	r0, r3
 800a358:	f7f8 fffb 	bl	8003352 <HAL_PCD_Start>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	2b03      	cmp	r3, #3
 800a364:	d816      	bhi.n	800a394 <USBD_LL_Start+0x54>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <USBD_LL_Start+0x2c>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a37d 	.word	0x0800a37d
 800a370:	0800a383 	.word	0x0800a383
 800a374:	0800a389 	.word	0x0800a389
 800a378:	0800a38f 	.word	0x0800a38f
    case HAL_OK :
      usb_status = USBD_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
    break;
 800a380:	e00b      	b.n	800a39a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	73fb      	strb	r3, [r7, #15]
    break;
 800a386:	e008      	b.n	800a39a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]
    break;
 800a38c:	e005      	b.n	800a39a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a38e:	2303      	movs	r3, #3
 800a390:	73fb      	strb	r3, [r7, #15]
    break;
 800a392:	e002      	b.n	800a39a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	73fb      	strb	r3, [r7, #15]
    break;
 800a398:	bf00      	nop
  }
  return usb_status;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	70fb      	strb	r3, [r7, #3]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70bb      	strb	r3, [r7, #2]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3cc:	78bb      	ldrb	r3, [r7, #2]
 800a3ce:	883a      	ldrh	r2, [r7, #0]
 800a3d0:	78f9      	ldrb	r1, [r7, #3]
 800a3d2:	f7f9 fca5 	bl	8003d20 <HAL_PCD_EP_Open>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d817      	bhi.n	800a410 <USBD_LL_OpenEP+0x6c>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <USBD_LL_OpenEP+0x44>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a3f9 	.word	0x0800a3f9
 800a3ec:	0800a3ff 	.word	0x0800a3ff
 800a3f0:	0800a405 	.word	0x0800a405
 800a3f4:	0800a40b 	.word	0x0800a40b
    case HAL_OK :
      usb_status = USBD_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3fc:	e00b      	b.n	800a416 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3fe:	2303      	movs	r3, #3
 800a400:	73fb      	strb	r3, [r7, #15]
    break;
 800a402:	e008      	b.n	800a416 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a404:	2301      	movs	r3, #1
 800a406:	73fb      	strb	r3, [r7, #15]
    break;
 800a408:	e005      	b.n	800a416 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	73fb      	strb	r3, [r7, #15]
    break;
 800a40e:	e002      	b.n	800a416 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a410:	2303      	movs	r3, #3
 800a412:	73fb      	strb	r3, [r7, #15]
    break;
 800a414:	bf00      	nop
  }
  return usb_status;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a43a:	78fa      	ldrb	r2, [r7, #3]
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7f9 fcd6 	bl	8003df0 <HAL_PCD_EP_Close>
 800a444:	4603      	mov	r3, r0
 800a446:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d816      	bhi.n	800a47c <USBD_LL_CloseEP+0x5c>
 800a44e:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <USBD_LL_CloseEP+0x34>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a46b 	.word	0x0800a46b
 800a45c:	0800a471 	.word	0x0800a471
 800a460:	0800a477 	.word	0x0800a477
    case HAL_OK :
      usb_status = USBD_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]
    break;
 800a468:	e00b      	b.n	800a482 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	73fb      	strb	r3, [r7, #15]
    break;
 800a46e:	e008      	b.n	800a482 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a470:	2301      	movs	r3, #1
 800a472:	73fb      	strb	r3, [r7, #15]
    break;
 800a474:	e005      	b.n	800a482 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a476:	2303      	movs	r3, #3
 800a478:	73fb      	strb	r3, [r7, #15]
    break;
 800a47a:	e002      	b.n	800a482 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	73fb      	strb	r3, [r7, #15]
    break;
 800a480:	bf00      	nop
  }
  return usb_status;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4a6:	78fa      	ldrb	r2, [r7, #3]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f9 fd65 	bl	8003f7a <HAL_PCD_EP_SetStall>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d816      	bhi.n	800a4e8 <USBD_LL_StallEP+0x5c>
 800a4ba:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <USBD_LL_StallEP+0x34>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a4d1 	.word	0x0800a4d1
 800a4c4:	0800a4d7 	.word	0x0800a4d7
 800a4c8:	0800a4dd 	.word	0x0800a4dd
 800a4cc:	0800a4e3 	.word	0x0800a4e3
    case HAL_OK :
      usb_status = USBD_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d4:	e00b      	b.n	800a4ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4da:	e008      	b.n	800a4ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e0:	e005      	b.n	800a4ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e6:	e002      	b.n	800a4ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ec:	bf00      	nop
  }
  return usb_status;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 fd91 	bl	800403e <HAL_PCD_EP_ClrStall>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a520:	7bbb      	ldrb	r3, [r7, #14]
 800a522:	2b03      	cmp	r3, #3
 800a524:	d816      	bhi.n	800a554 <USBD_LL_ClearStallEP+0x5c>
 800a526:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <USBD_LL_ClearStallEP+0x34>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a53d 	.word	0x0800a53d
 800a530:	0800a543 	.word	0x0800a543
 800a534:	0800a549 	.word	0x0800a549
 800a538:	0800a54f 	.word	0x0800a54f
    case HAL_OK :
      usb_status = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
    break;
 800a540:	e00b      	b.n	800a55a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	73fb      	strb	r3, [r7, #15]
    break;
 800a546:	e008      	b.n	800a55a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
    break;
 800a54c:	e005      	b.n	800a55a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a54e:	2303      	movs	r3, #3
 800a550:	73fb      	strb	r3, [r7, #15]
    break;
 800a552:	e002      	b.n	800a55a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a554:	2303      	movs	r3, #3
 800a556:	73fb      	strb	r3, [r7, #15]
    break;
 800a558:	bf00      	nop
  }
  return usb_status;
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	da0b      	bge.n	800a598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a586:	68f9      	ldr	r1, [r7, #12]
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	333e      	adds	r3, #62	; 0x3e
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	e00b      	b.n	800a5b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a5ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7f9 fb7b 	bl	8003cd6 <HAL_PCD_SetAddress>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d816      	bhi.n	800a618 <USBD_LL_SetUSBAddress+0x5c>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBD_LL_SetUSBAddress+0x34>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a601 	.word	0x0800a601
 800a5f4:	0800a607 	.word	0x0800a607
 800a5f8:	0800a60d 	.word	0x0800a60d
 800a5fc:	0800a613 	.word	0x0800a613
    case HAL_OK :
      usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	e00b      	b.n	800a61e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a606:	2303      	movs	r3, #3
 800a608:	73fb      	strb	r3, [r7, #15]
    break;
 800a60a:	e008      	b.n	800a61e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	e005      	b.n	800a61e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a612:	2303      	movs	r3, #3
 800a614:	73fb      	strb	r3, [r7, #15]
    break;
 800a616:	e002      	b.n	800a61e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a618:	2303      	movs	r3, #3
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	bf00      	nop
  }
  return usb_status;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	460b      	mov	r3, r1
 800a636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a646:	7af9      	ldrb	r1, [r7, #11]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	f7f9 fc64 	bl	8003f18 <HAL_PCD_EP_Transmit>
 800a650:	4603      	mov	r3, r0
 800a652:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a654:	7dbb      	ldrb	r3, [r7, #22]
 800a656:	2b03      	cmp	r3, #3
 800a658:	d816      	bhi.n	800a688 <USBD_LL_Transmit+0x60>
 800a65a:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <USBD_LL_Transmit+0x38>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a671 	.word	0x0800a671
 800a664:	0800a677 	.word	0x0800a677
 800a668:	0800a67d 	.word	0x0800a67d
 800a66c:	0800a683 	.word	0x0800a683
    case HAL_OK :
      usb_status = USBD_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	75fb      	strb	r3, [r7, #23]
    break;
 800a674:	e00b      	b.n	800a68e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a676:	2303      	movs	r3, #3
 800a678:	75fb      	strb	r3, [r7, #23]
    break;
 800a67a:	e008      	b.n	800a68e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75fb      	strb	r3, [r7, #23]
    break;
 800a680:	e005      	b.n	800a68e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a682:	2303      	movs	r3, #3
 800a684:	75fb      	strb	r3, [r7, #23]
    break;
 800a686:	e002      	b.n	800a68e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a688:	2303      	movs	r3, #3
 800a68a:	75fb      	strb	r3, [r7, #23]
    break;
 800a68c:	bf00      	nop
  }
  return usb_status;
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	607a      	str	r2, [r7, #4]
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6b6:	7af9      	ldrb	r1, [r7, #11]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	f7f9 fbe2 	bl	8003e84 <HAL_PCD_EP_Receive>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a6c4:	7dbb      	ldrb	r3, [r7, #22]
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d816      	bhi.n	800a6f8 <USBD_LL_PrepareReceive+0x60>
 800a6ca:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <USBD_LL_PrepareReceive+0x38>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a6e1 	.word	0x0800a6e1
 800a6d4:	0800a6e7 	.word	0x0800a6e7
 800a6d8:	0800a6ed 	.word	0x0800a6ed
 800a6dc:	0800a6f3 	.word	0x0800a6f3
    case HAL_OK :
      usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	75fb      	strb	r3, [r7, #23]
    break;
 800a6e4:	e00b      	b.n	800a6fe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	75fb      	strb	r3, [r7, #23]
    break;
 800a6ea:	e008      	b.n	800a6fe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	75fb      	strb	r3, [r7, #23]
    break;
 800a6f0:	e005      	b.n	800a6fe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	75fb      	strb	r3, [r7, #23]
    break;
 800a6f6:	e002      	b.n	800a6fe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	75fb      	strb	r3, [r7, #23]
    break;
 800a6fc:	bf00      	nop
  }
  return usb_status;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7f9 fbe2 	bl	8003ee8 <HAL_PCD_EP_GetRxCount>
 800a724:	4603      	mov	r3, r0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <HAL_PCDEx_LPM_Callback+0x18>
 800a742:	2b01      	cmp	r3, #1
 800a744:	d01f      	beq.n	800a786 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a746:	e03b      	b.n	800a7c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d007      	beq.n	800a760 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a750:	f000 f854 	bl	800a7fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a754:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a75a:	f023 0306 	bic.w	r3, r3, #6
 800a75e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a772:	f023 0301 	bic.w	r3, r3, #1
 800a776:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe f9af 	bl	8008ae2 <USBD_LL_Resume>
    break;
 800a784:	e01c      	b.n	800a7c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe f980 	bl	8008aaa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d005      	beq.n	800a7be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	4a04      	ldr	r2, [pc, #16]	; (800a7c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7b8:	f043 0306 	orr.w	r3, r3, #6
 800a7bc:	6113      	str	r3, [r2, #16]
    break;
 800a7be:	bf00      	nop
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed00 	.word	0xe000ed00

0800a7cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7d4:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <USBD_static_malloc+0x18>)
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20001e30 	.word	0x20001e30

0800a7e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]

}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a800:	f7f6 fe00 	bl	8001404 <SystemClock_Config>
}
 800a804:	bf00      	nop
 800a806:	bd80      	pop	{r7, pc}

0800a808 <__cvt>:
 800a808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	ec55 4b10 	vmov	r4, r5, d0
 800a810:	2d00      	cmp	r5, #0
 800a812:	460e      	mov	r6, r1
 800a814:	4619      	mov	r1, r3
 800a816:	462b      	mov	r3, r5
 800a818:	bfbb      	ittet	lt
 800a81a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a81e:	461d      	movlt	r5, r3
 800a820:	2300      	movge	r3, #0
 800a822:	232d      	movlt	r3, #45	; 0x2d
 800a824:	700b      	strb	r3, [r1, #0]
 800a826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a82c:	4691      	mov	r9, r2
 800a82e:	f023 0820 	bic.w	r8, r3, #32
 800a832:	bfbc      	itt	lt
 800a834:	4622      	movlt	r2, r4
 800a836:	4614      	movlt	r4, r2
 800a838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a83c:	d005      	beq.n	800a84a <__cvt+0x42>
 800a83e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a842:	d100      	bne.n	800a846 <__cvt+0x3e>
 800a844:	3601      	adds	r6, #1
 800a846:	2102      	movs	r1, #2
 800a848:	e000      	b.n	800a84c <__cvt+0x44>
 800a84a:	2103      	movs	r1, #3
 800a84c:	ab03      	add	r3, sp, #12
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	ab02      	add	r3, sp, #8
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	ec45 4b10 	vmov	d0, r4, r5
 800a858:	4653      	mov	r3, sl
 800a85a:	4632      	mov	r2, r6
 800a85c:	f001 f87c 	bl	800b958 <_dtoa_r>
 800a860:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a864:	4607      	mov	r7, r0
 800a866:	d102      	bne.n	800a86e <__cvt+0x66>
 800a868:	f019 0f01 	tst.w	r9, #1
 800a86c:	d022      	beq.n	800a8b4 <__cvt+0xac>
 800a86e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a872:	eb07 0906 	add.w	r9, r7, r6
 800a876:	d110      	bne.n	800a89a <__cvt+0x92>
 800a878:	783b      	ldrb	r3, [r7, #0]
 800a87a:	2b30      	cmp	r3, #48	; 0x30
 800a87c:	d10a      	bne.n	800a894 <__cvt+0x8c>
 800a87e:	2200      	movs	r2, #0
 800a880:	2300      	movs	r3, #0
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f7f6 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a88a:	b918      	cbnz	r0, 800a894 <__cvt+0x8c>
 800a88c:	f1c6 0601 	rsb	r6, r6, #1
 800a890:	f8ca 6000 	str.w	r6, [sl]
 800a894:	f8da 3000 	ldr.w	r3, [sl]
 800a898:	4499      	add	r9, r3
 800a89a:	2200      	movs	r2, #0
 800a89c:	2300      	movs	r3, #0
 800a89e:	4620      	mov	r0, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7f6 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a6:	b108      	cbz	r0, 800a8ac <__cvt+0xa4>
 800a8a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8ac:	2230      	movs	r2, #48	; 0x30
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	454b      	cmp	r3, r9
 800a8b2:	d307      	bcc.n	800a8c4 <__cvt+0xbc>
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8b8:	1bdb      	subs	r3, r3, r7
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	b004      	add	sp, #16
 800a8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c4:	1c59      	adds	r1, r3, #1
 800a8c6:	9103      	str	r1, [sp, #12]
 800a8c8:	701a      	strb	r2, [r3, #0]
 800a8ca:	e7f0      	b.n	800a8ae <__cvt+0xa6>

0800a8cc <__exponent>:
 800a8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	bfb8      	it	lt
 800a8d4:	4249      	neglt	r1, r1
 800a8d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a8da:	bfb4      	ite	lt
 800a8dc:	222d      	movlt	r2, #45	; 0x2d
 800a8de:	222b      	movge	r2, #43	; 0x2b
 800a8e0:	2909      	cmp	r1, #9
 800a8e2:	7042      	strb	r2, [r0, #1]
 800a8e4:	dd2a      	ble.n	800a93c <__exponent+0x70>
 800a8e6:	f10d 0207 	add.w	r2, sp, #7
 800a8ea:	4617      	mov	r7, r2
 800a8ec:	260a      	movs	r6, #10
 800a8ee:	4694      	mov	ip, r2
 800a8f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a8f4:	fb06 1415 	mls	r4, r6, r5, r1
 800a8f8:	3430      	adds	r4, #48	; 0x30
 800a8fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a8fe:	460c      	mov	r4, r1
 800a900:	2c63      	cmp	r4, #99	; 0x63
 800a902:	f102 32ff 	add.w	r2, r2, #4294967295
 800a906:	4629      	mov	r1, r5
 800a908:	dcf1      	bgt.n	800a8ee <__exponent+0x22>
 800a90a:	3130      	adds	r1, #48	; 0x30
 800a90c:	f1ac 0402 	sub.w	r4, ip, #2
 800a910:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a914:	1c41      	adds	r1, r0, #1
 800a916:	4622      	mov	r2, r4
 800a918:	42ba      	cmp	r2, r7
 800a91a:	d30a      	bcc.n	800a932 <__exponent+0x66>
 800a91c:	f10d 0209 	add.w	r2, sp, #9
 800a920:	eba2 020c 	sub.w	r2, r2, ip
 800a924:	42bc      	cmp	r4, r7
 800a926:	bf88      	it	hi
 800a928:	2200      	movhi	r2, #0
 800a92a:	4413      	add	r3, r2
 800a92c:	1a18      	subs	r0, r3, r0
 800a92e:	b003      	add	sp, #12
 800a930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a932:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a936:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a93a:	e7ed      	b.n	800a918 <__exponent+0x4c>
 800a93c:	2330      	movs	r3, #48	; 0x30
 800a93e:	3130      	adds	r1, #48	; 0x30
 800a940:	7083      	strb	r3, [r0, #2]
 800a942:	70c1      	strb	r1, [r0, #3]
 800a944:	1d03      	adds	r3, r0, #4
 800a946:	e7f1      	b.n	800a92c <__exponent+0x60>

0800a948 <_printf_float>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	ed2d 8b02 	vpush	{d8}
 800a950:	b08d      	sub	sp, #52	; 0x34
 800a952:	460c      	mov	r4, r1
 800a954:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a958:	4616      	mov	r6, r2
 800a95a:	461f      	mov	r7, r3
 800a95c:	4605      	mov	r5, r0
 800a95e:	f000 fef7 	bl	800b750 <_localeconv_r>
 800a962:	f8d0 a000 	ldr.w	sl, [r0]
 800a966:	4650      	mov	r0, sl
 800a968:	f7f5 fc82 	bl	8000270 <strlen>
 800a96c:	2300      	movs	r3, #0
 800a96e:	930a      	str	r3, [sp, #40]	; 0x28
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	f8d8 3000 	ldr.w	r3, [r8]
 800a978:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a97c:	3307      	adds	r3, #7
 800a97e:	f023 0307 	bic.w	r3, r3, #7
 800a982:	f103 0208 	add.w	r2, r3, #8
 800a986:	f8c8 2000 	str.w	r2, [r8]
 800a98a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a98e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	f8cd 8018 	str.w	r8, [sp, #24]
 800a998:	ee08 0a10 	vmov	s16, r0
 800a99c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a9a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9a4:	4b9e      	ldr	r3, [pc, #632]	; (800ac20 <_printf_float+0x2d8>)
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9aa:	f7f6 f8bf 	bl	8000b2c <__aeabi_dcmpun>
 800a9ae:	bb88      	cbnz	r0, 800aa14 <_printf_float+0xcc>
 800a9b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9b4:	4b9a      	ldr	r3, [pc, #616]	; (800ac20 <_printf_float+0x2d8>)
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	f7f6 f899 	bl	8000af0 <__aeabi_dcmple>
 800a9be:	bb48      	cbnz	r0, 800aa14 <_printf_float+0xcc>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	f7f6 f888 	bl	8000adc <__aeabi_dcmplt>
 800a9cc:	b110      	cbz	r0, 800a9d4 <_printf_float+0x8c>
 800a9ce:	232d      	movs	r3, #45	; 0x2d
 800a9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9d4:	4a93      	ldr	r2, [pc, #588]	; (800ac24 <_printf_float+0x2dc>)
 800a9d6:	4b94      	ldr	r3, [pc, #592]	; (800ac28 <_printf_float+0x2e0>)
 800a9d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9dc:	bf94      	ite	ls
 800a9de:	4690      	movls	r8, r2
 800a9e0:	4698      	movhi	r8, r3
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	9b05      	ldr	r3, [sp, #20]
 800a9e8:	f023 0304 	bic.w	r3, r3, #4
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	f04f 0900 	mov.w	r9, #0
 800a9f2:	9700      	str	r7, [sp, #0]
 800a9f4:	4633      	mov	r3, r6
 800a9f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f000 f9da 	bl	800adb4 <_printf_common>
 800aa00:	3001      	adds	r0, #1
 800aa02:	f040 8090 	bne.w	800ab26 <_printf_float+0x1de>
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0a:	b00d      	add	sp, #52	; 0x34
 800aa0c:	ecbd 8b02 	vpop	{d8}
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	4642      	mov	r2, r8
 800aa16:	464b      	mov	r3, r9
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f6 f886 	bl	8000b2c <__aeabi_dcmpun>
 800aa20:	b140      	cbz	r0, 800aa34 <_printf_float+0xec>
 800aa22:	464b      	mov	r3, r9
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bfbc      	itt	lt
 800aa28:	232d      	movlt	r3, #45	; 0x2d
 800aa2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa2e:	4a7f      	ldr	r2, [pc, #508]	; (800ac2c <_printf_float+0x2e4>)
 800aa30:	4b7f      	ldr	r3, [pc, #508]	; (800ac30 <_printf_float+0x2e8>)
 800aa32:	e7d1      	b.n	800a9d8 <_printf_float+0x90>
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa3a:	9206      	str	r2, [sp, #24]
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	d13f      	bne.n	800aac0 <_printf_float+0x178>
 800aa40:	2306      	movs	r3, #6
 800aa42:	6063      	str	r3, [r4, #4]
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	6861      	ldr	r1, [r4, #4]
 800aa48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9303      	str	r3, [sp, #12]
 800aa50:	ab0a      	add	r3, sp, #40	; 0x28
 800aa52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa56:	ab09      	add	r3, sp, #36	; 0x24
 800aa58:	ec49 8b10 	vmov	d0, r8, r9
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	6022      	str	r2, [r4, #0]
 800aa60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff fecf 	bl	800a808 <__cvt>
 800aa6a:	9b06      	ldr	r3, [sp, #24]
 800aa6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa6e:	2b47      	cmp	r3, #71	; 0x47
 800aa70:	4680      	mov	r8, r0
 800aa72:	d108      	bne.n	800aa86 <_printf_float+0x13e>
 800aa74:	1cc8      	adds	r0, r1, #3
 800aa76:	db02      	blt.n	800aa7e <_printf_float+0x136>
 800aa78:	6863      	ldr	r3, [r4, #4]
 800aa7a:	4299      	cmp	r1, r3
 800aa7c:	dd41      	ble.n	800ab02 <_printf_float+0x1ba>
 800aa7e:	f1ab 0302 	sub.w	r3, fp, #2
 800aa82:	fa5f fb83 	uxtb.w	fp, r3
 800aa86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa8a:	d820      	bhi.n	800aace <_printf_float+0x186>
 800aa8c:	3901      	subs	r1, #1
 800aa8e:	465a      	mov	r2, fp
 800aa90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa94:	9109      	str	r1, [sp, #36]	; 0x24
 800aa96:	f7ff ff19 	bl	800a8cc <__exponent>
 800aa9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9c:	1813      	adds	r3, r2, r0
 800aa9e:	2a01      	cmp	r2, #1
 800aaa0:	4681      	mov	r9, r0
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	dc02      	bgt.n	800aaac <_printf_float+0x164>
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	07d2      	lsls	r2, r2, #31
 800aaaa:	d501      	bpl.n	800aab0 <_printf_float+0x168>
 800aaac:	3301      	adds	r3, #1
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d09c      	beq.n	800a9f2 <_printf_float+0xaa>
 800aab8:	232d      	movs	r3, #45	; 0x2d
 800aaba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aabe:	e798      	b.n	800a9f2 <_printf_float+0xaa>
 800aac0:	9a06      	ldr	r2, [sp, #24]
 800aac2:	2a47      	cmp	r2, #71	; 0x47
 800aac4:	d1be      	bne.n	800aa44 <_printf_float+0xfc>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1bc      	bne.n	800aa44 <_printf_float+0xfc>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e7b9      	b.n	800aa42 <_printf_float+0xfa>
 800aace:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aad2:	d118      	bne.n	800ab06 <_printf_float+0x1be>
 800aad4:	2900      	cmp	r1, #0
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	dd0b      	ble.n	800aaf2 <_printf_float+0x1aa>
 800aada:	6121      	str	r1, [r4, #16]
 800aadc:	b913      	cbnz	r3, 800aae4 <_printf_float+0x19c>
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	07d0      	lsls	r0, r2, #31
 800aae2:	d502      	bpl.n	800aaea <_printf_float+0x1a2>
 800aae4:	3301      	adds	r3, #1
 800aae6:	440b      	add	r3, r1
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	65a1      	str	r1, [r4, #88]	; 0x58
 800aaec:	f04f 0900 	mov.w	r9, #0
 800aaf0:	e7de      	b.n	800aab0 <_printf_float+0x168>
 800aaf2:	b913      	cbnz	r3, 800aafa <_printf_float+0x1b2>
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	07d2      	lsls	r2, r2, #31
 800aaf8:	d501      	bpl.n	800aafe <_printf_float+0x1b6>
 800aafa:	3302      	adds	r3, #2
 800aafc:	e7f4      	b.n	800aae8 <_printf_float+0x1a0>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e7f2      	b.n	800aae8 <_printf_float+0x1a0>
 800ab02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	4299      	cmp	r1, r3
 800ab0a:	db05      	blt.n	800ab18 <_printf_float+0x1d0>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	6121      	str	r1, [r4, #16]
 800ab10:	07d8      	lsls	r0, r3, #31
 800ab12:	d5ea      	bpl.n	800aaea <_printf_float+0x1a2>
 800ab14:	1c4b      	adds	r3, r1, #1
 800ab16:	e7e7      	b.n	800aae8 <_printf_float+0x1a0>
 800ab18:	2900      	cmp	r1, #0
 800ab1a:	bfd4      	ite	le
 800ab1c:	f1c1 0202 	rsble	r2, r1, #2
 800ab20:	2201      	movgt	r2, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	e7e0      	b.n	800aae8 <_printf_float+0x1a0>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	055a      	lsls	r2, r3, #21
 800ab2a:	d407      	bmi.n	800ab3c <_printf_float+0x1f4>
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	4642      	mov	r2, r8
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	d12c      	bne.n	800ab94 <_printf_float+0x24c>
 800ab3a:	e764      	b.n	800aa06 <_printf_float+0xbe>
 800ab3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab40:	f240 80e0 	bls.w	800ad04 <_printf_float+0x3bc>
 800ab44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f7f5 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d034      	beq.n	800abbe <_printf_float+0x276>
 800ab54:	4a37      	ldr	r2, [pc, #220]	; (800ac34 <_printf_float+0x2ec>)
 800ab56:	2301      	movs	r3, #1
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	47b8      	blx	r7
 800ab5e:	3001      	adds	r0, #1
 800ab60:	f43f af51 	beq.w	800aa06 <_printf_float+0xbe>
 800ab64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	db02      	blt.n	800ab72 <_printf_float+0x22a>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	07d8      	lsls	r0, r3, #31
 800ab70:	d510      	bpl.n	800ab94 <_printf_float+0x24c>
 800ab72:	ee18 3a10 	vmov	r3, s16
 800ab76:	4652      	mov	r2, sl
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b8      	blx	r7
 800ab7e:	3001      	adds	r0, #1
 800ab80:	f43f af41 	beq.w	800aa06 <_printf_float+0xbe>
 800ab84:	f04f 0800 	mov.w	r8, #0
 800ab88:	f104 091a 	add.w	r9, r4, #26
 800ab8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	4543      	cmp	r3, r8
 800ab92:	dc09      	bgt.n	800aba8 <_printf_float+0x260>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	079b      	lsls	r3, r3, #30
 800ab98:	f100 8107 	bmi.w	800adaa <_printf_float+0x462>
 800ab9c:	68e0      	ldr	r0, [r4, #12]
 800ab9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba0:	4298      	cmp	r0, r3
 800aba2:	bfb8      	it	lt
 800aba4:	4618      	movlt	r0, r3
 800aba6:	e730      	b.n	800aa0a <_printf_float+0xc2>
 800aba8:	2301      	movs	r3, #1
 800abaa:	464a      	mov	r2, r9
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	f43f af27 	beq.w	800aa06 <_printf_float+0xbe>
 800abb8:	f108 0801 	add.w	r8, r8, #1
 800abbc:	e7e6      	b.n	800ab8c <_printf_float+0x244>
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	dc39      	bgt.n	800ac38 <_printf_float+0x2f0>
 800abc4:	4a1b      	ldr	r2, [pc, #108]	; (800ac34 <_printf_float+0x2ec>)
 800abc6:	2301      	movs	r3, #1
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	f43f af19 	beq.w	800aa06 <_printf_float+0xbe>
 800abd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800abd8:	4313      	orrs	r3, r2
 800abda:	d102      	bne.n	800abe2 <_printf_float+0x29a>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	d5d8      	bpl.n	800ab94 <_printf_float+0x24c>
 800abe2:	ee18 3a10 	vmov	r3, s16
 800abe6:	4652      	mov	r2, sl
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f af09 	beq.w	800aa06 <_printf_float+0xbe>
 800abf4:	f04f 0900 	mov.w	r9, #0
 800abf8:	f104 0a1a 	add.w	sl, r4, #26
 800abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfe:	425b      	negs	r3, r3
 800ac00:	454b      	cmp	r3, r9
 800ac02:	dc01      	bgt.n	800ac08 <_printf_float+0x2c0>
 800ac04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac06:	e792      	b.n	800ab2e <_printf_float+0x1e6>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4652      	mov	r2, sl
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	f43f aef7 	beq.w	800aa06 <_printf_float+0xbe>
 800ac18:	f109 0901 	add.w	r9, r9, #1
 800ac1c:	e7ee      	b.n	800abfc <_printf_float+0x2b4>
 800ac1e:	bf00      	nop
 800ac20:	7fefffff 	.word	0x7fefffff
 800ac24:	0800f084 	.word	0x0800f084
 800ac28:	0800f088 	.word	0x0800f088
 800ac2c:	0800f08c 	.word	0x0800f08c
 800ac30:	0800f090 	.word	0x0800f090
 800ac34:	0800f094 	.word	0x0800f094
 800ac38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	bfa8      	it	ge
 800ac40:	461a      	movge	r2, r3
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	4691      	mov	r9, r2
 800ac46:	dc37      	bgt.n	800acb8 <_printf_float+0x370>
 800ac48:	f04f 0b00 	mov.w	fp, #0
 800ac4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac50:	f104 021a 	add.w	r2, r4, #26
 800ac54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	eba3 0309 	sub.w	r3, r3, r9
 800ac5c:	455b      	cmp	r3, fp
 800ac5e:	dc33      	bgt.n	800acc8 <_printf_float+0x380>
 800ac60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac64:	429a      	cmp	r2, r3
 800ac66:	db3b      	blt.n	800ace0 <_printf_float+0x398>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	07da      	lsls	r2, r3, #31
 800ac6c:	d438      	bmi.n	800ace0 <_printf_float+0x398>
 800ac6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac72:	eba2 0903 	sub.w	r9, r2, r3
 800ac76:	9b05      	ldr	r3, [sp, #20]
 800ac78:	1ad2      	subs	r2, r2, r3
 800ac7a:	4591      	cmp	r9, r2
 800ac7c:	bfa8      	it	ge
 800ac7e:	4691      	movge	r9, r2
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	dc35      	bgt.n	800acf2 <_printf_float+0x3aa>
 800ac86:	f04f 0800 	mov.w	r8, #0
 800ac8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac8e:	f104 0a1a 	add.w	sl, r4, #26
 800ac92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	eba3 0309 	sub.w	r3, r3, r9
 800ac9c:	4543      	cmp	r3, r8
 800ac9e:	f77f af79 	ble.w	800ab94 <_printf_float+0x24c>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4652      	mov	r2, sl
 800aca6:	4631      	mov	r1, r6
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b8      	blx	r7
 800acac:	3001      	adds	r0, #1
 800acae:	f43f aeaa 	beq.w	800aa06 <_printf_float+0xbe>
 800acb2:	f108 0801 	add.w	r8, r8, #1
 800acb6:	e7ec      	b.n	800ac92 <_printf_float+0x34a>
 800acb8:	4613      	mov	r3, r2
 800acba:	4631      	mov	r1, r6
 800acbc:	4642      	mov	r2, r8
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	d1c0      	bne.n	800ac48 <_printf_float+0x300>
 800acc6:	e69e      	b.n	800aa06 <_printf_float+0xbe>
 800acc8:	2301      	movs	r3, #1
 800acca:	4631      	mov	r1, r6
 800accc:	4628      	mov	r0, r5
 800acce:	9205      	str	r2, [sp, #20]
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	f43f ae97 	beq.w	800aa06 <_printf_float+0xbe>
 800acd8:	9a05      	ldr	r2, [sp, #20]
 800acda:	f10b 0b01 	add.w	fp, fp, #1
 800acde:	e7b9      	b.n	800ac54 <_printf_float+0x30c>
 800ace0:	ee18 3a10 	vmov	r3, s16
 800ace4:	4652      	mov	r2, sl
 800ace6:	4631      	mov	r1, r6
 800ace8:	4628      	mov	r0, r5
 800acea:	47b8      	blx	r7
 800acec:	3001      	adds	r0, #1
 800acee:	d1be      	bne.n	800ac6e <_printf_float+0x326>
 800acf0:	e689      	b.n	800aa06 <_printf_float+0xbe>
 800acf2:	9a05      	ldr	r2, [sp, #20]
 800acf4:	464b      	mov	r3, r9
 800acf6:	4442      	add	r2, r8
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b8      	blx	r7
 800acfe:	3001      	adds	r0, #1
 800ad00:	d1c1      	bne.n	800ac86 <_printf_float+0x33e>
 800ad02:	e680      	b.n	800aa06 <_printf_float+0xbe>
 800ad04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad06:	2a01      	cmp	r2, #1
 800ad08:	dc01      	bgt.n	800ad0e <_printf_float+0x3c6>
 800ad0a:	07db      	lsls	r3, r3, #31
 800ad0c:	d53a      	bpl.n	800ad84 <_printf_float+0x43c>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4642      	mov	r2, r8
 800ad12:	4631      	mov	r1, r6
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b8      	blx	r7
 800ad18:	3001      	adds	r0, #1
 800ad1a:	f43f ae74 	beq.w	800aa06 <_printf_float+0xbe>
 800ad1e:	ee18 3a10 	vmov	r3, s16
 800ad22:	4652      	mov	r2, sl
 800ad24:	4631      	mov	r1, r6
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	f43f ae6b 	beq.w	800aa06 <_printf_float+0xbe>
 800ad30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad34:	2200      	movs	r2, #0
 800ad36:	2300      	movs	r3, #0
 800ad38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad3c:	f7f5 fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad40:	b9d8      	cbnz	r0, 800ad7a <_printf_float+0x432>
 800ad42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad46:	f108 0201 	add.w	r2, r8, #1
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	d10e      	bne.n	800ad72 <_printf_float+0x42a>
 800ad54:	e657      	b.n	800aa06 <_printf_float+0xbe>
 800ad56:	2301      	movs	r3, #1
 800ad58:	4652      	mov	r2, sl
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	47b8      	blx	r7
 800ad60:	3001      	adds	r0, #1
 800ad62:	f43f ae50 	beq.w	800aa06 <_printf_float+0xbe>
 800ad66:	f108 0801 	add.w	r8, r8, #1
 800ad6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	4543      	cmp	r3, r8
 800ad70:	dcf1      	bgt.n	800ad56 <_printf_float+0x40e>
 800ad72:	464b      	mov	r3, r9
 800ad74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad78:	e6da      	b.n	800ab30 <_printf_float+0x1e8>
 800ad7a:	f04f 0800 	mov.w	r8, #0
 800ad7e:	f104 0a1a 	add.w	sl, r4, #26
 800ad82:	e7f2      	b.n	800ad6a <_printf_float+0x422>
 800ad84:	2301      	movs	r3, #1
 800ad86:	4642      	mov	r2, r8
 800ad88:	e7df      	b.n	800ad4a <_printf_float+0x402>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	464a      	mov	r2, r9
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b8      	blx	r7
 800ad94:	3001      	adds	r0, #1
 800ad96:	f43f ae36 	beq.w	800aa06 <_printf_float+0xbe>
 800ad9a:	f108 0801 	add.w	r8, r8, #1
 800ad9e:	68e3      	ldr	r3, [r4, #12]
 800ada0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ada2:	1a5b      	subs	r3, r3, r1
 800ada4:	4543      	cmp	r3, r8
 800ada6:	dcf0      	bgt.n	800ad8a <_printf_float+0x442>
 800ada8:	e6f8      	b.n	800ab9c <_printf_float+0x254>
 800adaa:	f04f 0800 	mov.w	r8, #0
 800adae:	f104 0919 	add.w	r9, r4, #25
 800adb2:	e7f4      	b.n	800ad9e <_printf_float+0x456>

0800adb4 <_printf_common>:
 800adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb8:	4616      	mov	r6, r2
 800adba:	4699      	mov	r9, r3
 800adbc:	688a      	ldr	r2, [r1, #8]
 800adbe:	690b      	ldr	r3, [r1, #16]
 800adc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	bfb8      	it	lt
 800adc8:	4613      	movlt	r3, r2
 800adca:	6033      	str	r3, [r6, #0]
 800adcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800add0:	4607      	mov	r7, r0
 800add2:	460c      	mov	r4, r1
 800add4:	b10a      	cbz	r2, 800adda <_printf_common+0x26>
 800add6:	3301      	adds	r3, #1
 800add8:	6033      	str	r3, [r6, #0]
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	0699      	lsls	r1, r3, #26
 800adde:	bf42      	ittt	mi
 800ade0:	6833      	ldrmi	r3, [r6, #0]
 800ade2:	3302      	addmi	r3, #2
 800ade4:	6033      	strmi	r3, [r6, #0]
 800ade6:	6825      	ldr	r5, [r4, #0]
 800ade8:	f015 0506 	ands.w	r5, r5, #6
 800adec:	d106      	bne.n	800adfc <_printf_common+0x48>
 800adee:	f104 0a19 	add.w	sl, r4, #25
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	6832      	ldr	r2, [r6, #0]
 800adf6:	1a9b      	subs	r3, r3, r2
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	dc26      	bgt.n	800ae4a <_printf_common+0x96>
 800adfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae00:	1e13      	subs	r3, r2, #0
 800ae02:	6822      	ldr	r2, [r4, #0]
 800ae04:	bf18      	it	ne
 800ae06:	2301      	movne	r3, #1
 800ae08:	0692      	lsls	r2, r2, #26
 800ae0a:	d42b      	bmi.n	800ae64 <_printf_common+0xb0>
 800ae0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae10:	4649      	mov	r1, r9
 800ae12:	4638      	mov	r0, r7
 800ae14:	47c0      	blx	r8
 800ae16:	3001      	adds	r0, #1
 800ae18:	d01e      	beq.n	800ae58 <_printf_common+0xa4>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	6922      	ldr	r2, [r4, #16]
 800ae1e:	f003 0306 	and.w	r3, r3, #6
 800ae22:	2b04      	cmp	r3, #4
 800ae24:	bf02      	ittt	eq
 800ae26:	68e5      	ldreq	r5, [r4, #12]
 800ae28:	6833      	ldreq	r3, [r6, #0]
 800ae2a:	1aed      	subeq	r5, r5, r3
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	bf0c      	ite	eq
 800ae30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae34:	2500      	movne	r5, #0
 800ae36:	4293      	cmp	r3, r2
 800ae38:	bfc4      	itt	gt
 800ae3a:	1a9b      	subgt	r3, r3, r2
 800ae3c:	18ed      	addgt	r5, r5, r3
 800ae3e:	2600      	movs	r6, #0
 800ae40:	341a      	adds	r4, #26
 800ae42:	42b5      	cmp	r5, r6
 800ae44:	d11a      	bne.n	800ae7c <_printf_common+0xc8>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e008      	b.n	800ae5c <_printf_common+0xa8>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	4652      	mov	r2, sl
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4638      	mov	r0, r7
 800ae52:	47c0      	blx	r8
 800ae54:	3001      	adds	r0, #1
 800ae56:	d103      	bne.n	800ae60 <_printf_common+0xac>
 800ae58:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	3501      	adds	r5, #1
 800ae62:	e7c6      	b.n	800adf2 <_printf_common+0x3e>
 800ae64:	18e1      	adds	r1, r4, r3
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	2030      	movs	r0, #48	; 0x30
 800ae6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae6e:	4422      	add	r2, r4
 800ae70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae78:	3302      	adds	r3, #2
 800ae7a:	e7c7      	b.n	800ae0c <_printf_common+0x58>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	4622      	mov	r2, r4
 800ae80:	4649      	mov	r1, r9
 800ae82:	4638      	mov	r0, r7
 800ae84:	47c0      	blx	r8
 800ae86:	3001      	adds	r0, #1
 800ae88:	d0e6      	beq.n	800ae58 <_printf_common+0xa4>
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	e7d9      	b.n	800ae42 <_printf_common+0x8e>
	...

0800ae90 <_printf_i>:
 800ae90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	7e0f      	ldrb	r7, [r1, #24]
 800ae96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae98:	2f78      	cmp	r7, #120	; 0x78
 800ae9a:	4691      	mov	r9, r2
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	469a      	mov	sl, r3
 800aea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aea6:	d807      	bhi.n	800aeb8 <_printf_i+0x28>
 800aea8:	2f62      	cmp	r7, #98	; 0x62
 800aeaa:	d80a      	bhi.n	800aec2 <_printf_i+0x32>
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	f000 80d4 	beq.w	800b05a <_printf_i+0x1ca>
 800aeb2:	2f58      	cmp	r7, #88	; 0x58
 800aeb4:	f000 80c0 	beq.w	800b038 <_printf_i+0x1a8>
 800aeb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aec0:	e03a      	b.n	800af38 <_printf_i+0xa8>
 800aec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aec6:	2b15      	cmp	r3, #21
 800aec8:	d8f6      	bhi.n	800aeb8 <_printf_i+0x28>
 800aeca:	a101      	add	r1, pc, #4	; (adr r1, 800aed0 <_printf_i+0x40>)
 800aecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aed0:	0800af29 	.word	0x0800af29
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800aeb9 	.word	0x0800aeb9
 800aedc:	0800aeb9 	.word	0x0800aeb9
 800aee0:	0800aeb9 	.word	0x0800aeb9
 800aee4:	0800aeb9 	.word	0x0800aeb9
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800aeb9 	.word	0x0800aeb9
 800aef0:	0800aeb9 	.word	0x0800aeb9
 800aef4:	0800aeb9 	.word	0x0800aeb9
 800aef8:	0800aeb9 	.word	0x0800aeb9
 800aefc:	0800b041 	.word	0x0800b041
 800af00:	0800af69 	.word	0x0800af69
 800af04:	0800affb 	.word	0x0800affb
 800af08:	0800aeb9 	.word	0x0800aeb9
 800af0c:	0800aeb9 	.word	0x0800aeb9
 800af10:	0800b063 	.word	0x0800b063
 800af14:	0800aeb9 	.word	0x0800aeb9
 800af18:	0800af69 	.word	0x0800af69
 800af1c:	0800aeb9 	.word	0x0800aeb9
 800af20:	0800aeb9 	.word	0x0800aeb9
 800af24:	0800b003 	.word	0x0800b003
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	1d1a      	adds	r2, r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	602a      	str	r2, [r5, #0]
 800af30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af38:	2301      	movs	r3, #1
 800af3a:	e09f      	b.n	800b07c <_printf_i+0x1ec>
 800af3c:	6820      	ldr	r0, [r4, #0]
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	0607      	lsls	r7, r0, #24
 800af42:	f103 0104 	add.w	r1, r3, #4
 800af46:	6029      	str	r1, [r5, #0]
 800af48:	d501      	bpl.n	800af4e <_printf_i+0xbe>
 800af4a:	681e      	ldr	r6, [r3, #0]
 800af4c:	e003      	b.n	800af56 <_printf_i+0xc6>
 800af4e:	0646      	lsls	r6, r0, #25
 800af50:	d5fb      	bpl.n	800af4a <_printf_i+0xba>
 800af52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af56:	2e00      	cmp	r6, #0
 800af58:	da03      	bge.n	800af62 <_printf_i+0xd2>
 800af5a:	232d      	movs	r3, #45	; 0x2d
 800af5c:	4276      	negs	r6, r6
 800af5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af62:	485a      	ldr	r0, [pc, #360]	; (800b0cc <_printf_i+0x23c>)
 800af64:	230a      	movs	r3, #10
 800af66:	e012      	b.n	800af8e <_printf_i+0xfe>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	6820      	ldr	r0, [r4, #0]
 800af6c:	1d19      	adds	r1, r3, #4
 800af6e:	6029      	str	r1, [r5, #0]
 800af70:	0605      	lsls	r5, r0, #24
 800af72:	d501      	bpl.n	800af78 <_printf_i+0xe8>
 800af74:	681e      	ldr	r6, [r3, #0]
 800af76:	e002      	b.n	800af7e <_printf_i+0xee>
 800af78:	0641      	lsls	r1, r0, #25
 800af7a:	d5fb      	bpl.n	800af74 <_printf_i+0xe4>
 800af7c:	881e      	ldrh	r6, [r3, #0]
 800af7e:	4853      	ldr	r0, [pc, #332]	; (800b0cc <_printf_i+0x23c>)
 800af80:	2f6f      	cmp	r7, #111	; 0x6f
 800af82:	bf0c      	ite	eq
 800af84:	2308      	moveq	r3, #8
 800af86:	230a      	movne	r3, #10
 800af88:	2100      	movs	r1, #0
 800af8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af8e:	6865      	ldr	r5, [r4, #4]
 800af90:	60a5      	str	r5, [r4, #8]
 800af92:	2d00      	cmp	r5, #0
 800af94:	bfa2      	ittt	ge
 800af96:	6821      	ldrge	r1, [r4, #0]
 800af98:	f021 0104 	bicge.w	r1, r1, #4
 800af9c:	6021      	strge	r1, [r4, #0]
 800af9e:	b90e      	cbnz	r6, 800afa4 <_printf_i+0x114>
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d04b      	beq.n	800b03c <_printf_i+0x1ac>
 800afa4:	4615      	mov	r5, r2
 800afa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800afaa:	fb03 6711 	mls	r7, r3, r1, r6
 800afae:	5dc7      	ldrb	r7, [r0, r7]
 800afb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afb4:	4637      	mov	r7, r6
 800afb6:	42bb      	cmp	r3, r7
 800afb8:	460e      	mov	r6, r1
 800afba:	d9f4      	bls.n	800afa6 <_printf_i+0x116>
 800afbc:	2b08      	cmp	r3, #8
 800afbe:	d10b      	bne.n	800afd8 <_printf_i+0x148>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	07de      	lsls	r6, r3, #31
 800afc4:	d508      	bpl.n	800afd8 <_printf_i+0x148>
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	6861      	ldr	r1, [r4, #4]
 800afca:	4299      	cmp	r1, r3
 800afcc:	bfde      	ittt	le
 800afce:	2330      	movle	r3, #48	; 0x30
 800afd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afd8:	1b52      	subs	r2, r2, r5
 800afda:	6122      	str	r2, [r4, #16]
 800afdc:	f8cd a000 	str.w	sl, [sp]
 800afe0:	464b      	mov	r3, r9
 800afe2:	aa03      	add	r2, sp, #12
 800afe4:	4621      	mov	r1, r4
 800afe6:	4640      	mov	r0, r8
 800afe8:	f7ff fee4 	bl	800adb4 <_printf_common>
 800afec:	3001      	adds	r0, #1
 800afee:	d14a      	bne.n	800b086 <_printf_i+0x1f6>
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295
 800aff4:	b004      	add	sp, #16
 800aff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	f043 0320 	orr.w	r3, r3, #32
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	4833      	ldr	r0, [pc, #204]	; (800b0d0 <_printf_i+0x240>)
 800b004:	2778      	movs	r7, #120	; 0x78
 800b006:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	6829      	ldr	r1, [r5, #0]
 800b00e:	061f      	lsls	r7, r3, #24
 800b010:	f851 6b04 	ldr.w	r6, [r1], #4
 800b014:	d402      	bmi.n	800b01c <_printf_i+0x18c>
 800b016:	065f      	lsls	r7, r3, #25
 800b018:	bf48      	it	mi
 800b01a:	b2b6      	uxthmi	r6, r6
 800b01c:	07df      	lsls	r7, r3, #31
 800b01e:	bf48      	it	mi
 800b020:	f043 0320 	orrmi.w	r3, r3, #32
 800b024:	6029      	str	r1, [r5, #0]
 800b026:	bf48      	it	mi
 800b028:	6023      	strmi	r3, [r4, #0]
 800b02a:	b91e      	cbnz	r6, 800b034 <_printf_i+0x1a4>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f023 0320 	bic.w	r3, r3, #32
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	2310      	movs	r3, #16
 800b036:	e7a7      	b.n	800af88 <_printf_i+0xf8>
 800b038:	4824      	ldr	r0, [pc, #144]	; (800b0cc <_printf_i+0x23c>)
 800b03a:	e7e4      	b.n	800b006 <_printf_i+0x176>
 800b03c:	4615      	mov	r5, r2
 800b03e:	e7bd      	b.n	800afbc <_printf_i+0x12c>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	6826      	ldr	r6, [r4, #0]
 800b044:	6961      	ldr	r1, [r4, #20]
 800b046:	1d18      	adds	r0, r3, #4
 800b048:	6028      	str	r0, [r5, #0]
 800b04a:	0635      	lsls	r5, r6, #24
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	d501      	bpl.n	800b054 <_printf_i+0x1c4>
 800b050:	6019      	str	r1, [r3, #0]
 800b052:	e002      	b.n	800b05a <_printf_i+0x1ca>
 800b054:	0670      	lsls	r0, r6, #25
 800b056:	d5fb      	bpl.n	800b050 <_printf_i+0x1c0>
 800b058:	8019      	strh	r1, [r3, #0]
 800b05a:	2300      	movs	r3, #0
 800b05c:	6123      	str	r3, [r4, #16]
 800b05e:	4615      	mov	r5, r2
 800b060:	e7bc      	b.n	800afdc <_printf_i+0x14c>
 800b062:	682b      	ldr	r3, [r5, #0]
 800b064:	1d1a      	adds	r2, r3, #4
 800b066:	602a      	str	r2, [r5, #0]
 800b068:	681d      	ldr	r5, [r3, #0]
 800b06a:	6862      	ldr	r2, [r4, #4]
 800b06c:	2100      	movs	r1, #0
 800b06e:	4628      	mov	r0, r5
 800b070:	f7f5 f8ae 	bl	80001d0 <memchr>
 800b074:	b108      	cbz	r0, 800b07a <_printf_i+0x1ea>
 800b076:	1b40      	subs	r0, r0, r5
 800b078:	6060      	str	r0, [r4, #4]
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	2300      	movs	r3, #0
 800b080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b084:	e7aa      	b.n	800afdc <_printf_i+0x14c>
 800b086:	6923      	ldr	r3, [r4, #16]
 800b088:	462a      	mov	r2, r5
 800b08a:	4649      	mov	r1, r9
 800b08c:	4640      	mov	r0, r8
 800b08e:	47d0      	blx	sl
 800b090:	3001      	adds	r0, #1
 800b092:	d0ad      	beq.n	800aff0 <_printf_i+0x160>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	079b      	lsls	r3, r3, #30
 800b098:	d413      	bmi.n	800b0c2 <_printf_i+0x232>
 800b09a:	68e0      	ldr	r0, [r4, #12]
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	4298      	cmp	r0, r3
 800b0a0:	bfb8      	it	lt
 800b0a2:	4618      	movlt	r0, r3
 800b0a4:	e7a6      	b.n	800aff4 <_printf_i+0x164>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4632      	mov	r2, r6
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	47d0      	blx	sl
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d09d      	beq.n	800aff0 <_printf_i+0x160>
 800b0b4:	3501      	adds	r5, #1
 800b0b6:	68e3      	ldr	r3, [r4, #12]
 800b0b8:	9903      	ldr	r1, [sp, #12]
 800b0ba:	1a5b      	subs	r3, r3, r1
 800b0bc:	42ab      	cmp	r3, r5
 800b0be:	dcf2      	bgt.n	800b0a6 <_printf_i+0x216>
 800b0c0:	e7eb      	b.n	800b09a <_printf_i+0x20a>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	f104 0619 	add.w	r6, r4, #25
 800b0c8:	e7f5      	b.n	800b0b6 <_printf_i+0x226>
 800b0ca:	bf00      	nop
 800b0cc:	0800f096 	.word	0x0800f096
 800b0d0:	0800f0a7 	.word	0x0800f0a7

0800b0d4 <_scanf_float>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	b087      	sub	sp, #28
 800b0da:	4617      	mov	r7, r2
 800b0dc:	9303      	str	r3, [sp, #12]
 800b0de:	688b      	ldr	r3, [r1, #8]
 800b0e0:	1e5a      	subs	r2, r3, #1
 800b0e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b0e6:	bf83      	ittte	hi
 800b0e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b0ec:	195b      	addhi	r3, r3, r5
 800b0ee:	9302      	strhi	r3, [sp, #8]
 800b0f0:	2300      	movls	r3, #0
 800b0f2:	bf86      	itte	hi
 800b0f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b0f8:	608b      	strhi	r3, [r1, #8]
 800b0fa:	9302      	strls	r3, [sp, #8]
 800b0fc:	680b      	ldr	r3, [r1, #0]
 800b0fe:	468b      	mov	fp, r1
 800b100:	2500      	movs	r5, #0
 800b102:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b106:	f84b 3b1c 	str.w	r3, [fp], #28
 800b10a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b10e:	4680      	mov	r8, r0
 800b110:	460c      	mov	r4, r1
 800b112:	465e      	mov	r6, fp
 800b114:	46aa      	mov	sl, r5
 800b116:	46a9      	mov	r9, r5
 800b118:	9501      	str	r5, [sp, #4]
 800b11a:	68a2      	ldr	r2, [r4, #8]
 800b11c:	b152      	cbz	r2, 800b134 <_scanf_float+0x60>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b4e      	cmp	r3, #78	; 0x4e
 800b124:	d864      	bhi.n	800b1f0 <_scanf_float+0x11c>
 800b126:	2b40      	cmp	r3, #64	; 0x40
 800b128:	d83c      	bhi.n	800b1a4 <_scanf_float+0xd0>
 800b12a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b12e:	b2c8      	uxtb	r0, r1
 800b130:	280e      	cmp	r0, #14
 800b132:	d93a      	bls.n	800b1aa <_scanf_float+0xd6>
 800b134:	f1b9 0f00 	cmp.w	r9, #0
 800b138:	d003      	beq.n	800b142 <_scanf_float+0x6e>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b146:	f1ba 0f01 	cmp.w	sl, #1
 800b14a:	f200 8113 	bhi.w	800b374 <_scanf_float+0x2a0>
 800b14e:	455e      	cmp	r6, fp
 800b150:	f200 8105 	bhi.w	800b35e <_scanf_float+0x28a>
 800b154:	2501      	movs	r5, #1
 800b156:	4628      	mov	r0, r5
 800b158:	b007      	add	sp, #28
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b162:	2a0d      	cmp	r2, #13
 800b164:	d8e6      	bhi.n	800b134 <_scanf_float+0x60>
 800b166:	a101      	add	r1, pc, #4	; (adr r1, 800b16c <_scanf_float+0x98>)
 800b168:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b16c:	0800b2ab 	.word	0x0800b2ab
 800b170:	0800b135 	.word	0x0800b135
 800b174:	0800b135 	.word	0x0800b135
 800b178:	0800b135 	.word	0x0800b135
 800b17c:	0800b30b 	.word	0x0800b30b
 800b180:	0800b2e3 	.word	0x0800b2e3
 800b184:	0800b135 	.word	0x0800b135
 800b188:	0800b135 	.word	0x0800b135
 800b18c:	0800b2b9 	.word	0x0800b2b9
 800b190:	0800b135 	.word	0x0800b135
 800b194:	0800b135 	.word	0x0800b135
 800b198:	0800b135 	.word	0x0800b135
 800b19c:	0800b135 	.word	0x0800b135
 800b1a0:	0800b271 	.word	0x0800b271
 800b1a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b1a8:	e7db      	b.n	800b162 <_scanf_float+0x8e>
 800b1aa:	290e      	cmp	r1, #14
 800b1ac:	d8c2      	bhi.n	800b134 <_scanf_float+0x60>
 800b1ae:	a001      	add	r0, pc, #4	; (adr r0, 800b1b4 <_scanf_float+0xe0>)
 800b1b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b1b4:	0800b263 	.word	0x0800b263
 800b1b8:	0800b135 	.word	0x0800b135
 800b1bc:	0800b263 	.word	0x0800b263
 800b1c0:	0800b2f7 	.word	0x0800b2f7
 800b1c4:	0800b135 	.word	0x0800b135
 800b1c8:	0800b211 	.word	0x0800b211
 800b1cc:	0800b24d 	.word	0x0800b24d
 800b1d0:	0800b24d 	.word	0x0800b24d
 800b1d4:	0800b24d 	.word	0x0800b24d
 800b1d8:	0800b24d 	.word	0x0800b24d
 800b1dc:	0800b24d 	.word	0x0800b24d
 800b1e0:	0800b24d 	.word	0x0800b24d
 800b1e4:	0800b24d 	.word	0x0800b24d
 800b1e8:	0800b24d 	.word	0x0800b24d
 800b1ec:	0800b24d 	.word	0x0800b24d
 800b1f0:	2b6e      	cmp	r3, #110	; 0x6e
 800b1f2:	d809      	bhi.n	800b208 <_scanf_float+0x134>
 800b1f4:	2b60      	cmp	r3, #96	; 0x60
 800b1f6:	d8b2      	bhi.n	800b15e <_scanf_float+0x8a>
 800b1f8:	2b54      	cmp	r3, #84	; 0x54
 800b1fa:	d077      	beq.n	800b2ec <_scanf_float+0x218>
 800b1fc:	2b59      	cmp	r3, #89	; 0x59
 800b1fe:	d199      	bne.n	800b134 <_scanf_float+0x60>
 800b200:	2d07      	cmp	r5, #7
 800b202:	d197      	bne.n	800b134 <_scanf_float+0x60>
 800b204:	2508      	movs	r5, #8
 800b206:	e029      	b.n	800b25c <_scanf_float+0x188>
 800b208:	2b74      	cmp	r3, #116	; 0x74
 800b20a:	d06f      	beq.n	800b2ec <_scanf_float+0x218>
 800b20c:	2b79      	cmp	r3, #121	; 0x79
 800b20e:	e7f6      	b.n	800b1fe <_scanf_float+0x12a>
 800b210:	6821      	ldr	r1, [r4, #0]
 800b212:	05c8      	lsls	r0, r1, #23
 800b214:	d51a      	bpl.n	800b24c <_scanf_float+0x178>
 800b216:	9b02      	ldr	r3, [sp, #8]
 800b218:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b21c:	6021      	str	r1, [r4, #0]
 800b21e:	f109 0901 	add.w	r9, r9, #1
 800b222:	b11b      	cbz	r3, 800b22c <_scanf_float+0x158>
 800b224:	3b01      	subs	r3, #1
 800b226:	3201      	adds	r2, #1
 800b228:	9302      	str	r3, [sp, #8]
 800b22a:	60a2      	str	r2, [r4, #8]
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	3b01      	subs	r3, #1
 800b230:	60a3      	str	r3, [r4, #8]
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	3301      	adds	r3, #1
 800b236:	6123      	str	r3, [r4, #16]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	f340 8084 	ble.w	800b34c <_scanf_float+0x278>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	3301      	adds	r3, #1
 800b248:	603b      	str	r3, [r7, #0]
 800b24a:	e766      	b.n	800b11a <_scanf_float+0x46>
 800b24c:	eb1a 0f05 	cmn.w	sl, r5
 800b250:	f47f af70 	bne.w	800b134 <_scanf_float+0x60>
 800b254:	6822      	ldr	r2, [r4, #0]
 800b256:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b25a:	6022      	str	r2, [r4, #0]
 800b25c:	f806 3b01 	strb.w	r3, [r6], #1
 800b260:	e7e4      	b.n	800b22c <_scanf_float+0x158>
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	0610      	lsls	r0, r2, #24
 800b266:	f57f af65 	bpl.w	800b134 <_scanf_float+0x60>
 800b26a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b26e:	e7f4      	b.n	800b25a <_scanf_float+0x186>
 800b270:	f1ba 0f00 	cmp.w	sl, #0
 800b274:	d10e      	bne.n	800b294 <_scanf_float+0x1c0>
 800b276:	f1b9 0f00 	cmp.w	r9, #0
 800b27a:	d10e      	bne.n	800b29a <_scanf_float+0x1c6>
 800b27c:	6822      	ldr	r2, [r4, #0]
 800b27e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b282:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b286:	d108      	bne.n	800b29a <_scanf_float+0x1c6>
 800b288:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b28c:	6022      	str	r2, [r4, #0]
 800b28e:	f04f 0a01 	mov.w	sl, #1
 800b292:	e7e3      	b.n	800b25c <_scanf_float+0x188>
 800b294:	f1ba 0f02 	cmp.w	sl, #2
 800b298:	d055      	beq.n	800b346 <_scanf_float+0x272>
 800b29a:	2d01      	cmp	r5, #1
 800b29c:	d002      	beq.n	800b2a4 <_scanf_float+0x1d0>
 800b29e:	2d04      	cmp	r5, #4
 800b2a0:	f47f af48 	bne.w	800b134 <_scanf_float+0x60>
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	b2ed      	uxtb	r5, r5
 800b2a8:	e7d8      	b.n	800b25c <_scanf_float+0x188>
 800b2aa:	f1ba 0f01 	cmp.w	sl, #1
 800b2ae:	f47f af41 	bne.w	800b134 <_scanf_float+0x60>
 800b2b2:	f04f 0a02 	mov.w	sl, #2
 800b2b6:	e7d1      	b.n	800b25c <_scanf_float+0x188>
 800b2b8:	b97d      	cbnz	r5, 800b2da <_scanf_float+0x206>
 800b2ba:	f1b9 0f00 	cmp.w	r9, #0
 800b2be:	f47f af3c 	bne.w	800b13a <_scanf_float+0x66>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b2c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b2cc:	f47f af39 	bne.w	800b142 <_scanf_float+0x6e>
 800b2d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	2501      	movs	r5, #1
 800b2d8:	e7c0      	b.n	800b25c <_scanf_float+0x188>
 800b2da:	2d03      	cmp	r5, #3
 800b2dc:	d0e2      	beq.n	800b2a4 <_scanf_float+0x1d0>
 800b2de:	2d05      	cmp	r5, #5
 800b2e0:	e7de      	b.n	800b2a0 <_scanf_float+0x1cc>
 800b2e2:	2d02      	cmp	r5, #2
 800b2e4:	f47f af26 	bne.w	800b134 <_scanf_float+0x60>
 800b2e8:	2503      	movs	r5, #3
 800b2ea:	e7b7      	b.n	800b25c <_scanf_float+0x188>
 800b2ec:	2d06      	cmp	r5, #6
 800b2ee:	f47f af21 	bne.w	800b134 <_scanf_float+0x60>
 800b2f2:	2507      	movs	r5, #7
 800b2f4:	e7b2      	b.n	800b25c <_scanf_float+0x188>
 800b2f6:	6822      	ldr	r2, [r4, #0]
 800b2f8:	0591      	lsls	r1, r2, #22
 800b2fa:	f57f af1b 	bpl.w	800b134 <_scanf_float+0x60>
 800b2fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b302:	6022      	str	r2, [r4, #0]
 800b304:	f8cd 9004 	str.w	r9, [sp, #4]
 800b308:	e7a8      	b.n	800b25c <_scanf_float+0x188>
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b310:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b314:	d006      	beq.n	800b324 <_scanf_float+0x250>
 800b316:	0550      	lsls	r0, r2, #21
 800b318:	f57f af0c 	bpl.w	800b134 <_scanf_float+0x60>
 800b31c:	f1b9 0f00 	cmp.w	r9, #0
 800b320:	f43f af0f 	beq.w	800b142 <_scanf_float+0x6e>
 800b324:	0591      	lsls	r1, r2, #22
 800b326:	bf58      	it	pl
 800b328:	9901      	ldrpl	r1, [sp, #4]
 800b32a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b32e:	bf58      	it	pl
 800b330:	eba9 0101 	subpl.w	r1, r9, r1
 800b334:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b338:	bf58      	it	pl
 800b33a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b33e:	6022      	str	r2, [r4, #0]
 800b340:	f04f 0900 	mov.w	r9, #0
 800b344:	e78a      	b.n	800b25c <_scanf_float+0x188>
 800b346:	f04f 0a03 	mov.w	sl, #3
 800b34a:	e787      	b.n	800b25c <_scanf_float+0x188>
 800b34c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b350:	4639      	mov	r1, r7
 800b352:	4640      	mov	r0, r8
 800b354:	4798      	blx	r3
 800b356:	2800      	cmp	r0, #0
 800b358:	f43f aedf 	beq.w	800b11a <_scanf_float+0x46>
 800b35c:	e6ea      	b.n	800b134 <_scanf_float+0x60>
 800b35e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b366:	463a      	mov	r2, r7
 800b368:	4640      	mov	r0, r8
 800b36a:	4798      	blx	r3
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	3b01      	subs	r3, #1
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	e6ec      	b.n	800b14e <_scanf_float+0x7a>
 800b374:	1e6b      	subs	r3, r5, #1
 800b376:	2b06      	cmp	r3, #6
 800b378:	d825      	bhi.n	800b3c6 <_scanf_float+0x2f2>
 800b37a:	2d02      	cmp	r5, #2
 800b37c:	d836      	bhi.n	800b3ec <_scanf_float+0x318>
 800b37e:	455e      	cmp	r6, fp
 800b380:	f67f aee8 	bls.w	800b154 <_scanf_float+0x80>
 800b384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b388:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b38c:	463a      	mov	r2, r7
 800b38e:	4640      	mov	r0, r8
 800b390:	4798      	blx	r3
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	3b01      	subs	r3, #1
 800b396:	6123      	str	r3, [r4, #16]
 800b398:	e7f1      	b.n	800b37e <_scanf_float+0x2aa>
 800b39a:	9802      	ldr	r0, [sp, #8]
 800b39c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	463a      	mov	r2, r7
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4798      	blx	r3
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3b6:	fa5f fa8a 	uxtb.w	sl, sl
 800b3ba:	f1ba 0f02 	cmp.w	sl, #2
 800b3be:	d1ec      	bne.n	800b39a <_scanf_float+0x2c6>
 800b3c0:	3d03      	subs	r5, #3
 800b3c2:	b2ed      	uxtb	r5, r5
 800b3c4:	1b76      	subs	r6, r6, r5
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	05da      	lsls	r2, r3, #23
 800b3ca:	d52f      	bpl.n	800b42c <_scanf_float+0x358>
 800b3cc:	055b      	lsls	r3, r3, #21
 800b3ce:	d510      	bpl.n	800b3f2 <_scanf_float+0x31e>
 800b3d0:	455e      	cmp	r6, fp
 800b3d2:	f67f aebf 	bls.w	800b154 <_scanf_float+0x80>
 800b3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3de:	463a      	mov	r2, r7
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	4798      	blx	r3
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	e7f1      	b.n	800b3d0 <_scanf_float+0x2fc>
 800b3ec:	46aa      	mov	sl, r5
 800b3ee:	9602      	str	r6, [sp, #8]
 800b3f0:	e7df      	b.n	800b3b2 <_scanf_float+0x2de>
 800b3f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	2965      	cmp	r1, #101	; 0x65
 800b3fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	d00c      	beq.n	800b420 <_scanf_float+0x34c>
 800b406:	2945      	cmp	r1, #69	; 0x45
 800b408:	d00a      	beq.n	800b420 <_scanf_float+0x34c>
 800b40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b40e:	463a      	mov	r2, r7
 800b410:	4640      	mov	r0, r8
 800b412:	4798      	blx	r3
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	1eb5      	subs	r5, r6, #2
 800b41e:	6123      	str	r3, [r4, #16]
 800b420:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b424:	463a      	mov	r2, r7
 800b426:	4640      	mov	r0, r8
 800b428:	4798      	blx	r3
 800b42a:	462e      	mov	r6, r5
 800b42c:	6825      	ldr	r5, [r4, #0]
 800b42e:	f015 0510 	ands.w	r5, r5, #16
 800b432:	d158      	bne.n	800b4e6 <_scanf_float+0x412>
 800b434:	7035      	strb	r5, [r6, #0]
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b43c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b440:	d11c      	bne.n	800b47c <_scanf_float+0x3a8>
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	454b      	cmp	r3, r9
 800b446:	eba3 0209 	sub.w	r2, r3, r9
 800b44a:	d124      	bne.n	800b496 <_scanf_float+0x3c2>
 800b44c:	2200      	movs	r2, #0
 800b44e:	4659      	mov	r1, fp
 800b450:	4640      	mov	r0, r8
 800b452:	f002 fc2d 	bl	800dcb0 <_strtod_r>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	6821      	ldr	r1, [r4, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f011 0f02 	tst.w	r1, #2
 800b460:	ec57 6b10 	vmov	r6, r7, d0
 800b464:	f103 0204 	add.w	r2, r3, #4
 800b468:	d020      	beq.n	800b4ac <_scanf_float+0x3d8>
 800b46a:	9903      	ldr	r1, [sp, #12]
 800b46c:	600a      	str	r2, [r1, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	e9c3 6700 	strd	r6, r7, [r3]
 800b474:	68e3      	ldr	r3, [r4, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60e3      	str	r3, [r4, #12]
 800b47a:	e66c      	b.n	800b156 <_scanf_float+0x82>
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0e4      	beq.n	800b44c <_scanf_float+0x378>
 800b482:	9905      	ldr	r1, [sp, #20]
 800b484:	230a      	movs	r3, #10
 800b486:	462a      	mov	r2, r5
 800b488:	3101      	adds	r1, #1
 800b48a:	4640      	mov	r0, r8
 800b48c:	f002 fc98 	bl	800ddc0 <_strtol_r>
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	9e05      	ldr	r6, [sp, #20]
 800b494:	1ac2      	subs	r2, r0, r3
 800b496:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b49a:	429e      	cmp	r6, r3
 800b49c:	bf28      	it	cs
 800b49e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b4a2:	4912      	ldr	r1, [pc, #72]	; (800b4ec <_scanf_float+0x418>)
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f000 f8e7 	bl	800b678 <siprintf>
 800b4aa:	e7cf      	b.n	800b44c <_scanf_float+0x378>
 800b4ac:	f011 0f04 	tst.w	r1, #4
 800b4b0:	9903      	ldr	r1, [sp, #12]
 800b4b2:	600a      	str	r2, [r1, #0]
 800b4b4:	d1db      	bne.n	800b46e <_scanf_float+0x39a>
 800b4b6:	f8d3 8000 	ldr.w	r8, [r3]
 800b4ba:	ee10 2a10 	vmov	r2, s0
 800b4be:	ee10 0a10 	vmov	r0, s0
 800b4c2:	463b      	mov	r3, r7
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f5 fb31 	bl	8000b2c <__aeabi_dcmpun>
 800b4ca:	b128      	cbz	r0, 800b4d8 <_scanf_float+0x404>
 800b4cc:	4808      	ldr	r0, [pc, #32]	; (800b4f0 <_scanf_float+0x41c>)
 800b4ce:	f000 f9b5 	bl	800b83c <nanf>
 800b4d2:	ed88 0a00 	vstr	s0, [r8]
 800b4d6:	e7cd      	b.n	800b474 <_scanf_float+0x3a0>
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fb84 	bl	8000be8 <__aeabi_d2f>
 800b4e0:	f8c8 0000 	str.w	r0, [r8]
 800b4e4:	e7c6      	b.n	800b474 <_scanf_float+0x3a0>
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	e635      	b.n	800b156 <_scanf_float+0x82>
 800b4ea:	bf00      	nop
 800b4ec:	0800f0b8 	.word	0x0800f0b8
 800b4f0:	0800f44d 	.word	0x0800f44d

0800b4f4 <std>:
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b4fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b502:	6083      	str	r3, [r0, #8]
 800b504:	8181      	strh	r1, [r0, #12]
 800b506:	6643      	str	r3, [r0, #100]	; 0x64
 800b508:	81c2      	strh	r2, [r0, #14]
 800b50a:	6183      	str	r3, [r0, #24]
 800b50c:	4619      	mov	r1, r3
 800b50e:	2208      	movs	r2, #8
 800b510:	305c      	adds	r0, #92	; 0x5c
 800b512:	f000 f914 	bl	800b73e <memset>
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <std+0x38>)
 800b518:	6263      	str	r3, [r4, #36]	; 0x24
 800b51a:	4b05      	ldr	r3, [pc, #20]	; (800b530 <std+0x3c>)
 800b51c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <std+0x40>)
 800b520:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <std+0x44>)
 800b524:	6224      	str	r4, [r4, #32]
 800b526:	6323      	str	r3, [r4, #48]	; 0x30
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	bf00      	nop
 800b52c:	0800b6b9 	.word	0x0800b6b9
 800b530:	0800b6db 	.word	0x0800b6db
 800b534:	0800b713 	.word	0x0800b713
 800b538:	0800b737 	.word	0x0800b737

0800b53c <stdio_exit_handler>:
 800b53c:	4a02      	ldr	r2, [pc, #8]	; (800b548 <stdio_exit_handler+0xc>)
 800b53e:	4903      	ldr	r1, [pc, #12]	; (800b54c <stdio_exit_handler+0x10>)
 800b540:	4803      	ldr	r0, [pc, #12]	; (800b550 <stdio_exit_handler+0x14>)
 800b542:	f000 b869 	b.w	800b618 <_fwalk_sglue>
 800b546:	bf00      	nop
 800b548:	2000010c 	.word	0x2000010c
 800b54c:	0800e409 	.word	0x0800e409
 800b550:	20000118 	.word	0x20000118

0800b554 <cleanup_stdio>:
 800b554:	6841      	ldr	r1, [r0, #4]
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <cleanup_stdio+0x34>)
 800b558:	4299      	cmp	r1, r3
 800b55a:	b510      	push	{r4, lr}
 800b55c:	4604      	mov	r4, r0
 800b55e:	d001      	beq.n	800b564 <cleanup_stdio+0x10>
 800b560:	f002 ff52 	bl	800e408 <_fflush_r>
 800b564:	68a1      	ldr	r1, [r4, #8]
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <cleanup_stdio+0x38>)
 800b568:	4299      	cmp	r1, r3
 800b56a:	d002      	beq.n	800b572 <cleanup_stdio+0x1e>
 800b56c:	4620      	mov	r0, r4
 800b56e:	f002 ff4b 	bl	800e408 <_fflush_r>
 800b572:	68e1      	ldr	r1, [r4, #12]
 800b574:	4b06      	ldr	r3, [pc, #24]	; (800b590 <cleanup_stdio+0x3c>)
 800b576:	4299      	cmp	r1, r3
 800b578:	d004      	beq.n	800b584 <cleanup_stdio+0x30>
 800b57a:	4620      	mov	r0, r4
 800b57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b580:	f002 bf42 	b.w	800e408 <_fflush_r>
 800b584:	bd10      	pop	{r4, pc}
 800b586:	bf00      	nop
 800b588:	20002050 	.word	0x20002050
 800b58c:	200020b8 	.word	0x200020b8
 800b590:	20002120 	.word	0x20002120

0800b594 <global_stdio_init.part.0>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <global_stdio_init.part.0+0x30>)
 800b598:	4c0b      	ldr	r4, [pc, #44]	; (800b5c8 <global_stdio_init.part.0+0x34>)
 800b59a:	4a0c      	ldr	r2, [pc, #48]	; (800b5cc <global_stdio_init.part.0+0x38>)
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2104      	movs	r1, #4
 800b5a4:	f7ff ffa6 	bl	800b4f4 <std>
 800b5a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	2109      	movs	r1, #9
 800b5b0:	f7ff ffa0 	bl	800b4f4 <std>
 800b5b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5be:	2112      	movs	r1, #18
 800b5c0:	f7ff bf98 	b.w	800b4f4 <std>
 800b5c4:	20002188 	.word	0x20002188
 800b5c8:	20002050 	.word	0x20002050
 800b5cc:	0800b53d 	.word	0x0800b53d

0800b5d0 <__sfp_lock_acquire>:
 800b5d0:	4801      	ldr	r0, [pc, #4]	; (800b5d8 <__sfp_lock_acquire+0x8>)
 800b5d2:	f000 b931 	b.w	800b838 <__retarget_lock_acquire_recursive>
 800b5d6:	bf00      	nop
 800b5d8:	20002191 	.word	0x20002191

0800b5dc <__sfp_lock_release>:
 800b5dc:	4801      	ldr	r0, [pc, #4]	; (800b5e4 <__sfp_lock_release+0x8>)
 800b5de:	f000 b92c 	b.w	800b83a <__retarget_lock_release_recursive>
 800b5e2:	bf00      	nop
 800b5e4:	20002191 	.word	0x20002191

0800b5e8 <__sinit>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	f7ff fff0 	bl	800b5d0 <__sfp_lock_acquire>
 800b5f0:	6a23      	ldr	r3, [r4, #32]
 800b5f2:	b11b      	cbz	r3, 800b5fc <__sinit+0x14>
 800b5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f8:	f7ff bff0 	b.w	800b5dc <__sfp_lock_release>
 800b5fc:	4b04      	ldr	r3, [pc, #16]	; (800b610 <__sinit+0x28>)
 800b5fe:	6223      	str	r3, [r4, #32]
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <__sinit+0x2c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1f5      	bne.n	800b5f4 <__sinit+0xc>
 800b608:	f7ff ffc4 	bl	800b594 <global_stdio_init.part.0>
 800b60c:	e7f2      	b.n	800b5f4 <__sinit+0xc>
 800b60e:	bf00      	nop
 800b610:	0800b555 	.word	0x0800b555
 800b614:	20002188 	.word	0x20002188

0800b618 <_fwalk_sglue>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	4607      	mov	r7, r0
 800b61e:	4688      	mov	r8, r1
 800b620:	4614      	mov	r4, r2
 800b622:	2600      	movs	r6, #0
 800b624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b628:	f1b9 0901 	subs.w	r9, r9, #1
 800b62c:	d505      	bpl.n	800b63a <_fwalk_sglue+0x22>
 800b62e:	6824      	ldr	r4, [r4, #0]
 800b630:	2c00      	cmp	r4, #0
 800b632:	d1f7      	bne.n	800b624 <_fwalk_sglue+0xc>
 800b634:	4630      	mov	r0, r6
 800b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d907      	bls.n	800b650 <_fwalk_sglue+0x38>
 800b640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b644:	3301      	adds	r3, #1
 800b646:	d003      	beq.n	800b650 <_fwalk_sglue+0x38>
 800b648:	4629      	mov	r1, r5
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c0      	blx	r8
 800b64e:	4306      	orrs	r6, r0
 800b650:	3568      	adds	r5, #104	; 0x68
 800b652:	e7e9      	b.n	800b628 <_fwalk_sglue+0x10>

0800b654 <iprintf>:
 800b654:	b40f      	push	{r0, r1, r2, r3}
 800b656:	b507      	push	{r0, r1, r2, lr}
 800b658:	4906      	ldr	r1, [pc, #24]	; (800b674 <iprintf+0x20>)
 800b65a:	ab04      	add	r3, sp, #16
 800b65c:	6808      	ldr	r0, [r1, #0]
 800b65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b662:	6881      	ldr	r1, [r0, #8]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	f002 fd2f 	bl	800e0c8 <_vfiprintf_r>
 800b66a:	b003      	add	sp, #12
 800b66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b670:	b004      	add	sp, #16
 800b672:	4770      	bx	lr
 800b674:	20000164 	.word	0x20000164

0800b678 <siprintf>:
 800b678:	b40e      	push	{r1, r2, r3}
 800b67a:	b500      	push	{lr}
 800b67c:	b09c      	sub	sp, #112	; 0x70
 800b67e:	ab1d      	add	r3, sp, #116	; 0x74
 800b680:	9002      	str	r0, [sp, #8]
 800b682:	9006      	str	r0, [sp, #24]
 800b684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b688:	4809      	ldr	r0, [pc, #36]	; (800b6b0 <siprintf+0x38>)
 800b68a:	9107      	str	r1, [sp, #28]
 800b68c:	9104      	str	r1, [sp, #16]
 800b68e:	4909      	ldr	r1, [pc, #36]	; (800b6b4 <siprintf+0x3c>)
 800b690:	f853 2b04 	ldr.w	r2, [r3], #4
 800b694:	9105      	str	r1, [sp, #20]
 800b696:	6800      	ldr	r0, [r0, #0]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	a902      	add	r1, sp, #8
 800b69c:	f002 fbec 	bl	800de78 <_svfiprintf_r>
 800b6a0:	9b02      	ldr	r3, [sp, #8]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	b01c      	add	sp, #112	; 0x70
 800b6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6ac:	b003      	add	sp, #12
 800b6ae:	4770      	bx	lr
 800b6b0:	20000164 	.word	0x20000164
 800b6b4:	ffff0208 	.word	0xffff0208

0800b6b8 <__sread>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	f000 f86c 	bl	800b79c <_read_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	bfab      	itete	ge
 800b6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b6cc:	181b      	addge	r3, r3, r0
 800b6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6d2:	bfac      	ite	ge
 800b6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6d6:	81a3      	strhlt	r3, [r4, #12]
 800b6d8:	bd10      	pop	{r4, pc}

0800b6da <__swrite>:
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	461f      	mov	r7, r3
 800b6e0:	898b      	ldrh	r3, [r1, #12]
 800b6e2:	05db      	lsls	r3, r3, #23
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	d505      	bpl.n	800b6f8 <__swrite+0x1e>
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f000 f840 	bl	800b778 <_lseek_r>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	4632      	mov	r2, r6
 800b706:	463b      	mov	r3, r7
 800b708:	4628      	mov	r0, r5
 800b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	f000 b857 	b.w	800b7c0 <_write_r>

0800b712 <__sseek>:
 800b712:	b510      	push	{r4, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 f82d 	bl	800b778 <_lseek_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	bf15      	itete	ne
 800b724:	6560      	strne	r0, [r4, #84]	; 0x54
 800b726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b72e:	81a3      	strheq	r3, [r4, #12]
 800b730:	bf18      	it	ne
 800b732:	81a3      	strhne	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__sclose>:
 800b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73a:	f000 b80d 	b.w	800b758 <_close_r>

0800b73e <memset>:
 800b73e:	4402      	add	r2, r0
 800b740:	4603      	mov	r3, r0
 800b742:	4293      	cmp	r3, r2
 800b744:	d100      	bne.n	800b748 <memset+0xa>
 800b746:	4770      	bx	lr
 800b748:	f803 1b01 	strb.w	r1, [r3], #1
 800b74c:	e7f9      	b.n	800b742 <memset+0x4>
	...

0800b750 <_localeconv_r>:
 800b750:	4800      	ldr	r0, [pc, #0]	; (800b754 <_localeconv_r+0x4>)
 800b752:	4770      	bx	lr
 800b754:	20000258 	.word	0x20000258

0800b758 <_close_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d06      	ldr	r5, [pc, #24]	; (800b774 <_close_r+0x1c>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	602b      	str	r3, [r5, #0]
 800b764:	f7f6 f8fb 	bl	800195e <_close>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d102      	bne.n	800b772 <_close_r+0x1a>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	b103      	cbz	r3, 800b772 <_close_r+0x1a>
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	2000218c 	.word	0x2000218c

0800b778 <_lseek_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_lseek_r+0x20>)
 800b77c:	4604      	mov	r4, r0
 800b77e:	4608      	mov	r0, r1
 800b780:	4611      	mov	r1, r2
 800b782:	2200      	movs	r2, #0
 800b784:	602a      	str	r2, [r5, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	f7f6 f910 	bl	80019ac <_lseek>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_lseek_r+0x1e>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_lseek_r+0x1e>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	2000218c 	.word	0x2000218c

0800b79c <_read_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d07      	ldr	r5, [pc, #28]	; (800b7bc <_read_r+0x20>)
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	602a      	str	r2, [r5, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f7f6 f8ba 	bl	8001924 <_read>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_read_r+0x1e>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_read_r+0x1e>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	2000218c 	.word	0x2000218c

0800b7c0 <_write_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	; (800b7e0 <_write_r+0x20>)
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	602a      	str	r2, [r5, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f7f5 fdb6 	bl	8001340 <_write>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_write_r+0x1e>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_write_r+0x1e>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	2000218c 	.word	0x2000218c

0800b7e4 <__errno>:
 800b7e4:	4b01      	ldr	r3, [pc, #4]	; (800b7ec <__errno+0x8>)
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	20000164 	.word	0x20000164

0800b7f0 <__libc_init_array>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4d0d      	ldr	r5, [pc, #52]	; (800b828 <__libc_init_array+0x38>)
 800b7f4:	4c0d      	ldr	r4, [pc, #52]	; (800b82c <__libc_init_array+0x3c>)
 800b7f6:	1b64      	subs	r4, r4, r5
 800b7f8:	10a4      	asrs	r4, r4, #2
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	42a6      	cmp	r6, r4
 800b7fe:	d109      	bne.n	800b814 <__libc_init_array+0x24>
 800b800:	4d0b      	ldr	r5, [pc, #44]	; (800b830 <__libc_init_array+0x40>)
 800b802:	4c0c      	ldr	r4, [pc, #48]	; (800b834 <__libc_init_array+0x44>)
 800b804:	f003 fbd4 	bl	800efb0 <_init>
 800b808:	1b64      	subs	r4, r4, r5
 800b80a:	10a4      	asrs	r4, r4, #2
 800b80c:	2600      	movs	r6, #0
 800b80e:	42a6      	cmp	r6, r4
 800b810:	d105      	bne.n	800b81e <__libc_init_array+0x2e>
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	f855 3b04 	ldr.w	r3, [r5], #4
 800b818:	4798      	blx	r3
 800b81a:	3601      	adds	r6, #1
 800b81c:	e7ee      	b.n	800b7fc <__libc_init_array+0xc>
 800b81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b822:	4798      	blx	r3
 800b824:	3601      	adds	r6, #1
 800b826:	e7f2      	b.n	800b80e <__libc_init_array+0x1e>
 800b828:	0800f4b8 	.word	0x0800f4b8
 800b82c:	0800f4b8 	.word	0x0800f4b8
 800b830:	0800f4b8 	.word	0x0800f4b8
 800b834:	0800f4bc 	.word	0x0800f4bc

0800b838 <__retarget_lock_acquire_recursive>:
 800b838:	4770      	bx	lr

0800b83a <__retarget_lock_release_recursive>:
 800b83a:	4770      	bx	lr

0800b83c <nanf>:
 800b83c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b844 <nanf+0x8>
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	7fc00000 	.word	0x7fc00000

0800b848 <quorem>:
 800b848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	6903      	ldr	r3, [r0, #16]
 800b84e:	690c      	ldr	r4, [r1, #16]
 800b850:	42a3      	cmp	r3, r4
 800b852:	4607      	mov	r7, r0
 800b854:	db7e      	blt.n	800b954 <quorem+0x10c>
 800b856:	3c01      	subs	r4, #1
 800b858:	f101 0814 	add.w	r8, r1, #20
 800b85c:	f100 0514 	add.w	r5, r0, #20
 800b860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b86a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b86e:	3301      	adds	r3, #1
 800b870:	429a      	cmp	r2, r3
 800b872:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b876:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b87a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b87e:	d331      	bcc.n	800b8e4 <quorem+0x9c>
 800b880:	f04f 0e00 	mov.w	lr, #0
 800b884:	4640      	mov	r0, r8
 800b886:	46ac      	mov	ip, r5
 800b888:	46f2      	mov	sl, lr
 800b88a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b88e:	b293      	uxth	r3, r2
 800b890:	fb06 e303 	mla	r3, r6, r3, lr
 800b894:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b898:	0c1a      	lsrs	r2, r3, #16
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	ebaa 0303 	sub.w	r3, sl, r3
 800b8a0:	f8dc a000 	ldr.w	sl, [ip]
 800b8a4:	fa13 f38a 	uxtah	r3, r3, sl
 800b8a8:	fb06 220e 	mla	r2, r6, lr, r2
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	9b00      	ldr	r3, [sp, #0]
 800b8b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b8ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8be:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8c2:	4581      	cmp	r9, r0
 800b8c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8c8:	f84c 3b04 	str.w	r3, [ip], #4
 800b8cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8d0:	d2db      	bcs.n	800b88a <quorem+0x42>
 800b8d2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8d6:	b92b      	cbnz	r3, 800b8e4 <quorem+0x9c>
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	3b04      	subs	r3, #4
 800b8dc:	429d      	cmp	r5, r3
 800b8de:	461a      	mov	r2, r3
 800b8e0:	d32c      	bcc.n	800b93c <quorem+0xf4>
 800b8e2:	613c      	str	r4, [r7, #16]
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f001 f9ef 	bl	800ccc8 <__mcmp>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	db22      	blt.n	800b934 <quorem+0xec>
 800b8ee:	3601      	adds	r6, #1
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8f8:	f8d1 c000 	ldr.w	ip, [r1]
 800b8fc:	b293      	uxth	r3, r2
 800b8fe:	1ac3      	subs	r3, r0, r3
 800b900:	0c12      	lsrs	r2, r2, #16
 800b902:	fa13 f38c 	uxtah	r3, r3, ip
 800b906:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b90a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b90e:	b29b      	uxth	r3, r3
 800b910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b914:	45c1      	cmp	r9, r8
 800b916:	f841 3b04 	str.w	r3, [r1], #4
 800b91a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b91e:	d2e9      	bcs.n	800b8f4 <quorem+0xac>
 800b920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b924:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b928:	b922      	cbnz	r2, 800b934 <quorem+0xec>
 800b92a:	3b04      	subs	r3, #4
 800b92c:	429d      	cmp	r5, r3
 800b92e:	461a      	mov	r2, r3
 800b930:	d30a      	bcc.n	800b948 <quorem+0x100>
 800b932:	613c      	str	r4, [r7, #16]
 800b934:	4630      	mov	r0, r6
 800b936:	b003      	add	sp, #12
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	3b04      	subs	r3, #4
 800b940:	2a00      	cmp	r2, #0
 800b942:	d1ce      	bne.n	800b8e2 <quorem+0x9a>
 800b944:	3c01      	subs	r4, #1
 800b946:	e7c9      	b.n	800b8dc <quorem+0x94>
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	d1f0      	bne.n	800b932 <quorem+0xea>
 800b950:	3c01      	subs	r4, #1
 800b952:	e7eb      	b.n	800b92c <quorem+0xe4>
 800b954:	2000      	movs	r0, #0
 800b956:	e7ee      	b.n	800b936 <quorem+0xee>

0800b958 <_dtoa_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	ed2d 8b04 	vpush	{d8-d9}
 800b960:	69c5      	ldr	r5, [r0, #28]
 800b962:	b093      	sub	sp, #76	; 0x4c
 800b964:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b968:	ec57 6b10 	vmov	r6, r7, d0
 800b96c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b970:	9107      	str	r1, [sp, #28]
 800b972:	4604      	mov	r4, r0
 800b974:	920a      	str	r2, [sp, #40]	; 0x28
 800b976:	930d      	str	r3, [sp, #52]	; 0x34
 800b978:	b975      	cbnz	r5, 800b998 <_dtoa_r+0x40>
 800b97a:	2010      	movs	r0, #16
 800b97c:	f000 fe2a 	bl	800c5d4 <malloc>
 800b980:	4602      	mov	r2, r0
 800b982:	61e0      	str	r0, [r4, #28]
 800b984:	b920      	cbnz	r0, 800b990 <_dtoa_r+0x38>
 800b986:	4bae      	ldr	r3, [pc, #696]	; (800bc40 <_dtoa_r+0x2e8>)
 800b988:	21ef      	movs	r1, #239	; 0xef
 800b98a:	48ae      	ldr	r0, [pc, #696]	; (800bc44 <_dtoa_r+0x2ec>)
 800b98c:	f002 fe4c 	bl	800e628 <__assert_func>
 800b990:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b994:	6005      	str	r5, [r0, #0]
 800b996:	60c5      	str	r5, [r0, #12]
 800b998:	69e3      	ldr	r3, [r4, #28]
 800b99a:	6819      	ldr	r1, [r3, #0]
 800b99c:	b151      	cbz	r1, 800b9b4 <_dtoa_r+0x5c>
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	604a      	str	r2, [r1, #4]
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4093      	lsls	r3, r2
 800b9a6:	608b      	str	r3, [r1, #8]
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 ff07 	bl	800c7bc <_Bfree>
 800b9ae:	69e3      	ldr	r3, [r4, #28]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	1e3b      	subs	r3, r7, #0
 800b9b6:	bfbb      	ittet	lt
 800b9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b9bc:	9303      	strlt	r3, [sp, #12]
 800b9be:	2300      	movge	r3, #0
 800b9c0:	2201      	movlt	r2, #1
 800b9c2:	bfac      	ite	ge
 800b9c4:	f8c8 3000 	strge.w	r3, [r8]
 800b9c8:	f8c8 2000 	strlt.w	r2, [r8]
 800b9cc:	4b9e      	ldr	r3, [pc, #632]	; (800bc48 <_dtoa_r+0x2f0>)
 800b9ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b9d2:	ea33 0308 	bics.w	r3, r3, r8
 800b9d6:	d11b      	bne.n	800ba10 <_dtoa_r+0xb8>
 800b9d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9da:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b9e4:	4333      	orrs	r3, r6
 800b9e6:	f000 8593 	beq.w	800c510 <_dtoa_r+0xbb8>
 800b9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9ec:	b963      	cbnz	r3, 800ba08 <_dtoa_r+0xb0>
 800b9ee:	4b97      	ldr	r3, [pc, #604]	; (800bc4c <_dtoa_r+0x2f4>)
 800b9f0:	e027      	b.n	800ba42 <_dtoa_r+0xea>
 800b9f2:	4b97      	ldr	r3, [pc, #604]	; (800bc50 <_dtoa_r+0x2f8>)
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	9800      	ldr	r0, [sp, #0]
 800b9fe:	b013      	add	sp, #76	; 0x4c
 800ba00:	ecbd 8b04 	vpop	{d8-d9}
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	4b90      	ldr	r3, [pc, #576]	; (800bc4c <_dtoa_r+0x2f4>)
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	3303      	adds	r3, #3
 800ba0e:	e7f3      	b.n	800b9f8 <_dtoa_r+0xa0>
 800ba10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba14:	2200      	movs	r2, #0
 800ba16:	ec51 0b17 	vmov	r0, r1, d7
 800ba1a:	eeb0 8a47 	vmov.f32	s16, s14
 800ba1e:	eef0 8a67 	vmov.f32	s17, s15
 800ba22:	2300      	movs	r3, #0
 800ba24:	f7f5 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba28:	4681      	mov	r9, r0
 800ba2a:	b160      	cbz	r0, 800ba46 <_dtoa_r+0xee>
 800ba2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba2e:	2301      	movs	r3, #1
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8568 	beq.w	800c50a <_dtoa_r+0xbb2>
 800ba3a:	4b86      	ldr	r3, [pc, #536]	; (800bc54 <_dtoa_r+0x2fc>)
 800ba3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	e7da      	b.n	800b9fc <_dtoa_r+0xa4>
 800ba46:	aa10      	add	r2, sp, #64	; 0x40
 800ba48:	a911      	add	r1, sp, #68	; 0x44
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba50:	eef0 0a68 	vmov.f32	s1, s17
 800ba54:	f001 fa4e 	bl	800cef4 <__d2b>
 800ba58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	2d00      	cmp	r5, #0
 800ba60:	d07f      	beq.n	800bb62 <_dtoa_r+0x20a>
 800ba62:	ee18 3a90 	vmov	r3, s17
 800ba66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba6e:	ec51 0b18 	vmov	r0, r1, d8
 800ba72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba7e:	4619      	mov	r1, r3
 800ba80:	2200      	movs	r2, #0
 800ba82:	4b75      	ldr	r3, [pc, #468]	; (800bc58 <_dtoa_r+0x300>)
 800ba84:	f7f4 fc00 	bl	8000288 <__aeabi_dsub>
 800ba88:	a367      	add	r3, pc, #412	; (adr r3, 800bc28 <_dtoa_r+0x2d0>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ba92:	a367      	add	r3, pc, #412	; (adr r3, 800bc30 <_dtoa_r+0x2d8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fbf8 	bl	800028c <__adddf3>
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	4628      	mov	r0, r5
 800baa0:	460f      	mov	r7, r1
 800baa2:	f7f4 fd3f 	bl	8000524 <__aeabi_i2d>
 800baa6:	a364      	add	r3, pc, #400	; (adr r3, 800bc38 <_dtoa_r+0x2e0>)
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	f7f4 fda4 	bl	80005f8 <__aeabi_dmul>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4630      	mov	r0, r6
 800bab6:	4639      	mov	r1, r7
 800bab8:	f7f4 fbe8 	bl	800028c <__adddf3>
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	f7f5 f84a 	bl	8000b58 <__aeabi_d2iz>
 800bac4:	2200      	movs	r2, #0
 800bac6:	4683      	mov	fp, r0
 800bac8:	2300      	movs	r3, #0
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f5 f805 	bl	8000adc <__aeabi_dcmplt>
 800bad2:	b148      	cbz	r0, 800bae8 <_dtoa_r+0x190>
 800bad4:	4658      	mov	r0, fp
 800bad6:	f7f4 fd25 	bl	8000524 <__aeabi_i2d>
 800bada:	4632      	mov	r2, r6
 800badc:	463b      	mov	r3, r7
 800bade:	f7f4 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae2:	b908      	cbnz	r0, 800bae8 <_dtoa_r+0x190>
 800bae4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bae8:	f1bb 0f16 	cmp.w	fp, #22
 800baec:	d857      	bhi.n	800bb9e <_dtoa_r+0x246>
 800baee:	4b5b      	ldr	r3, [pc, #364]	; (800bc5c <_dtoa_r+0x304>)
 800baf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	ec51 0b18 	vmov	r0, r1, d8
 800bafc:	f7f4 ffee 	bl	8000adc <__aeabi_dcmplt>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d04e      	beq.n	800bba2 <_dtoa_r+0x24a>
 800bb04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb08:	2300      	movs	r3, #0
 800bb0a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb0e:	1b5b      	subs	r3, r3, r5
 800bb10:	1e5a      	subs	r2, r3, #1
 800bb12:	bf45      	ittet	mi
 800bb14:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb18:	9305      	strmi	r3, [sp, #20]
 800bb1a:	2300      	movpl	r3, #0
 800bb1c:	2300      	movmi	r3, #0
 800bb1e:	9206      	str	r2, [sp, #24]
 800bb20:	bf54      	ite	pl
 800bb22:	9305      	strpl	r3, [sp, #20]
 800bb24:	9306      	strmi	r3, [sp, #24]
 800bb26:	f1bb 0f00 	cmp.w	fp, #0
 800bb2a:	db3c      	blt.n	800bba6 <_dtoa_r+0x24e>
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bb32:	445b      	add	r3, fp
 800bb34:	9306      	str	r3, [sp, #24]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	2b09      	cmp	r3, #9
 800bb3e:	d868      	bhi.n	800bc12 <_dtoa_r+0x2ba>
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	bfc4      	itt	gt
 800bb44:	3b04      	subgt	r3, #4
 800bb46:	9307      	strgt	r3, [sp, #28]
 800bb48:	9b07      	ldr	r3, [sp, #28]
 800bb4a:	f1a3 0302 	sub.w	r3, r3, #2
 800bb4e:	bfcc      	ite	gt
 800bb50:	2500      	movgt	r5, #0
 800bb52:	2501      	movle	r5, #1
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	f200 8085 	bhi.w	800bc64 <_dtoa_r+0x30c>
 800bb5a:	e8df f003 	tbb	[pc, r3]
 800bb5e:	3b2e      	.short	0x3b2e
 800bb60:	5839      	.short	0x5839
 800bb62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb66:	441d      	add	r5, r3
 800bb68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb6c:	2b20      	cmp	r3, #32
 800bb6e:	bfc1      	itttt	gt
 800bb70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb74:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb80:	bfd6      	itet	le
 800bb82:	f1c3 0320 	rsble	r3, r3, #32
 800bb86:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb8a:	fa06 f003 	lslle.w	r0, r6, r3
 800bb8e:	f7f4 fcb9 	bl	8000504 <__aeabi_ui2d>
 800bb92:	2201      	movs	r2, #1
 800bb94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb98:	3d01      	subs	r5, #1
 800bb9a:	920e      	str	r2, [sp, #56]	; 0x38
 800bb9c:	e76f      	b.n	800ba7e <_dtoa_r+0x126>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e7b3      	b.n	800bb0a <_dtoa_r+0x1b2>
 800bba2:	900c      	str	r0, [sp, #48]	; 0x30
 800bba4:	e7b2      	b.n	800bb0c <_dtoa_r+0x1b4>
 800bba6:	9b05      	ldr	r3, [sp, #20]
 800bba8:	eba3 030b 	sub.w	r3, r3, fp
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f1cb 0300 	rsb	r3, fp, #0
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb8:	e7bf      	b.n	800bb3a <_dtoa_r+0x1e2>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dc52      	bgt.n	800bc6a <_dtoa_r+0x312>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	920a      	str	r2, [sp, #40]	; 0x28
 800bbce:	e00b      	b.n	800bbe8 <_dtoa_r+0x290>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e7f3      	b.n	800bbbc <_dtoa_r+0x264>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbda:	445b      	add	r3, fp
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	bfb8      	it	lt
 800bbe6:	2301      	movlt	r3, #1
 800bbe8:	69e0      	ldr	r0, [r4, #28]
 800bbea:	2100      	movs	r1, #0
 800bbec:	2204      	movs	r2, #4
 800bbee:	f102 0614 	add.w	r6, r2, #20
 800bbf2:	429e      	cmp	r6, r3
 800bbf4:	d93d      	bls.n	800bc72 <_dtoa_r+0x31a>
 800bbf6:	6041      	str	r1, [r0, #4]
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f000 fd9f 	bl	800c73c <_Balloc>
 800bbfe:	9000      	str	r0, [sp, #0]
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d139      	bne.n	800bc78 <_dtoa_r+0x320>
 800bc04:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <_dtoa_r+0x308>)
 800bc06:	4602      	mov	r2, r0
 800bc08:	f240 11af 	movw	r1, #431	; 0x1af
 800bc0c:	e6bd      	b.n	800b98a <_dtoa_r+0x32>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e7e1      	b.n	800bbd6 <_dtoa_r+0x27e>
 800bc12:	2501      	movs	r5, #1
 800bc14:	2300      	movs	r3, #0
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	9509      	str	r5, [sp, #36]	; 0x24
 800bc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	2200      	movs	r2, #0
 800bc24:	2312      	movs	r3, #18
 800bc26:	e7d1      	b.n	800bbcc <_dtoa_r+0x274>
 800bc28:	636f4361 	.word	0x636f4361
 800bc2c:	3fd287a7 	.word	0x3fd287a7
 800bc30:	8b60c8b3 	.word	0x8b60c8b3
 800bc34:	3fc68a28 	.word	0x3fc68a28
 800bc38:	509f79fb 	.word	0x509f79fb
 800bc3c:	3fd34413 	.word	0x3fd34413
 800bc40:	0800f0ca 	.word	0x0800f0ca
 800bc44:	0800f0e1 	.word	0x0800f0e1
 800bc48:	7ff00000 	.word	0x7ff00000
 800bc4c:	0800f0c6 	.word	0x0800f0c6
 800bc50:	0800f0bd 	.word	0x0800f0bd
 800bc54:	0800f095 	.word	0x0800f095
 800bc58:	3ff80000 	.word	0x3ff80000
 800bc5c:	0800f1d0 	.word	0x0800f1d0
 800bc60:	0800f139 	.word	0x0800f139
 800bc64:	2301      	movs	r3, #1
 800bc66:	9309      	str	r3, [sp, #36]	; 0x24
 800bc68:	e7d7      	b.n	800bc1a <_dtoa_r+0x2c2>
 800bc6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	e7ba      	b.n	800bbe8 <_dtoa_r+0x290>
 800bc72:	3101      	adds	r1, #1
 800bc74:	0052      	lsls	r2, r2, #1
 800bc76:	e7ba      	b.n	800bbee <_dtoa_r+0x296>
 800bc78:	69e3      	ldr	r3, [r4, #28]
 800bc7a:	9a00      	ldr	r2, [sp, #0]
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	2b0e      	cmp	r3, #14
 800bc82:	f200 80a8 	bhi.w	800bdd6 <_dtoa_r+0x47e>
 800bc86:	2d00      	cmp	r5, #0
 800bc88:	f000 80a5 	beq.w	800bdd6 <_dtoa_r+0x47e>
 800bc8c:	f1bb 0f00 	cmp.w	fp, #0
 800bc90:	dd38      	ble.n	800bd04 <_dtoa_r+0x3ac>
 800bc92:	4bc0      	ldr	r3, [pc, #768]	; (800bf94 <_dtoa_r+0x63c>)
 800bc94:	f00b 020f 	and.w	r2, fp, #15
 800bc98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bca0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bca4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bca8:	d019      	beq.n	800bcde <_dtoa_r+0x386>
 800bcaa:	4bbb      	ldr	r3, [pc, #748]	; (800bf98 <_dtoa_r+0x640>)
 800bcac:	ec51 0b18 	vmov	r0, r1, d8
 800bcb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcb4:	f7f4 fdca 	bl	800084c <__aeabi_ddiv>
 800bcb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcbc:	f008 080f 	and.w	r8, r8, #15
 800bcc0:	2503      	movs	r5, #3
 800bcc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf98 <_dtoa_r+0x640>
 800bcc6:	f1b8 0f00 	cmp.w	r8, #0
 800bcca:	d10a      	bne.n	800bce2 <_dtoa_r+0x38a>
 800bccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	f7f4 fdba 	bl	800084c <__aeabi_ddiv>
 800bcd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcdc:	e02b      	b.n	800bd36 <_dtoa_r+0x3de>
 800bcde:	2502      	movs	r5, #2
 800bce0:	e7ef      	b.n	800bcc2 <_dtoa_r+0x36a>
 800bce2:	f018 0f01 	tst.w	r8, #1
 800bce6:	d008      	beq.n	800bcfa <_dtoa_r+0x3a2>
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bcf0:	f7f4 fc82 	bl	80005f8 <__aeabi_dmul>
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcfe:	f109 0908 	add.w	r9, r9, #8
 800bd02:	e7e0      	b.n	800bcc6 <_dtoa_r+0x36e>
 800bd04:	f000 809f 	beq.w	800be46 <_dtoa_r+0x4ee>
 800bd08:	f1cb 0600 	rsb	r6, fp, #0
 800bd0c:	4ba1      	ldr	r3, [pc, #644]	; (800bf94 <_dtoa_r+0x63c>)
 800bd0e:	4fa2      	ldr	r7, [pc, #648]	; (800bf98 <_dtoa_r+0x640>)
 800bd10:	f006 020f 	and.w	r2, r6, #15
 800bd14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	ec51 0b18 	vmov	r0, r1, d8
 800bd20:	f7f4 fc6a 	bl	80005f8 <__aeabi_dmul>
 800bd24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd28:	1136      	asrs	r6, r6, #4
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2502      	movs	r5, #2
 800bd2e:	2e00      	cmp	r6, #0
 800bd30:	d17e      	bne.n	800be30 <_dtoa_r+0x4d8>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1d0      	bne.n	800bcd8 <_dtoa_r+0x380>
 800bd36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 8084 	beq.w	800be4a <_dtoa_r+0x4f2>
 800bd42:	4b96      	ldr	r3, [pc, #600]	; (800bf9c <_dtoa_r+0x644>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	4640      	mov	r0, r8
 800bd48:	4649      	mov	r1, r9
 800bd4a:	f7f4 fec7 	bl	8000adc <__aeabi_dcmplt>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d07b      	beq.n	800be4a <_dtoa_r+0x4f2>
 800bd52:	9b04      	ldr	r3, [sp, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d078      	beq.n	800be4a <_dtoa_r+0x4f2>
 800bd58:	9b01      	ldr	r3, [sp, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dd39      	ble.n	800bdd2 <_dtoa_r+0x47a>
 800bd5e:	4b90      	ldr	r3, [pc, #576]	; (800bfa0 <_dtoa_r+0x648>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	f7f4 fc47 	bl	80005f8 <__aeabi_dmul>
 800bd6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd6e:	9e01      	ldr	r6, [sp, #4]
 800bd70:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd74:	3501      	adds	r5, #1
 800bd76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f7f4 fbd2 	bl	8000524 <__aeabi_i2d>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	f7f4 fc38 	bl	80005f8 <__aeabi_dmul>
 800bd88:	4b86      	ldr	r3, [pc, #536]	; (800bfa4 <_dtoa_r+0x64c>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f7f4 fa7e 	bl	800028c <__adddf3>
 800bd90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	d158      	bne.n	800be50 <_dtoa_r+0x4f8>
 800bd9e:	4b82      	ldr	r3, [pc, #520]	; (800bfa8 <_dtoa_r+0x650>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	4640      	mov	r0, r8
 800bda4:	4649      	mov	r1, r9
 800bda6:	f7f4 fa6f 	bl	8000288 <__aeabi_dsub>
 800bdaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdae:	4680      	mov	r8, r0
 800bdb0:	4689      	mov	r9, r1
 800bdb2:	f7f4 feb1 	bl	8000b18 <__aeabi_dcmpgt>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f040 8296 	bne.w	800c2e8 <_dtoa_r+0x990>
 800bdbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f7f4 fe88 	bl	8000adc <__aeabi_dcmplt>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f040 8289 	bne.w	800c2e4 <_dtoa_r+0x98c>
 800bdd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f2c0 814e 	blt.w	800c07a <_dtoa_r+0x722>
 800bdde:	f1bb 0f0e 	cmp.w	fp, #14
 800bde2:	f300 814a 	bgt.w	800c07a <_dtoa_r+0x722>
 800bde6:	4b6b      	ldr	r3, [pc, #428]	; (800bf94 <_dtoa_r+0x63c>)
 800bde8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bdec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f280 80dc 	bge.w	800bfb0 <_dtoa_r+0x658>
 800bdf8:	9b04      	ldr	r3, [sp, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f300 80d8 	bgt.w	800bfb0 <_dtoa_r+0x658>
 800be00:	f040 826f 	bne.w	800c2e2 <_dtoa_r+0x98a>
 800be04:	4b68      	ldr	r3, [pc, #416]	; (800bfa8 <_dtoa_r+0x650>)
 800be06:	2200      	movs	r2, #0
 800be08:	4640      	mov	r0, r8
 800be0a:	4649      	mov	r1, r9
 800be0c:	f7f4 fbf4 	bl	80005f8 <__aeabi_dmul>
 800be10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be14:	f7f4 fe76 	bl	8000b04 <__aeabi_dcmpge>
 800be18:	9e04      	ldr	r6, [sp, #16]
 800be1a:	4637      	mov	r7, r6
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f040 8245 	bne.w	800c2ac <_dtoa_r+0x954>
 800be22:	9d00      	ldr	r5, [sp, #0]
 800be24:	2331      	movs	r3, #49	; 0x31
 800be26:	f805 3b01 	strb.w	r3, [r5], #1
 800be2a:	f10b 0b01 	add.w	fp, fp, #1
 800be2e:	e241      	b.n	800c2b4 <_dtoa_r+0x95c>
 800be30:	07f2      	lsls	r2, r6, #31
 800be32:	d505      	bpl.n	800be40 <_dtoa_r+0x4e8>
 800be34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be38:	f7f4 fbde 	bl	80005f8 <__aeabi_dmul>
 800be3c:	3501      	adds	r5, #1
 800be3e:	2301      	movs	r3, #1
 800be40:	1076      	asrs	r6, r6, #1
 800be42:	3708      	adds	r7, #8
 800be44:	e773      	b.n	800bd2e <_dtoa_r+0x3d6>
 800be46:	2502      	movs	r5, #2
 800be48:	e775      	b.n	800bd36 <_dtoa_r+0x3de>
 800be4a:	9e04      	ldr	r6, [sp, #16]
 800be4c:	465f      	mov	r7, fp
 800be4e:	e792      	b.n	800bd76 <_dtoa_r+0x41e>
 800be50:	9900      	ldr	r1, [sp, #0]
 800be52:	4b50      	ldr	r3, [pc, #320]	; (800bf94 <_dtoa_r+0x63c>)
 800be54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be58:	4431      	add	r1, r6
 800be5a:	9102      	str	r1, [sp, #8]
 800be5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be5e:	eeb0 9a47 	vmov.f32	s18, s14
 800be62:	eef0 9a67 	vmov.f32	s19, s15
 800be66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be6e:	2900      	cmp	r1, #0
 800be70:	d044      	beq.n	800befc <_dtoa_r+0x5a4>
 800be72:	494e      	ldr	r1, [pc, #312]	; (800bfac <_dtoa_r+0x654>)
 800be74:	2000      	movs	r0, #0
 800be76:	f7f4 fce9 	bl	800084c <__aeabi_ddiv>
 800be7a:	ec53 2b19 	vmov	r2, r3, d9
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	9d00      	ldr	r5, [sp, #0]
 800be84:	ec41 0b19 	vmov	d9, r0, r1
 800be88:	4649      	mov	r1, r9
 800be8a:	4640      	mov	r0, r8
 800be8c:	f7f4 fe64 	bl	8000b58 <__aeabi_d2iz>
 800be90:	4606      	mov	r6, r0
 800be92:	f7f4 fb47 	bl	8000524 <__aeabi_i2d>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	3630      	adds	r6, #48	; 0x30
 800bea4:	f805 6b01 	strb.w	r6, [r5], #1
 800bea8:	ec53 2b19 	vmov	r2, r3, d9
 800beac:	4680      	mov	r8, r0
 800beae:	4689      	mov	r9, r1
 800beb0:	f7f4 fe14 	bl	8000adc <__aeabi_dcmplt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d164      	bne.n	800bf82 <_dtoa_r+0x62a>
 800beb8:	4642      	mov	r2, r8
 800beba:	464b      	mov	r3, r9
 800bebc:	4937      	ldr	r1, [pc, #220]	; (800bf9c <_dtoa_r+0x644>)
 800bebe:	2000      	movs	r0, #0
 800bec0:	f7f4 f9e2 	bl	8000288 <__aeabi_dsub>
 800bec4:	ec53 2b19 	vmov	r2, r3, d9
 800bec8:	f7f4 fe08 	bl	8000adc <__aeabi_dcmplt>
 800becc:	2800      	cmp	r0, #0
 800bece:	f040 80b6 	bne.w	800c03e <_dtoa_r+0x6e6>
 800bed2:	9b02      	ldr	r3, [sp, #8]
 800bed4:	429d      	cmp	r5, r3
 800bed6:	f43f af7c 	beq.w	800bdd2 <_dtoa_r+0x47a>
 800beda:	4b31      	ldr	r3, [pc, #196]	; (800bfa0 <_dtoa_r+0x648>)
 800bedc:	ec51 0b19 	vmov	r0, r1, d9
 800bee0:	2200      	movs	r2, #0
 800bee2:	f7f4 fb89 	bl	80005f8 <__aeabi_dmul>
 800bee6:	4b2e      	ldr	r3, [pc, #184]	; (800bfa0 <_dtoa_r+0x648>)
 800bee8:	ec41 0b19 	vmov	d9, r0, r1
 800beec:	2200      	movs	r2, #0
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	4680      	mov	r8, r0
 800bef8:	4689      	mov	r9, r1
 800befa:	e7c5      	b.n	800be88 <_dtoa_r+0x530>
 800befc:	ec51 0b17 	vmov	r0, r1, d7
 800bf00:	f7f4 fb7a 	bl	80005f8 <__aeabi_dmul>
 800bf04:	9b02      	ldr	r3, [sp, #8]
 800bf06:	9d00      	ldr	r5, [sp, #0]
 800bf08:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf0a:	ec41 0b19 	vmov	d9, r0, r1
 800bf0e:	4649      	mov	r1, r9
 800bf10:	4640      	mov	r0, r8
 800bf12:	f7f4 fe21 	bl	8000b58 <__aeabi_d2iz>
 800bf16:	4606      	mov	r6, r0
 800bf18:	f7f4 fb04 	bl	8000524 <__aeabi_i2d>
 800bf1c:	3630      	adds	r6, #48	; 0x30
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 f9af 	bl	8000288 <__aeabi_dsub>
 800bf2a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf2e:	9b02      	ldr	r3, [sp, #8]
 800bf30:	429d      	cmp	r5, r3
 800bf32:	4680      	mov	r8, r0
 800bf34:	4689      	mov	r9, r1
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	d124      	bne.n	800bf86 <_dtoa_r+0x62e>
 800bf3c:	4b1b      	ldr	r3, [pc, #108]	; (800bfac <_dtoa_r+0x654>)
 800bf3e:	ec51 0b19 	vmov	r0, r1, d9
 800bf42:	f7f4 f9a3 	bl	800028c <__adddf3>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d173      	bne.n	800c03e <_dtoa_r+0x6e6>
 800bf56:	ec53 2b19 	vmov	r2, r3, d9
 800bf5a:	4914      	ldr	r1, [pc, #80]	; (800bfac <_dtoa_r+0x654>)
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f7f4 f993 	bl	8000288 <__aeabi_dsub>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4640      	mov	r0, r8
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f7f4 fdb7 	bl	8000adc <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f43f af2f 	beq.w	800bdd2 <_dtoa_r+0x47a>
 800bf74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf76:	1e6b      	subs	r3, r5, #1
 800bf78:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf7e:	2b30      	cmp	r3, #48	; 0x30
 800bf80:	d0f8      	beq.n	800bf74 <_dtoa_r+0x61c>
 800bf82:	46bb      	mov	fp, r7
 800bf84:	e04a      	b.n	800c01c <_dtoa_r+0x6c4>
 800bf86:	4b06      	ldr	r3, [pc, #24]	; (800bfa0 <_dtoa_r+0x648>)
 800bf88:	f7f4 fb36 	bl	80005f8 <__aeabi_dmul>
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4689      	mov	r9, r1
 800bf90:	e7bd      	b.n	800bf0e <_dtoa_r+0x5b6>
 800bf92:	bf00      	nop
 800bf94:	0800f1d0 	.word	0x0800f1d0
 800bf98:	0800f1a8 	.word	0x0800f1a8
 800bf9c:	3ff00000 	.word	0x3ff00000
 800bfa0:	40240000 	.word	0x40240000
 800bfa4:	401c0000 	.word	0x401c0000
 800bfa8:	40140000 	.word	0x40140000
 800bfac:	3fe00000 	.word	0x3fe00000
 800bfb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bfb4:	9d00      	ldr	r5, [sp, #0]
 800bfb6:	4642      	mov	r2, r8
 800bfb8:	464b      	mov	r3, r9
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 fc45 	bl	800084c <__aeabi_ddiv>
 800bfc2:	f7f4 fdc9 	bl	8000b58 <__aeabi_d2iz>
 800bfc6:	9001      	str	r0, [sp, #4]
 800bfc8:	f7f4 faac 	bl	8000524 <__aeabi_i2d>
 800bfcc:	4642      	mov	r2, r8
 800bfce:	464b      	mov	r3, r9
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 f954 	bl	8000288 <__aeabi_dsub>
 800bfe0:	9e01      	ldr	r6, [sp, #4]
 800bfe2:	9f04      	ldr	r7, [sp, #16]
 800bfe4:	3630      	adds	r6, #48	; 0x30
 800bfe6:	f805 6b01 	strb.w	r6, [r5], #1
 800bfea:	9e00      	ldr	r6, [sp, #0]
 800bfec:	1bae      	subs	r6, r5, r6
 800bfee:	42b7      	cmp	r7, r6
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	d134      	bne.n	800c060 <_dtoa_r+0x708>
 800bff6:	f7f4 f949 	bl	800028c <__adddf3>
 800bffa:	4642      	mov	r2, r8
 800bffc:	464b      	mov	r3, r9
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	f7f4 fd89 	bl	8000b18 <__aeabi_dcmpgt>
 800c006:	b9c8      	cbnz	r0, 800c03c <_dtoa_r+0x6e4>
 800c008:	4642      	mov	r2, r8
 800c00a:	464b      	mov	r3, r9
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f7f4 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c014:	b110      	cbz	r0, 800c01c <_dtoa_r+0x6c4>
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	07db      	lsls	r3, r3, #31
 800c01a:	d40f      	bmi.n	800c03c <_dtoa_r+0x6e4>
 800c01c:	4651      	mov	r1, sl
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 fbcc 	bl	800c7bc <_Bfree>
 800c024:	2300      	movs	r3, #0
 800c026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c028:	702b      	strb	r3, [r5, #0]
 800c02a:	f10b 0301 	add.w	r3, fp, #1
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c032:	2b00      	cmp	r3, #0
 800c034:	f43f ace2 	beq.w	800b9fc <_dtoa_r+0xa4>
 800c038:	601d      	str	r5, [r3, #0]
 800c03a:	e4df      	b.n	800b9fc <_dtoa_r+0xa4>
 800c03c:	465f      	mov	r7, fp
 800c03e:	462b      	mov	r3, r5
 800c040:	461d      	mov	r5, r3
 800c042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c046:	2a39      	cmp	r2, #57	; 0x39
 800c048:	d106      	bne.n	800c058 <_dtoa_r+0x700>
 800c04a:	9a00      	ldr	r2, [sp, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d1f7      	bne.n	800c040 <_dtoa_r+0x6e8>
 800c050:	9900      	ldr	r1, [sp, #0]
 800c052:	2230      	movs	r2, #48	; 0x30
 800c054:	3701      	adds	r7, #1
 800c056:	700a      	strb	r2, [r1, #0]
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	3201      	adds	r2, #1
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	e790      	b.n	800bf82 <_dtoa_r+0x62a>
 800c060:	4ba3      	ldr	r3, [pc, #652]	; (800c2f0 <_dtoa_r+0x998>)
 800c062:	2200      	movs	r2, #0
 800c064:	f7f4 fac8 	bl	80005f8 <__aeabi_dmul>
 800c068:	2200      	movs	r2, #0
 800c06a:	2300      	movs	r3, #0
 800c06c:	4606      	mov	r6, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	f7f4 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c074:	2800      	cmp	r0, #0
 800c076:	d09e      	beq.n	800bfb6 <_dtoa_r+0x65e>
 800c078:	e7d0      	b.n	800c01c <_dtoa_r+0x6c4>
 800c07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	f000 80ca 	beq.w	800c216 <_dtoa_r+0x8be>
 800c082:	9a07      	ldr	r2, [sp, #28]
 800c084:	2a01      	cmp	r2, #1
 800c086:	f300 80ad 	bgt.w	800c1e4 <_dtoa_r+0x88c>
 800c08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	f000 80a5 	beq.w	800c1dc <_dtoa_r+0x884>
 800c092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c096:	9e08      	ldr	r6, [sp, #32]
 800c098:	9d05      	ldr	r5, [sp, #20]
 800c09a:	9a05      	ldr	r2, [sp, #20]
 800c09c:	441a      	add	r2, r3
 800c09e:	9205      	str	r2, [sp, #20]
 800c0a0:	9a06      	ldr	r2, [sp, #24]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	441a      	add	r2, r3
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	9206      	str	r2, [sp, #24]
 800c0aa:	f000 fc87 	bl	800c9bc <__i2b>
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	b165      	cbz	r5, 800c0cc <_dtoa_r+0x774>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dd09      	ble.n	800c0cc <_dtoa_r+0x774>
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	9a05      	ldr	r2, [sp, #20]
 800c0bc:	bfa8      	it	ge
 800c0be:	462b      	movge	r3, r5
 800c0c0:	1ad2      	subs	r2, r2, r3
 800c0c2:	9205      	str	r2, [sp, #20]
 800c0c4:	9a06      	ldr	r2, [sp, #24]
 800c0c6:	1aed      	subs	r5, r5, r3
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	9306      	str	r3, [sp, #24]
 800c0cc:	9b08      	ldr	r3, [sp, #32]
 800c0ce:	b1f3      	cbz	r3, 800c10e <_dtoa_r+0x7b6>
 800c0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 80a3 	beq.w	800c21e <_dtoa_r+0x8c6>
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	dd10      	ble.n	800c0fe <_dtoa_r+0x7a6>
 800c0dc:	4639      	mov	r1, r7
 800c0de:	4632      	mov	r2, r6
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fd2b 	bl	800cb3c <__pow5mult>
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	4607      	mov	r7, r0
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 fc7b 	bl	800c9e8 <__multiply>
 800c0f2:	4651      	mov	r1, sl
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 fb60 	bl	800c7bc <_Bfree>
 800c0fc:	46c2      	mov	sl, r8
 800c0fe:	9b08      	ldr	r3, [sp, #32]
 800c100:	1b9a      	subs	r2, r3, r6
 800c102:	d004      	beq.n	800c10e <_dtoa_r+0x7b6>
 800c104:	4651      	mov	r1, sl
 800c106:	4620      	mov	r0, r4
 800c108:	f000 fd18 	bl	800cb3c <__pow5mult>
 800c10c:	4682      	mov	sl, r0
 800c10e:	2101      	movs	r1, #1
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fc53 	bl	800c9bc <__i2b>
 800c116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	4606      	mov	r6, r0
 800c11c:	f340 8081 	ble.w	800c222 <_dtoa_r+0x8ca>
 800c120:	461a      	mov	r2, r3
 800c122:	4601      	mov	r1, r0
 800c124:	4620      	mov	r0, r4
 800c126:	f000 fd09 	bl	800cb3c <__pow5mult>
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	4606      	mov	r6, r0
 800c130:	dd7a      	ble.n	800c228 <_dtoa_r+0x8d0>
 800c132:	f04f 0800 	mov.w	r8, #0
 800c136:	6933      	ldr	r3, [r6, #16]
 800c138:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c13c:	6918      	ldr	r0, [r3, #16]
 800c13e:	f000 fbef 	bl	800c920 <__hi0bits>
 800c142:	f1c0 0020 	rsb	r0, r0, #32
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	4418      	add	r0, r3
 800c14a:	f010 001f 	ands.w	r0, r0, #31
 800c14e:	f000 8094 	beq.w	800c27a <_dtoa_r+0x922>
 800c152:	f1c0 0320 	rsb	r3, r0, #32
 800c156:	2b04      	cmp	r3, #4
 800c158:	f340 8085 	ble.w	800c266 <_dtoa_r+0x90e>
 800c15c:	9b05      	ldr	r3, [sp, #20]
 800c15e:	f1c0 001c 	rsb	r0, r0, #28
 800c162:	4403      	add	r3, r0
 800c164:	9305      	str	r3, [sp, #20]
 800c166:	9b06      	ldr	r3, [sp, #24]
 800c168:	4403      	add	r3, r0
 800c16a:	4405      	add	r5, r0
 800c16c:	9306      	str	r3, [sp, #24]
 800c16e:	9b05      	ldr	r3, [sp, #20]
 800c170:	2b00      	cmp	r3, #0
 800c172:	dd05      	ble.n	800c180 <_dtoa_r+0x828>
 800c174:	4651      	mov	r1, sl
 800c176:	461a      	mov	r2, r3
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fd39 	bl	800cbf0 <__lshift>
 800c17e:	4682      	mov	sl, r0
 800c180:	9b06      	ldr	r3, [sp, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	dd05      	ble.n	800c192 <_dtoa_r+0x83a>
 800c186:	4631      	mov	r1, r6
 800c188:	461a      	mov	r2, r3
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fd30 	bl	800cbf0 <__lshift>
 800c190:	4606      	mov	r6, r0
 800c192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c194:	2b00      	cmp	r3, #0
 800c196:	d072      	beq.n	800c27e <_dtoa_r+0x926>
 800c198:	4631      	mov	r1, r6
 800c19a:	4650      	mov	r0, sl
 800c19c:	f000 fd94 	bl	800ccc8 <__mcmp>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	da6c      	bge.n	800c27e <_dtoa_r+0x926>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4651      	mov	r1, sl
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 fb28 	bl	800c800 <__multadd>
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1b6:	4682      	mov	sl, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 81b0 	beq.w	800c51e <_dtoa_r+0xbc6>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	220a      	movs	r2, #10
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fb1b 	bl	800c800 <__multadd>
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	f300 8096 	bgt.w	800c300 <_dtoa_r+0x9a8>
 800c1d4:	9b07      	ldr	r3, [sp, #28]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	dc59      	bgt.n	800c28e <_dtoa_r+0x936>
 800c1da:	e091      	b.n	800c300 <_dtoa_r+0x9a8>
 800c1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1e2:	e758      	b.n	800c096 <_dtoa_r+0x73e>
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	1e5e      	subs	r6, r3, #1
 800c1e8:	9b08      	ldr	r3, [sp, #32]
 800c1ea:	42b3      	cmp	r3, r6
 800c1ec:	bfbf      	itttt	lt
 800c1ee:	9b08      	ldrlt	r3, [sp, #32]
 800c1f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c1f2:	9608      	strlt	r6, [sp, #32]
 800c1f4:	1af3      	sublt	r3, r6, r3
 800c1f6:	bfb4      	ite	lt
 800c1f8:	18d2      	addlt	r2, r2, r3
 800c1fa:	1b9e      	subge	r6, r3, r6
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	bfbc      	itt	lt
 800c200:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c202:	2600      	movlt	r6, #0
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfb7      	itett	lt
 800c208:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c20c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c210:	1a9d      	sublt	r5, r3, r2
 800c212:	2300      	movlt	r3, #0
 800c214:	e741      	b.n	800c09a <_dtoa_r+0x742>
 800c216:	9e08      	ldr	r6, [sp, #32]
 800c218:	9d05      	ldr	r5, [sp, #20]
 800c21a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c21c:	e748      	b.n	800c0b0 <_dtoa_r+0x758>
 800c21e:	9a08      	ldr	r2, [sp, #32]
 800c220:	e770      	b.n	800c104 <_dtoa_r+0x7ac>
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	2b01      	cmp	r3, #1
 800c226:	dc19      	bgt.n	800c25c <_dtoa_r+0x904>
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	b9bb      	cbnz	r3, 800c25c <_dtoa_r+0x904>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c232:	b99b      	cbnz	r3, 800c25c <_dtoa_r+0x904>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c23a:	0d1b      	lsrs	r3, r3, #20
 800c23c:	051b      	lsls	r3, r3, #20
 800c23e:	b183      	cbz	r3, 800c262 <_dtoa_r+0x90a>
 800c240:	9b05      	ldr	r3, [sp, #20]
 800c242:	3301      	adds	r3, #1
 800c244:	9305      	str	r3, [sp, #20]
 800c246:	9b06      	ldr	r3, [sp, #24]
 800c248:	3301      	adds	r3, #1
 800c24a:	9306      	str	r3, [sp, #24]
 800c24c:	f04f 0801 	mov.w	r8, #1
 800c250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c252:	2b00      	cmp	r3, #0
 800c254:	f47f af6f 	bne.w	800c136 <_dtoa_r+0x7de>
 800c258:	2001      	movs	r0, #1
 800c25a:	e774      	b.n	800c146 <_dtoa_r+0x7ee>
 800c25c:	f04f 0800 	mov.w	r8, #0
 800c260:	e7f6      	b.n	800c250 <_dtoa_r+0x8f8>
 800c262:	4698      	mov	r8, r3
 800c264:	e7f4      	b.n	800c250 <_dtoa_r+0x8f8>
 800c266:	d082      	beq.n	800c16e <_dtoa_r+0x816>
 800c268:	9a05      	ldr	r2, [sp, #20]
 800c26a:	331c      	adds	r3, #28
 800c26c:	441a      	add	r2, r3
 800c26e:	9205      	str	r2, [sp, #20]
 800c270:	9a06      	ldr	r2, [sp, #24]
 800c272:	441a      	add	r2, r3
 800c274:	441d      	add	r5, r3
 800c276:	9206      	str	r2, [sp, #24]
 800c278:	e779      	b.n	800c16e <_dtoa_r+0x816>
 800c27a:	4603      	mov	r3, r0
 800c27c:	e7f4      	b.n	800c268 <_dtoa_r+0x910>
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	dc37      	bgt.n	800c2f4 <_dtoa_r+0x99c>
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	2b02      	cmp	r3, #2
 800c288:	dd34      	ble.n	800c2f4 <_dtoa_r+0x99c>
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	b963      	cbnz	r3, 800c2ac <_dtoa_r+0x954>
 800c292:	4631      	mov	r1, r6
 800c294:	2205      	movs	r2, #5
 800c296:	4620      	mov	r0, r4
 800c298:	f000 fab2 	bl	800c800 <__multadd>
 800c29c:	4601      	mov	r1, r0
 800c29e:	4606      	mov	r6, r0
 800c2a0:	4650      	mov	r0, sl
 800c2a2:	f000 fd11 	bl	800ccc8 <__mcmp>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f73f adbb 	bgt.w	800be22 <_dtoa_r+0x4ca>
 800c2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ae:	9d00      	ldr	r5, [sp, #0]
 800c2b0:	ea6f 0b03 	mvn.w	fp, r3
 800c2b4:	f04f 0800 	mov.w	r8, #0
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 fa7e 	bl	800c7bc <_Bfree>
 800c2c0:	2f00      	cmp	r7, #0
 800c2c2:	f43f aeab 	beq.w	800c01c <_dtoa_r+0x6c4>
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	d005      	beq.n	800c2d8 <_dtoa_r+0x980>
 800c2cc:	45b8      	cmp	r8, r7
 800c2ce:	d003      	beq.n	800c2d8 <_dtoa_r+0x980>
 800c2d0:	4641      	mov	r1, r8
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fa72 	bl	800c7bc <_Bfree>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fa6e 	bl	800c7bc <_Bfree>
 800c2e0:	e69c      	b.n	800c01c <_dtoa_r+0x6c4>
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	4637      	mov	r7, r6
 800c2e6:	e7e1      	b.n	800c2ac <_dtoa_r+0x954>
 800c2e8:	46bb      	mov	fp, r7
 800c2ea:	4637      	mov	r7, r6
 800c2ec:	e599      	b.n	800be22 <_dtoa_r+0x4ca>
 800c2ee:	bf00      	nop
 800c2f0:	40240000 	.word	0x40240000
 800c2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 80c8 	beq.w	800c48c <_dtoa_r+0xb34>
 800c2fc:	9b04      	ldr	r3, [sp, #16]
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	2d00      	cmp	r5, #0
 800c302:	dd05      	ble.n	800c310 <_dtoa_r+0x9b8>
 800c304:	4639      	mov	r1, r7
 800c306:	462a      	mov	r2, r5
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fc71 	bl	800cbf0 <__lshift>
 800c30e:	4607      	mov	r7, r0
 800c310:	f1b8 0f00 	cmp.w	r8, #0
 800c314:	d05b      	beq.n	800c3ce <_dtoa_r+0xa76>
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 fa0f 	bl	800c73c <_Balloc>
 800c31e:	4605      	mov	r5, r0
 800c320:	b928      	cbnz	r0, 800c32e <_dtoa_r+0x9d6>
 800c322:	4b83      	ldr	r3, [pc, #524]	; (800c530 <_dtoa_r+0xbd8>)
 800c324:	4602      	mov	r2, r0
 800c326:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c32a:	f7ff bb2e 	b.w	800b98a <_dtoa_r+0x32>
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	3202      	adds	r2, #2
 800c332:	0092      	lsls	r2, r2, #2
 800c334:	f107 010c 	add.w	r1, r7, #12
 800c338:	300c      	adds	r0, #12
 800c33a:	f002 f95f 	bl	800e5fc <memcpy>
 800c33e:	2201      	movs	r2, #1
 800c340:	4629      	mov	r1, r5
 800c342:	4620      	mov	r0, r4
 800c344:	f000 fc54 	bl	800cbf0 <__lshift>
 800c348:	9b00      	ldr	r3, [sp, #0]
 800c34a:	3301      	adds	r3, #1
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c352:	4413      	add	r3, r2
 800c354:	9308      	str	r3, [sp, #32]
 800c356:	9b02      	ldr	r3, [sp, #8]
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	46b8      	mov	r8, r7
 800c35e:	9306      	str	r3, [sp, #24]
 800c360:	4607      	mov	r7, r0
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	4631      	mov	r1, r6
 800c366:	3b01      	subs	r3, #1
 800c368:	4650      	mov	r0, sl
 800c36a:	9301      	str	r3, [sp, #4]
 800c36c:	f7ff fa6c 	bl	800b848 <quorem>
 800c370:	4641      	mov	r1, r8
 800c372:	9002      	str	r0, [sp, #8]
 800c374:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c378:	4650      	mov	r0, sl
 800c37a:	f000 fca5 	bl	800ccc8 <__mcmp>
 800c37e:	463a      	mov	r2, r7
 800c380:	9005      	str	r0, [sp, #20]
 800c382:	4631      	mov	r1, r6
 800c384:	4620      	mov	r0, r4
 800c386:	f000 fcbb 	bl	800cd00 <__mdiff>
 800c38a:	68c2      	ldr	r2, [r0, #12]
 800c38c:	4605      	mov	r5, r0
 800c38e:	bb02      	cbnz	r2, 800c3d2 <_dtoa_r+0xa7a>
 800c390:	4601      	mov	r1, r0
 800c392:	4650      	mov	r0, sl
 800c394:	f000 fc98 	bl	800ccc8 <__mcmp>
 800c398:	4602      	mov	r2, r0
 800c39a:	4629      	mov	r1, r5
 800c39c:	4620      	mov	r0, r4
 800c39e:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a0:	f000 fa0c 	bl	800c7bc <_Bfree>
 800c3a4:	9b07      	ldr	r3, [sp, #28]
 800c3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a8:	9d04      	ldr	r5, [sp, #16]
 800c3aa:	ea43 0102 	orr.w	r1, r3, r2
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	4319      	orrs	r1, r3
 800c3b2:	d110      	bne.n	800c3d6 <_dtoa_r+0xa7e>
 800c3b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3b8:	d029      	beq.n	800c40e <_dtoa_r+0xab6>
 800c3ba:	9b05      	ldr	r3, [sp, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dd02      	ble.n	800c3c6 <_dtoa_r+0xa6e>
 800c3c0:	9b02      	ldr	r3, [sp, #8]
 800c3c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	f883 9000 	strb.w	r9, [r3]
 800c3cc:	e774      	b.n	800c2b8 <_dtoa_r+0x960>
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	e7ba      	b.n	800c348 <_dtoa_r+0x9f0>
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	e7e1      	b.n	800c39a <_dtoa_r+0xa42>
 800c3d6:	9b05      	ldr	r3, [sp, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	db04      	blt.n	800c3e6 <_dtoa_r+0xa8e>
 800c3dc:	9907      	ldr	r1, [sp, #28]
 800c3de:	430b      	orrs	r3, r1
 800c3e0:	9906      	ldr	r1, [sp, #24]
 800c3e2:	430b      	orrs	r3, r1
 800c3e4:	d120      	bne.n	800c428 <_dtoa_r+0xad0>
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	dded      	ble.n	800c3c6 <_dtoa_r+0xa6e>
 800c3ea:	4651      	mov	r1, sl
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 fbfe 	bl	800cbf0 <__lshift>
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4682      	mov	sl, r0
 800c3f8:	f000 fc66 	bl	800ccc8 <__mcmp>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dc03      	bgt.n	800c408 <_dtoa_r+0xab0>
 800c400:	d1e1      	bne.n	800c3c6 <_dtoa_r+0xa6e>
 800c402:	f019 0f01 	tst.w	r9, #1
 800c406:	d0de      	beq.n	800c3c6 <_dtoa_r+0xa6e>
 800c408:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c40c:	d1d8      	bne.n	800c3c0 <_dtoa_r+0xa68>
 800c40e:	9a01      	ldr	r2, [sp, #4]
 800c410:	2339      	movs	r3, #57	; 0x39
 800c412:	7013      	strb	r3, [r2, #0]
 800c414:	462b      	mov	r3, r5
 800c416:	461d      	mov	r5, r3
 800c418:	3b01      	subs	r3, #1
 800c41a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c41e:	2a39      	cmp	r2, #57	; 0x39
 800c420:	d06c      	beq.n	800c4fc <_dtoa_r+0xba4>
 800c422:	3201      	adds	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]
 800c426:	e747      	b.n	800c2b8 <_dtoa_r+0x960>
 800c428:	2a00      	cmp	r2, #0
 800c42a:	dd07      	ble.n	800c43c <_dtoa_r+0xae4>
 800c42c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c430:	d0ed      	beq.n	800c40e <_dtoa_r+0xab6>
 800c432:	9a01      	ldr	r2, [sp, #4]
 800c434:	f109 0301 	add.w	r3, r9, #1
 800c438:	7013      	strb	r3, [r2, #0]
 800c43a:	e73d      	b.n	800c2b8 <_dtoa_r+0x960>
 800c43c:	9b04      	ldr	r3, [sp, #16]
 800c43e:	9a08      	ldr	r2, [sp, #32]
 800c440:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c444:	4293      	cmp	r3, r2
 800c446:	d043      	beq.n	800c4d0 <_dtoa_r+0xb78>
 800c448:	4651      	mov	r1, sl
 800c44a:	2300      	movs	r3, #0
 800c44c:	220a      	movs	r2, #10
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 f9d6 	bl	800c800 <__multadd>
 800c454:	45b8      	cmp	r8, r7
 800c456:	4682      	mov	sl, r0
 800c458:	f04f 0300 	mov.w	r3, #0
 800c45c:	f04f 020a 	mov.w	r2, #10
 800c460:	4641      	mov	r1, r8
 800c462:	4620      	mov	r0, r4
 800c464:	d107      	bne.n	800c476 <_dtoa_r+0xb1e>
 800c466:	f000 f9cb 	bl	800c800 <__multadd>
 800c46a:	4680      	mov	r8, r0
 800c46c:	4607      	mov	r7, r0
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	3301      	adds	r3, #1
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	e775      	b.n	800c362 <_dtoa_r+0xa0a>
 800c476:	f000 f9c3 	bl	800c800 <__multadd>
 800c47a:	4639      	mov	r1, r7
 800c47c:	4680      	mov	r8, r0
 800c47e:	2300      	movs	r3, #0
 800c480:	220a      	movs	r2, #10
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f9bc 	bl	800c800 <__multadd>
 800c488:	4607      	mov	r7, r0
 800c48a:	e7f0      	b.n	800c46e <_dtoa_r+0xb16>
 800c48c:	9b04      	ldr	r3, [sp, #16]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	9d00      	ldr	r5, [sp, #0]
 800c492:	4631      	mov	r1, r6
 800c494:	4650      	mov	r0, sl
 800c496:	f7ff f9d7 	bl	800b848 <quorem>
 800c49a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	f805 9b01 	strb.w	r9, [r5], #1
 800c4a4:	1aea      	subs	r2, r5, r3
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	dd07      	ble.n	800c4bc <_dtoa_r+0xb64>
 800c4ac:	4651      	mov	r1, sl
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	220a      	movs	r2, #10
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 f9a4 	bl	800c800 <__multadd>
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	e7ea      	b.n	800c492 <_dtoa_r+0xb3a>
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bfc8      	it	gt
 800c4c2:	461d      	movgt	r5, r3
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	bfd8      	it	le
 800c4c8:	2501      	movle	r5, #1
 800c4ca:	441d      	add	r5, r3
 800c4cc:	f04f 0800 	mov.w	r8, #0
 800c4d0:	4651      	mov	r1, sl
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fb8b 	bl	800cbf0 <__lshift>
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4682      	mov	sl, r0
 800c4de:	f000 fbf3 	bl	800ccc8 <__mcmp>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	dc96      	bgt.n	800c414 <_dtoa_r+0xabc>
 800c4e6:	d102      	bne.n	800c4ee <_dtoa_r+0xb96>
 800c4e8:	f019 0f01 	tst.w	r9, #1
 800c4ec:	d192      	bne.n	800c414 <_dtoa_r+0xabc>
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	461d      	mov	r5, r3
 800c4f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4f6:	2a30      	cmp	r2, #48	; 0x30
 800c4f8:	d0fa      	beq.n	800c4f0 <_dtoa_r+0xb98>
 800c4fa:	e6dd      	b.n	800c2b8 <_dtoa_r+0x960>
 800c4fc:	9a00      	ldr	r2, [sp, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d189      	bne.n	800c416 <_dtoa_r+0xabe>
 800c502:	f10b 0b01 	add.w	fp, fp, #1
 800c506:	2331      	movs	r3, #49	; 0x31
 800c508:	e796      	b.n	800c438 <_dtoa_r+0xae0>
 800c50a:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <_dtoa_r+0xbdc>)
 800c50c:	f7ff ba99 	b.w	800ba42 <_dtoa_r+0xea>
 800c510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c512:	2b00      	cmp	r3, #0
 800c514:	f47f aa6d 	bne.w	800b9f2 <_dtoa_r+0x9a>
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <_dtoa_r+0xbe0>)
 800c51a:	f7ff ba92 	b.w	800ba42 <_dtoa_r+0xea>
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	dcb5      	bgt.n	800c490 <_dtoa_r+0xb38>
 800c524:	9b07      	ldr	r3, [sp, #28]
 800c526:	2b02      	cmp	r3, #2
 800c528:	f73f aeb1 	bgt.w	800c28e <_dtoa_r+0x936>
 800c52c:	e7b0      	b.n	800c490 <_dtoa_r+0xb38>
 800c52e:	bf00      	nop
 800c530:	0800f139 	.word	0x0800f139
 800c534:	0800f094 	.word	0x0800f094
 800c538:	0800f0bd 	.word	0x0800f0bd

0800c53c <_free_r>:
 800c53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c53e:	2900      	cmp	r1, #0
 800c540:	d044      	beq.n	800c5cc <_free_r+0x90>
 800c542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c546:	9001      	str	r0, [sp, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f1a1 0404 	sub.w	r4, r1, #4
 800c54e:	bfb8      	it	lt
 800c550:	18e4      	addlt	r4, r4, r3
 800c552:	f000 f8e7 	bl	800c724 <__malloc_lock>
 800c556:	4a1e      	ldr	r2, [pc, #120]	; (800c5d0 <_free_r+0x94>)
 800c558:	9801      	ldr	r0, [sp, #4]
 800c55a:	6813      	ldr	r3, [r2, #0]
 800c55c:	b933      	cbnz	r3, 800c56c <_free_r+0x30>
 800c55e:	6063      	str	r3, [r4, #4]
 800c560:	6014      	str	r4, [r2, #0]
 800c562:	b003      	add	sp, #12
 800c564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c568:	f000 b8e2 	b.w	800c730 <__malloc_unlock>
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	d908      	bls.n	800c582 <_free_r+0x46>
 800c570:	6825      	ldr	r5, [r4, #0]
 800c572:	1961      	adds	r1, r4, r5
 800c574:	428b      	cmp	r3, r1
 800c576:	bf01      	itttt	eq
 800c578:	6819      	ldreq	r1, [r3, #0]
 800c57a:	685b      	ldreq	r3, [r3, #4]
 800c57c:	1949      	addeq	r1, r1, r5
 800c57e:	6021      	streq	r1, [r4, #0]
 800c580:	e7ed      	b.n	800c55e <_free_r+0x22>
 800c582:	461a      	mov	r2, r3
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	b10b      	cbz	r3, 800c58c <_free_r+0x50>
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d9fa      	bls.n	800c582 <_free_r+0x46>
 800c58c:	6811      	ldr	r1, [r2, #0]
 800c58e:	1855      	adds	r5, r2, r1
 800c590:	42a5      	cmp	r5, r4
 800c592:	d10b      	bne.n	800c5ac <_free_r+0x70>
 800c594:	6824      	ldr	r4, [r4, #0]
 800c596:	4421      	add	r1, r4
 800c598:	1854      	adds	r4, r2, r1
 800c59a:	42a3      	cmp	r3, r4
 800c59c:	6011      	str	r1, [r2, #0]
 800c59e:	d1e0      	bne.n	800c562 <_free_r+0x26>
 800c5a0:	681c      	ldr	r4, [r3, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	6053      	str	r3, [r2, #4]
 800c5a6:	440c      	add	r4, r1
 800c5a8:	6014      	str	r4, [r2, #0]
 800c5aa:	e7da      	b.n	800c562 <_free_r+0x26>
 800c5ac:	d902      	bls.n	800c5b4 <_free_r+0x78>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	6003      	str	r3, [r0, #0]
 800c5b2:	e7d6      	b.n	800c562 <_free_r+0x26>
 800c5b4:	6825      	ldr	r5, [r4, #0]
 800c5b6:	1961      	adds	r1, r4, r5
 800c5b8:	428b      	cmp	r3, r1
 800c5ba:	bf04      	itt	eq
 800c5bc:	6819      	ldreq	r1, [r3, #0]
 800c5be:	685b      	ldreq	r3, [r3, #4]
 800c5c0:	6063      	str	r3, [r4, #4]
 800c5c2:	bf04      	itt	eq
 800c5c4:	1949      	addeq	r1, r1, r5
 800c5c6:	6021      	streq	r1, [r4, #0]
 800c5c8:	6054      	str	r4, [r2, #4]
 800c5ca:	e7ca      	b.n	800c562 <_free_r+0x26>
 800c5cc:	b003      	add	sp, #12
 800c5ce:	bd30      	pop	{r4, r5, pc}
 800c5d0:	20002194 	.word	0x20002194

0800c5d4 <malloc>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <malloc+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f000 b823 	b.w	800c624 <_malloc_r>
 800c5de:	bf00      	nop
 800c5e0:	20000164 	.word	0x20000164

0800c5e4 <sbrk_aligned>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4e0e      	ldr	r6, [pc, #56]	; (800c620 <sbrk_aligned+0x3c>)
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	6831      	ldr	r1, [r6, #0]
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	b911      	cbnz	r1, 800c5f6 <sbrk_aligned+0x12>
 800c5f0:	f001 fff4 	bl	800e5dc <_sbrk_r>
 800c5f4:	6030      	str	r0, [r6, #0]
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	f001 ffef 	bl	800e5dc <_sbrk_r>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d00a      	beq.n	800c618 <sbrk_aligned+0x34>
 800c602:	1cc4      	adds	r4, r0, #3
 800c604:	f024 0403 	bic.w	r4, r4, #3
 800c608:	42a0      	cmp	r0, r4
 800c60a:	d007      	beq.n	800c61c <sbrk_aligned+0x38>
 800c60c:	1a21      	subs	r1, r4, r0
 800c60e:	4628      	mov	r0, r5
 800c610:	f001 ffe4 	bl	800e5dc <_sbrk_r>
 800c614:	3001      	adds	r0, #1
 800c616:	d101      	bne.n	800c61c <sbrk_aligned+0x38>
 800c618:	f04f 34ff 	mov.w	r4, #4294967295
 800c61c:	4620      	mov	r0, r4
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	20002198 	.word	0x20002198

0800c624 <_malloc_r>:
 800c624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c628:	1ccd      	adds	r5, r1, #3
 800c62a:	f025 0503 	bic.w	r5, r5, #3
 800c62e:	3508      	adds	r5, #8
 800c630:	2d0c      	cmp	r5, #12
 800c632:	bf38      	it	cc
 800c634:	250c      	movcc	r5, #12
 800c636:	2d00      	cmp	r5, #0
 800c638:	4607      	mov	r7, r0
 800c63a:	db01      	blt.n	800c640 <_malloc_r+0x1c>
 800c63c:	42a9      	cmp	r1, r5
 800c63e:	d905      	bls.n	800c64c <_malloc_r+0x28>
 800c640:	230c      	movs	r3, #12
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	2600      	movs	r6, #0
 800c646:	4630      	mov	r0, r6
 800c648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c64c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c720 <_malloc_r+0xfc>
 800c650:	f000 f868 	bl	800c724 <__malloc_lock>
 800c654:	f8d8 3000 	ldr.w	r3, [r8]
 800c658:	461c      	mov	r4, r3
 800c65a:	bb5c      	cbnz	r4, 800c6b4 <_malloc_r+0x90>
 800c65c:	4629      	mov	r1, r5
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff ffc0 	bl	800c5e4 <sbrk_aligned>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	4604      	mov	r4, r0
 800c668:	d155      	bne.n	800c716 <_malloc_r+0xf2>
 800c66a:	f8d8 4000 	ldr.w	r4, [r8]
 800c66e:	4626      	mov	r6, r4
 800c670:	2e00      	cmp	r6, #0
 800c672:	d145      	bne.n	800c700 <_malloc_r+0xdc>
 800c674:	2c00      	cmp	r4, #0
 800c676:	d048      	beq.n	800c70a <_malloc_r+0xe6>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	4631      	mov	r1, r6
 800c67c:	4638      	mov	r0, r7
 800c67e:	eb04 0903 	add.w	r9, r4, r3
 800c682:	f001 ffab 	bl	800e5dc <_sbrk_r>
 800c686:	4581      	cmp	r9, r0
 800c688:	d13f      	bne.n	800c70a <_malloc_r+0xe6>
 800c68a:	6821      	ldr	r1, [r4, #0]
 800c68c:	1a6d      	subs	r5, r5, r1
 800c68e:	4629      	mov	r1, r5
 800c690:	4638      	mov	r0, r7
 800c692:	f7ff ffa7 	bl	800c5e4 <sbrk_aligned>
 800c696:	3001      	adds	r0, #1
 800c698:	d037      	beq.n	800c70a <_malloc_r+0xe6>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	442b      	add	r3, r5
 800c69e:	6023      	str	r3, [r4, #0]
 800c6a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d038      	beq.n	800c71a <_malloc_r+0xf6>
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	42a2      	cmp	r2, r4
 800c6ac:	d12b      	bne.n	800c706 <_malloc_r+0xe2>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	605a      	str	r2, [r3, #4]
 800c6b2:	e00f      	b.n	800c6d4 <_malloc_r+0xb0>
 800c6b4:	6822      	ldr	r2, [r4, #0]
 800c6b6:	1b52      	subs	r2, r2, r5
 800c6b8:	d41f      	bmi.n	800c6fa <_malloc_r+0xd6>
 800c6ba:	2a0b      	cmp	r2, #11
 800c6bc:	d917      	bls.n	800c6ee <_malloc_r+0xca>
 800c6be:	1961      	adds	r1, r4, r5
 800c6c0:	42a3      	cmp	r3, r4
 800c6c2:	6025      	str	r5, [r4, #0]
 800c6c4:	bf18      	it	ne
 800c6c6:	6059      	strne	r1, [r3, #4]
 800c6c8:	6863      	ldr	r3, [r4, #4]
 800c6ca:	bf08      	it	eq
 800c6cc:	f8c8 1000 	streq.w	r1, [r8]
 800c6d0:	5162      	str	r2, [r4, r5]
 800c6d2:	604b      	str	r3, [r1, #4]
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f104 060b 	add.w	r6, r4, #11
 800c6da:	f000 f829 	bl	800c730 <__malloc_unlock>
 800c6de:	f026 0607 	bic.w	r6, r6, #7
 800c6e2:	1d23      	adds	r3, r4, #4
 800c6e4:	1af2      	subs	r2, r6, r3
 800c6e6:	d0ae      	beq.n	800c646 <_malloc_r+0x22>
 800c6e8:	1b9b      	subs	r3, r3, r6
 800c6ea:	50a3      	str	r3, [r4, r2]
 800c6ec:	e7ab      	b.n	800c646 <_malloc_r+0x22>
 800c6ee:	42a3      	cmp	r3, r4
 800c6f0:	6862      	ldr	r2, [r4, #4]
 800c6f2:	d1dd      	bne.n	800c6b0 <_malloc_r+0x8c>
 800c6f4:	f8c8 2000 	str.w	r2, [r8]
 800c6f8:	e7ec      	b.n	800c6d4 <_malloc_r+0xb0>
 800c6fa:	4623      	mov	r3, r4
 800c6fc:	6864      	ldr	r4, [r4, #4]
 800c6fe:	e7ac      	b.n	800c65a <_malloc_r+0x36>
 800c700:	4634      	mov	r4, r6
 800c702:	6876      	ldr	r6, [r6, #4]
 800c704:	e7b4      	b.n	800c670 <_malloc_r+0x4c>
 800c706:	4613      	mov	r3, r2
 800c708:	e7cc      	b.n	800c6a4 <_malloc_r+0x80>
 800c70a:	230c      	movs	r3, #12
 800c70c:	603b      	str	r3, [r7, #0]
 800c70e:	4638      	mov	r0, r7
 800c710:	f000 f80e 	bl	800c730 <__malloc_unlock>
 800c714:	e797      	b.n	800c646 <_malloc_r+0x22>
 800c716:	6025      	str	r5, [r4, #0]
 800c718:	e7dc      	b.n	800c6d4 <_malloc_r+0xb0>
 800c71a:	605b      	str	r3, [r3, #4]
 800c71c:	deff      	udf	#255	; 0xff
 800c71e:	bf00      	nop
 800c720:	20002194 	.word	0x20002194

0800c724 <__malloc_lock>:
 800c724:	4801      	ldr	r0, [pc, #4]	; (800c72c <__malloc_lock+0x8>)
 800c726:	f7ff b887 	b.w	800b838 <__retarget_lock_acquire_recursive>
 800c72a:	bf00      	nop
 800c72c:	20002190 	.word	0x20002190

0800c730 <__malloc_unlock>:
 800c730:	4801      	ldr	r0, [pc, #4]	; (800c738 <__malloc_unlock+0x8>)
 800c732:	f7ff b882 	b.w	800b83a <__retarget_lock_release_recursive>
 800c736:	bf00      	nop
 800c738:	20002190 	.word	0x20002190

0800c73c <_Balloc>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	69c6      	ldr	r6, [r0, #28]
 800c740:	4604      	mov	r4, r0
 800c742:	460d      	mov	r5, r1
 800c744:	b976      	cbnz	r6, 800c764 <_Balloc+0x28>
 800c746:	2010      	movs	r0, #16
 800c748:	f7ff ff44 	bl	800c5d4 <malloc>
 800c74c:	4602      	mov	r2, r0
 800c74e:	61e0      	str	r0, [r4, #28]
 800c750:	b920      	cbnz	r0, 800c75c <_Balloc+0x20>
 800c752:	4b18      	ldr	r3, [pc, #96]	; (800c7b4 <_Balloc+0x78>)
 800c754:	4818      	ldr	r0, [pc, #96]	; (800c7b8 <_Balloc+0x7c>)
 800c756:	216b      	movs	r1, #107	; 0x6b
 800c758:	f001 ff66 	bl	800e628 <__assert_func>
 800c75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c760:	6006      	str	r6, [r0, #0]
 800c762:	60c6      	str	r6, [r0, #12]
 800c764:	69e6      	ldr	r6, [r4, #28]
 800c766:	68f3      	ldr	r3, [r6, #12]
 800c768:	b183      	cbz	r3, 800c78c <_Balloc+0x50>
 800c76a:	69e3      	ldr	r3, [r4, #28]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c772:	b9b8      	cbnz	r0, 800c7a4 <_Balloc+0x68>
 800c774:	2101      	movs	r1, #1
 800c776:	fa01 f605 	lsl.w	r6, r1, r5
 800c77a:	1d72      	adds	r2, r6, #5
 800c77c:	0092      	lsls	r2, r2, #2
 800c77e:	4620      	mov	r0, r4
 800c780:	f001 ff70 	bl	800e664 <_calloc_r>
 800c784:	b160      	cbz	r0, 800c7a0 <_Balloc+0x64>
 800c786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c78a:	e00e      	b.n	800c7aa <_Balloc+0x6e>
 800c78c:	2221      	movs	r2, #33	; 0x21
 800c78e:	2104      	movs	r1, #4
 800c790:	4620      	mov	r0, r4
 800c792:	f001 ff67 	bl	800e664 <_calloc_r>
 800c796:	69e3      	ldr	r3, [r4, #28]
 800c798:	60f0      	str	r0, [r6, #12]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1e4      	bne.n	800c76a <_Balloc+0x2e>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	6802      	ldr	r2, [r0, #0]
 800c7a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7b0:	e7f7      	b.n	800c7a2 <_Balloc+0x66>
 800c7b2:	bf00      	nop
 800c7b4:	0800f0ca 	.word	0x0800f0ca
 800c7b8:	0800f14a 	.word	0x0800f14a

0800c7bc <_Bfree>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	69c6      	ldr	r6, [r0, #28]
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	b976      	cbnz	r6, 800c7e4 <_Bfree+0x28>
 800c7c6:	2010      	movs	r0, #16
 800c7c8:	f7ff ff04 	bl	800c5d4 <malloc>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	61e8      	str	r0, [r5, #28]
 800c7d0:	b920      	cbnz	r0, 800c7dc <_Bfree+0x20>
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <_Bfree+0x3c>)
 800c7d4:	4809      	ldr	r0, [pc, #36]	; (800c7fc <_Bfree+0x40>)
 800c7d6:	218f      	movs	r1, #143	; 0x8f
 800c7d8:	f001 ff26 	bl	800e628 <__assert_func>
 800c7dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7e0:	6006      	str	r6, [r0, #0]
 800c7e2:	60c6      	str	r6, [r0, #12]
 800c7e4:	b13c      	cbz	r4, 800c7f6 <_Bfree+0x3a>
 800c7e6:	69eb      	ldr	r3, [r5, #28]
 800c7e8:	6862      	ldr	r2, [r4, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7f0:	6021      	str	r1, [r4, #0]
 800c7f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	0800f0ca 	.word	0x0800f0ca
 800c7fc:	0800f14a 	.word	0x0800f14a

0800c800 <__multadd>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	690d      	ldr	r5, [r1, #16]
 800c806:	4607      	mov	r7, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	461e      	mov	r6, r3
 800c80c:	f101 0c14 	add.w	ip, r1, #20
 800c810:	2000      	movs	r0, #0
 800c812:	f8dc 3000 	ldr.w	r3, [ip]
 800c816:	b299      	uxth	r1, r3
 800c818:	fb02 6101 	mla	r1, r2, r1, r6
 800c81c:	0c1e      	lsrs	r6, r3, #16
 800c81e:	0c0b      	lsrs	r3, r1, #16
 800c820:	fb02 3306 	mla	r3, r2, r6, r3
 800c824:	b289      	uxth	r1, r1
 800c826:	3001      	adds	r0, #1
 800c828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c82c:	4285      	cmp	r5, r0
 800c82e:	f84c 1b04 	str.w	r1, [ip], #4
 800c832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c836:	dcec      	bgt.n	800c812 <__multadd+0x12>
 800c838:	b30e      	cbz	r6, 800c87e <__multadd+0x7e>
 800c83a:	68a3      	ldr	r3, [r4, #8]
 800c83c:	42ab      	cmp	r3, r5
 800c83e:	dc19      	bgt.n	800c874 <__multadd+0x74>
 800c840:	6861      	ldr	r1, [r4, #4]
 800c842:	4638      	mov	r0, r7
 800c844:	3101      	adds	r1, #1
 800c846:	f7ff ff79 	bl	800c73c <_Balloc>
 800c84a:	4680      	mov	r8, r0
 800c84c:	b928      	cbnz	r0, 800c85a <__multadd+0x5a>
 800c84e:	4602      	mov	r2, r0
 800c850:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <__multadd+0x84>)
 800c852:	480d      	ldr	r0, [pc, #52]	; (800c888 <__multadd+0x88>)
 800c854:	21ba      	movs	r1, #186	; 0xba
 800c856:	f001 fee7 	bl	800e628 <__assert_func>
 800c85a:	6922      	ldr	r2, [r4, #16]
 800c85c:	3202      	adds	r2, #2
 800c85e:	f104 010c 	add.w	r1, r4, #12
 800c862:	0092      	lsls	r2, r2, #2
 800c864:	300c      	adds	r0, #12
 800c866:	f001 fec9 	bl	800e5fc <memcpy>
 800c86a:	4621      	mov	r1, r4
 800c86c:	4638      	mov	r0, r7
 800c86e:	f7ff ffa5 	bl	800c7bc <_Bfree>
 800c872:	4644      	mov	r4, r8
 800c874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c878:	3501      	adds	r5, #1
 800c87a:	615e      	str	r6, [r3, #20]
 800c87c:	6125      	str	r5, [r4, #16]
 800c87e:	4620      	mov	r0, r4
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	0800f139 	.word	0x0800f139
 800c888:	0800f14a 	.word	0x0800f14a

0800c88c <__s2b>:
 800c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c890:	460c      	mov	r4, r1
 800c892:	4615      	mov	r5, r2
 800c894:	461f      	mov	r7, r3
 800c896:	2209      	movs	r2, #9
 800c898:	3308      	adds	r3, #8
 800c89a:	4606      	mov	r6, r0
 800c89c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	db09      	blt.n	800c8bc <__s2b+0x30>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7ff ff47 	bl	800c73c <_Balloc>
 800c8ae:	b940      	cbnz	r0, 800c8c2 <__s2b+0x36>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4b19      	ldr	r3, [pc, #100]	; (800c918 <__s2b+0x8c>)
 800c8b4:	4819      	ldr	r0, [pc, #100]	; (800c91c <__s2b+0x90>)
 800c8b6:	21d3      	movs	r1, #211	; 0xd3
 800c8b8:	f001 feb6 	bl	800e628 <__assert_func>
 800c8bc:	0052      	lsls	r2, r2, #1
 800c8be:	3101      	adds	r1, #1
 800c8c0:	e7f0      	b.n	800c8a4 <__s2b+0x18>
 800c8c2:	9b08      	ldr	r3, [sp, #32]
 800c8c4:	6143      	str	r3, [r0, #20]
 800c8c6:	2d09      	cmp	r5, #9
 800c8c8:	f04f 0301 	mov.w	r3, #1
 800c8cc:	6103      	str	r3, [r0, #16]
 800c8ce:	dd16      	ble.n	800c8fe <__s2b+0x72>
 800c8d0:	f104 0909 	add.w	r9, r4, #9
 800c8d4:	46c8      	mov	r8, r9
 800c8d6:	442c      	add	r4, r5
 800c8d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c8dc:	4601      	mov	r1, r0
 800c8de:	3b30      	subs	r3, #48	; 0x30
 800c8e0:	220a      	movs	r2, #10
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7ff ff8c 	bl	800c800 <__multadd>
 800c8e8:	45a0      	cmp	r8, r4
 800c8ea:	d1f5      	bne.n	800c8d8 <__s2b+0x4c>
 800c8ec:	f1a5 0408 	sub.w	r4, r5, #8
 800c8f0:	444c      	add	r4, r9
 800c8f2:	1b2d      	subs	r5, r5, r4
 800c8f4:	1963      	adds	r3, r4, r5
 800c8f6:	42bb      	cmp	r3, r7
 800c8f8:	db04      	blt.n	800c904 <__s2b+0x78>
 800c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fe:	340a      	adds	r4, #10
 800c900:	2509      	movs	r5, #9
 800c902:	e7f6      	b.n	800c8f2 <__s2b+0x66>
 800c904:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c908:	4601      	mov	r1, r0
 800c90a:	3b30      	subs	r3, #48	; 0x30
 800c90c:	220a      	movs	r2, #10
 800c90e:	4630      	mov	r0, r6
 800c910:	f7ff ff76 	bl	800c800 <__multadd>
 800c914:	e7ee      	b.n	800c8f4 <__s2b+0x68>
 800c916:	bf00      	nop
 800c918:	0800f139 	.word	0x0800f139
 800c91c:	0800f14a 	.word	0x0800f14a

0800c920 <__hi0bits>:
 800c920:	0c03      	lsrs	r3, r0, #16
 800c922:	041b      	lsls	r3, r3, #16
 800c924:	b9d3      	cbnz	r3, 800c95c <__hi0bits+0x3c>
 800c926:	0400      	lsls	r0, r0, #16
 800c928:	2310      	movs	r3, #16
 800c92a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c92e:	bf04      	itt	eq
 800c930:	0200      	lsleq	r0, r0, #8
 800c932:	3308      	addeq	r3, #8
 800c934:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c938:	bf04      	itt	eq
 800c93a:	0100      	lsleq	r0, r0, #4
 800c93c:	3304      	addeq	r3, #4
 800c93e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c942:	bf04      	itt	eq
 800c944:	0080      	lsleq	r0, r0, #2
 800c946:	3302      	addeq	r3, #2
 800c948:	2800      	cmp	r0, #0
 800c94a:	db05      	blt.n	800c958 <__hi0bits+0x38>
 800c94c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c950:	f103 0301 	add.w	r3, r3, #1
 800c954:	bf08      	it	eq
 800c956:	2320      	moveq	r3, #32
 800c958:	4618      	mov	r0, r3
 800c95a:	4770      	bx	lr
 800c95c:	2300      	movs	r3, #0
 800c95e:	e7e4      	b.n	800c92a <__hi0bits+0xa>

0800c960 <__lo0bits>:
 800c960:	6803      	ldr	r3, [r0, #0]
 800c962:	f013 0207 	ands.w	r2, r3, #7
 800c966:	d00c      	beq.n	800c982 <__lo0bits+0x22>
 800c968:	07d9      	lsls	r1, r3, #31
 800c96a:	d422      	bmi.n	800c9b2 <__lo0bits+0x52>
 800c96c:	079a      	lsls	r2, r3, #30
 800c96e:	bf49      	itett	mi
 800c970:	085b      	lsrmi	r3, r3, #1
 800c972:	089b      	lsrpl	r3, r3, #2
 800c974:	6003      	strmi	r3, [r0, #0]
 800c976:	2201      	movmi	r2, #1
 800c978:	bf5c      	itt	pl
 800c97a:	6003      	strpl	r3, [r0, #0]
 800c97c:	2202      	movpl	r2, #2
 800c97e:	4610      	mov	r0, r2
 800c980:	4770      	bx	lr
 800c982:	b299      	uxth	r1, r3
 800c984:	b909      	cbnz	r1, 800c98a <__lo0bits+0x2a>
 800c986:	0c1b      	lsrs	r3, r3, #16
 800c988:	2210      	movs	r2, #16
 800c98a:	b2d9      	uxtb	r1, r3
 800c98c:	b909      	cbnz	r1, 800c992 <__lo0bits+0x32>
 800c98e:	3208      	adds	r2, #8
 800c990:	0a1b      	lsrs	r3, r3, #8
 800c992:	0719      	lsls	r1, r3, #28
 800c994:	bf04      	itt	eq
 800c996:	091b      	lsreq	r3, r3, #4
 800c998:	3204      	addeq	r2, #4
 800c99a:	0799      	lsls	r1, r3, #30
 800c99c:	bf04      	itt	eq
 800c99e:	089b      	lsreq	r3, r3, #2
 800c9a0:	3202      	addeq	r2, #2
 800c9a2:	07d9      	lsls	r1, r3, #31
 800c9a4:	d403      	bmi.n	800c9ae <__lo0bits+0x4e>
 800c9a6:	085b      	lsrs	r3, r3, #1
 800c9a8:	f102 0201 	add.w	r2, r2, #1
 800c9ac:	d003      	beq.n	800c9b6 <__lo0bits+0x56>
 800c9ae:	6003      	str	r3, [r0, #0]
 800c9b0:	e7e5      	b.n	800c97e <__lo0bits+0x1e>
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	e7e3      	b.n	800c97e <__lo0bits+0x1e>
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	e7e1      	b.n	800c97e <__lo0bits+0x1e>
	...

0800c9bc <__i2b>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	460c      	mov	r4, r1
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	f7ff febb 	bl	800c73c <_Balloc>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	b928      	cbnz	r0, 800c9d6 <__i2b+0x1a>
 800c9ca:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <__i2b+0x24>)
 800c9cc:	4805      	ldr	r0, [pc, #20]	; (800c9e4 <__i2b+0x28>)
 800c9ce:	f240 1145 	movw	r1, #325	; 0x145
 800c9d2:	f001 fe29 	bl	800e628 <__assert_func>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	6144      	str	r4, [r0, #20]
 800c9da:	6103      	str	r3, [r0, #16]
 800c9dc:	bd10      	pop	{r4, pc}
 800c9de:	bf00      	nop
 800c9e0:	0800f139 	.word	0x0800f139
 800c9e4:	0800f14a 	.word	0x0800f14a

0800c9e8 <__multiply>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	4691      	mov	r9, r2
 800c9ee:	690a      	ldr	r2, [r1, #16]
 800c9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	bfb8      	it	lt
 800c9f8:	460b      	movlt	r3, r1
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	bfbc      	itt	lt
 800c9fe:	464c      	movlt	r4, r9
 800ca00:	4699      	movlt	r9, r3
 800ca02:	6927      	ldr	r7, [r4, #16]
 800ca04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	6861      	ldr	r1, [r4, #4]
 800ca0c:	eb07 060a 	add.w	r6, r7, sl
 800ca10:	42b3      	cmp	r3, r6
 800ca12:	b085      	sub	sp, #20
 800ca14:	bfb8      	it	lt
 800ca16:	3101      	addlt	r1, #1
 800ca18:	f7ff fe90 	bl	800c73c <_Balloc>
 800ca1c:	b930      	cbnz	r0, 800ca2c <__multiply+0x44>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b44      	ldr	r3, [pc, #272]	; (800cb34 <__multiply+0x14c>)
 800ca22:	4845      	ldr	r0, [pc, #276]	; (800cb38 <__multiply+0x150>)
 800ca24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ca28:	f001 fdfe 	bl	800e628 <__assert_func>
 800ca2c:	f100 0514 	add.w	r5, r0, #20
 800ca30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca34:	462b      	mov	r3, r5
 800ca36:	2200      	movs	r2, #0
 800ca38:	4543      	cmp	r3, r8
 800ca3a:	d321      	bcc.n	800ca80 <__multiply+0x98>
 800ca3c:	f104 0314 	add.w	r3, r4, #20
 800ca40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca44:	f109 0314 	add.w	r3, r9, #20
 800ca48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca4c:	9202      	str	r2, [sp, #8]
 800ca4e:	1b3a      	subs	r2, r7, r4
 800ca50:	3a15      	subs	r2, #21
 800ca52:	f022 0203 	bic.w	r2, r2, #3
 800ca56:	3204      	adds	r2, #4
 800ca58:	f104 0115 	add.w	r1, r4, #21
 800ca5c:	428f      	cmp	r7, r1
 800ca5e:	bf38      	it	cc
 800ca60:	2204      	movcc	r2, #4
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	9a02      	ldr	r2, [sp, #8]
 800ca66:	9303      	str	r3, [sp, #12]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d80c      	bhi.n	800ca86 <__multiply+0x9e>
 800ca6c:	2e00      	cmp	r6, #0
 800ca6e:	dd03      	ble.n	800ca78 <__multiply+0x90>
 800ca70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d05b      	beq.n	800cb30 <__multiply+0x148>
 800ca78:	6106      	str	r6, [r0, #16]
 800ca7a:	b005      	add	sp, #20
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	f843 2b04 	str.w	r2, [r3], #4
 800ca84:	e7d8      	b.n	800ca38 <__multiply+0x50>
 800ca86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca8a:	f1ba 0f00 	cmp.w	sl, #0
 800ca8e:	d024      	beq.n	800cada <__multiply+0xf2>
 800ca90:	f104 0e14 	add.w	lr, r4, #20
 800ca94:	46a9      	mov	r9, r5
 800ca96:	f04f 0c00 	mov.w	ip, #0
 800ca9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca9e:	f8d9 1000 	ldr.w	r1, [r9]
 800caa2:	fa1f fb82 	uxth.w	fp, r2
 800caa6:	b289      	uxth	r1, r1
 800caa8:	fb0a 110b 	mla	r1, sl, fp, r1
 800caac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cab0:	f8d9 2000 	ldr.w	r2, [r9]
 800cab4:	4461      	add	r1, ip
 800cab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caba:	fb0a c20b 	mla	r2, sl, fp, ip
 800cabe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cac2:	b289      	uxth	r1, r1
 800cac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cac8:	4577      	cmp	r7, lr
 800caca:	f849 1b04 	str.w	r1, [r9], #4
 800cace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cad2:	d8e2      	bhi.n	800ca9a <__multiply+0xb2>
 800cad4:	9a01      	ldr	r2, [sp, #4]
 800cad6:	f845 c002 	str.w	ip, [r5, r2]
 800cada:	9a03      	ldr	r2, [sp, #12]
 800cadc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cae0:	3304      	adds	r3, #4
 800cae2:	f1b9 0f00 	cmp.w	r9, #0
 800cae6:	d021      	beq.n	800cb2c <__multiply+0x144>
 800cae8:	6829      	ldr	r1, [r5, #0]
 800caea:	f104 0c14 	add.w	ip, r4, #20
 800caee:	46ae      	mov	lr, r5
 800caf0:	f04f 0a00 	mov.w	sl, #0
 800caf4:	f8bc b000 	ldrh.w	fp, [ip]
 800caf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cafc:	fb09 220b 	mla	r2, r9, fp, r2
 800cb00:	4452      	add	r2, sl
 800cb02:	b289      	uxth	r1, r1
 800cb04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb08:	f84e 1b04 	str.w	r1, [lr], #4
 800cb0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb14:	f8be 1000 	ldrh.w	r1, [lr]
 800cb18:	fb09 110a 	mla	r1, r9, sl, r1
 800cb1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cb20:	4567      	cmp	r7, ip
 800cb22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb26:	d8e5      	bhi.n	800caf4 <__multiply+0x10c>
 800cb28:	9a01      	ldr	r2, [sp, #4]
 800cb2a:	50a9      	str	r1, [r5, r2]
 800cb2c:	3504      	adds	r5, #4
 800cb2e:	e799      	b.n	800ca64 <__multiply+0x7c>
 800cb30:	3e01      	subs	r6, #1
 800cb32:	e79b      	b.n	800ca6c <__multiply+0x84>
 800cb34:	0800f139 	.word	0x0800f139
 800cb38:	0800f14a 	.word	0x0800f14a

0800cb3c <__pow5mult>:
 800cb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb40:	4615      	mov	r5, r2
 800cb42:	f012 0203 	ands.w	r2, r2, #3
 800cb46:	4606      	mov	r6, r0
 800cb48:	460f      	mov	r7, r1
 800cb4a:	d007      	beq.n	800cb5c <__pow5mult+0x20>
 800cb4c:	4c25      	ldr	r4, [pc, #148]	; (800cbe4 <__pow5mult+0xa8>)
 800cb4e:	3a01      	subs	r2, #1
 800cb50:	2300      	movs	r3, #0
 800cb52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb56:	f7ff fe53 	bl	800c800 <__multadd>
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	10ad      	asrs	r5, r5, #2
 800cb5e:	d03d      	beq.n	800cbdc <__pow5mult+0xa0>
 800cb60:	69f4      	ldr	r4, [r6, #28]
 800cb62:	b97c      	cbnz	r4, 800cb84 <__pow5mult+0x48>
 800cb64:	2010      	movs	r0, #16
 800cb66:	f7ff fd35 	bl	800c5d4 <malloc>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	61f0      	str	r0, [r6, #28]
 800cb6e:	b928      	cbnz	r0, 800cb7c <__pow5mult+0x40>
 800cb70:	4b1d      	ldr	r3, [pc, #116]	; (800cbe8 <__pow5mult+0xac>)
 800cb72:	481e      	ldr	r0, [pc, #120]	; (800cbec <__pow5mult+0xb0>)
 800cb74:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb78:	f001 fd56 	bl	800e628 <__assert_func>
 800cb7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb80:	6004      	str	r4, [r0, #0]
 800cb82:	60c4      	str	r4, [r0, #12]
 800cb84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb8c:	b94c      	cbnz	r4, 800cba2 <__pow5mult+0x66>
 800cb8e:	f240 2171 	movw	r1, #625	; 0x271
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ff12 	bl	800c9bc <__i2b>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb9e:	4604      	mov	r4, r0
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	f04f 0900 	mov.w	r9, #0
 800cba6:	07eb      	lsls	r3, r5, #31
 800cba8:	d50a      	bpl.n	800cbc0 <__pow5mult+0x84>
 800cbaa:	4639      	mov	r1, r7
 800cbac:	4622      	mov	r2, r4
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f7ff ff1a 	bl	800c9e8 <__multiply>
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	4680      	mov	r8, r0
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7ff fdff 	bl	800c7bc <_Bfree>
 800cbbe:	4647      	mov	r7, r8
 800cbc0:	106d      	asrs	r5, r5, #1
 800cbc2:	d00b      	beq.n	800cbdc <__pow5mult+0xa0>
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	b938      	cbnz	r0, 800cbd8 <__pow5mult+0x9c>
 800cbc8:	4622      	mov	r2, r4
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff ff0b 	bl	800c9e8 <__multiply>
 800cbd2:	6020      	str	r0, [r4, #0]
 800cbd4:	f8c0 9000 	str.w	r9, [r0]
 800cbd8:	4604      	mov	r4, r0
 800cbda:	e7e4      	b.n	800cba6 <__pow5mult+0x6a>
 800cbdc:	4638      	mov	r0, r7
 800cbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe2:	bf00      	nop
 800cbe4:	0800f298 	.word	0x0800f298
 800cbe8:	0800f0ca 	.word	0x0800f0ca
 800cbec:	0800f14a 	.word	0x0800f14a

0800cbf0 <__lshift>:
 800cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	6849      	ldr	r1, [r1, #4]
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	4607      	mov	r7, r0
 800cc02:	4691      	mov	r9, r2
 800cc04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc08:	f108 0601 	add.w	r6, r8, #1
 800cc0c:	42b3      	cmp	r3, r6
 800cc0e:	db0b      	blt.n	800cc28 <__lshift+0x38>
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff fd93 	bl	800c73c <_Balloc>
 800cc16:	4605      	mov	r5, r0
 800cc18:	b948      	cbnz	r0, 800cc2e <__lshift+0x3e>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	4b28      	ldr	r3, [pc, #160]	; (800ccc0 <__lshift+0xd0>)
 800cc1e:	4829      	ldr	r0, [pc, #164]	; (800ccc4 <__lshift+0xd4>)
 800cc20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc24:	f001 fd00 	bl	800e628 <__assert_func>
 800cc28:	3101      	adds	r1, #1
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	e7ee      	b.n	800cc0c <__lshift+0x1c>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f100 0114 	add.w	r1, r0, #20
 800cc34:	f100 0210 	add.w	r2, r0, #16
 800cc38:	4618      	mov	r0, r3
 800cc3a:	4553      	cmp	r3, sl
 800cc3c:	db33      	blt.n	800cca6 <__lshift+0xb6>
 800cc3e:	6920      	ldr	r0, [r4, #16]
 800cc40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc44:	f104 0314 	add.w	r3, r4, #20
 800cc48:	f019 091f 	ands.w	r9, r9, #31
 800cc4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc54:	d02b      	beq.n	800ccae <__lshift+0xbe>
 800cc56:	f1c9 0e20 	rsb	lr, r9, #32
 800cc5a:	468a      	mov	sl, r1
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	6818      	ldr	r0, [r3, #0]
 800cc60:	fa00 f009 	lsl.w	r0, r0, r9
 800cc64:	4310      	orrs	r0, r2
 800cc66:	f84a 0b04 	str.w	r0, [sl], #4
 800cc6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc6e:	459c      	cmp	ip, r3
 800cc70:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc74:	d8f3      	bhi.n	800cc5e <__lshift+0x6e>
 800cc76:	ebac 0304 	sub.w	r3, ip, r4
 800cc7a:	3b15      	subs	r3, #21
 800cc7c:	f023 0303 	bic.w	r3, r3, #3
 800cc80:	3304      	adds	r3, #4
 800cc82:	f104 0015 	add.w	r0, r4, #21
 800cc86:	4584      	cmp	ip, r0
 800cc88:	bf38      	it	cc
 800cc8a:	2304      	movcc	r3, #4
 800cc8c:	50ca      	str	r2, [r1, r3]
 800cc8e:	b10a      	cbz	r2, 800cc94 <__lshift+0xa4>
 800cc90:	f108 0602 	add.w	r6, r8, #2
 800cc94:	3e01      	subs	r6, #1
 800cc96:	4638      	mov	r0, r7
 800cc98:	612e      	str	r6, [r5, #16]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	f7ff fd8e 	bl	800c7bc <_Bfree>
 800cca0:	4628      	mov	r0, r5
 800cca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccaa:	3301      	adds	r3, #1
 800ccac:	e7c5      	b.n	800cc3a <__lshift+0x4a>
 800ccae:	3904      	subs	r1, #4
 800ccb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccb8:	459c      	cmp	ip, r3
 800ccba:	d8f9      	bhi.n	800ccb0 <__lshift+0xc0>
 800ccbc:	e7ea      	b.n	800cc94 <__lshift+0xa4>
 800ccbe:	bf00      	nop
 800ccc0:	0800f139 	.word	0x0800f139
 800ccc4:	0800f14a 	.word	0x0800f14a

0800ccc8 <__mcmp>:
 800ccc8:	b530      	push	{r4, r5, lr}
 800ccca:	6902      	ldr	r2, [r0, #16]
 800cccc:	690c      	ldr	r4, [r1, #16]
 800ccce:	1b12      	subs	r2, r2, r4
 800ccd0:	d10e      	bne.n	800ccf0 <__mcmp+0x28>
 800ccd2:	f100 0314 	add.w	r3, r0, #20
 800ccd6:	3114      	adds	r1, #20
 800ccd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cce0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cce4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cce8:	42a5      	cmp	r5, r4
 800ccea:	d003      	beq.n	800ccf4 <__mcmp+0x2c>
 800ccec:	d305      	bcc.n	800ccfa <__mcmp+0x32>
 800ccee:	2201      	movs	r2, #1
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	bd30      	pop	{r4, r5, pc}
 800ccf4:	4283      	cmp	r3, r0
 800ccf6:	d3f3      	bcc.n	800cce0 <__mcmp+0x18>
 800ccf8:	e7fa      	b.n	800ccf0 <__mcmp+0x28>
 800ccfa:	f04f 32ff 	mov.w	r2, #4294967295
 800ccfe:	e7f7      	b.n	800ccf0 <__mcmp+0x28>

0800cd00 <__mdiff>:
 800cd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	460c      	mov	r4, r1
 800cd06:	4606      	mov	r6, r0
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	4690      	mov	r8, r2
 800cd0e:	f7ff ffdb 	bl	800ccc8 <__mcmp>
 800cd12:	1e05      	subs	r5, r0, #0
 800cd14:	d110      	bne.n	800cd38 <__mdiff+0x38>
 800cd16:	4629      	mov	r1, r5
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7ff fd0f 	bl	800c73c <_Balloc>
 800cd1e:	b930      	cbnz	r0, 800cd2e <__mdiff+0x2e>
 800cd20:	4b3a      	ldr	r3, [pc, #232]	; (800ce0c <__mdiff+0x10c>)
 800cd22:	4602      	mov	r2, r0
 800cd24:	f240 2137 	movw	r1, #567	; 0x237
 800cd28:	4839      	ldr	r0, [pc, #228]	; (800ce10 <__mdiff+0x110>)
 800cd2a:	f001 fc7d 	bl	800e628 <__assert_func>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd38:	bfa4      	itt	ge
 800cd3a:	4643      	movge	r3, r8
 800cd3c:	46a0      	movge	r8, r4
 800cd3e:	4630      	mov	r0, r6
 800cd40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd44:	bfa6      	itte	ge
 800cd46:	461c      	movge	r4, r3
 800cd48:	2500      	movge	r5, #0
 800cd4a:	2501      	movlt	r5, #1
 800cd4c:	f7ff fcf6 	bl	800c73c <_Balloc>
 800cd50:	b920      	cbnz	r0, 800cd5c <__mdiff+0x5c>
 800cd52:	4b2e      	ldr	r3, [pc, #184]	; (800ce0c <__mdiff+0x10c>)
 800cd54:	4602      	mov	r2, r0
 800cd56:	f240 2145 	movw	r1, #581	; 0x245
 800cd5a:	e7e5      	b.n	800cd28 <__mdiff+0x28>
 800cd5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd60:	6926      	ldr	r6, [r4, #16]
 800cd62:	60c5      	str	r5, [r0, #12]
 800cd64:	f104 0914 	add.w	r9, r4, #20
 800cd68:	f108 0514 	add.w	r5, r8, #20
 800cd6c:	f100 0e14 	add.w	lr, r0, #20
 800cd70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd78:	f108 0210 	add.w	r2, r8, #16
 800cd7c:	46f2      	mov	sl, lr
 800cd7e:	2100      	movs	r1, #0
 800cd80:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd88:	fa11 f88b 	uxtah	r8, r1, fp
 800cd8c:	b299      	uxth	r1, r3
 800cd8e:	0c1b      	lsrs	r3, r3, #16
 800cd90:	eba8 0801 	sub.w	r8, r8, r1
 800cd94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd9c:	fa1f f888 	uxth.w	r8, r8
 800cda0:	1419      	asrs	r1, r3, #16
 800cda2:	454e      	cmp	r6, r9
 800cda4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cda8:	f84a 3b04 	str.w	r3, [sl], #4
 800cdac:	d8e8      	bhi.n	800cd80 <__mdiff+0x80>
 800cdae:	1b33      	subs	r3, r6, r4
 800cdb0:	3b15      	subs	r3, #21
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	3415      	adds	r4, #21
 800cdba:	42a6      	cmp	r6, r4
 800cdbc:	bf38      	it	cc
 800cdbe:	2304      	movcc	r3, #4
 800cdc0:	441d      	add	r5, r3
 800cdc2:	4473      	add	r3, lr
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	462e      	mov	r6, r5
 800cdc8:	4566      	cmp	r6, ip
 800cdca:	d30e      	bcc.n	800cdea <__mdiff+0xea>
 800cdcc:	f10c 0203 	add.w	r2, ip, #3
 800cdd0:	1b52      	subs	r2, r2, r5
 800cdd2:	f022 0203 	bic.w	r2, r2, #3
 800cdd6:	3d03      	subs	r5, #3
 800cdd8:	45ac      	cmp	ip, r5
 800cdda:	bf38      	it	cc
 800cddc:	2200      	movcc	r2, #0
 800cdde:	4413      	add	r3, r2
 800cde0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cde4:	b17a      	cbz	r2, 800ce06 <__mdiff+0x106>
 800cde6:	6107      	str	r7, [r0, #16]
 800cde8:	e7a4      	b.n	800cd34 <__mdiff+0x34>
 800cdea:	f856 8b04 	ldr.w	r8, [r6], #4
 800cdee:	fa11 f288 	uxtah	r2, r1, r8
 800cdf2:	1414      	asrs	r4, r2, #16
 800cdf4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cdf8:	b292      	uxth	r2, r2
 800cdfa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cdfe:	f84e 2b04 	str.w	r2, [lr], #4
 800ce02:	1421      	asrs	r1, r4, #16
 800ce04:	e7e0      	b.n	800cdc8 <__mdiff+0xc8>
 800ce06:	3f01      	subs	r7, #1
 800ce08:	e7ea      	b.n	800cde0 <__mdiff+0xe0>
 800ce0a:	bf00      	nop
 800ce0c:	0800f139 	.word	0x0800f139
 800ce10:	0800f14a 	.word	0x0800f14a

0800ce14 <__ulp>:
 800ce14:	b082      	sub	sp, #8
 800ce16:	ed8d 0b00 	vstr	d0, [sp]
 800ce1a:	9a01      	ldr	r2, [sp, #4]
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <__ulp+0x48>)
 800ce1e:	4013      	ands	r3, r2
 800ce20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dc08      	bgt.n	800ce3a <__ulp+0x26>
 800ce28:	425b      	negs	r3, r3
 800ce2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ce2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce32:	da04      	bge.n	800ce3e <__ulp+0x2a>
 800ce34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce38:	4113      	asrs	r3, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	e008      	b.n	800ce50 <__ulp+0x3c>
 800ce3e:	f1a2 0314 	sub.w	r3, r2, #20
 800ce42:	2b1e      	cmp	r3, #30
 800ce44:	bfda      	itte	le
 800ce46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ce4a:	40da      	lsrle	r2, r3
 800ce4c:	2201      	movgt	r2, #1
 800ce4e:	2300      	movs	r3, #0
 800ce50:	4619      	mov	r1, r3
 800ce52:	4610      	mov	r0, r2
 800ce54:	ec41 0b10 	vmov	d0, r0, r1
 800ce58:	b002      	add	sp, #8
 800ce5a:	4770      	bx	lr
 800ce5c:	7ff00000 	.word	0x7ff00000

0800ce60 <__b2d>:
 800ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	6906      	ldr	r6, [r0, #16]
 800ce66:	f100 0814 	add.w	r8, r0, #20
 800ce6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce6e:	1f37      	subs	r7, r6, #4
 800ce70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7ff fd53 	bl	800c920 <__hi0bits>
 800ce7a:	f1c0 0320 	rsb	r3, r0, #32
 800ce7e:	280a      	cmp	r0, #10
 800ce80:	600b      	str	r3, [r1, #0]
 800ce82:	491b      	ldr	r1, [pc, #108]	; (800cef0 <__b2d+0x90>)
 800ce84:	dc15      	bgt.n	800ceb2 <__b2d+0x52>
 800ce86:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce8a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce8e:	45b8      	cmp	r8, r7
 800ce90:	ea43 0501 	orr.w	r5, r3, r1
 800ce94:	bf34      	ite	cc
 800ce96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce9a:	2300      	movcs	r3, #0
 800ce9c:	3015      	adds	r0, #21
 800ce9e:	fa02 f000 	lsl.w	r0, r2, r0
 800cea2:	fa23 f30c 	lsr.w	r3, r3, ip
 800cea6:	4303      	orrs	r3, r0
 800cea8:	461c      	mov	r4, r3
 800ceaa:	ec45 4b10 	vmov	d0, r4, r5
 800ceae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb2:	45b8      	cmp	r8, r7
 800ceb4:	bf3a      	itte	cc
 800ceb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ceba:	f1a6 0708 	subcc.w	r7, r6, #8
 800cebe:	2300      	movcs	r3, #0
 800cec0:	380b      	subs	r0, #11
 800cec2:	d012      	beq.n	800ceea <__b2d+0x8a>
 800cec4:	f1c0 0120 	rsb	r1, r0, #32
 800cec8:	fa23 f401 	lsr.w	r4, r3, r1
 800cecc:	4082      	lsls	r2, r0
 800cece:	4322      	orrs	r2, r4
 800ced0:	4547      	cmp	r7, r8
 800ced2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ced6:	bf8c      	ite	hi
 800ced8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cedc:	2200      	movls	r2, #0
 800cede:	4083      	lsls	r3, r0
 800cee0:	40ca      	lsrs	r2, r1
 800cee2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cee6:	4313      	orrs	r3, r2
 800cee8:	e7de      	b.n	800cea8 <__b2d+0x48>
 800ceea:	ea42 0501 	orr.w	r5, r2, r1
 800ceee:	e7db      	b.n	800cea8 <__b2d+0x48>
 800cef0:	3ff00000 	.word	0x3ff00000

0800cef4 <__d2b>:
 800cef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	460f      	mov	r7, r1
 800cefa:	2101      	movs	r1, #1
 800cefc:	ec59 8b10 	vmov	r8, r9, d0
 800cf00:	4616      	mov	r6, r2
 800cf02:	f7ff fc1b 	bl	800c73c <_Balloc>
 800cf06:	4604      	mov	r4, r0
 800cf08:	b930      	cbnz	r0, 800cf18 <__d2b+0x24>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	4b24      	ldr	r3, [pc, #144]	; (800cfa0 <__d2b+0xac>)
 800cf0e:	4825      	ldr	r0, [pc, #148]	; (800cfa4 <__d2b+0xb0>)
 800cf10:	f240 310f 	movw	r1, #783	; 0x30f
 800cf14:	f001 fb88 	bl	800e628 <__assert_func>
 800cf18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf20:	bb2d      	cbnz	r5, 800cf6e <__d2b+0x7a>
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	f1b8 0300 	subs.w	r3, r8, #0
 800cf28:	d026      	beq.n	800cf78 <__d2b+0x84>
 800cf2a:	4668      	mov	r0, sp
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	f7ff fd17 	bl	800c960 <__lo0bits>
 800cf32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf36:	b1e8      	cbz	r0, 800cf74 <__d2b+0x80>
 800cf38:	f1c0 0320 	rsb	r3, r0, #32
 800cf3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf40:	430b      	orrs	r3, r1
 800cf42:	40c2      	lsrs	r2, r0
 800cf44:	6163      	str	r3, [r4, #20]
 800cf46:	9201      	str	r2, [sp, #4]
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	61a3      	str	r3, [r4, #24]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bf14      	ite	ne
 800cf50:	2202      	movne	r2, #2
 800cf52:	2201      	moveq	r2, #1
 800cf54:	6122      	str	r2, [r4, #16]
 800cf56:	b1bd      	cbz	r5, 800cf88 <__d2b+0x94>
 800cf58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf5c:	4405      	add	r5, r0
 800cf5e:	603d      	str	r5, [r7, #0]
 800cf60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf64:	6030      	str	r0, [r6, #0]
 800cf66:	4620      	mov	r0, r4
 800cf68:	b003      	add	sp, #12
 800cf6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf72:	e7d6      	b.n	800cf22 <__d2b+0x2e>
 800cf74:	6161      	str	r1, [r4, #20]
 800cf76:	e7e7      	b.n	800cf48 <__d2b+0x54>
 800cf78:	a801      	add	r0, sp, #4
 800cf7a:	f7ff fcf1 	bl	800c960 <__lo0bits>
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	6163      	str	r3, [r4, #20]
 800cf82:	3020      	adds	r0, #32
 800cf84:	2201      	movs	r2, #1
 800cf86:	e7e5      	b.n	800cf54 <__d2b+0x60>
 800cf88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf90:	6038      	str	r0, [r7, #0]
 800cf92:	6918      	ldr	r0, [r3, #16]
 800cf94:	f7ff fcc4 	bl	800c920 <__hi0bits>
 800cf98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf9c:	e7e2      	b.n	800cf64 <__d2b+0x70>
 800cf9e:	bf00      	nop
 800cfa0:	0800f139 	.word	0x0800f139
 800cfa4:	0800f14a 	.word	0x0800f14a

0800cfa8 <__ratio>:
 800cfa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	4688      	mov	r8, r1
 800cfae:	4669      	mov	r1, sp
 800cfb0:	4681      	mov	r9, r0
 800cfb2:	f7ff ff55 	bl	800ce60 <__b2d>
 800cfb6:	a901      	add	r1, sp, #4
 800cfb8:	4640      	mov	r0, r8
 800cfba:	ec55 4b10 	vmov	r4, r5, d0
 800cfbe:	f7ff ff4f 	bl	800ce60 <__b2d>
 800cfc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cfc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cfca:	eba3 0c02 	sub.w	ip, r3, r2
 800cfce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cfd2:	1a9b      	subs	r3, r3, r2
 800cfd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cfd8:	ec51 0b10 	vmov	r0, r1, d0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	bfd6      	itet	le
 800cfe0:	460a      	movle	r2, r1
 800cfe2:	462a      	movgt	r2, r5
 800cfe4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cfe8:	468b      	mov	fp, r1
 800cfea:	462f      	mov	r7, r5
 800cfec:	bfd4      	ite	le
 800cfee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cff2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cff6:	4620      	mov	r0, r4
 800cff8:	ee10 2a10 	vmov	r2, s0
 800cffc:	465b      	mov	r3, fp
 800cffe:	4639      	mov	r1, r7
 800d000:	f7f3 fc24 	bl	800084c <__aeabi_ddiv>
 800d004:	ec41 0b10 	vmov	d0, r0, r1
 800d008:	b003      	add	sp, #12
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d00e <__copybits>:
 800d00e:	3901      	subs	r1, #1
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	1149      	asrs	r1, r1, #5
 800d014:	6914      	ldr	r4, [r2, #16]
 800d016:	3101      	adds	r1, #1
 800d018:	f102 0314 	add.w	r3, r2, #20
 800d01c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d020:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d024:	1f05      	subs	r5, r0, #4
 800d026:	42a3      	cmp	r3, r4
 800d028:	d30c      	bcc.n	800d044 <__copybits+0x36>
 800d02a:	1aa3      	subs	r3, r4, r2
 800d02c:	3b11      	subs	r3, #17
 800d02e:	f023 0303 	bic.w	r3, r3, #3
 800d032:	3211      	adds	r2, #17
 800d034:	42a2      	cmp	r2, r4
 800d036:	bf88      	it	hi
 800d038:	2300      	movhi	r3, #0
 800d03a:	4418      	add	r0, r3
 800d03c:	2300      	movs	r3, #0
 800d03e:	4288      	cmp	r0, r1
 800d040:	d305      	bcc.n	800d04e <__copybits+0x40>
 800d042:	bd70      	pop	{r4, r5, r6, pc}
 800d044:	f853 6b04 	ldr.w	r6, [r3], #4
 800d048:	f845 6f04 	str.w	r6, [r5, #4]!
 800d04c:	e7eb      	b.n	800d026 <__copybits+0x18>
 800d04e:	f840 3b04 	str.w	r3, [r0], #4
 800d052:	e7f4      	b.n	800d03e <__copybits+0x30>

0800d054 <__any_on>:
 800d054:	f100 0214 	add.w	r2, r0, #20
 800d058:	6900      	ldr	r0, [r0, #16]
 800d05a:	114b      	asrs	r3, r1, #5
 800d05c:	4298      	cmp	r0, r3
 800d05e:	b510      	push	{r4, lr}
 800d060:	db11      	blt.n	800d086 <__any_on+0x32>
 800d062:	dd0a      	ble.n	800d07a <__any_on+0x26>
 800d064:	f011 011f 	ands.w	r1, r1, #31
 800d068:	d007      	beq.n	800d07a <__any_on+0x26>
 800d06a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d06e:	fa24 f001 	lsr.w	r0, r4, r1
 800d072:	fa00 f101 	lsl.w	r1, r0, r1
 800d076:	428c      	cmp	r4, r1
 800d078:	d10b      	bne.n	800d092 <__any_on+0x3e>
 800d07a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d07e:	4293      	cmp	r3, r2
 800d080:	d803      	bhi.n	800d08a <__any_on+0x36>
 800d082:	2000      	movs	r0, #0
 800d084:	bd10      	pop	{r4, pc}
 800d086:	4603      	mov	r3, r0
 800d088:	e7f7      	b.n	800d07a <__any_on+0x26>
 800d08a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d08e:	2900      	cmp	r1, #0
 800d090:	d0f5      	beq.n	800d07e <__any_on+0x2a>
 800d092:	2001      	movs	r0, #1
 800d094:	e7f6      	b.n	800d084 <__any_on+0x30>

0800d096 <sulp>:
 800d096:	b570      	push	{r4, r5, r6, lr}
 800d098:	4604      	mov	r4, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	ec45 4b10 	vmov	d0, r4, r5
 800d0a0:	4616      	mov	r6, r2
 800d0a2:	f7ff feb7 	bl	800ce14 <__ulp>
 800d0a6:	ec51 0b10 	vmov	r0, r1, d0
 800d0aa:	b17e      	cbz	r6, 800d0cc <sulp+0x36>
 800d0ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d0b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dd09      	ble.n	800d0cc <sulp+0x36>
 800d0b8:	051b      	lsls	r3, r3, #20
 800d0ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d0be:	2400      	movs	r4, #0
 800d0c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	462b      	mov	r3, r5
 800d0c8:	f7f3 fa96 	bl	80005f8 <__aeabi_dmul>
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0d0 <_strtod_l>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	ed2d 8b02 	vpush	{d8}
 800d0d8:	b09b      	sub	sp, #108	; 0x6c
 800d0da:	4604      	mov	r4, r0
 800d0dc:	9213      	str	r2, [sp, #76]	; 0x4c
 800d0de:	2200      	movs	r2, #0
 800d0e0:	9216      	str	r2, [sp, #88]	; 0x58
 800d0e2:	460d      	mov	r5, r1
 800d0e4:	f04f 0800 	mov.w	r8, #0
 800d0e8:	f04f 0900 	mov.w	r9, #0
 800d0ec:	460a      	mov	r2, r1
 800d0ee:	9215      	str	r2, [sp, #84]	; 0x54
 800d0f0:	7811      	ldrb	r1, [r2, #0]
 800d0f2:	292b      	cmp	r1, #43	; 0x2b
 800d0f4:	d04c      	beq.n	800d190 <_strtod_l+0xc0>
 800d0f6:	d83a      	bhi.n	800d16e <_strtod_l+0x9e>
 800d0f8:	290d      	cmp	r1, #13
 800d0fa:	d834      	bhi.n	800d166 <_strtod_l+0x96>
 800d0fc:	2908      	cmp	r1, #8
 800d0fe:	d834      	bhi.n	800d16a <_strtod_l+0x9a>
 800d100:	2900      	cmp	r1, #0
 800d102:	d03d      	beq.n	800d180 <_strtod_l+0xb0>
 800d104:	2200      	movs	r2, #0
 800d106:	920a      	str	r2, [sp, #40]	; 0x28
 800d108:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d10a:	7832      	ldrb	r2, [r6, #0]
 800d10c:	2a30      	cmp	r2, #48	; 0x30
 800d10e:	f040 80b4 	bne.w	800d27a <_strtod_l+0x1aa>
 800d112:	7872      	ldrb	r2, [r6, #1]
 800d114:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d118:	2a58      	cmp	r2, #88	; 0x58
 800d11a:	d170      	bne.n	800d1fe <_strtod_l+0x12e>
 800d11c:	9302      	str	r3, [sp, #8]
 800d11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d120:	9301      	str	r3, [sp, #4]
 800d122:	ab16      	add	r3, sp, #88	; 0x58
 800d124:	9300      	str	r3, [sp, #0]
 800d126:	4a8e      	ldr	r2, [pc, #568]	; (800d360 <_strtod_l+0x290>)
 800d128:	ab17      	add	r3, sp, #92	; 0x5c
 800d12a:	a915      	add	r1, sp, #84	; 0x54
 800d12c:	4620      	mov	r0, r4
 800d12e:	f001 fb17 	bl	800e760 <__gethex>
 800d132:	f010 070f 	ands.w	r7, r0, #15
 800d136:	4605      	mov	r5, r0
 800d138:	d005      	beq.n	800d146 <_strtod_l+0x76>
 800d13a:	2f06      	cmp	r7, #6
 800d13c:	d12a      	bne.n	800d194 <_strtod_l+0xc4>
 800d13e:	3601      	adds	r6, #1
 800d140:	2300      	movs	r3, #0
 800d142:	9615      	str	r6, [sp, #84]	; 0x54
 800d144:	930a      	str	r3, [sp, #40]	; 0x28
 800d146:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f040 857f 	bne.w	800dc4c <_strtod_l+0xb7c>
 800d14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d150:	b1db      	cbz	r3, 800d18a <_strtod_l+0xba>
 800d152:	4642      	mov	r2, r8
 800d154:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d158:	ec43 2b10 	vmov	d0, r2, r3
 800d15c:	b01b      	add	sp, #108	; 0x6c
 800d15e:	ecbd 8b02 	vpop	{d8}
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	2920      	cmp	r1, #32
 800d168:	d1cc      	bne.n	800d104 <_strtod_l+0x34>
 800d16a:	3201      	adds	r2, #1
 800d16c:	e7bf      	b.n	800d0ee <_strtod_l+0x1e>
 800d16e:	292d      	cmp	r1, #45	; 0x2d
 800d170:	d1c8      	bne.n	800d104 <_strtod_l+0x34>
 800d172:	2101      	movs	r1, #1
 800d174:	910a      	str	r1, [sp, #40]	; 0x28
 800d176:	1c51      	adds	r1, r2, #1
 800d178:	9115      	str	r1, [sp, #84]	; 0x54
 800d17a:	7852      	ldrb	r2, [r2, #1]
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	d1c3      	bne.n	800d108 <_strtod_l+0x38>
 800d180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d182:	9515      	str	r5, [sp, #84]	; 0x54
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 855f 	bne.w	800dc48 <_strtod_l+0xb78>
 800d18a:	4642      	mov	r2, r8
 800d18c:	464b      	mov	r3, r9
 800d18e:	e7e3      	b.n	800d158 <_strtod_l+0x88>
 800d190:	2100      	movs	r1, #0
 800d192:	e7ef      	b.n	800d174 <_strtod_l+0xa4>
 800d194:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d196:	b13a      	cbz	r2, 800d1a8 <_strtod_l+0xd8>
 800d198:	2135      	movs	r1, #53	; 0x35
 800d19a:	a818      	add	r0, sp, #96	; 0x60
 800d19c:	f7ff ff37 	bl	800d00e <__copybits>
 800d1a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f7ff fb0a 	bl	800c7bc <_Bfree>
 800d1a8:	3f01      	subs	r7, #1
 800d1aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d1ac:	2f04      	cmp	r7, #4
 800d1ae:	d806      	bhi.n	800d1be <_strtod_l+0xee>
 800d1b0:	e8df f007 	tbb	[pc, r7]
 800d1b4:	201d0314 	.word	0x201d0314
 800d1b8:	14          	.byte	0x14
 800d1b9:	00          	.byte	0x00
 800d1ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d1be:	05e9      	lsls	r1, r5, #23
 800d1c0:	bf48      	it	mi
 800d1c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1ca:	0d1b      	lsrs	r3, r3, #20
 800d1cc:	051b      	lsls	r3, r3, #20
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1b9      	bne.n	800d146 <_strtod_l+0x76>
 800d1d2:	f7fe fb07 	bl	800b7e4 <__errno>
 800d1d6:	2322      	movs	r3, #34	; 0x22
 800d1d8:	6003      	str	r3, [r0, #0]
 800d1da:	e7b4      	b.n	800d146 <_strtod_l+0x76>
 800d1dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d1e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d1e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d1e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d1ec:	e7e7      	b.n	800d1be <_strtod_l+0xee>
 800d1ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d368 <_strtod_l+0x298>
 800d1f2:	e7e4      	b.n	800d1be <_strtod_l+0xee>
 800d1f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d1f8:	f04f 38ff 	mov.w	r8, #4294967295
 800d1fc:	e7df      	b.n	800d1be <_strtod_l+0xee>
 800d1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	9215      	str	r2, [sp, #84]	; 0x54
 800d204:	785b      	ldrb	r3, [r3, #1]
 800d206:	2b30      	cmp	r3, #48	; 0x30
 800d208:	d0f9      	beq.n	800d1fe <_strtod_l+0x12e>
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d09b      	beq.n	800d146 <_strtod_l+0x76>
 800d20e:	2301      	movs	r3, #1
 800d210:	f04f 0a00 	mov.w	sl, #0
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d218:	930b      	str	r3, [sp, #44]	; 0x2c
 800d21a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d21e:	46d3      	mov	fp, sl
 800d220:	220a      	movs	r2, #10
 800d222:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d224:	7806      	ldrb	r6, [r0, #0]
 800d226:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d22a:	b2d9      	uxtb	r1, r3
 800d22c:	2909      	cmp	r1, #9
 800d22e:	d926      	bls.n	800d27e <_strtod_l+0x1ae>
 800d230:	494c      	ldr	r1, [pc, #304]	; (800d364 <_strtod_l+0x294>)
 800d232:	2201      	movs	r2, #1
 800d234:	f001 f9c0 	bl	800e5b8 <strncmp>
 800d238:	2800      	cmp	r0, #0
 800d23a:	d030      	beq.n	800d29e <_strtod_l+0x1ce>
 800d23c:	2000      	movs	r0, #0
 800d23e:	4632      	mov	r2, r6
 800d240:	9005      	str	r0, [sp, #20]
 800d242:	465e      	mov	r6, fp
 800d244:	4603      	mov	r3, r0
 800d246:	2a65      	cmp	r2, #101	; 0x65
 800d248:	d001      	beq.n	800d24e <_strtod_l+0x17e>
 800d24a:	2a45      	cmp	r2, #69	; 0x45
 800d24c:	d113      	bne.n	800d276 <_strtod_l+0x1a6>
 800d24e:	b91e      	cbnz	r6, 800d258 <_strtod_l+0x188>
 800d250:	9a04      	ldr	r2, [sp, #16]
 800d252:	4302      	orrs	r2, r0
 800d254:	d094      	beq.n	800d180 <_strtod_l+0xb0>
 800d256:	2600      	movs	r6, #0
 800d258:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d25a:	1c6a      	adds	r2, r5, #1
 800d25c:	9215      	str	r2, [sp, #84]	; 0x54
 800d25e:	786a      	ldrb	r2, [r5, #1]
 800d260:	2a2b      	cmp	r2, #43	; 0x2b
 800d262:	d074      	beq.n	800d34e <_strtod_l+0x27e>
 800d264:	2a2d      	cmp	r2, #45	; 0x2d
 800d266:	d078      	beq.n	800d35a <_strtod_l+0x28a>
 800d268:	f04f 0c00 	mov.w	ip, #0
 800d26c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d270:	2909      	cmp	r1, #9
 800d272:	d97f      	bls.n	800d374 <_strtod_l+0x2a4>
 800d274:	9515      	str	r5, [sp, #84]	; 0x54
 800d276:	2700      	movs	r7, #0
 800d278:	e09e      	b.n	800d3b8 <_strtod_l+0x2e8>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e7c8      	b.n	800d210 <_strtod_l+0x140>
 800d27e:	f1bb 0f08 	cmp.w	fp, #8
 800d282:	bfd8      	it	le
 800d284:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d286:	f100 0001 	add.w	r0, r0, #1
 800d28a:	bfda      	itte	le
 800d28c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d290:	9309      	strle	r3, [sp, #36]	; 0x24
 800d292:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d296:	f10b 0b01 	add.w	fp, fp, #1
 800d29a:	9015      	str	r0, [sp, #84]	; 0x54
 800d29c:	e7c1      	b.n	800d222 <_strtod_l+0x152>
 800d29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	9215      	str	r2, [sp, #84]	; 0x54
 800d2a4:	785a      	ldrb	r2, [r3, #1]
 800d2a6:	f1bb 0f00 	cmp.w	fp, #0
 800d2aa:	d037      	beq.n	800d31c <_strtod_l+0x24c>
 800d2ac:	9005      	str	r0, [sp, #20]
 800d2ae:	465e      	mov	r6, fp
 800d2b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d2b4:	2b09      	cmp	r3, #9
 800d2b6:	d912      	bls.n	800d2de <_strtod_l+0x20e>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e7c4      	b.n	800d246 <_strtod_l+0x176>
 800d2bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	9215      	str	r2, [sp, #84]	; 0x54
 800d2c2:	785a      	ldrb	r2, [r3, #1]
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	2a30      	cmp	r2, #48	; 0x30
 800d2c8:	d0f8      	beq.n	800d2bc <_strtod_l+0x1ec>
 800d2ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d2ce:	2b08      	cmp	r3, #8
 800d2d0:	f200 84c1 	bhi.w	800dc56 <_strtod_l+0xb86>
 800d2d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2d6:	9005      	str	r0, [sp, #20]
 800d2d8:	2000      	movs	r0, #0
 800d2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2dc:	4606      	mov	r6, r0
 800d2de:	3a30      	subs	r2, #48	; 0x30
 800d2e0:	f100 0301 	add.w	r3, r0, #1
 800d2e4:	d014      	beq.n	800d310 <_strtod_l+0x240>
 800d2e6:	9905      	ldr	r1, [sp, #20]
 800d2e8:	4419      	add	r1, r3
 800d2ea:	9105      	str	r1, [sp, #20]
 800d2ec:	4633      	mov	r3, r6
 800d2ee:	eb00 0c06 	add.w	ip, r0, r6
 800d2f2:	210a      	movs	r1, #10
 800d2f4:	4563      	cmp	r3, ip
 800d2f6:	d113      	bne.n	800d320 <_strtod_l+0x250>
 800d2f8:	1833      	adds	r3, r6, r0
 800d2fa:	2b08      	cmp	r3, #8
 800d2fc:	f106 0601 	add.w	r6, r6, #1
 800d300:	4406      	add	r6, r0
 800d302:	dc1a      	bgt.n	800d33a <_strtod_l+0x26a>
 800d304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d306:	230a      	movs	r3, #10
 800d308:	fb03 2301 	mla	r3, r3, r1, r2
 800d30c:	9309      	str	r3, [sp, #36]	; 0x24
 800d30e:	2300      	movs	r3, #0
 800d310:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d312:	1c51      	adds	r1, r2, #1
 800d314:	9115      	str	r1, [sp, #84]	; 0x54
 800d316:	7852      	ldrb	r2, [r2, #1]
 800d318:	4618      	mov	r0, r3
 800d31a:	e7c9      	b.n	800d2b0 <_strtod_l+0x1e0>
 800d31c:	4658      	mov	r0, fp
 800d31e:	e7d2      	b.n	800d2c6 <_strtod_l+0x1f6>
 800d320:	2b08      	cmp	r3, #8
 800d322:	f103 0301 	add.w	r3, r3, #1
 800d326:	dc03      	bgt.n	800d330 <_strtod_l+0x260>
 800d328:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d32a:	434f      	muls	r7, r1
 800d32c:	9709      	str	r7, [sp, #36]	; 0x24
 800d32e:	e7e1      	b.n	800d2f4 <_strtod_l+0x224>
 800d330:	2b10      	cmp	r3, #16
 800d332:	bfd8      	it	le
 800d334:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d338:	e7dc      	b.n	800d2f4 <_strtod_l+0x224>
 800d33a:	2e10      	cmp	r6, #16
 800d33c:	bfdc      	itt	le
 800d33e:	230a      	movle	r3, #10
 800d340:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d344:	e7e3      	b.n	800d30e <_strtod_l+0x23e>
 800d346:	2300      	movs	r3, #0
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	2301      	movs	r3, #1
 800d34c:	e780      	b.n	800d250 <_strtod_l+0x180>
 800d34e:	f04f 0c00 	mov.w	ip, #0
 800d352:	1caa      	adds	r2, r5, #2
 800d354:	9215      	str	r2, [sp, #84]	; 0x54
 800d356:	78aa      	ldrb	r2, [r5, #2]
 800d358:	e788      	b.n	800d26c <_strtod_l+0x19c>
 800d35a:	f04f 0c01 	mov.w	ip, #1
 800d35e:	e7f8      	b.n	800d352 <_strtod_l+0x282>
 800d360:	0800f2a8 	.word	0x0800f2a8
 800d364:	0800f2a4 	.word	0x0800f2a4
 800d368:	7ff00000 	.word	0x7ff00000
 800d36c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d36e:	1c51      	adds	r1, r2, #1
 800d370:	9115      	str	r1, [sp, #84]	; 0x54
 800d372:	7852      	ldrb	r2, [r2, #1]
 800d374:	2a30      	cmp	r2, #48	; 0x30
 800d376:	d0f9      	beq.n	800d36c <_strtod_l+0x29c>
 800d378:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d37c:	2908      	cmp	r1, #8
 800d37e:	f63f af7a 	bhi.w	800d276 <_strtod_l+0x1a6>
 800d382:	3a30      	subs	r2, #48	; 0x30
 800d384:	9208      	str	r2, [sp, #32]
 800d386:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d388:	920c      	str	r2, [sp, #48]	; 0x30
 800d38a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d38c:	1c57      	adds	r7, r2, #1
 800d38e:	9715      	str	r7, [sp, #84]	; 0x54
 800d390:	7852      	ldrb	r2, [r2, #1]
 800d392:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d396:	f1be 0f09 	cmp.w	lr, #9
 800d39a:	d938      	bls.n	800d40e <_strtod_l+0x33e>
 800d39c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d39e:	1a7f      	subs	r7, r7, r1
 800d3a0:	2f08      	cmp	r7, #8
 800d3a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d3a6:	dc03      	bgt.n	800d3b0 <_strtod_l+0x2e0>
 800d3a8:	9908      	ldr	r1, [sp, #32]
 800d3aa:	428f      	cmp	r7, r1
 800d3ac:	bfa8      	it	ge
 800d3ae:	460f      	movge	r7, r1
 800d3b0:	f1bc 0f00 	cmp.w	ip, #0
 800d3b4:	d000      	beq.n	800d3b8 <_strtod_l+0x2e8>
 800d3b6:	427f      	negs	r7, r7
 800d3b8:	2e00      	cmp	r6, #0
 800d3ba:	d14f      	bne.n	800d45c <_strtod_l+0x38c>
 800d3bc:	9904      	ldr	r1, [sp, #16]
 800d3be:	4301      	orrs	r1, r0
 800d3c0:	f47f aec1 	bne.w	800d146 <_strtod_l+0x76>
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f47f aedb 	bne.w	800d180 <_strtod_l+0xb0>
 800d3ca:	2a69      	cmp	r2, #105	; 0x69
 800d3cc:	d029      	beq.n	800d422 <_strtod_l+0x352>
 800d3ce:	dc26      	bgt.n	800d41e <_strtod_l+0x34e>
 800d3d0:	2a49      	cmp	r2, #73	; 0x49
 800d3d2:	d026      	beq.n	800d422 <_strtod_l+0x352>
 800d3d4:	2a4e      	cmp	r2, #78	; 0x4e
 800d3d6:	f47f aed3 	bne.w	800d180 <_strtod_l+0xb0>
 800d3da:	499b      	ldr	r1, [pc, #620]	; (800d648 <_strtod_l+0x578>)
 800d3dc:	a815      	add	r0, sp, #84	; 0x54
 800d3de:	f001 fbff 	bl	800ebe0 <__match>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f43f aecc 	beq.w	800d180 <_strtod_l+0xb0>
 800d3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b28      	cmp	r3, #40	; 0x28
 800d3ee:	d12f      	bne.n	800d450 <_strtod_l+0x380>
 800d3f0:	4996      	ldr	r1, [pc, #600]	; (800d64c <_strtod_l+0x57c>)
 800d3f2:	aa18      	add	r2, sp, #96	; 0x60
 800d3f4:	a815      	add	r0, sp, #84	; 0x54
 800d3f6:	f001 fc07 	bl	800ec08 <__hexnan>
 800d3fa:	2805      	cmp	r0, #5
 800d3fc:	d128      	bne.n	800d450 <_strtod_l+0x380>
 800d3fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d404:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d408:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d40c:	e69b      	b.n	800d146 <_strtod_l+0x76>
 800d40e:	9f08      	ldr	r7, [sp, #32]
 800d410:	210a      	movs	r1, #10
 800d412:	fb01 2107 	mla	r1, r1, r7, r2
 800d416:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d41a:	9208      	str	r2, [sp, #32]
 800d41c:	e7b5      	b.n	800d38a <_strtod_l+0x2ba>
 800d41e:	2a6e      	cmp	r2, #110	; 0x6e
 800d420:	e7d9      	b.n	800d3d6 <_strtod_l+0x306>
 800d422:	498b      	ldr	r1, [pc, #556]	; (800d650 <_strtod_l+0x580>)
 800d424:	a815      	add	r0, sp, #84	; 0x54
 800d426:	f001 fbdb 	bl	800ebe0 <__match>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	f43f aea8 	beq.w	800d180 <_strtod_l+0xb0>
 800d430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d432:	4988      	ldr	r1, [pc, #544]	; (800d654 <_strtod_l+0x584>)
 800d434:	3b01      	subs	r3, #1
 800d436:	a815      	add	r0, sp, #84	; 0x54
 800d438:	9315      	str	r3, [sp, #84]	; 0x54
 800d43a:	f001 fbd1 	bl	800ebe0 <__match>
 800d43e:	b910      	cbnz	r0, 800d446 <_strtod_l+0x376>
 800d440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d442:	3301      	adds	r3, #1
 800d444:	9315      	str	r3, [sp, #84]	; 0x54
 800d446:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d664 <_strtod_l+0x594>
 800d44a:	f04f 0800 	mov.w	r8, #0
 800d44e:	e67a      	b.n	800d146 <_strtod_l+0x76>
 800d450:	4881      	ldr	r0, [pc, #516]	; (800d658 <_strtod_l+0x588>)
 800d452:	f001 f8e1 	bl	800e618 <nan>
 800d456:	ec59 8b10 	vmov	r8, r9, d0
 800d45a:	e674      	b.n	800d146 <_strtod_l+0x76>
 800d45c:	9b05      	ldr	r3, [sp, #20]
 800d45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d460:	1afb      	subs	r3, r7, r3
 800d462:	f1bb 0f00 	cmp.w	fp, #0
 800d466:	bf08      	it	eq
 800d468:	46b3      	moveq	fp, r6
 800d46a:	2e10      	cmp	r6, #16
 800d46c:	9308      	str	r3, [sp, #32]
 800d46e:	4635      	mov	r5, r6
 800d470:	bfa8      	it	ge
 800d472:	2510      	movge	r5, #16
 800d474:	f7f3 f846 	bl	8000504 <__aeabi_ui2d>
 800d478:	2e09      	cmp	r6, #9
 800d47a:	4680      	mov	r8, r0
 800d47c:	4689      	mov	r9, r1
 800d47e:	dd13      	ble.n	800d4a8 <_strtod_l+0x3d8>
 800d480:	4b76      	ldr	r3, [pc, #472]	; (800d65c <_strtod_l+0x58c>)
 800d482:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d486:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d48a:	f7f3 f8b5 	bl	80005f8 <__aeabi_dmul>
 800d48e:	4680      	mov	r8, r0
 800d490:	4650      	mov	r0, sl
 800d492:	4689      	mov	r9, r1
 800d494:	f7f3 f836 	bl	8000504 <__aeabi_ui2d>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4640      	mov	r0, r8
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7f2 fef4 	bl	800028c <__adddf3>
 800d4a4:	4680      	mov	r8, r0
 800d4a6:	4689      	mov	r9, r1
 800d4a8:	2e0f      	cmp	r6, #15
 800d4aa:	dc38      	bgt.n	800d51e <_strtod_l+0x44e>
 800d4ac:	9b08      	ldr	r3, [sp, #32]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f43f ae49 	beq.w	800d146 <_strtod_l+0x76>
 800d4b4:	dd24      	ble.n	800d500 <_strtod_l+0x430>
 800d4b6:	2b16      	cmp	r3, #22
 800d4b8:	dc0b      	bgt.n	800d4d2 <_strtod_l+0x402>
 800d4ba:	4968      	ldr	r1, [pc, #416]	; (800d65c <_strtod_l+0x58c>)
 800d4bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c4:	4642      	mov	r2, r8
 800d4c6:	464b      	mov	r3, r9
 800d4c8:	f7f3 f896 	bl	80005f8 <__aeabi_dmul>
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	4689      	mov	r9, r1
 800d4d0:	e639      	b.n	800d146 <_strtod_l+0x76>
 800d4d2:	9a08      	ldr	r2, [sp, #32]
 800d4d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	db20      	blt.n	800d51e <_strtod_l+0x44e>
 800d4dc:	4c5f      	ldr	r4, [pc, #380]	; (800d65c <_strtod_l+0x58c>)
 800d4de:	f1c6 060f 	rsb	r6, r6, #15
 800d4e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d4e6:	4642      	mov	r2, r8
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4ee:	f7f3 f883 	bl	80005f8 <__aeabi_dmul>
 800d4f2:	9b08      	ldr	r3, [sp, #32]
 800d4f4:	1b9e      	subs	r6, r3, r6
 800d4f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d4fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4fe:	e7e3      	b.n	800d4c8 <_strtod_l+0x3f8>
 800d500:	9b08      	ldr	r3, [sp, #32]
 800d502:	3316      	adds	r3, #22
 800d504:	db0b      	blt.n	800d51e <_strtod_l+0x44e>
 800d506:	9b05      	ldr	r3, [sp, #20]
 800d508:	1bdf      	subs	r7, r3, r7
 800d50a:	4b54      	ldr	r3, [pc, #336]	; (800d65c <_strtod_l+0x58c>)
 800d50c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f3 f998 	bl	800084c <__aeabi_ddiv>
 800d51c:	e7d6      	b.n	800d4cc <_strtod_l+0x3fc>
 800d51e:	9b08      	ldr	r3, [sp, #32]
 800d520:	1b75      	subs	r5, r6, r5
 800d522:	441d      	add	r5, r3
 800d524:	2d00      	cmp	r5, #0
 800d526:	dd70      	ble.n	800d60a <_strtod_l+0x53a>
 800d528:	f015 030f 	ands.w	r3, r5, #15
 800d52c:	d00a      	beq.n	800d544 <_strtod_l+0x474>
 800d52e:	494b      	ldr	r1, [pc, #300]	; (800d65c <_strtod_l+0x58c>)
 800d530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d534:	4642      	mov	r2, r8
 800d536:	464b      	mov	r3, r9
 800d538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d53c:	f7f3 f85c 	bl	80005f8 <__aeabi_dmul>
 800d540:	4680      	mov	r8, r0
 800d542:	4689      	mov	r9, r1
 800d544:	f035 050f 	bics.w	r5, r5, #15
 800d548:	d04d      	beq.n	800d5e6 <_strtod_l+0x516>
 800d54a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d54e:	dd22      	ble.n	800d596 <_strtod_l+0x4c6>
 800d550:	2500      	movs	r5, #0
 800d552:	46ab      	mov	fp, r5
 800d554:	9509      	str	r5, [sp, #36]	; 0x24
 800d556:	9505      	str	r5, [sp, #20]
 800d558:	2322      	movs	r3, #34	; 0x22
 800d55a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d664 <_strtod_l+0x594>
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	f04f 0800 	mov.w	r8, #0
 800d564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d566:	2b00      	cmp	r3, #0
 800d568:	f43f aded 	beq.w	800d146 <_strtod_l+0x76>
 800d56c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d56e:	4620      	mov	r0, r4
 800d570:	f7ff f924 	bl	800c7bc <_Bfree>
 800d574:	9905      	ldr	r1, [sp, #20]
 800d576:	4620      	mov	r0, r4
 800d578:	f7ff f920 	bl	800c7bc <_Bfree>
 800d57c:	4659      	mov	r1, fp
 800d57e:	4620      	mov	r0, r4
 800d580:	f7ff f91c 	bl	800c7bc <_Bfree>
 800d584:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d586:	4620      	mov	r0, r4
 800d588:	f7ff f918 	bl	800c7bc <_Bfree>
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	f7ff f914 	bl	800c7bc <_Bfree>
 800d594:	e5d7      	b.n	800d146 <_strtod_l+0x76>
 800d596:	4b32      	ldr	r3, [pc, #200]	; (800d660 <_strtod_l+0x590>)
 800d598:	9304      	str	r3, [sp, #16]
 800d59a:	2300      	movs	r3, #0
 800d59c:	112d      	asrs	r5, r5, #4
 800d59e:	4640      	mov	r0, r8
 800d5a0:	4649      	mov	r1, r9
 800d5a2:	469a      	mov	sl, r3
 800d5a4:	2d01      	cmp	r5, #1
 800d5a6:	dc21      	bgt.n	800d5ec <_strtod_l+0x51c>
 800d5a8:	b10b      	cbz	r3, 800d5ae <_strtod_l+0x4de>
 800d5aa:	4680      	mov	r8, r0
 800d5ac:	4689      	mov	r9, r1
 800d5ae:	492c      	ldr	r1, [pc, #176]	; (800d660 <_strtod_l+0x590>)
 800d5b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d5b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	464b      	mov	r3, r9
 800d5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5c0:	f7f3 f81a 	bl	80005f8 <__aeabi_dmul>
 800d5c4:	4b27      	ldr	r3, [pc, #156]	; (800d664 <_strtod_l+0x594>)
 800d5c6:	460a      	mov	r2, r1
 800d5c8:	400b      	ands	r3, r1
 800d5ca:	4927      	ldr	r1, [pc, #156]	; (800d668 <_strtod_l+0x598>)
 800d5cc:	428b      	cmp	r3, r1
 800d5ce:	4680      	mov	r8, r0
 800d5d0:	d8be      	bhi.n	800d550 <_strtod_l+0x480>
 800d5d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d5d6:	428b      	cmp	r3, r1
 800d5d8:	bf86      	itte	hi
 800d5da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d66c <_strtod_l+0x59c>
 800d5de:	f04f 38ff 	movhi.w	r8, #4294967295
 800d5e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	e07b      	b.n	800d6e4 <_strtod_l+0x614>
 800d5ec:	07ea      	lsls	r2, r5, #31
 800d5ee:	d505      	bpl.n	800d5fc <_strtod_l+0x52c>
 800d5f0:	9b04      	ldr	r3, [sp, #16]
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f2 ffff 	bl	80005f8 <__aeabi_dmul>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	9a04      	ldr	r2, [sp, #16]
 800d5fe:	3208      	adds	r2, #8
 800d600:	f10a 0a01 	add.w	sl, sl, #1
 800d604:	106d      	asrs	r5, r5, #1
 800d606:	9204      	str	r2, [sp, #16]
 800d608:	e7cc      	b.n	800d5a4 <_strtod_l+0x4d4>
 800d60a:	d0ec      	beq.n	800d5e6 <_strtod_l+0x516>
 800d60c:	426d      	negs	r5, r5
 800d60e:	f015 020f 	ands.w	r2, r5, #15
 800d612:	d00a      	beq.n	800d62a <_strtod_l+0x55a>
 800d614:	4b11      	ldr	r3, [pc, #68]	; (800d65c <_strtod_l+0x58c>)
 800d616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d61a:	4640      	mov	r0, r8
 800d61c:	4649      	mov	r1, r9
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f7f3 f913 	bl	800084c <__aeabi_ddiv>
 800d626:	4680      	mov	r8, r0
 800d628:	4689      	mov	r9, r1
 800d62a:	112d      	asrs	r5, r5, #4
 800d62c:	d0db      	beq.n	800d5e6 <_strtod_l+0x516>
 800d62e:	2d1f      	cmp	r5, #31
 800d630:	dd1e      	ble.n	800d670 <_strtod_l+0x5a0>
 800d632:	2500      	movs	r5, #0
 800d634:	46ab      	mov	fp, r5
 800d636:	9509      	str	r5, [sp, #36]	; 0x24
 800d638:	9505      	str	r5, [sp, #20]
 800d63a:	2322      	movs	r3, #34	; 0x22
 800d63c:	f04f 0800 	mov.w	r8, #0
 800d640:	f04f 0900 	mov.w	r9, #0
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	e78d      	b.n	800d564 <_strtod_l+0x494>
 800d648:	0800f091 	.word	0x0800f091
 800d64c:	0800f2bc 	.word	0x0800f2bc
 800d650:	0800f089 	.word	0x0800f089
 800d654:	0800f0c0 	.word	0x0800f0c0
 800d658:	0800f44d 	.word	0x0800f44d
 800d65c:	0800f1d0 	.word	0x0800f1d0
 800d660:	0800f1a8 	.word	0x0800f1a8
 800d664:	7ff00000 	.word	0x7ff00000
 800d668:	7ca00000 	.word	0x7ca00000
 800d66c:	7fefffff 	.word	0x7fefffff
 800d670:	f015 0310 	ands.w	r3, r5, #16
 800d674:	bf18      	it	ne
 800d676:	236a      	movne	r3, #106	; 0x6a
 800d678:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800da1c <_strtod_l+0x94c>
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	4640      	mov	r0, r8
 800d680:	4649      	mov	r1, r9
 800d682:	2300      	movs	r3, #0
 800d684:	07ea      	lsls	r2, r5, #31
 800d686:	d504      	bpl.n	800d692 <_strtod_l+0x5c2>
 800d688:	e9da 2300 	ldrd	r2, r3, [sl]
 800d68c:	f7f2 ffb4 	bl	80005f8 <__aeabi_dmul>
 800d690:	2301      	movs	r3, #1
 800d692:	106d      	asrs	r5, r5, #1
 800d694:	f10a 0a08 	add.w	sl, sl, #8
 800d698:	d1f4      	bne.n	800d684 <_strtod_l+0x5b4>
 800d69a:	b10b      	cbz	r3, 800d6a0 <_strtod_l+0x5d0>
 800d69c:	4680      	mov	r8, r0
 800d69e:	4689      	mov	r9, r1
 800d6a0:	9b04      	ldr	r3, [sp, #16]
 800d6a2:	b1bb      	cbz	r3, 800d6d4 <_strtod_l+0x604>
 800d6a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d6a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	dd10      	ble.n	800d6d4 <_strtod_l+0x604>
 800d6b2:	2b1f      	cmp	r3, #31
 800d6b4:	f340 811e 	ble.w	800d8f4 <_strtod_l+0x824>
 800d6b8:	2b34      	cmp	r3, #52	; 0x34
 800d6ba:	bfde      	ittt	le
 800d6bc:	f04f 33ff 	movle.w	r3, #4294967295
 800d6c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d6c4:	4093      	lslle	r3, r2
 800d6c6:	f04f 0800 	mov.w	r8, #0
 800d6ca:	bfcc      	ite	gt
 800d6cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d6d0:	ea03 0901 	andle.w	r9, r3, r1
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4640      	mov	r0, r8
 800d6da:	4649      	mov	r1, r9
 800d6dc:	f7f3 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1a6      	bne.n	800d632 <_strtod_l+0x562>
 800d6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ea:	4633      	mov	r3, r6
 800d6ec:	465a      	mov	r2, fp
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7ff f8cc 	bl	800c88c <__s2b>
 800d6f4:	9009      	str	r0, [sp, #36]	; 0x24
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f af2a 	beq.w	800d550 <_strtod_l+0x480>
 800d6fc:	9a08      	ldr	r2, [sp, #32]
 800d6fe:	9b05      	ldr	r3, [sp, #20]
 800d700:	2a00      	cmp	r2, #0
 800d702:	eba3 0307 	sub.w	r3, r3, r7
 800d706:	bfa8      	it	ge
 800d708:	2300      	movge	r3, #0
 800d70a:	930c      	str	r3, [sp, #48]	; 0x30
 800d70c:	2500      	movs	r5, #0
 800d70e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d712:	9312      	str	r3, [sp, #72]	; 0x48
 800d714:	46ab      	mov	fp, r5
 800d716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d718:	4620      	mov	r0, r4
 800d71a:	6859      	ldr	r1, [r3, #4]
 800d71c:	f7ff f80e 	bl	800c73c <_Balloc>
 800d720:	9005      	str	r0, [sp, #20]
 800d722:	2800      	cmp	r0, #0
 800d724:	f43f af18 	beq.w	800d558 <_strtod_l+0x488>
 800d728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72a:	691a      	ldr	r2, [r3, #16]
 800d72c:	3202      	adds	r2, #2
 800d72e:	f103 010c 	add.w	r1, r3, #12
 800d732:	0092      	lsls	r2, r2, #2
 800d734:	300c      	adds	r0, #12
 800d736:	f000 ff61 	bl	800e5fc <memcpy>
 800d73a:	ec49 8b10 	vmov	d0, r8, r9
 800d73e:	aa18      	add	r2, sp, #96	; 0x60
 800d740:	a917      	add	r1, sp, #92	; 0x5c
 800d742:	4620      	mov	r0, r4
 800d744:	f7ff fbd6 	bl	800cef4 <__d2b>
 800d748:	ec49 8b18 	vmov	d8, r8, r9
 800d74c:	9016      	str	r0, [sp, #88]	; 0x58
 800d74e:	2800      	cmp	r0, #0
 800d750:	f43f af02 	beq.w	800d558 <_strtod_l+0x488>
 800d754:	2101      	movs	r1, #1
 800d756:	4620      	mov	r0, r4
 800d758:	f7ff f930 	bl	800c9bc <__i2b>
 800d75c:	4683      	mov	fp, r0
 800d75e:	2800      	cmp	r0, #0
 800d760:	f43f aefa 	beq.w	800d558 <_strtod_l+0x488>
 800d764:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d766:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d768:	2e00      	cmp	r6, #0
 800d76a:	bfab      	itete	ge
 800d76c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d76e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d770:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d772:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d776:	bfac      	ite	ge
 800d778:	eb06 0a03 	addge.w	sl, r6, r3
 800d77c:	1b9f      	sublt	r7, r3, r6
 800d77e:	9b04      	ldr	r3, [sp, #16]
 800d780:	1af6      	subs	r6, r6, r3
 800d782:	4416      	add	r6, r2
 800d784:	4ba0      	ldr	r3, [pc, #640]	; (800da08 <_strtod_l+0x938>)
 800d786:	3e01      	subs	r6, #1
 800d788:	429e      	cmp	r6, r3
 800d78a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d78e:	f280 80c4 	bge.w	800d91a <_strtod_l+0x84a>
 800d792:	1b9b      	subs	r3, r3, r6
 800d794:	2b1f      	cmp	r3, #31
 800d796:	eba2 0203 	sub.w	r2, r2, r3
 800d79a:	f04f 0101 	mov.w	r1, #1
 800d79e:	f300 80b0 	bgt.w	800d902 <_strtod_l+0x832>
 800d7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7a6:	930e      	str	r3, [sp, #56]	; 0x38
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d7ac:	eb0a 0602 	add.w	r6, sl, r2
 800d7b0:	9b04      	ldr	r3, [sp, #16]
 800d7b2:	45b2      	cmp	sl, r6
 800d7b4:	4417      	add	r7, r2
 800d7b6:	441f      	add	r7, r3
 800d7b8:	4653      	mov	r3, sl
 800d7ba:	bfa8      	it	ge
 800d7bc:	4633      	movge	r3, r6
 800d7be:	42bb      	cmp	r3, r7
 800d7c0:	bfa8      	it	ge
 800d7c2:	463b      	movge	r3, r7
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfc2      	ittt	gt
 800d7c8:	1af6      	subgt	r6, r6, r3
 800d7ca:	1aff      	subgt	r7, r7, r3
 800d7cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	dd17      	ble.n	800d806 <_strtod_l+0x736>
 800d7d6:	4659      	mov	r1, fp
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f7ff f9ae 	bl	800cb3c <__pow5mult>
 800d7e0:	4683      	mov	fp, r0
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f43f aeb8 	beq.w	800d558 <_strtod_l+0x488>
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff f8fb 	bl	800c9e8 <__multiply>
 800d7f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f43f aeaf 	beq.w	800d558 <_strtod_l+0x488>
 800d7fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f7fe ffdd 	bl	800c7bc <_Bfree>
 800d802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d804:	9316      	str	r3, [sp, #88]	; 0x58
 800d806:	2e00      	cmp	r6, #0
 800d808:	f300 808c 	bgt.w	800d924 <_strtod_l+0x854>
 800d80c:	9b08      	ldr	r3, [sp, #32]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dd08      	ble.n	800d824 <_strtod_l+0x754>
 800d812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d814:	9905      	ldr	r1, [sp, #20]
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff f990 	bl	800cb3c <__pow5mult>
 800d81c:	9005      	str	r0, [sp, #20]
 800d81e:	2800      	cmp	r0, #0
 800d820:	f43f ae9a 	beq.w	800d558 <_strtod_l+0x488>
 800d824:	2f00      	cmp	r7, #0
 800d826:	dd08      	ble.n	800d83a <_strtod_l+0x76a>
 800d828:	9905      	ldr	r1, [sp, #20]
 800d82a:	463a      	mov	r2, r7
 800d82c:	4620      	mov	r0, r4
 800d82e:	f7ff f9df 	bl	800cbf0 <__lshift>
 800d832:	9005      	str	r0, [sp, #20]
 800d834:	2800      	cmp	r0, #0
 800d836:	f43f ae8f 	beq.w	800d558 <_strtod_l+0x488>
 800d83a:	f1ba 0f00 	cmp.w	sl, #0
 800d83e:	dd08      	ble.n	800d852 <_strtod_l+0x782>
 800d840:	4659      	mov	r1, fp
 800d842:	4652      	mov	r2, sl
 800d844:	4620      	mov	r0, r4
 800d846:	f7ff f9d3 	bl	800cbf0 <__lshift>
 800d84a:	4683      	mov	fp, r0
 800d84c:	2800      	cmp	r0, #0
 800d84e:	f43f ae83 	beq.w	800d558 <_strtod_l+0x488>
 800d852:	9a05      	ldr	r2, [sp, #20]
 800d854:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d856:	4620      	mov	r0, r4
 800d858:	f7ff fa52 	bl	800cd00 <__mdiff>
 800d85c:	4605      	mov	r5, r0
 800d85e:	2800      	cmp	r0, #0
 800d860:	f43f ae7a 	beq.w	800d558 <_strtod_l+0x488>
 800d864:	68c3      	ldr	r3, [r0, #12]
 800d866:	930b      	str	r3, [sp, #44]	; 0x2c
 800d868:	2300      	movs	r3, #0
 800d86a:	60c3      	str	r3, [r0, #12]
 800d86c:	4659      	mov	r1, fp
 800d86e:	f7ff fa2b 	bl	800ccc8 <__mcmp>
 800d872:	2800      	cmp	r0, #0
 800d874:	da60      	bge.n	800d938 <_strtod_l+0x868>
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	ea53 0308 	orrs.w	r3, r3, r8
 800d87c:	f040 8084 	bne.w	800d988 <_strtod_l+0x8b8>
 800d880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d884:	2b00      	cmp	r3, #0
 800d886:	d17f      	bne.n	800d988 <_strtod_l+0x8b8>
 800d888:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d88c:	0d1b      	lsrs	r3, r3, #20
 800d88e:	051b      	lsls	r3, r3, #20
 800d890:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d894:	d978      	bls.n	800d988 <_strtod_l+0x8b8>
 800d896:	696b      	ldr	r3, [r5, #20]
 800d898:	b913      	cbnz	r3, 800d8a0 <_strtod_l+0x7d0>
 800d89a:	692b      	ldr	r3, [r5, #16]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	dd73      	ble.n	800d988 <_strtod_l+0x8b8>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff f9a3 	bl	800cbf0 <__lshift>
 800d8aa:	4659      	mov	r1, fp
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	f7ff fa0b 	bl	800ccc8 <__mcmp>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	dd68      	ble.n	800d988 <_strtod_l+0x8b8>
 800d8b6:	9904      	ldr	r1, [sp, #16]
 800d8b8:	4a54      	ldr	r2, [pc, #336]	; (800da0c <_strtod_l+0x93c>)
 800d8ba:	464b      	mov	r3, r9
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	f000 8084 	beq.w	800d9ca <_strtod_l+0x8fa>
 800d8c2:	ea02 0109 	and.w	r1, r2, r9
 800d8c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d8ca:	dc7e      	bgt.n	800d9ca <_strtod_l+0x8fa>
 800d8cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d8d0:	f77f aeb3 	ble.w	800d63a <_strtod_l+0x56a>
 800d8d4:	4b4e      	ldr	r3, [pc, #312]	; (800da10 <_strtod_l+0x940>)
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f7f2 fe8c 	bl	80005f8 <__aeabi_dmul>
 800d8e0:	4b4a      	ldr	r3, [pc, #296]	; (800da0c <_strtod_l+0x93c>)
 800d8e2:	400b      	ands	r3, r1
 800d8e4:	4680      	mov	r8, r0
 800d8e6:	4689      	mov	r9, r1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f47f ae3f 	bne.w	800d56c <_strtod_l+0x49c>
 800d8ee:	2322      	movs	r3, #34	; 0x22
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	e63b      	b.n	800d56c <_strtod_l+0x49c>
 800d8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fc:	ea03 0808 	and.w	r8, r3, r8
 800d900:	e6e8      	b.n	800d6d4 <_strtod_l+0x604>
 800d902:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d906:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d90a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d90e:	36e2      	adds	r6, #226	; 0xe2
 800d910:	fa01 f306 	lsl.w	r3, r1, r6
 800d914:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d918:	e748      	b.n	800d7ac <_strtod_l+0x6dc>
 800d91a:	2100      	movs	r1, #0
 800d91c:	2301      	movs	r3, #1
 800d91e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d922:	e743      	b.n	800d7ac <_strtod_l+0x6dc>
 800d924:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d926:	4632      	mov	r2, r6
 800d928:	4620      	mov	r0, r4
 800d92a:	f7ff f961 	bl	800cbf0 <__lshift>
 800d92e:	9016      	str	r0, [sp, #88]	; 0x58
 800d930:	2800      	cmp	r0, #0
 800d932:	f47f af6b 	bne.w	800d80c <_strtod_l+0x73c>
 800d936:	e60f      	b.n	800d558 <_strtod_l+0x488>
 800d938:	46ca      	mov	sl, r9
 800d93a:	d171      	bne.n	800da20 <_strtod_l+0x950>
 800d93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d93e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d942:	b352      	cbz	r2, 800d99a <_strtod_l+0x8ca>
 800d944:	4a33      	ldr	r2, [pc, #204]	; (800da14 <_strtod_l+0x944>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d12a      	bne.n	800d9a0 <_strtod_l+0x8d0>
 800d94a:	9b04      	ldr	r3, [sp, #16]
 800d94c:	4641      	mov	r1, r8
 800d94e:	b1fb      	cbz	r3, 800d990 <_strtod_l+0x8c0>
 800d950:	4b2e      	ldr	r3, [pc, #184]	; (800da0c <_strtod_l+0x93c>)
 800d952:	ea09 0303 	and.w	r3, r9, r3
 800d956:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d95a:	f04f 32ff 	mov.w	r2, #4294967295
 800d95e:	d81a      	bhi.n	800d996 <_strtod_l+0x8c6>
 800d960:	0d1b      	lsrs	r3, r3, #20
 800d962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d966:	fa02 f303 	lsl.w	r3, r2, r3
 800d96a:	4299      	cmp	r1, r3
 800d96c:	d118      	bne.n	800d9a0 <_strtod_l+0x8d0>
 800d96e:	4b2a      	ldr	r3, [pc, #168]	; (800da18 <_strtod_l+0x948>)
 800d970:	459a      	cmp	sl, r3
 800d972:	d102      	bne.n	800d97a <_strtod_l+0x8aa>
 800d974:	3101      	adds	r1, #1
 800d976:	f43f adef 	beq.w	800d558 <_strtod_l+0x488>
 800d97a:	4b24      	ldr	r3, [pc, #144]	; (800da0c <_strtod_l+0x93c>)
 800d97c:	ea0a 0303 	and.w	r3, sl, r3
 800d980:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d984:	f04f 0800 	mov.w	r8, #0
 800d988:	9b04      	ldr	r3, [sp, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1a2      	bne.n	800d8d4 <_strtod_l+0x804>
 800d98e:	e5ed      	b.n	800d56c <_strtod_l+0x49c>
 800d990:	f04f 33ff 	mov.w	r3, #4294967295
 800d994:	e7e9      	b.n	800d96a <_strtod_l+0x89a>
 800d996:	4613      	mov	r3, r2
 800d998:	e7e7      	b.n	800d96a <_strtod_l+0x89a>
 800d99a:	ea53 0308 	orrs.w	r3, r3, r8
 800d99e:	d08a      	beq.n	800d8b6 <_strtod_l+0x7e6>
 800d9a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9a2:	b1e3      	cbz	r3, 800d9de <_strtod_l+0x90e>
 800d9a4:	ea13 0f0a 	tst.w	r3, sl
 800d9a8:	d0ee      	beq.n	800d988 <_strtod_l+0x8b8>
 800d9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	b1c3      	cbz	r3, 800d9e6 <_strtod_l+0x916>
 800d9b4:	f7ff fb6f 	bl	800d096 <sulp>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	ec51 0b18 	vmov	r0, r1, d8
 800d9c0:	f7f2 fc64 	bl	800028c <__adddf3>
 800d9c4:	4680      	mov	r8, r0
 800d9c6:	4689      	mov	r9, r1
 800d9c8:	e7de      	b.n	800d988 <_strtod_l+0x8b8>
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d9d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d9d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d9d8:	f04f 38ff 	mov.w	r8, #4294967295
 800d9dc:	e7d4      	b.n	800d988 <_strtod_l+0x8b8>
 800d9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9e0:	ea13 0f08 	tst.w	r3, r8
 800d9e4:	e7e0      	b.n	800d9a8 <_strtod_l+0x8d8>
 800d9e6:	f7ff fb56 	bl	800d096 <sulp>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	ec51 0b18 	vmov	r0, r1, d8
 800d9f2:	f7f2 fc49 	bl	8000288 <__aeabi_dsub>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4680      	mov	r8, r0
 800d9fc:	4689      	mov	r9, r1
 800d9fe:	f7f3 f863 	bl	8000ac8 <__aeabi_dcmpeq>
 800da02:	2800      	cmp	r0, #0
 800da04:	d0c0      	beq.n	800d988 <_strtod_l+0x8b8>
 800da06:	e618      	b.n	800d63a <_strtod_l+0x56a>
 800da08:	fffffc02 	.word	0xfffffc02
 800da0c:	7ff00000 	.word	0x7ff00000
 800da10:	39500000 	.word	0x39500000
 800da14:	000fffff 	.word	0x000fffff
 800da18:	7fefffff 	.word	0x7fefffff
 800da1c:	0800f2d0 	.word	0x0800f2d0
 800da20:	4659      	mov	r1, fp
 800da22:	4628      	mov	r0, r5
 800da24:	f7ff fac0 	bl	800cfa8 <__ratio>
 800da28:	ec57 6b10 	vmov	r6, r7, d0
 800da2c:	ee10 0a10 	vmov	r0, s0
 800da30:	2200      	movs	r2, #0
 800da32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da36:	4639      	mov	r1, r7
 800da38:	f7f3 f85a 	bl	8000af0 <__aeabi_dcmple>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d071      	beq.n	800db24 <_strtod_l+0xa54>
 800da40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d17c      	bne.n	800db40 <_strtod_l+0xa70>
 800da46:	f1b8 0f00 	cmp.w	r8, #0
 800da4a:	d15a      	bne.n	800db02 <_strtod_l+0xa32>
 800da4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da50:	2b00      	cmp	r3, #0
 800da52:	d15d      	bne.n	800db10 <_strtod_l+0xa40>
 800da54:	4b90      	ldr	r3, [pc, #576]	; (800dc98 <_strtod_l+0xbc8>)
 800da56:	2200      	movs	r2, #0
 800da58:	4630      	mov	r0, r6
 800da5a:	4639      	mov	r1, r7
 800da5c:	f7f3 f83e 	bl	8000adc <__aeabi_dcmplt>
 800da60:	2800      	cmp	r0, #0
 800da62:	d15c      	bne.n	800db1e <_strtod_l+0xa4e>
 800da64:	4630      	mov	r0, r6
 800da66:	4639      	mov	r1, r7
 800da68:	4b8c      	ldr	r3, [pc, #560]	; (800dc9c <_strtod_l+0xbcc>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f7f2 fdc4 	bl	80005f8 <__aeabi_dmul>
 800da70:	4606      	mov	r6, r0
 800da72:	460f      	mov	r7, r1
 800da74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800da78:	9606      	str	r6, [sp, #24]
 800da7a:	9307      	str	r3, [sp, #28]
 800da7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800da84:	4b86      	ldr	r3, [pc, #536]	; (800dca0 <_strtod_l+0xbd0>)
 800da86:	ea0a 0303 	and.w	r3, sl, r3
 800da8a:	930d      	str	r3, [sp, #52]	; 0x34
 800da8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da8e:	4b85      	ldr	r3, [pc, #532]	; (800dca4 <_strtod_l+0xbd4>)
 800da90:	429a      	cmp	r2, r3
 800da92:	f040 8090 	bne.w	800dbb6 <_strtod_l+0xae6>
 800da96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800da9a:	ec49 8b10 	vmov	d0, r8, r9
 800da9e:	f7ff f9b9 	bl	800ce14 <__ulp>
 800daa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800daa6:	ec51 0b10 	vmov	r0, r1, d0
 800daaa:	f7f2 fda5 	bl	80005f8 <__aeabi_dmul>
 800daae:	4642      	mov	r2, r8
 800dab0:	464b      	mov	r3, r9
 800dab2:	f7f2 fbeb 	bl	800028c <__adddf3>
 800dab6:	460b      	mov	r3, r1
 800dab8:	4979      	ldr	r1, [pc, #484]	; (800dca0 <_strtod_l+0xbd0>)
 800daba:	4a7b      	ldr	r2, [pc, #492]	; (800dca8 <_strtod_l+0xbd8>)
 800dabc:	4019      	ands	r1, r3
 800dabe:	4291      	cmp	r1, r2
 800dac0:	4680      	mov	r8, r0
 800dac2:	d944      	bls.n	800db4e <_strtod_l+0xa7e>
 800dac4:	ee18 2a90 	vmov	r2, s17
 800dac8:	4b78      	ldr	r3, [pc, #480]	; (800dcac <_strtod_l+0xbdc>)
 800daca:	429a      	cmp	r2, r3
 800dacc:	d104      	bne.n	800dad8 <_strtod_l+0xa08>
 800dace:	ee18 3a10 	vmov	r3, s16
 800dad2:	3301      	adds	r3, #1
 800dad4:	f43f ad40 	beq.w	800d558 <_strtod_l+0x488>
 800dad8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dcac <_strtod_l+0xbdc>
 800dadc:	f04f 38ff 	mov.w	r8, #4294967295
 800dae0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dae2:	4620      	mov	r0, r4
 800dae4:	f7fe fe6a 	bl	800c7bc <_Bfree>
 800dae8:	9905      	ldr	r1, [sp, #20]
 800daea:	4620      	mov	r0, r4
 800daec:	f7fe fe66 	bl	800c7bc <_Bfree>
 800daf0:	4659      	mov	r1, fp
 800daf2:	4620      	mov	r0, r4
 800daf4:	f7fe fe62 	bl	800c7bc <_Bfree>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7fe fe5e 	bl	800c7bc <_Bfree>
 800db00:	e609      	b.n	800d716 <_strtod_l+0x646>
 800db02:	f1b8 0f01 	cmp.w	r8, #1
 800db06:	d103      	bne.n	800db10 <_strtod_l+0xa40>
 800db08:	f1b9 0f00 	cmp.w	r9, #0
 800db0c:	f43f ad95 	beq.w	800d63a <_strtod_l+0x56a>
 800db10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dc68 <_strtod_l+0xb98>
 800db14:	4f60      	ldr	r7, [pc, #384]	; (800dc98 <_strtod_l+0xbc8>)
 800db16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db1a:	2600      	movs	r6, #0
 800db1c:	e7ae      	b.n	800da7c <_strtod_l+0x9ac>
 800db1e:	4f5f      	ldr	r7, [pc, #380]	; (800dc9c <_strtod_l+0xbcc>)
 800db20:	2600      	movs	r6, #0
 800db22:	e7a7      	b.n	800da74 <_strtod_l+0x9a4>
 800db24:	4b5d      	ldr	r3, [pc, #372]	; (800dc9c <_strtod_l+0xbcc>)
 800db26:	4630      	mov	r0, r6
 800db28:	4639      	mov	r1, r7
 800db2a:	2200      	movs	r2, #0
 800db2c:	f7f2 fd64 	bl	80005f8 <__aeabi_dmul>
 800db30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db32:	4606      	mov	r6, r0
 800db34:	460f      	mov	r7, r1
 800db36:	2b00      	cmp	r3, #0
 800db38:	d09c      	beq.n	800da74 <_strtod_l+0x9a4>
 800db3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800db3e:	e79d      	b.n	800da7c <_strtod_l+0x9ac>
 800db40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dc70 <_strtod_l+0xba0>
 800db44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db48:	ec57 6b17 	vmov	r6, r7, d7
 800db4c:	e796      	b.n	800da7c <_strtod_l+0x9ac>
 800db4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	46ca      	mov	sl, r9
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1c2      	bne.n	800dae0 <_strtod_l+0xa10>
 800db5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db60:	0d1b      	lsrs	r3, r3, #20
 800db62:	051b      	lsls	r3, r3, #20
 800db64:	429a      	cmp	r2, r3
 800db66:	d1bb      	bne.n	800dae0 <_strtod_l+0xa10>
 800db68:	4630      	mov	r0, r6
 800db6a:	4639      	mov	r1, r7
 800db6c:	f7f3 f8a4 	bl	8000cb8 <__aeabi_d2lz>
 800db70:	f7f2 fd14 	bl	800059c <__aeabi_l2d>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4630      	mov	r0, r6
 800db7a:	4639      	mov	r1, r7
 800db7c:	f7f2 fb84 	bl	8000288 <__aeabi_dsub>
 800db80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db86:	ea43 0308 	orr.w	r3, r3, r8
 800db8a:	4313      	orrs	r3, r2
 800db8c:	4606      	mov	r6, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	d054      	beq.n	800dc3c <_strtod_l+0xb6c>
 800db92:	a339      	add	r3, pc, #228	; (adr r3, 800dc78 <_strtod_l+0xba8>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 ffa0 	bl	8000adc <__aeabi_dcmplt>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f47f ace5 	bne.w	800d56c <_strtod_l+0x49c>
 800dba2:	a337      	add	r3, pc, #220	; (adr r3, 800dc80 <_strtod_l+0xbb0>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	4630      	mov	r0, r6
 800dbaa:	4639      	mov	r1, r7
 800dbac:	f7f2 ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d095      	beq.n	800dae0 <_strtod_l+0xa10>
 800dbb4:	e4da      	b.n	800d56c <_strtod_l+0x49c>
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	b333      	cbz	r3, 800dc08 <_strtod_l+0xb38>
 800dbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dbc0:	d822      	bhi.n	800dc08 <_strtod_l+0xb38>
 800dbc2:	a331      	add	r3, pc, #196	; (adr r3, 800dc88 <_strtod_l+0xbb8>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	4630      	mov	r0, r6
 800dbca:	4639      	mov	r1, r7
 800dbcc:	f7f2 ff90 	bl	8000af0 <__aeabi_dcmple>
 800dbd0:	b1a0      	cbz	r0, 800dbfc <_strtod_l+0xb2c>
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7f2 ffe7 	bl	8000ba8 <__aeabi_d2uiz>
 800dbda:	2801      	cmp	r0, #1
 800dbdc:	bf38      	it	cc
 800dbde:	2001      	movcc	r0, #1
 800dbe0:	f7f2 fc90 	bl	8000504 <__aeabi_ui2d>
 800dbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460f      	mov	r7, r1
 800dbea:	bb23      	cbnz	r3, 800dc36 <_strtod_l+0xb66>
 800dbec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbf0:	9010      	str	r0, [sp, #64]	; 0x40
 800dbf2:	9311      	str	r3, [sp, #68]	; 0x44
 800dbf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800dbfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc0c:	eeb0 0a48 	vmov.f32	s0, s16
 800dc10:	eef0 0a68 	vmov.f32	s1, s17
 800dc14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dc18:	f7ff f8fc 	bl	800ce14 <__ulp>
 800dc1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc20:	ec53 2b10 	vmov	r2, r3, d0
 800dc24:	f7f2 fce8 	bl	80005f8 <__aeabi_dmul>
 800dc28:	ec53 2b18 	vmov	r2, r3, d8
 800dc2c:	f7f2 fb2e 	bl	800028c <__adddf3>
 800dc30:	4680      	mov	r8, r0
 800dc32:	4689      	mov	r9, r1
 800dc34:	e78d      	b.n	800db52 <_strtod_l+0xa82>
 800dc36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dc3a:	e7db      	b.n	800dbf4 <_strtod_l+0xb24>
 800dc3c:	a314      	add	r3, pc, #80	; (adr r3, 800dc90 <_strtod_l+0xbc0>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	f7f2 ff4b 	bl	8000adc <__aeabi_dcmplt>
 800dc46:	e7b3      	b.n	800dbb0 <_strtod_l+0xae0>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc50:	6013      	str	r3, [r2, #0]
 800dc52:	f7ff ba7c 	b.w	800d14e <_strtod_l+0x7e>
 800dc56:	2a65      	cmp	r2, #101	; 0x65
 800dc58:	f43f ab75 	beq.w	800d346 <_strtod_l+0x276>
 800dc5c:	2a45      	cmp	r2, #69	; 0x45
 800dc5e:	f43f ab72 	beq.w	800d346 <_strtod_l+0x276>
 800dc62:	2301      	movs	r3, #1
 800dc64:	f7ff bbaa 	b.w	800d3bc <_strtod_l+0x2ec>
 800dc68:	00000000 	.word	0x00000000
 800dc6c:	bff00000 	.word	0xbff00000
 800dc70:	00000000 	.word	0x00000000
 800dc74:	3ff00000 	.word	0x3ff00000
 800dc78:	94a03595 	.word	0x94a03595
 800dc7c:	3fdfffff 	.word	0x3fdfffff
 800dc80:	35afe535 	.word	0x35afe535
 800dc84:	3fe00000 	.word	0x3fe00000
 800dc88:	ffc00000 	.word	0xffc00000
 800dc8c:	41dfffff 	.word	0x41dfffff
 800dc90:	94a03595 	.word	0x94a03595
 800dc94:	3fcfffff 	.word	0x3fcfffff
 800dc98:	3ff00000 	.word	0x3ff00000
 800dc9c:	3fe00000 	.word	0x3fe00000
 800dca0:	7ff00000 	.word	0x7ff00000
 800dca4:	7fe00000 	.word	0x7fe00000
 800dca8:	7c9fffff 	.word	0x7c9fffff
 800dcac:	7fefffff 	.word	0x7fefffff

0800dcb0 <_strtod_r>:
 800dcb0:	4b01      	ldr	r3, [pc, #4]	; (800dcb8 <_strtod_r+0x8>)
 800dcb2:	f7ff ba0d 	b.w	800d0d0 <_strtod_l>
 800dcb6:	bf00      	nop
 800dcb8:	20000168 	.word	0x20000168

0800dcbc <_strtol_l.constprop.0>:
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc2:	d001      	beq.n	800dcc8 <_strtol_l.constprop.0+0xc>
 800dcc4:	2b24      	cmp	r3, #36	; 0x24
 800dcc6:	d906      	bls.n	800dcd6 <_strtol_l.constprop.0+0x1a>
 800dcc8:	f7fd fd8c 	bl	800b7e4 <__errno>
 800dccc:	2316      	movs	r3, #22
 800dcce:	6003      	str	r3, [r0, #0]
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ddbc <_strtol_l.constprop.0+0x100>
 800dcda:	460d      	mov	r5, r1
 800dcdc:	462e      	mov	r6, r5
 800dcde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dce2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dce6:	f017 0708 	ands.w	r7, r7, #8
 800dcea:	d1f7      	bne.n	800dcdc <_strtol_l.constprop.0+0x20>
 800dcec:	2c2d      	cmp	r4, #45	; 0x2d
 800dcee:	d132      	bne.n	800dd56 <_strtol_l.constprop.0+0x9a>
 800dcf0:	782c      	ldrb	r4, [r5, #0]
 800dcf2:	2701      	movs	r7, #1
 800dcf4:	1cb5      	adds	r5, r6, #2
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d05b      	beq.n	800ddb2 <_strtol_l.constprop.0+0xf6>
 800dcfa:	2b10      	cmp	r3, #16
 800dcfc:	d109      	bne.n	800dd12 <_strtol_l.constprop.0+0x56>
 800dcfe:	2c30      	cmp	r4, #48	; 0x30
 800dd00:	d107      	bne.n	800dd12 <_strtol_l.constprop.0+0x56>
 800dd02:	782c      	ldrb	r4, [r5, #0]
 800dd04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd08:	2c58      	cmp	r4, #88	; 0x58
 800dd0a:	d14d      	bne.n	800dda8 <_strtol_l.constprop.0+0xec>
 800dd0c:	786c      	ldrb	r4, [r5, #1]
 800dd0e:	2310      	movs	r3, #16
 800dd10:	3502      	adds	r5, #2
 800dd12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dd16:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd1a:	f04f 0e00 	mov.w	lr, #0
 800dd1e:	fbb8 f9f3 	udiv	r9, r8, r3
 800dd22:	4676      	mov	r6, lr
 800dd24:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd2c:	f1bc 0f09 	cmp.w	ip, #9
 800dd30:	d816      	bhi.n	800dd60 <_strtol_l.constprop.0+0xa4>
 800dd32:	4664      	mov	r4, ip
 800dd34:	42a3      	cmp	r3, r4
 800dd36:	dd24      	ble.n	800dd82 <_strtol_l.constprop.0+0xc6>
 800dd38:	f1be 3fff 	cmp.w	lr, #4294967295
 800dd3c:	d008      	beq.n	800dd50 <_strtol_l.constprop.0+0x94>
 800dd3e:	45b1      	cmp	r9, r6
 800dd40:	d31c      	bcc.n	800dd7c <_strtol_l.constprop.0+0xc0>
 800dd42:	d101      	bne.n	800dd48 <_strtol_l.constprop.0+0x8c>
 800dd44:	45a2      	cmp	sl, r4
 800dd46:	db19      	blt.n	800dd7c <_strtol_l.constprop.0+0xc0>
 800dd48:	fb06 4603 	mla	r6, r6, r3, r4
 800dd4c:	f04f 0e01 	mov.w	lr, #1
 800dd50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd54:	e7e8      	b.n	800dd28 <_strtol_l.constprop.0+0x6c>
 800dd56:	2c2b      	cmp	r4, #43	; 0x2b
 800dd58:	bf04      	itt	eq
 800dd5a:	782c      	ldrbeq	r4, [r5, #0]
 800dd5c:	1cb5      	addeq	r5, r6, #2
 800dd5e:	e7ca      	b.n	800dcf6 <_strtol_l.constprop.0+0x3a>
 800dd60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd64:	f1bc 0f19 	cmp.w	ip, #25
 800dd68:	d801      	bhi.n	800dd6e <_strtol_l.constprop.0+0xb2>
 800dd6a:	3c37      	subs	r4, #55	; 0x37
 800dd6c:	e7e2      	b.n	800dd34 <_strtol_l.constprop.0+0x78>
 800dd6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd72:	f1bc 0f19 	cmp.w	ip, #25
 800dd76:	d804      	bhi.n	800dd82 <_strtol_l.constprop.0+0xc6>
 800dd78:	3c57      	subs	r4, #87	; 0x57
 800dd7a:	e7db      	b.n	800dd34 <_strtol_l.constprop.0+0x78>
 800dd7c:	f04f 3eff 	mov.w	lr, #4294967295
 800dd80:	e7e6      	b.n	800dd50 <_strtol_l.constprop.0+0x94>
 800dd82:	f1be 3fff 	cmp.w	lr, #4294967295
 800dd86:	d105      	bne.n	800dd94 <_strtol_l.constprop.0+0xd8>
 800dd88:	2322      	movs	r3, #34	; 0x22
 800dd8a:	6003      	str	r3, [r0, #0]
 800dd8c:	4646      	mov	r6, r8
 800dd8e:	b942      	cbnz	r2, 800dda2 <_strtol_l.constprop.0+0xe6>
 800dd90:	4630      	mov	r0, r6
 800dd92:	e79e      	b.n	800dcd2 <_strtol_l.constprop.0+0x16>
 800dd94:	b107      	cbz	r7, 800dd98 <_strtol_l.constprop.0+0xdc>
 800dd96:	4276      	negs	r6, r6
 800dd98:	2a00      	cmp	r2, #0
 800dd9a:	d0f9      	beq.n	800dd90 <_strtol_l.constprop.0+0xd4>
 800dd9c:	f1be 0f00 	cmp.w	lr, #0
 800dda0:	d000      	beq.n	800dda4 <_strtol_l.constprop.0+0xe8>
 800dda2:	1e69      	subs	r1, r5, #1
 800dda4:	6011      	str	r1, [r2, #0]
 800dda6:	e7f3      	b.n	800dd90 <_strtol_l.constprop.0+0xd4>
 800dda8:	2430      	movs	r4, #48	; 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1b1      	bne.n	800dd12 <_strtol_l.constprop.0+0x56>
 800ddae:	2308      	movs	r3, #8
 800ddb0:	e7af      	b.n	800dd12 <_strtol_l.constprop.0+0x56>
 800ddb2:	2c30      	cmp	r4, #48	; 0x30
 800ddb4:	d0a5      	beq.n	800dd02 <_strtol_l.constprop.0+0x46>
 800ddb6:	230a      	movs	r3, #10
 800ddb8:	e7ab      	b.n	800dd12 <_strtol_l.constprop.0+0x56>
 800ddba:	bf00      	nop
 800ddbc:	0800f2f9 	.word	0x0800f2f9

0800ddc0 <_strtol_r>:
 800ddc0:	f7ff bf7c 	b.w	800dcbc <_strtol_l.constprop.0>

0800ddc4 <__ssputs_r>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	688e      	ldr	r6, [r1, #8]
 800ddca:	461f      	mov	r7, r3
 800ddcc:	42be      	cmp	r6, r7
 800ddce:	680b      	ldr	r3, [r1, #0]
 800ddd0:	4682      	mov	sl, r0
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	4690      	mov	r8, r2
 800ddd6:	d82c      	bhi.n	800de32 <__ssputs_r+0x6e>
 800ddd8:	898a      	ldrh	r2, [r1, #12]
 800ddda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ddde:	d026      	beq.n	800de2e <__ssputs_r+0x6a>
 800dde0:	6965      	ldr	r5, [r4, #20]
 800dde2:	6909      	ldr	r1, [r1, #16]
 800dde4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dde8:	eba3 0901 	sub.w	r9, r3, r1
 800ddec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddf0:	1c7b      	adds	r3, r7, #1
 800ddf2:	444b      	add	r3, r9
 800ddf4:	106d      	asrs	r5, r5, #1
 800ddf6:	429d      	cmp	r5, r3
 800ddf8:	bf38      	it	cc
 800ddfa:	461d      	movcc	r5, r3
 800ddfc:	0553      	lsls	r3, r2, #21
 800ddfe:	d527      	bpl.n	800de50 <__ssputs_r+0x8c>
 800de00:	4629      	mov	r1, r5
 800de02:	f7fe fc0f 	bl	800c624 <_malloc_r>
 800de06:	4606      	mov	r6, r0
 800de08:	b360      	cbz	r0, 800de64 <__ssputs_r+0xa0>
 800de0a:	6921      	ldr	r1, [r4, #16]
 800de0c:	464a      	mov	r2, r9
 800de0e:	f000 fbf5 	bl	800e5fc <memcpy>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	6126      	str	r6, [r4, #16]
 800de20:	6165      	str	r5, [r4, #20]
 800de22:	444e      	add	r6, r9
 800de24:	eba5 0509 	sub.w	r5, r5, r9
 800de28:	6026      	str	r6, [r4, #0]
 800de2a:	60a5      	str	r5, [r4, #8]
 800de2c:	463e      	mov	r6, r7
 800de2e:	42be      	cmp	r6, r7
 800de30:	d900      	bls.n	800de34 <__ssputs_r+0x70>
 800de32:	463e      	mov	r6, r7
 800de34:	6820      	ldr	r0, [r4, #0]
 800de36:	4632      	mov	r2, r6
 800de38:	4641      	mov	r1, r8
 800de3a:	f000 fba3 	bl	800e584 <memmove>
 800de3e:	68a3      	ldr	r3, [r4, #8]
 800de40:	1b9b      	subs	r3, r3, r6
 800de42:	60a3      	str	r3, [r4, #8]
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	4433      	add	r3, r6
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	2000      	movs	r0, #0
 800de4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de50:	462a      	mov	r2, r5
 800de52:	f000 ff86 	bl	800ed62 <_realloc_r>
 800de56:	4606      	mov	r6, r0
 800de58:	2800      	cmp	r0, #0
 800de5a:	d1e0      	bne.n	800de1e <__ssputs_r+0x5a>
 800de5c:	6921      	ldr	r1, [r4, #16]
 800de5e:	4650      	mov	r0, sl
 800de60:	f7fe fb6c 	bl	800c53c <_free_r>
 800de64:	230c      	movs	r3, #12
 800de66:	f8ca 3000 	str.w	r3, [sl]
 800de6a:	89a3      	ldrh	r3, [r4, #12]
 800de6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
 800de76:	e7e9      	b.n	800de4c <__ssputs_r+0x88>

0800de78 <_svfiprintf_r>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	4698      	mov	r8, r3
 800de7e:	898b      	ldrh	r3, [r1, #12]
 800de80:	061b      	lsls	r3, r3, #24
 800de82:	b09d      	sub	sp, #116	; 0x74
 800de84:	4607      	mov	r7, r0
 800de86:	460d      	mov	r5, r1
 800de88:	4614      	mov	r4, r2
 800de8a:	d50e      	bpl.n	800deaa <_svfiprintf_r+0x32>
 800de8c:	690b      	ldr	r3, [r1, #16]
 800de8e:	b963      	cbnz	r3, 800deaa <_svfiprintf_r+0x32>
 800de90:	2140      	movs	r1, #64	; 0x40
 800de92:	f7fe fbc7 	bl	800c624 <_malloc_r>
 800de96:	6028      	str	r0, [r5, #0]
 800de98:	6128      	str	r0, [r5, #16]
 800de9a:	b920      	cbnz	r0, 800dea6 <_svfiprintf_r+0x2e>
 800de9c:	230c      	movs	r3, #12
 800de9e:	603b      	str	r3, [r7, #0]
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	e0d0      	b.n	800e048 <_svfiprintf_r+0x1d0>
 800dea6:	2340      	movs	r3, #64	; 0x40
 800dea8:	616b      	str	r3, [r5, #20]
 800deaa:	2300      	movs	r3, #0
 800deac:	9309      	str	r3, [sp, #36]	; 0x24
 800deae:	2320      	movs	r3, #32
 800deb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800deb8:	2330      	movs	r3, #48	; 0x30
 800deba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e060 <_svfiprintf_r+0x1e8>
 800debe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dec2:	f04f 0901 	mov.w	r9, #1
 800dec6:	4623      	mov	r3, r4
 800dec8:	469a      	mov	sl, r3
 800deca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dece:	b10a      	cbz	r2, 800ded4 <_svfiprintf_r+0x5c>
 800ded0:	2a25      	cmp	r2, #37	; 0x25
 800ded2:	d1f9      	bne.n	800dec8 <_svfiprintf_r+0x50>
 800ded4:	ebba 0b04 	subs.w	fp, sl, r4
 800ded8:	d00b      	beq.n	800def2 <_svfiprintf_r+0x7a>
 800deda:	465b      	mov	r3, fp
 800dedc:	4622      	mov	r2, r4
 800dede:	4629      	mov	r1, r5
 800dee0:	4638      	mov	r0, r7
 800dee2:	f7ff ff6f 	bl	800ddc4 <__ssputs_r>
 800dee6:	3001      	adds	r0, #1
 800dee8:	f000 80a9 	beq.w	800e03e <_svfiprintf_r+0x1c6>
 800deec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deee:	445a      	add	r2, fp
 800def0:	9209      	str	r2, [sp, #36]	; 0x24
 800def2:	f89a 3000 	ldrb.w	r3, [sl]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 80a1 	beq.w	800e03e <_svfiprintf_r+0x1c6>
 800defc:	2300      	movs	r3, #0
 800defe:	f04f 32ff 	mov.w	r2, #4294967295
 800df02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df06:	f10a 0a01 	add.w	sl, sl, #1
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	9307      	str	r3, [sp, #28]
 800df0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df12:	931a      	str	r3, [sp, #104]	; 0x68
 800df14:	4654      	mov	r4, sl
 800df16:	2205      	movs	r2, #5
 800df18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1c:	4850      	ldr	r0, [pc, #320]	; (800e060 <_svfiprintf_r+0x1e8>)
 800df1e:	f7f2 f957 	bl	80001d0 <memchr>
 800df22:	9a04      	ldr	r2, [sp, #16]
 800df24:	b9d8      	cbnz	r0, 800df5e <_svfiprintf_r+0xe6>
 800df26:	06d0      	lsls	r0, r2, #27
 800df28:	bf44      	itt	mi
 800df2a:	2320      	movmi	r3, #32
 800df2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df30:	0711      	lsls	r1, r2, #28
 800df32:	bf44      	itt	mi
 800df34:	232b      	movmi	r3, #43	; 0x2b
 800df36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df3a:	f89a 3000 	ldrb.w	r3, [sl]
 800df3e:	2b2a      	cmp	r3, #42	; 0x2a
 800df40:	d015      	beq.n	800df6e <_svfiprintf_r+0xf6>
 800df42:	9a07      	ldr	r2, [sp, #28]
 800df44:	4654      	mov	r4, sl
 800df46:	2000      	movs	r0, #0
 800df48:	f04f 0c0a 	mov.w	ip, #10
 800df4c:	4621      	mov	r1, r4
 800df4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df52:	3b30      	subs	r3, #48	; 0x30
 800df54:	2b09      	cmp	r3, #9
 800df56:	d94d      	bls.n	800dff4 <_svfiprintf_r+0x17c>
 800df58:	b1b0      	cbz	r0, 800df88 <_svfiprintf_r+0x110>
 800df5a:	9207      	str	r2, [sp, #28]
 800df5c:	e014      	b.n	800df88 <_svfiprintf_r+0x110>
 800df5e:	eba0 0308 	sub.w	r3, r0, r8
 800df62:	fa09 f303 	lsl.w	r3, r9, r3
 800df66:	4313      	orrs	r3, r2
 800df68:	9304      	str	r3, [sp, #16]
 800df6a:	46a2      	mov	sl, r4
 800df6c:	e7d2      	b.n	800df14 <_svfiprintf_r+0x9c>
 800df6e:	9b03      	ldr	r3, [sp, #12]
 800df70:	1d19      	adds	r1, r3, #4
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	9103      	str	r1, [sp, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	bfbb      	ittet	lt
 800df7a:	425b      	neglt	r3, r3
 800df7c:	f042 0202 	orrlt.w	r2, r2, #2
 800df80:	9307      	strge	r3, [sp, #28]
 800df82:	9307      	strlt	r3, [sp, #28]
 800df84:	bfb8      	it	lt
 800df86:	9204      	strlt	r2, [sp, #16]
 800df88:	7823      	ldrb	r3, [r4, #0]
 800df8a:	2b2e      	cmp	r3, #46	; 0x2e
 800df8c:	d10c      	bne.n	800dfa8 <_svfiprintf_r+0x130>
 800df8e:	7863      	ldrb	r3, [r4, #1]
 800df90:	2b2a      	cmp	r3, #42	; 0x2a
 800df92:	d134      	bne.n	800dffe <_svfiprintf_r+0x186>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	9203      	str	r2, [sp, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfb8      	it	lt
 800dfa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfa4:	3402      	adds	r4, #2
 800dfa6:	9305      	str	r3, [sp, #20]
 800dfa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e070 <_svfiprintf_r+0x1f8>
 800dfac:	7821      	ldrb	r1, [r4, #0]
 800dfae:	2203      	movs	r2, #3
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	f7f2 f90d 	bl	80001d0 <memchr>
 800dfb6:	b138      	cbz	r0, 800dfc8 <_svfiprintf_r+0x150>
 800dfb8:	9b04      	ldr	r3, [sp, #16]
 800dfba:	eba0 000a 	sub.w	r0, r0, sl
 800dfbe:	2240      	movs	r2, #64	; 0x40
 800dfc0:	4082      	lsls	r2, r0
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	3401      	adds	r4, #1
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfcc:	4825      	ldr	r0, [pc, #148]	; (800e064 <_svfiprintf_r+0x1ec>)
 800dfce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfd2:	2206      	movs	r2, #6
 800dfd4:	f7f2 f8fc 	bl	80001d0 <memchr>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d038      	beq.n	800e04e <_svfiprintf_r+0x1d6>
 800dfdc:	4b22      	ldr	r3, [pc, #136]	; (800e068 <_svfiprintf_r+0x1f0>)
 800dfde:	bb1b      	cbnz	r3, 800e028 <_svfiprintf_r+0x1b0>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	f023 0307 	bic.w	r3, r3, #7
 800dfe8:	3308      	adds	r3, #8
 800dfea:	9303      	str	r3, [sp, #12]
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	4433      	add	r3, r6
 800dff0:	9309      	str	r3, [sp, #36]	; 0x24
 800dff2:	e768      	b.n	800dec6 <_svfiprintf_r+0x4e>
 800dff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dff8:	460c      	mov	r4, r1
 800dffa:	2001      	movs	r0, #1
 800dffc:	e7a6      	b.n	800df4c <_svfiprintf_r+0xd4>
 800dffe:	2300      	movs	r3, #0
 800e000:	3401      	adds	r4, #1
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	4619      	mov	r1, r3
 800e006:	f04f 0c0a 	mov.w	ip, #10
 800e00a:	4620      	mov	r0, r4
 800e00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e010:	3a30      	subs	r2, #48	; 0x30
 800e012:	2a09      	cmp	r2, #9
 800e014:	d903      	bls.n	800e01e <_svfiprintf_r+0x1a6>
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0c6      	beq.n	800dfa8 <_svfiprintf_r+0x130>
 800e01a:	9105      	str	r1, [sp, #20]
 800e01c:	e7c4      	b.n	800dfa8 <_svfiprintf_r+0x130>
 800e01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e022:	4604      	mov	r4, r0
 800e024:	2301      	movs	r3, #1
 800e026:	e7f0      	b.n	800e00a <_svfiprintf_r+0x192>
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	462a      	mov	r2, r5
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <_svfiprintf_r+0x1f4>)
 800e030:	a904      	add	r1, sp, #16
 800e032:	4638      	mov	r0, r7
 800e034:	f7fc fc88 	bl	800a948 <_printf_float>
 800e038:	1c42      	adds	r2, r0, #1
 800e03a:	4606      	mov	r6, r0
 800e03c:	d1d6      	bne.n	800dfec <_svfiprintf_r+0x174>
 800e03e:	89ab      	ldrh	r3, [r5, #12]
 800e040:	065b      	lsls	r3, r3, #25
 800e042:	f53f af2d 	bmi.w	800dea0 <_svfiprintf_r+0x28>
 800e046:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e048:	b01d      	add	sp, #116	; 0x74
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	ab03      	add	r3, sp, #12
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	462a      	mov	r2, r5
 800e054:	4b05      	ldr	r3, [pc, #20]	; (800e06c <_svfiprintf_r+0x1f4>)
 800e056:	a904      	add	r1, sp, #16
 800e058:	4638      	mov	r0, r7
 800e05a:	f7fc ff19 	bl	800ae90 <_printf_i>
 800e05e:	e7eb      	b.n	800e038 <_svfiprintf_r+0x1c0>
 800e060:	0800f3f9 	.word	0x0800f3f9
 800e064:	0800f403 	.word	0x0800f403
 800e068:	0800a949 	.word	0x0800a949
 800e06c:	0800ddc5 	.word	0x0800ddc5
 800e070:	0800f3ff 	.word	0x0800f3ff

0800e074 <__sfputc_r>:
 800e074:	6893      	ldr	r3, [r2, #8]
 800e076:	3b01      	subs	r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	b410      	push	{r4}
 800e07c:	6093      	str	r3, [r2, #8]
 800e07e:	da08      	bge.n	800e092 <__sfputc_r+0x1e>
 800e080:	6994      	ldr	r4, [r2, #24]
 800e082:	42a3      	cmp	r3, r4
 800e084:	db01      	blt.n	800e08a <__sfputc_r+0x16>
 800e086:	290a      	cmp	r1, #10
 800e088:	d103      	bne.n	800e092 <__sfputc_r+0x1e>
 800e08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08e:	f000 b9e3 	b.w	800e458 <__swbuf_r>
 800e092:	6813      	ldr	r3, [r2, #0]
 800e094:	1c58      	adds	r0, r3, #1
 800e096:	6010      	str	r0, [r2, #0]
 800e098:	7019      	strb	r1, [r3, #0]
 800e09a:	4608      	mov	r0, r1
 800e09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <__sfputs_r>:
 800e0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	18d5      	adds	r5, r2, r3
 800e0ac:	42ac      	cmp	r4, r5
 800e0ae:	d101      	bne.n	800e0b4 <__sfputs_r+0x12>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	e007      	b.n	800e0c4 <__sfputs_r+0x22>
 800e0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b8:	463a      	mov	r2, r7
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f7ff ffda 	bl	800e074 <__sfputc_r>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d1f3      	bne.n	800e0ac <__sfputs_r+0xa>
 800e0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0c8 <_vfiprintf_r>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	460d      	mov	r5, r1
 800e0ce:	b09d      	sub	sp, #116	; 0x74
 800e0d0:	4614      	mov	r4, r2
 800e0d2:	4698      	mov	r8, r3
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	b118      	cbz	r0, 800e0e0 <_vfiprintf_r+0x18>
 800e0d8:	6a03      	ldr	r3, [r0, #32]
 800e0da:	b90b      	cbnz	r3, 800e0e0 <_vfiprintf_r+0x18>
 800e0dc:	f7fd fa84 	bl	800b5e8 <__sinit>
 800e0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0e2:	07d9      	lsls	r1, r3, #31
 800e0e4:	d405      	bmi.n	800e0f2 <_vfiprintf_r+0x2a>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	059a      	lsls	r2, r3, #22
 800e0ea:	d402      	bmi.n	800e0f2 <_vfiprintf_r+0x2a>
 800e0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ee:	f7fd fba3 	bl	800b838 <__retarget_lock_acquire_recursive>
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	071b      	lsls	r3, r3, #28
 800e0f6:	d501      	bpl.n	800e0fc <_vfiprintf_r+0x34>
 800e0f8:	692b      	ldr	r3, [r5, #16]
 800e0fa:	b99b      	cbnz	r3, 800e124 <_vfiprintf_r+0x5c>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	4630      	mov	r0, r6
 800e100:	f000 f9e8 	bl	800e4d4 <__swsetup_r>
 800e104:	b170      	cbz	r0, 800e124 <_vfiprintf_r+0x5c>
 800e106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e108:	07dc      	lsls	r4, r3, #31
 800e10a:	d504      	bpl.n	800e116 <_vfiprintf_r+0x4e>
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	b01d      	add	sp, #116	; 0x74
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	89ab      	ldrh	r3, [r5, #12]
 800e118:	0598      	lsls	r0, r3, #22
 800e11a:	d4f7      	bmi.n	800e10c <_vfiprintf_r+0x44>
 800e11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e11e:	f7fd fb8c 	bl	800b83a <__retarget_lock_release_recursive>
 800e122:	e7f3      	b.n	800e10c <_vfiprintf_r+0x44>
 800e124:	2300      	movs	r3, #0
 800e126:	9309      	str	r3, [sp, #36]	; 0x24
 800e128:	2320      	movs	r3, #32
 800e12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e132:	2330      	movs	r3, #48	; 0x30
 800e134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e2e8 <_vfiprintf_r+0x220>
 800e138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e13c:	f04f 0901 	mov.w	r9, #1
 800e140:	4623      	mov	r3, r4
 800e142:	469a      	mov	sl, r3
 800e144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e148:	b10a      	cbz	r2, 800e14e <_vfiprintf_r+0x86>
 800e14a:	2a25      	cmp	r2, #37	; 0x25
 800e14c:	d1f9      	bne.n	800e142 <_vfiprintf_r+0x7a>
 800e14e:	ebba 0b04 	subs.w	fp, sl, r4
 800e152:	d00b      	beq.n	800e16c <_vfiprintf_r+0xa4>
 800e154:	465b      	mov	r3, fp
 800e156:	4622      	mov	r2, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	4630      	mov	r0, r6
 800e15c:	f7ff ffa1 	bl	800e0a2 <__sfputs_r>
 800e160:	3001      	adds	r0, #1
 800e162:	f000 80a9 	beq.w	800e2b8 <_vfiprintf_r+0x1f0>
 800e166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e168:	445a      	add	r2, fp
 800e16a:	9209      	str	r2, [sp, #36]	; 0x24
 800e16c:	f89a 3000 	ldrb.w	r3, [sl]
 800e170:	2b00      	cmp	r3, #0
 800e172:	f000 80a1 	beq.w	800e2b8 <_vfiprintf_r+0x1f0>
 800e176:	2300      	movs	r3, #0
 800e178:	f04f 32ff 	mov.w	r2, #4294967295
 800e17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e180:	f10a 0a01 	add.w	sl, sl, #1
 800e184:	9304      	str	r3, [sp, #16]
 800e186:	9307      	str	r3, [sp, #28]
 800e188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e18c:	931a      	str	r3, [sp, #104]	; 0x68
 800e18e:	4654      	mov	r4, sl
 800e190:	2205      	movs	r2, #5
 800e192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e196:	4854      	ldr	r0, [pc, #336]	; (800e2e8 <_vfiprintf_r+0x220>)
 800e198:	f7f2 f81a 	bl	80001d0 <memchr>
 800e19c:	9a04      	ldr	r2, [sp, #16]
 800e19e:	b9d8      	cbnz	r0, 800e1d8 <_vfiprintf_r+0x110>
 800e1a0:	06d1      	lsls	r1, r2, #27
 800e1a2:	bf44      	itt	mi
 800e1a4:	2320      	movmi	r3, #32
 800e1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1aa:	0713      	lsls	r3, r2, #28
 800e1ac:	bf44      	itt	mi
 800e1ae:	232b      	movmi	r3, #43	; 0x2b
 800e1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ba:	d015      	beq.n	800e1e8 <_vfiprintf_r+0x120>
 800e1bc:	9a07      	ldr	r2, [sp, #28]
 800e1be:	4654      	mov	r4, sl
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f04f 0c0a 	mov.w	ip, #10
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1cc:	3b30      	subs	r3, #48	; 0x30
 800e1ce:	2b09      	cmp	r3, #9
 800e1d0:	d94d      	bls.n	800e26e <_vfiprintf_r+0x1a6>
 800e1d2:	b1b0      	cbz	r0, 800e202 <_vfiprintf_r+0x13a>
 800e1d4:	9207      	str	r2, [sp, #28]
 800e1d6:	e014      	b.n	800e202 <_vfiprintf_r+0x13a>
 800e1d8:	eba0 0308 	sub.w	r3, r0, r8
 800e1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	46a2      	mov	sl, r4
 800e1e6:	e7d2      	b.n	800e18e <_vfiprintf_r+0xc6>
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	1d19      	adds	r1, r3, #4
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	9103      	str	r1, [sp, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	bfbb      	ittet	lt
 800e1f4:	425b      	neglt	r3, r3
 800e1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1fa:	9307      	strge	r3, [sp, #28]
 800e1fc:	9307      	strlt	r3, [sp, #28]
 800e1fe:	bfb8      	it	lt
 800e200:	9204      	strlt	r2, [sp, #16]
 800e202:	7823      	ldrb	r3, [r4, #0]
 800e204:	2b2e      	cmp	r3, #46	; 0x2e
 800e206:	d10c      	bne.n	800e222 <_vfiprintf_r+0x15a>
 800e208:	7863      	ldrb	r3, [r4, #1]
 800e20a:	2b2a      	cmp	r3, #42	; 0x2a
 800e20c:	d134      	bne.n	800e278 <_vfiprintf_r+0x1b0>
 800e20e:	9b03      	ldr	r3, [sp, #12]
 800e210:	1d1a      	adds	r2, r3, #4
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	9203      	str	r2, [sp, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	bfb8      	it	lt
 800e21a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e21e:	3402      	adds	r4, #2
 800e220:	9305      	str	r3, [sp, #20]
 800e222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e2f8 <_vfiprintf_r+0x230>
 800e226:	7821      	ldrb	r1, [r4, #0]
 800e228:	2203      	movs	r2, #3
 800e22a:	4650      	mov	r0, sl
 800e22c:	f7f1 ffd0 	bl	80001d0 <memchr>
 800e230:	b138      	cbz	r0, 800e242 <_vfiprintf_r+0x17a>
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	eba0 000a 	sub.w	r0, r0, sl
 800e238:	2240      	movs	r2, #64	; 0x40
 800e23a:	4082      	lsls	r2, r0
 800e23c:	4313      	orrs	r3, r2
 800e23e:	3401      	adds	r4, #1
 800e240:	9304      	str	r3, [sp, #16]
 800e242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e246:	4829      	ldr	r0, [pc, #164]	; (800e2ec <_vfiprintf_r+0x224>)
 800e248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e24c:	2206      	movs	r2, #6
 800e24e:	f7f1 ffbf 	bl	80001d0 <memchr>
 800e252:	2800      	cmp	r0, #0
 800e254:	d03f      	beq.n	800e2d6 <_vfiprintf_r+0x20e>
 800e256:	4b26      	ldr	r3, [pc, #152]	; (800e2f0 <_vfiprintf_r+0x228>)
 800e258:	bb1b      	cbnz	r3, 800e2a2 <_vfiprintf_r+0x1da>
 800e25a:	9b03      	ldr	r3, [sp, #12]
 800e25c:	3307      	adds	r3, #7
 800e25e:	f023 0307 	bic.w	r3, r3, #7
 800e262:	3308      	adds	r3, #8
 800e264:	9303      	str	r3, [sp, #12]
 800e266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e268:	443b      	add	r3, r7
 800e26a:	9309      	str	r3, [sp, #36]	; 0x24
 800e26c:	e768      	b.n	800e140 <_vfiprintf_r+0x78>
 800e26e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e272:	460c      	mov	r4, r1
 800e274:	2001      	movs	r0, #1
 800e276:	e7a6      	b.n	800e1c6 <_vfiprintf_r+0xfe>
 800e278:	2300      	movs	r3, #0
 800e27a:	3401      	adds	r4, #1
 800e27c:	9305      	str	r3, [sp, #20]
 800e27e:	4619      	mov	r1, r3
 800e280:	f04f 0c0a 	mov.w	ip, #10
 800e284:	4620      	mov	r0, r4
 800e286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e28a:	3a30      	subs	r2, #48	; 0x30
 800e28c:	2a09      	cmp	r2, #9
 800e28e:	d903      	bls.n	800e298 <_vfiprintf_r+0x1d0>
 800e290:	2b00      	cmp	r3, #0
 800e292:	d0c6      	beq.n	800e222 <_vfiprintf_r+0x15a>
 800e294:	9105      	str	r1, [sp, #20]
 800e296:	e7c4      	b.n	800e222 <_vfiprintf_r+0x15a>
 800e298:	fb0c 2101 	mla	r1, ip, r1, r2
 800e29c:	4604      	mov	r4, r0
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e7f0      	b.n	800e284 <_vfiprintf_r+0x1bc>
 800e2a2:	ab03      	add	r3, sp, #12
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <_vfiprintf_r+0x22c>)
 800e2aa:	a904      	add	r1, sp, #16
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7fc fb4b 	bl	800a948 <_printf_float>
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	1c78      	adds	r0, r7, #1
 800e2b6:	d1d6      	bne.n	800e266 <_vfiprintf_r+0x19e>
 800e2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2ba:	07d9      	lsls	r1, r3, #31
 800e2bc:	d405      	bmi.n	800e2ca <_vfiprintf_r+0x202>
 800e2be:	89ab      	ldrh	r3, [r5, #12]
 800e2c0:	059a      	lsls	r2, r3, #22
 800e2c2:	d402      	bmi.n	800e2ca <_vfiprintf_r+0x202>
 800e2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2c6:	f7fd fab8 	bl	800b83a <__retarget_lock_release_recursive>
 800e2ca:	89ab      	ldrh	r3, [r5, #12]
 800e2cc:	065b      	lsls	r3, r3, #25
 800e2ce:	f53f af1d 	bmi.w	800e10c <_vfiprintf_r+0x44>
 800e2d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2d4:	e71c      	b.n	800e110 <_vfiprintf_r+0x48>
 800e2d6:	ab03      	add	r3, sp, #12
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	462a      	mov	r2, r5
 800e2dc:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <_vfiprintf_r+0x22c>)
 800e2de:	a904      	add	r1, sp, #16
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f7fc fdd5 	bl	800ae90 <_printf_i>
 800e2e6:	e7e4      	b.n	800e2b2 <_vfiprintf_r+0x1ea>
 800e2e8:	0800f3f9 	.word	0x0800f3f9
 800e2ec:	0800f403 	.word	0x0800f403
 800e2f0:	0800a949 	.word	0x0800a949
 800e2f4:	0800e0a3 	.word	0x0800e0a3
 800e2f8:	0800f3ff 	.word	0x0800f3ff

0800e2fc <__sflush_r>:
 800e2fc:	898a      	ldrh	r2, [r1, #12]
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	4605      	mov	r5, r0
 800e304:	0710      	lsls	r0, r2, #28
 800e306:	460c      	mov	r4, r1
 800e308:	d458      	bmi.n	800e3bc <__sflush_r+0xc0>
 800e30a:	684b      	ldr	r3, [r1, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dc05      	bgt.n	800e31c <__sflush_r+0x20>
 800e310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e312:	2b00      	cmp	r3, #0
 800e314:	dc02      	bgt.n	800e31c <__sflush_r+0x20>
 800e316:	2000      	movs	r0, #0
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e31e:	2e00      	cmp	r6, #0
 800e320:	d0f9      	beq.n	800e316 <__sflush_r+0x1a>
 800e322:	2300      	movs	r3, #0
 800e324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e328:	682f      	ldr	r7, [r5, #0]
 800e32a:	6a21      	ldr	r1, [r4, #32]
 800e32c:	602b      	str	r3, [r5, #0]
 800e32e:	d032      	beq.n	800e396 <__sflush_r+0x9a>
 800e330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	075a      	lsls	r2, r3, #29
 800e336:	d505      	bpl.n	800e344 <__sflush_r+0x48>
 800e338:	6863      	ldr	r3, [r4, #4]
 800e33a:	1ac0      	subs	r0, r0, r3
 800e33c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e33e:	b10b      	cbz	r3, 800e344 <__sflush_r+0x48>
 800e340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e342:	1ac0      	subs	r0, r0, r3
 800e344:	2300      	movs	r3, #0
 800e346:	4602      	mov	r2, r0
 800e348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e34a:	6a21      	ldr	r1, [r4, #32]
 800e34c:	4628      	mov	r0, r5
 800e34e:	47b0      	blx	r6
 800e350:	1c43      	adds	r3, r0, #1
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	d106      	bne.n	800e364 <__sflush_r+0x68>
 800e356:	6829      	ldr	r1, [r5, #0]
 800e358:	291d      	cmp	r1, #29
 800e35a:	d82b      	bhi.n	800e3b4 <__sflush_r+0xb8>
 800e35c:	4a29      	ldr	r2, [pc, #164]	; (800e404 <__sflush_r+0x108>)
 800e35e:	410a      	asrs	r2, r1
 800e360:	07d6      	lsls	r6, r2, #31
 800e362:	d427      	bmi.n	800e3b4 <__sflush_r+0xb8>
 800e364:	2200      	movs	r2, #0
 800e366:	6062      	str	r2, [r4, #4]
 800e368:	04d9      	lsls	r1, r3, #19
 800e36a:	6922      	ldr	r2, [r4, #16]
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	d504      	bpl.n	800e37a <__sflush_r+0x7e>
 800e370:	1c42      	adds	r2, r0, #1
 800e372:	d101      	bne.n	800e378 <__sflush_r+0x7c>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b903      	cbnz	r3, 800e37a <__sflush_r+0x7e>
 800e378:	6560      	str	r0, [r4, #84]	; 0x54
 800e37a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37c:	602f      	str	r7, [r5, #0]
 800e37e:	2900      	cmp	r1, #0
 800e380:	d0c9      	beq.n	800e316 <__sflush_r+0x1a>
 800e382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e386:	4299      	cmp	r1, r3
 800e388:	d002      	beq.n	800e390 <__sflush_r+0x94>
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7fe f8d6 	bl	800c53c <_free_r>
 800e390:	2000      	movs	r0, #0
 800e392:	6360      	str	r0, [r4, #52]	; 0x34
 800e394:	e7c0      	b.n	800e318 <__sflush_r+0x1c>
 800e396:	2301      	movs	r3, #1
 800e398:	4628      	mov	r0, r5
 800e39a:	47b0      	blx	r6
 800e39c:	1c41      	adds	r1, r0, #1
 800e39e:	d1c8      	bne.n	800e332 <__sflush_r+0x36>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0c5      	beq.n	800e332 <__sflush_r+0x36>
 800e3a6:	2b1d      	cmp	r3, #29
 800e3a8:	d001      	beq.n	800e3ae <__sflush_r+0xb2>
 800e3aa:	2b16      	cmp	r3, #22
 800e3ac:	d101      	bne.n	800e3b2 <__sflush_r+0xb6>
 800e3ae:	602f      	str	r7, [r5, #0]
 800e3b0:	e7b1      	b.n	800e316 <__sflush_r+0x1a>
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b8:	81a3      	strh	r3, [r4, #12]
 800e3ba:	e7ad      	b.n	800e318 <__sflush_r+0x1c>
 800e3bc:	690f      	ldr	r7, [r1, #16]
 800e3be:	2f00      	cmp	r7, #0
 800e3c0:	d0a9      	beq.n	800e316 <__sflush_r+0x1a>
 800e3c2:	0793      	lsls	r3, r2, #30
 800e3c4:	680e      	ldr	r6, [r1, #0]
 800e3c6:	bf08      	it	eq
 800e3c8:	694b      	ldreq	r3, [r1, #20]
 800e3ca:	600f      	str	r7, [r1, #0]
 800e3cc:	bf18      	it	ne
 800e3ce:	2300      	movne	r3, #0
 800e3d0:	eba6 0807 	sub.w	r8, r6, r7
 800e3d4:	608b      	str	r3, [r1, #8]
 800e3d6:	f1b8 0f00 	cmp.w	r8, #0
 800e3da:	dd9c      	ble.n	800e316 <__sflush_r+0x1a>
 800e3dc:	6a21      	ldr	r1, [r4, #32]
 800e3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3e0:	4643      	mov	r3, r8
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b0      	blx	r6
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	dc06      	bgt.n	800e3fa <__sflush_r+0xfe>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f8:	e78e      	b.n	800e318 <__sflush_r+0x1c>
 800e3fa:	4407      	add	r7, r0
 800e3fc:	eba8 0800 	sub.w	r8, r8, r0
 800e400:	e7e9      	b.n	800e3d6 <__sflush_r+0xda>
 800e402:	bf00      	nop
 800e404:	dfbffffe 	.word	0xdfbffffe

0800e408 <_fflush_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	690b      	ldr	r3, [r1, #16]
 800e40c:	4605      	mov	r5, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b913      	cbnz	r3, 800e418 <_fflush_r+0x10>
 800e412:	2500      	movs	r5, #0
 800e414:	4628      	mov	r0, r5
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	b118      	cbz	r0, 800e422 <_fflush_r+0x1a>
 800e41a:	6a03      	ldr	r3, [r0, #32]
 800e41c:	b90b      	cbnz	r3, 800e422 <_fflush_r+0x1a>
 800e41e:	f7fd f8e3 	bl	800b5e8 <__sinit>
 800e422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d0f3      	beq.n	800e412 <_fflush_r+0xa>
 800e42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e42c:	07d0      	lsls	r0, r2, #31
 800e42e:	d404      	bmi.n	800e43a <_fflush_r+0x32>
 800e430:	0599      	lsls	r1, r3, #22
 800e432:	d402      	bmi.n	800e43a <_fflush_r+0x32>
 800e434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e436:	f7fd f9ff 	bl	800b838 <__retarget_lock_acquire_recursive>
 800e43a:	4628      	mov	r0, r5
 800e43c:	4621      	mov	r1, r4
 800e43e:	f7ff ff5d 	bl	800e2fc <__sflush_r>
 800e442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e444:	07da      	lsls	r2, r3, #31
 800e446:	4605      	mov	r5, r0
 800e448:	d4e4      	bmi.n	800e414 <_fflush_r+0xc>
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	059b      	lsls	r3, r3, #22
 800e44e:	d4e1      	bmi.n	800e414 <_fflush_r+0xc>
 800e450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e452:	f7fd f9f2 	bl	800b83a <__retarget_lock_release_recursive>
 800e456:	e7dd      	b.n	800e414 <_fflush_r+0xc>

0800e458 <__swbuf_r>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	460e      	mov	r6, r1
 800e45c:	4614      	mov	r4, r2
 800e45e:	4605      	mov	r5, r0
 800e460:	b118      	cbz	r0, 800e46a <__swbuf_r+0x12>
 800e462:	6a03      	ldr	r3, [r0, #32]
 800e464:	b90b      	cbnz	r3, 800e46a <__swbuf_r+0x12>
 800e466:	f7fd f8bf 	bl	800b5e8 <__sinit>
 800e46a:	69a3      	ldr	r3, [r4, #24]
 800e46c:	60a3      	str	r3, [r4, #8]
 800e46e:	89a3      	ldrh	r3, [r4, #12]
 800e470:	071a      	lsls	r2, r3, #28
 800e472:	d525      	bpl.n	800e4c0 <__swbuf_r+0x68>
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	b31b      	cbz	r3, 800e4c0 <__swbuf_r+0x68>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	6922      	ldr	r2, [r4, #16]
 800e47c:	1a98      	subs	r0, r3, r2
 800e47e:	6963      	ldr	r3, [r4, #20]
 800e480:	b2f6      	uxtb	r6, r6
 800e482:	4283      	cmp	r3, r0
 800e484:	4637      	mov	r7, r6
 800e486:	dc04      	bgt.n	800e492 <__swbuf_r+0x3a>
 800e488:	4621      	mov	r1, r4
 800e48a:	4628      	mov	r0, r5
 800e48c:	f7ff ffbc 	bl	800e408 <_fflush_r>
 800e490:	b9e0      	cbnz	r0, 800e4cc <__swbuf_r+0x74>
 800e492:	68a3      	ldr	r3, [r4, #8]
 800e494:	3b01      	subs	r3, #1
 800e496:	60a3      	str	r3, [r4, #8]
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	6022      	str	r2, [r4, #0]
 800e49e:	701e      	strb	r6, [r3, #0]
 800e4a0:	6962      	ldr	r2, [r4, #20]
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d004      	beq.n	800e4b2 <__swbuf_r+0x5a>
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	07db      	lsls	r3, r3, #31
 800e4ac:	d506      	bpl.n	800e4bc <__swbuf_r+0x64>
 800e4ae:	2e0a      	cmp	r6, #10
 800e4b0:	d104      	bne.n	800e4bc <__swbuf_r+0x64>
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f7ff ffa7 	bl	800e408 <_fflush_r>
 800e4ba:	b938      	cbnz	r0, 800e4cc <__swbuf_r+0x74>
 800e4bc:	4638      	mov	r0, r7
 800e4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f000 f806 	bl	800e4d4 <__swsetup_r>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d0d5      	beq.n	800e478 <__swbuf_r+0x20>
 800e4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800e4d0:	e7f4      	b.n	800e4bc <__swbuf_r+0x64>
	...

0800e4d4 <__swsetup_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4b2a      	ldr	r3, [pc, #168]	; (800e580 <__swsetup_r+0xac>)
 800e4d8:	4605      	mov	r5, r0
 800e4da:	6818      	ldr	r0, [r3, #0]
 800e4dc:	460c      	mov	r4, r1
 800e4de:	b118      	cbz	r0, 800e4e8 <__swsetup_r+0x14>
 800e4e0:	6a03      	ldr	r3, [r0, #32]
 800e4e2:	b90b      	cbnz	r3, 800e4e8 <__swsetup_r+0x14>
 800e4e4:	f7fd f880 	bl	800b5e8 <__sinit>
 800e4e8:	89a3      	ldrh	r3, [r4, #12]
 800e4ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4ee:	0718      	lsls	r0, r3, #28
 800e4f0:	d422      	bmi.n	800e538 <__swsetup_r+0x64>
 800e4f2:	06d9      	lsls	r1, r3, #27
 800e4f4:	d407      	bmi.n	800e506 <__swsetup_r+0x32>
 800e4f6:	2309      	movs	r3, #9
 800e4f8:	602b      	str	r3, [r5, #0]
 800e4fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	f04f 30ff 	mov.w	r0, #4294967295
 800e504:	e034      	b.n	800e570 <__swsetup_r+0x9c>
 800e506:	0758      	lsls	r0, r3, #29
 800e508:	d512      	bpl.n	800e530 <__swsetup_r+0x5c>
 800e50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e50c:	b141      	cbz	r1, 800e520 <__swsetup_r+0x4c>
 800e50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e512:	4299      	cmp	r1, r3
 800e514:	d002      	beq.n	800e51c <__swsetup_r+0x48>
 800e516:	4628      	mov	r0, r5
 800e518:	f7fe f810 	bl	800c53c <_free_r>
 800e51c:	2300      	movs	r3, #0
 800e51e:	6363      	str	r3, [r4, #52]	; 0x34
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	2300      	movs	r3, #0
 800e52a:	6063      	str	r3, [r4, #4]
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	f043 0308 	orr.w	r3, r3, #8
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	6923      	ldr	r3, [r4, #16]
 800e53a:	b94b      	cbnz	r3, 800e550 <__swsetup_r+0x7c>
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e546:	d003      	beq.n	800e550 <__swsetup_r+0x7c>
 800e548:	4621      	mov	r1, r4
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 fc7e 	bl	800ee4c <__smakebuf_r>
 800e550:	89a0      	ldrh	r0, [r4, #12]
 800e552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e556:	f010 0301 	ands.w	r3, r0, #1
 800e55a:	d00a      	beq.n	800e572 <__swsetup_r+0x9e>
 800e55c:	2300      	movs	r3, #0
 800e55e:	60a3      	str	r3, [r4, #8]
 800e560:	6963      	ldr	r3, [r4, #20]
 800e562:	425b      	negs	r3, r3
 800e564:	61a3      	str	r3, [r4, #24]
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	b943      	cbnz	r3, 800e57c <__swsetup_r+0xa8>
 800e56a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e56e:	d1c4      	bne.n	800e4fa <__swsetup_r+0x26>
 800e570:	bd38      	pop	{r3, r4, r5, pc}
 800e572:	0781      	lsls	r1, r0, #30
 800e574:	bf58      	it	pl
 800e576:	6963      	ldrpl	r3, [r4, #20]
 800e578:	60a3      	str	r3, [r4, #8]
 800e57a:	e7f4      	b.n	800e566 <__swsetup_r+0x92>
 800e57c:	2000      	movs	r0, #0
 800e57e:	e7f7      	b.n	800e570 <__swsetup_r+0x9c>
 800e580:	20000164 	.word	0x20000164

0800e584 <memmove>:
 800e584:	4288      	cmp	r0, r1
 800e586:	b510      	push	{r4, lr}
 800e588:	eb01 0402 	add.w	r4, r1, r2
 800e58c:	d902      	bls.n	800e594 <memmove+0x10>
 800e58e:	4284      	cmp	r4, r0
 800e590:	4623      	mov	r3, r4
 800e592:	d807      	bhi.n	800e5a4 <memmove+0x20>
 800e594:	1e43      	subs	r3, r0, #1
 800e596:	42a1      	cmp	r1, r4
 800e598:	d008      	beq.n	800e5ac <memmove+0x28>
 800e59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e59e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5a2:	e7f8      	b.n	800e596 <memmove+0x12>
 800e5a4:	4402      	add	r2, r0
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	428a      	cmp	r2, r1
 800e5aa:	d100      	bne.n	800e5ae <memmove+0x2a>
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5b6:	e7f7      	b.n	800e5a8 <memmove+0x24>

0800e5b8 <strncmp>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	b16a      	cbz	r2, 800e5d8 <strncmp+0x20>
 800e5bc:	3901      	subs	r1, #1
 800e5be:	1884      	adds	r4, r0, r2
 800e5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d103      	bne.n	800e5d4 <strncmp+0x1c>
 800e5cc:	42a0      	cmp	r0, r4
 800e5ce:	d001      	beq.n	800e5d4 <strncmp+0x1c>
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d1f5      	bne.n	800e5c0 <strncmp+0x8>
 800e5d4:	1ad0      	subs	r0, r2, r3
 800e5d6:	bd10      	pop	{r4, pc}
 800e5d8:	4610      	mov	r0, r2
 800e5da:	e7fc      	b.n	800e5d6 <strncmp+0x1e>

0800e5dc <_sbrk_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d06      	ldr	r5, [pc, #24]	; (800e5f8 <_sbrk_r+0x1c>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	f7f3 f9ee 	bl	80019c8 <_sbrk>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_sbrk_r+0x1a>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_sbrk_r+0x1a>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	2000218c 	.word	0x2000218c

0800e5fc <memcpy>:
 800e5fc:	440a      	add	r2, r1
 800e5fe:	4291      	cmp	r1, r2
 800e600:	f100 33ff 	add.w	r3, r0, #4294967295
 800e604:	d100      	bne.n	800e608 <memcpy+0xc>
 800e606:	4770      	bx	lr
 800e608:	b510      	push	{r4, lr}
 800e60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e612:	4291      	cmp	r1, r2
 800e614:	d1f9      	bne.n	800e60a <memcpy+0xe>
 800e616:	bd10      	pop	{r4, pc}

0800e618 <nan>:
 800e618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e620 <nan+0x8>
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	00000000 	.word	0x00000000
 800e624:	7ff80000 	.word	0x7ff80000

0800e628 <__assert_func>:
 800e628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e62a:	4614      	mov	r4, r2
 800e62c:	461a      	mov	r2, r3
 800e62e:	4b09      	ldr	r3, [pc, #36]	; (800e654 <__assert_func+0x2c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4605      	mov	r5, r0
 800e634:	68d8      	ldr	r0, [r3, #12]
 800e636:	b14c      	cbz	r4, 800e64c <__assert_func+0x24>
 800e638:	4b07      	ldr	r3, [pc, #28]	; (800e658 <__assert_func+0x30>)
 800e63a:	9100      	str	r1, [sp, #0]
 800e63c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e640:	4906      	ldr	r1, [pc, #24]	; (800e65c <__assert_func+0x34>)
 800e642:	462b      	mov	r3, r5
 800e644:	f000 fbca 	bl	800eddc <fiprintf>
 800e648:	f000 fc5e 	bl	800ef08 <abort>
 800e64c:	4b04      	ldr	r3, [pc, #16]	; (800e660 <__assert_func+0x38>)
 800e64e:	461c      	mov	r4, r3
 800e650:	e7f3      	b.n	800e63a <__assert_func+0x12>
 800e652:	bf00      	nop
 800e654:	20000164 	.word	0x20000164
 800e658:	0800f412 	.word	0x0800f412
 800e65c:	0800f41f 	.word	0x0800f41f
 800e660:	0800f44d 	.word	0x0800f44d

0800e664 <_calloc_r>:
 800e664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e666:	fba1 2402 	umull	r2, r4, r1, r2
 800e66a:	b94c      	cbnz	r4, 800e680 <_calloc_r+0x1c>
 800e66c:	4611      	mov	r1, r2
 800e66e:	9201      	str	r2, [sp, #4]
 800e670:	f7fd ffd8 	bl	800c624 <_malloc_r>
 800e674:	9a01      	ldr	r2, [sp, #4]
 800e676:	4605      	mov	r5, r0
 800e678:	b930      	cbnz	r0, 800e688 <_calloc_r+0x24>
 800e67a:	4628      	mov	r0, r5
 800e67c:	b003      	add	sp, #12
 800e67e:	bd30      	pop	{r4, r5, pc}
 800e680:	220c      	movs	r2, #12
 800e682:	6002      	str	r2, [r0, #0]
 800e684:	2500      	movs	r5, #0
 800e686:	e7f8      	b.n	800e67a <_calloc_r+0x16>
 800e688:	4621      	mov	r1, r4
 800e68a:	f7fd f858 	bl	800b73e <memset>
 800e68e:	e7f4      	b.n	800e67a <_calloc_r+0x16>

0800e690 <rshift>:
 800e690:	6903      	ldr	r3, [r0, #16]
 800e692:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e69a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e69e:	f100 0414 	add.w	r4, r0, #20
 800e6a2:	dd45      	ble.n	800e730 <rshift+0xa0>
 800e6a4:	f011 011f 	ands.w	r1, r1, #31
 800e6a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6b0:	d10c      	bne.n	800e6cc <rshift+0x3c>
 800e6b2:	f100 0710 	add.w	r7, r0, #16
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	42b1      	cmp	r1, r6
 800e6ba:	d334      	bcc.n	800e726 <rshift+0x96>
 800e6bc:	1a9b      	subs	r3, r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	1eea      	subs	r2, r5, #3
 800e6c2:	4296      	cmp	r6, r2
 800e6c4:	bf38      	it	cc
 800e6c6:	2300      	movcc	r3, #0
 800e6c8:	4423      	add	r3, r4
 800e6ca:	e015      	b.n	800e6f8 <rshift+0x68>
 800e6cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6d0:	f1c1 0820 	rsb	r8, r1, #32
 800e6d4:	40cf      	lsrs	r7, r1
 800e6d6:	f105 0e04 	add.w	lr, r5, #4
 800e6da:	46a1      	mov	r9, r4
 800e6dc:	4576      	cmp	r6, lr
 800e6de:	46f4      	mov	ip, lr
 800e6e0:	d815      	bhi.n	800e70e <rshift+0x7e>
 800e6e2:	1a9a      	subs	r2, r3, r2
 800e6e4:	0092      	lsls	r2, r2, #2
 800e6e6:	3a04      	subs	r2, #4
 800e6e8:	3501      	adds	r5, #1
 800e6ea:	42ae      	cmp	r6, r5
 800e6ec:	bf38      	it	cc
 800e6ee:	2200      	movcc	r2, #0
 800e6f0:	18a3      	adds	r3, r4, r2
 800e6f2:	50a7      	str	r7, [r4, r2]
 800e6f4:	b107      	cbz	r7, 800e6f8 <rshift+0x68>
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	1b1a      	subs	r2, r3, r4
 800e6fa:	42a3      	cmp	r3, r4
 800e6fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e700:	bf08      	it	eq
 800e702:	2300      	moveq	r3, #0
 800e704:	6102      	str	r2, [r0, #16]
 800e706:	bf08      	it	eq
 800e708:	6143      	streq	r3, [r0, #20]
 800e70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e70e:	f8dc c000 	ldr.w	ip, [ip]
 800e712:	fa0c fc08 	lsl.w	ip, ip, r8
 800e716:	ea4c 0707 	orr.w	r7, ip, r7
 800e71a:	f849 7b04 	str.w	r7, [r9], #4
 800e71e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e722:	40cf      	lsrs	r7, r1
 800e724:	e7da      	b.n	800e6dc <rshift+0x4c>
 800e726:	f851 cb04 	ldr.w	ip, [r1], #4
 800e72a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e72e:	e7c3      	b.n	800e6b8 <rshift+0x28>
 800e730:	4623      	mov	r3, r4
 800e732:	e7e1      	b.n	800e6f8 <rshift+0x68>

0800e734 <__hexdig_fun>:
 800e734:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e738:	2b09      	cmp	r3, #9
 800e73a:	d802      	bhi.n	800e742 <__hexdig_fun+0xe>
 800e73c:	3820      	subs	r0, #32
 800e73e:	b2c0      	uxtb	r0, r0
 800e740:	4770      	bx	lr
 800e742:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e746:	2b05      	cmp	r3, #5
 800e748:	d801      	bhi.n	800e74e <__hexdig_fun+0x1a>
 800e74a:	3847      	subs	r0, #71	; 0x47
 800e74c:	e7f7      	b.n	800e73e <__hexdig_fun+0xa>
 800e74e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e752:	2b05      	cmp	r3, #5
 800e754:	d801      	bhi.n	800e75a <__hexdig_fun+0x26>
 800e756:	3827      	subs	r0, #39	; 0x27
 800e758:	e7f1      	b.n	800e73e <__hexdig_fun+0xa>
 800e75a:	2000      	movs	r0, #0
 800e75c:	4770      	bx	lr
	...

0800e760 <__gethex>:
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	4617      	mov	r7, r2
 800e766:	680a      	ldr	r2, [r1, #0]
 800e768:	b085      	sub	sp, #20
 800e76a:	f102 0b02 	add.w	fp, r2, #2
 800e76e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e772:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e776:	4681      	mov	r9, r0
 800e778:	468a      	mov	sl, r1
 800e77a:	9302      	str	r3, [sp, #8]
 800e77c:	32fe      	adds	r2, #254	; 0xfe
 800e77e:	eb02 030b 	add.w	r3, r2, fp
 800e782:	46d8      	mov	r8, fp
 800e784:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	2830      	cmp	r0, #48	; 0x30
 800e78c:	d0f7      	beq.n	800e77e <__gethex+0x1e>
 800e78e:	f7ff ffd1 	bl	800e734 <__hexdig_fun>
 800e792:	4604      	mov	r4, r0
 800e794:	2800      	cmp	r0, #0
 800e796:	d138      	bne.n	800e80a <__gethex+0xaa>
 800e798:	49a7      	ldr	r1, [pc, #668]	; (800ea38 <__gethex+0x2d8>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	4640      	mov	r0, r8
 800e79e:	f7ff ff0b 	bl	800e5b8 <strncmp>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d169      	bne.n	800e87c <__gethex+0x11c>
 800e7a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e7ac:	465d      	mov	r5, fp
 800e7ae:	f7ff ffc1 	bl	800e734 <__hexdig_fun>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d064      	beq.n	800e880 <__gethex+0x120>
 800e7b6:	465a      	mov	r2, fp
 800e7b8:	7810      	ldrb	r0, [r2, #0]
 800e7ba:	2830      	cmp	r0, #48	; 0x30
 800e7bc:	4690      	mov	r8, r2
 800e7be:	f102 0201 	add.w	r2, r2, #1
 800e7c2:	d0f9      	beq.n	800e7b8 <__gethex+0x58>
 800e7c4:	f7ff ffb6 	bl	800e734 <__hexdig_fun>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	fab0 f480 	clz	r4, r0
 800e7ce:	0964      	lsrs	r4, r4, #5
 800e7d0:	465e      	mov	r6, fp
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	4615      	mov	r5, r2
 800e7d8:	3201      	adds	r2, #1
 800e7da:	7828      	ldrb	r0, [r5, #0]
 800e7dc:	f7ff ffaa 	bl	800e734 <__hexdig_fun>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d1f8      	bne.n	800e7d6 <__gethex+0x76>
 800e7e4:	4994      	ldr	r1, [pc, #592]	; (800ea38 <__gethex+0x2d8>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fee5 	bl	800e5b8 <strncmp>
 800e7ee:	b978      	cbnz	r0, 800e810 <__gethex+0xb0>
 800e7f0:	b946      	cbnz	r6, 800e804 <__gethex+0xa4>
 800e7f2:	1c6e      	adds	r6, r5, #1
 800e7f4:	4632      	mov	r2, r6
 800e7f6:	4615      	mov	r5, r2
 800e7f8:	3201      	adds	r2, #1
 800e7fa:	7828      	ldrb	r0, [r5, #0]
 800e7fc:	f7ff ff9a 	bl	800e734 <__hexdig_fun>
 800e800:	2800      	cmp	r0, #0
 800e802:	d1f8      	bne.n	800e7f6 <__gethex+0x96>
 800e804:	1b73      	subs	r3, r6, r5
 800e806:	009e      	lsls	r6, r3, #2
 800e808:	e004      	b.n	800e814 <__gethex+0xb4>
 800e80a:	2400      	movs	r4, #0
 800e80c:	4626      	mov	r6, r4
 800e80e:	e7e1      	b.n	800e7d4 <__gethex+0x74>
 800e810:	2e00      	cmp	r6, #0
 800e812:	d1f7      	bne.n	800e804 <__gethex+0xa4>
 800e814:	782b      	ldrb	r3, [r5, #0]
 800e816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e81a:	2b50      	cmp	r3, #80	; 0x50
 800e81c:	d13d      	bne.n	800e89a <__gethex+0x13a>
 800e81e:	786b      	ldrb	r3, [r5, #1]
 800e820:	2b2b      	cmp	r3, #43	; 0x2b
 800e822:	d02f      	beq.n	800e884 <__gethex+0x124>
 800e824:	2b2d      	cmp	r3, #45	; 0x2d
 800e826:	d031      	beq.n	800e88c <__gethex+0x12c>
 800e828:	1c69      	adds	r1, r5, #1
 800e82a:	f04f 0b00 	mov.w	fp, #0
 800e82e:	7808      	ldrb	r0, [r1, #0]
 800e830:	f7ff ff80 	bl	800e734 <__hexdig_fun>
 800e834:	1e42      	subs	r2, r0, #1
 800e836:	b2d2      	uxtb	r2, r2
 800e838:	2a18      	cmp	r2, #24
 800e83a:	d82e      	bhi.n	800e89a <__gethex+0x13a>
 800e83c:	f1a0 0210 	sub.w	r2, r0, #16
 800e840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e844:	f7ff ff76 	bl	800e734 <__hexdig_fun>
 800e848:	f100 3cff 	add.w	ip, r0, #4294967295
 800e84c:	fa5f fc8c 	uxtb.w	ip, ip
 800e850:	f1bc 0f18 	cmp.w	ip, #24
 800e854:	d91d      	bls.n	800e892 <__gethex+0x132>
 800e856:	f1bb 0f00 	cmp.w	fp, #0
 800e85a:	d000      	beq.n	800e85e <__gethex+0xfe>
 800e85c:	4252      	negs	r2, r2
 800e85e:	4416      	add	r6, r2
 800e860:	f8ca 1000 	str.w	r1, [sl]
 800e864:	b1dc      	cbz	r4, 800e89e <__gethex+0x13e>
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	bf14      	ite	ne
 800e86c:	f04f 0800 	movne.w	r8, #0
 800e870:	f04f 0806 	moveq.w	r8, #6
 800e874:	4640      	mov	r0, r8
 800e876:	b005      	add	sp, #20
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	4645      	mov	r5, r8
 800e87e:	4626      	mov	r6, r4
 800e880:	2401      	movs	r4, #1
 800e882:	e7c7      	b.n	800e814 <__gethex+0xb4>
 800e884:	f04f 0b00 	mov.w	fp, #0
 800e888:	1ca9      	adds	r1, r5, #2
 800e88a:	e7d0      	b.n	800e82e <__gethex+0xce>
 800e88c:	f04f 0b01 	mov.w	fp, #1
 800e890:	e7fa      	b.n	800e888 <__gethex+0x128>
 800e892:	230a      	movs	r3, #10
 800e894:	fb03 0002 	mla	r0, r3, r2, r0
 800e898:	e7d0      	b.n	800e83c <__gethex+0xdc>
 800e89a:	4629      	mov	r1, r5
 800e89c:	e7e0      	b.n	800e860 <__gethex+0x100>
 800e89e:	eba5 0308 	sub.w	r3, r5, r8
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	2b07      	cmp	r3, #7
 800e8a8:	dc0a      	bgt.n	800e8c0 <__gethex+0x160>
 800e8aa:	4648      	mov	r0, r9
 800e8ac:	f7fd ff46 	bl	800c73c <_Balloc>
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	b940      	cbnz	r0, 800e8c6 <__gethex+0x166>
 800e8b4:	4b61      	ldr	r3, [pc, #388]	; (800ea3c <__gethex+0x2dc>)
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	21e4      	movs	r1, #228	; 0xe4
 800e8ba:	4861      	ldr	r0, [pc, #388]	; (800ea40 <__gethex+0x2e0>)
 800e8bc:	f7ff feb4 	bl	800e628 <__assert_func>
 800e8c0:	3101      	adds	r1, #1
 800e8c2:	105b      	asrs	r3, r3, #1
 800e8c4:	e7ef      	b.n	800e8a6 <__gethex+0x146>
 800e8c6:	f100 0a14 	add.w	sl, r0, #20
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	495a      	ldr	r1, [pc, #360]	; (800ea38 <__gethex+0x2d8>)
 800e8ce:	f8cd a004 	str.w	sl, [sp, #4]
 800e8d2:	469b      	mov	fp, r3
 800e8d4:	45a8      	cmp	r8, r5
 800e8d6:	d342      	bcc.n	800e95e <__gethex+0x1fe>
 800e8d8:	9801      	ldr	r0, [sp, #4]
 800e8da:	f840 bb04 	str.w	fp, [r0], #4
 800e8de:	eba0 000a 	sub.w	r0, r0, sl
 800e8e2:	1080      	asrs	r0, r0, #2
 800e8e4:	6120      	str	r0, [r4, #16]
 800e8e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e8ea:	4658      	mov	r0, fp
 800e8ec:	f7fe f818 	bl	800c920 <__hi0bits>
 800e8f0:	683d      	ldr	r5, [r7, #0]
 800e8f2:	eba8 0000 	sub.w	r0, r8, r0
 800e8f6:	42a8      	cmp	r0, r5
 800e8f8:	dd59      	ble.n	800e9ae <__gethex+0x24e>
 800e8fa:	eba0 0805 	sub.w	r8, r0, r5
 800e8fe:	4641      	mov	r1, r8
 800e900:	4620      	mov	r0, r4
 800e902:	f7fe fba7 	bl	800d054 <__any_on>
 800e906:	4683      	mov	fp, r0
 800e908:	b1b8      	cbz	r0, 800e93a <__gethex+0x1da>
 800e90a:	f108 33ff 	add.w	r3, r8, #4294967295
 800e90e:	1159      	asrs	r1, r3, #5
 800e910:	f003 021f 	and.w	r2, r3, #31
 800e914:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e918:	f04f 0b01 	mov.w	fp, #1
 800e91c:	fa0b f202 	lsl.w	r2, fp, r2
 800e920:	420a      	tst	r2, r1
 800e922:	d00a      	beq.n	800e93a <__gethex+0x1da>
 800e924:	455b      	cmp	r3, fp
 800e926:	dd06      	ble.n	800e936 <__gethex+0x1d6>
 800e928:	f1a8 0102 	sub.w	r1, r8, #2
 800e92c:	4620      	mov	r0, r4
 800e92e:	f7fe fb91 	bl	800d054 <__any_on>
 800e932:	2800      	cmp	r0, #0
 800e934:	d138      	bne.n	800e9a8 <__gethex+0x248>
 800e936:	f04f 0b02 	mov.w	fp, #2
 800e93a:	4641      	mov	r1, r8
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7ff fea7 	bl	800e690 <rshift>
 800e942:	4446      	add	r6, r8
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	42b3      	cmp	r3, r6
 800e948:	da41      	bge.n	800e9ce <__gethex+0x26e>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4648      	mov	r0, r9
 800e94e:	f7fd ff35 	bl	800c7bc <_Bfree>
 800e952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e954:	2300      	movs	r3, #0
 800e956:	6013      	str	r3, [r2, #0]
 800e958:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e95c:	e78a      	b.n	800e874 <__gethex+0x114>
 800e95e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e962:	2a2e      	cmp	r2, #46	; 0x2e
 800e964:	d014      	beq.n	800e990 <__gethex+0x230>
 800e966:	2b20      	cmp	r3, #32
 800e968:	d106      	bne.n	800e978 <__gethex+0x218>
 800e96a:	9b01      	ldr	r3, [sp, #4]
 800e96c:	f843 bb04 	str.w	fp, [r3], #4
 800e970:	f04f 0b00 	mov.w	fp, #0
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	465b      	mov	r3, fp
 800e978:	7828      	ldrb	r0, [r5, #0]
 800e97a:	9303      	str	r3, [sp, #12]
 800e97c:	f7ff feda 	bl	800e734 <__hexdig_fun>
 800e980:	9b03      	ldr	r3, [sp, #12]
 800e982:	f000 000f 	and.w	r0, r0, #15
 800e986:	4098      	lsls	r0, r3
 800e988:	ea4b 0b00 	orr.w	fp, fp, r0
 800e98c:	3304      	adds	r3, #4
 800e98e:	e7a1      	b.n	800e8d4 <__gethex+0x174>
 800e990:	45a8      	cmp	r8, r5
 800e992:	d8e8      	bhi.n	800e966 <__gethex+0x206>
 800e994:	2201      	movs	r2, #1
 800e996:	4628      	mov	r0, r5
 800e998:	9303      	str	r3, [sp, #12]
 800e99a:	f7ff fe0d 	bl	800e5b8 <strncmp>
 800e99e:	4926      	ldr	r1, [pc, #152]	; (800ea38 <__gethex+0x2d8>)
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d1df      	bne.n	800e966 <__gethex+0x206>
 800e9a6:	e795      	b.n	800e8d4 <__gethex+0x174>
 800e9a8:	f04f 0b03 	mov.w	fp, #3
 800e9ac:	e7c5      	b.n	800e93a <__gethex+0x1da>
 800e9ae:	da0b      	bge.n	800e9c8 <__gethex+0x268>
 800e9b0:	eba5 0800 	sub.w	r8, r5, r0
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4642      	mov	r2, r8
 800e9b8:	4648      	mov	r0, r9
 800e9ba:	f7fe f919 	bl	800cbf0 <__lshift>
 800e9be:	eba6 0608 	sub.w	r6, r6, r8
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	f100 0a14 	add.w	sl, r0, #20
 800e9c8:	f04f 0b00 	mov.w	fp, #0
 800e9cc:	e7ba      	b.n	800e944 <__gethex+0x1e4>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	42b3      	cmp	r3, r6
 800e9d2:	dd73      	ble.n	800eabc <__gethex+0x35c>
 800e9d4:	1b9e      	subs	r6, r3, r6
 800e9d6:	42b5      	cmp	r5, r6
 800e9d8:	dc34      	bgt.n	800ea44 <__gethex+0x2e4>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d023      	beq.n	800ea28 <__gethex+0x2c8>
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d025      	beq.n	800ea30 <__gethex+0x2d0>
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d115      	bne.n	800ea14 <__gethex+0x2b4>
 800e9e8:	42b5      	cmp	r5, r6
 800e9ea:	d113      	bne.n	800ea14 <__gethex+0x2b4>
 800e9ec:	2d01      	cmp	r5, #1
 800e9ee:	d10b      	bne.n	800ea08 <__gethex+0x2a8>
 800e9f0:	9a02      	ldr	r2, [sp, #8]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	f8ca 3000 	str.w	r3, [sl]
 800e9fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea00:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ea04:	601c      	str	r4, [r3, #0]
 800ea06:	e735      	b.n	800e874 <__gethex+0x114>
 800ea08:	1e69      	subs	r1, r5, #1
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f7fe fb22 	bl	800d054 <__any_on>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d1ed      	bne.n	800e9f0 <__gethex+0x290>
 800ea14:	4621      	mov	r1, r4
 800ea16:	4648      	mov	r0, r9
 800ea18:	f7fd fed0 	bl	800c7bc <_Bfree>
 800ea1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea1e:	2300      	movs	r3, #0
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ea26:	e725      	b.n	800e874 <__gethex+0x114>
 800ea28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1f2      	bne.n	800ea14 <__gethex+0x2b4>
 800ea2e:	e7df      	b.n	800e9f0 <__gethex+0x290>
 800ea30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1dc      	bne.n	800e9f0 <__gethex+0x290>
 800ea36:	e7ed      	b.n	800ea14 <__gethex+0x2b4>
 800ea38:	0800f2a4 	.word	0x0800f2a4
 800ea3c:	0800f139 	.word	0x0800f139
 800ea40:	0800f44e 	.word	0x0800f44e
 800ea44:	f106 38ff 	add.w	r8, r6, #4294967295
 800ea48:	f1bb 0f00 	cmp.w	fp, #0
 800ea4c:	d133      	bne.n	800eab6 <__gethex+0x356>
 800ea4e:	f1b8 0f00 	cmp.w	r8, #0
 800ea52:	d004      	beq.n	800ea5e <__gethex+0x2fe>
 800ea54:	4641      	mov	r1, r8
 800ea56:	4620      	mov	r0, r4
 800ea58:	f7fe fafc 	bl	800d054 <__any_on>
 800ea5c:	4683      	mov	fp, r0
 800ea5e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ea62:	2301      	movs	r3, #1
 800ea64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ea68:	f008 081f 	and.w	r8, r8, #31
 800ea6c:	fa03 f308 	lsl.w	r3, r3, r8
 800ea70:	4213      	tst	r3, r2
 800ea72:	4631      	mov	r1, r6
 800ea74:	4620      	mov	r0, r4
 800ea76:	bf18      	it	ne
 800ea78:	f04b 0b02 	orrne.w	fp, fp, #2
 800ea7c:	1bad      	subs	r5, r5, r6
 800ea7e:	f7ff fe07 	bl	800e690 <rshift>
 800ea82:	687e      	ldr	r6, [r7, #4]
 800ea84:	f04f 0802 	mov.w	r8, #2
 800ea88:	f1bb 0f00 	cmp.w	fp, #0
 800ea8c:	d04a      	beq.n	800eb24 <__gethex+0x3c4>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d016      	beq.n	800eac2 <__gethex+0x362>
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d018      	beq.n	800eaca <__gethex+0x36a>
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d109      	bne.n	800eab0 <__gethex+0x350>
 800ea9c:	f01b 0f02 	tst.w	fp, #2
 800eaa0:	d006      	beq.n	800eab0 <__gethex+0x350>
 800eaa2:	f8da 3000 	ldr.w	r3, [sl]
 800eaa6:	ea4b 0b03 	orr.w	fp, fp, r3
 800eaaa:	f01b 0f01 	tst.w	fp, #1
 800eaae:	d10f      	bne.n	800ead0 <__gethex+0x370>
 800eab0:	f048 0810 	orr.w	r8, r8, #16
 800eab4:	e036      	b.n	800eb24 <__gethex+0x3c4>
 800eab6:	f04f 0b01 	mov.w	fp, #1
 800eaba:	e7d0      	b.n	800ea5e <__gethex+0x2fe>
 800eabc:	f04f 0801 	mov.w	r8, #1
 800eac0:	e7e2      	b.n	800ea88 <__gethex+0x328>
 800eac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eac4:	f1c3 0301 	rsb	r3, r3, #1
 800eac8:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0ef      	beq.n	800eab0 <__gethex+0x350>
 800ead0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ead4:	f104 0214 	add.w	r2, r4, #20
 800ead8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800eae2:	2300      	movs	r3, #0
 800eae4:	4694      	mov	ip, r2
 800eae6:	f852 1b04 	ldr.w	r1, [r2], #4
 800eaea:	f1b1 3fff 	cmp.w	r1, #4294967295
 800eaee:	d01e      	beq.n	800eb2e <__gethex+0x3ce>
 800eaf0:	3101      	adds	r1, #1
 800eaf2:	f8cc 1000 	str.w	r1, [ip]
 800eaf6:	f1b8 0f02 	cmp.w	r8, #2
 800eafa:	f104 0214 	add.w	r2, r4, #20
 800eafe:	d13d      	bne.n	800eb7c <__gethex+0x41c>
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	3b01      	subs	r3, #1
 800eb04:	42ab      	cmp	r3, r5
 800eb06:	d10b      	bne.n	800eb20 <__gethex+0x3c0>
 800eb08:	1169      	asrs	r1, r5, #5
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	f005 051f 	and.w	r5, r5, #31
 800eb10:	fa03 f505 	lsl.w	r5, r3, r5
 800eb14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb18:	421d      	tst	r5, r3
 800eb1a:	bf18      	it	ne
 800eb1c:	f04f 0801 	movne.w	r8, #1
 800eb20:	f048 0820 	orr.w	r8, r8, #32
 800eb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb26:	601c      	str	r4, [r3, #0]
 800eb28:	9b02      	ldr	r3, [sp, #8]
 800eb2a:	601e      	str	r6, [r3, #0]
 800eb2c:	e6a2      	b.n	800e874 <__gethex+0x114>
 800eb2e:	4290      	cmp	r0, r2
 800eb30:	f842 3c04 	str.w	r3, [r2, #-4]
 800eb34:	d8d6      	bhi.n	800eae4 <__gethex+0x384>
 800eb36:	68a2      	ldr	r2, [r4, #8]
 800eb38:	4593      	cmp	fp, r2
 800eb3a:	db17      	blt.n	800eb6c <__gethex+0x40c>
 800eb3c:	6861      	ldr	r1, [r4, #4]
 800eb3e:	4648      	mov	r0, r9
 800eb40:	3101      	adds	r1, #1
 800eb42:	f7fd fdfb 	bl	800c73c <_Balloc>
 800eb46:	4682      	mov	sl, r0
 800eb48:	b918      	cbnz	r0, 800eb52 <__gethex+0x3f2>
 800eb4a:	4b1b      	ldr	r3, [pc, #108]	; (800ebb8 <__gethex+0x458>)
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	2184      	movs	r1, #132	; 0x84
 800eb50:	e6b3      	b.n	800e8ba <__gethex+0x15a>
 800eb52:	6922      	ldr	r2, [r4, #16]
 800eb54:	3202      	adds	r2, #2
 800eb56:	f104 010c 	add.w	r1, r4, #12
 800eb5a:	0092      	lsls	r2, r2, #2
 800eb5c:	300c      	adds	r0, #12
 800eb5e:	f7ff fd4d 	bl	800e5fc <memcpy>
 800eb62:	4621      	mov	r1, r4
 800eb64:	4648      	mov	r0, r9
 800eb66:	f7fd fe29 	bl	800c7bc <_Bfree>
 800eb6a:	4654      	mov	r4, sl
 800eb6c:	6922      	ldr	r2, [r4, #16]
 800eb6e:	1c51      	adds	r1, r2, #1
 800eb70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eb74:	6121      	str	r1, [r4, #16]
 800eb76:	2101      	movs	r1, #1
 800eb78:	6151      	str	r1, [r2, #20]
 800eb7a:	e7bc      	b.n	800eaf6 <__gethex+0x396>
 800eb7c:	6921      	ldr	r1, [r4, #16]
 800eb7e:	4559      	cmp	r1, fp
 800eb80:	dd0b      	ble.n	800eb9a <__gethex+0x43a>
 800eb82:	2101      	movs	r1, #1
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7ff fd83 	bl	800e690 <rshift>
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	3601      	adds	r6, #1
 800eb8e:	42b3      	cmp	r3, r6
 800eb90:	f6ff aedb 	blt.w	800e94a <__gethex+0x1ea>
 800eb94:	f04f 0801 	mov.w	r8, #1
 800eb98:	e7c2      	b.n	800eb20 <__gethex+0x3c0>
 800eb9a:	f015 051f 	ands.w	r5, r5, #31
 800eb9e:	d0f9      	beq.n	800eb94 <__gethex+0x434>
 800eba0:	9b01      	ldr	r3, [sp, #4]
 800eba2:	441a      	add	r2, r3
 800eba4:	f1c5 0520 	rsb	r5, r5, #32
 800eba8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ebac:	f7fd feb8 	bl	800c920 <__hi0bits>
 800ebb0:	42a8      	cmp	r0, r5
 800ebb2:	dbe6      	blt.n	800eb82 <__gethex+0x422>
 800ebb4:	e7ee      	b.n	800eb94 <__gethex+0x434>
 800ebb6:	bf00      	nop
 800ebb8:	0800f139 	.word	0x0800f139

0800ebbc <L_shift>:
 800ebbc:	f1c2 0208 	rsb	r2, r2, #8
 800ebc0:	0092      	lsls	r2, r2, #2
 800ebc2:	b570      	push	{r4, r5, r6, lr}
 800ebc4:	f1c2 0620 	rsb	r6, r2, #32
 800ebc8:	6843      	ldr	r3, [r0, #4]
 800ebca:	6804      	ldr	r4, [r0, #0]
 800ebcc:	fa03 f506 	lsl.w	r5, r3, r6
 800ebd0:	432c      	orrs	r4, r5
 800ebd2:	40d3      	lsrs	r3, r2
 800ebd4:	6004      	str	r4, [r0, #0]
 800ebd6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebda:	4288      	cmp	r0, r1
 800ebdc:	d3f4      	bcc.n	800ebc8 <L_shift+0xc>
 800ebde:	bd70      	pop	{r4, r5, r6, pc}

0800ebe0 <__match>:
 800ebe0:	b530      	push	{r4, r5, lr}
 800ebe2:	6803      	ldr	r3, [r0, #0]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebea:	b914      	cbnz	r4, 800ebf2 <__match+0x12>
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	2001      	movs	r0, #1
 800ebf0:	bd30      	pop	{r4, r5, pc}
 800ebf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ebfa:	2d19      	cmp	r5, #25
 800ebfc:	bf98      	it	ls
 800ebfe:	3220      	addls	r2, #32
 800ec00:	42a2      	cmp	r2, r4
 800ec02:	d0f0      	beq.n	800ebe6 <__match+0x6>
 800ec04:	2000      	movs	r0, #0
 800ec06:	e7f3      	b.n	800ebf0 <__match+0x10>

0800ec08 <__hexnan>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	680b      	ldr	r3, [r1, #0]
 800ec0e:	6801      	ldr	r1, [r0, #0]
 800ec10:	115e      	asrs	r6, r3, #5
 800ec12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec16:	f013 031f 	ands.w	r3, r3, #31
 800ec1a:	b087      	sub	sp, #28
 800ec1c:	bf18      	it	ne
 800ec1e:	3604      	addne	r6, #4
 800ec20:	2500      	movs	r5, #0
 800ec22:	1f37      	subs	r7, r6, #4
 800ec24:	4682      	mov	sl, r0
 800ec26:	4690      	mov	r8, r2
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec2e:	46b9      	mov	r9, r7
 800ec30:	463c      	mov	r4, r7
 800ec32:	9502      	str	r5, [sp, #8]
 800ec34:	46ab      	mov	fp, r5
 800ec36:	784a      	ldrb	r2, [r1, #1]
 800ec38:	1c4b      	adds	r3, r1, #1
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	b342      	cbz	r2, 800ec90 <__hexnan+0x88>
 800ec3e:	4610      	mov	r0, r2
 800ec40:	9105      	str	r1, [sp, #20]
 800ec42:	9204      	str	r2, [sp, #16]
 800ec44:	f7ff fd76 	bl	800e734 <__hexdig_fun>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d14f      	bne.n	800ecec <__hexnan+0xe4>
 800ec4c:	9a04      	ldr	r2, [sp, #16]
 800ec4e:	9905      	ldr	r1, [sp, #20]
 800ec50:	2a20      	cmp	r2, #32
 800ec52:	d818      	bhi.n	800ec86 <__hexnan+0x7e>
 800ec54:	9b02      	ldr	r3, [sp, #8]
 800ec56:	459b      	cmp	fp, r3
 800ec58:	dd13      	ble.n	800ec82 <__hexnan+0x7a>
 800ec5a:	454c      	cmp	r4, r9
 800ec5c:	d206      	bcs.n	800ec6c <__hexnan+0x64>
 800ec5e:	2d07      	cmp	r5, #7
 800ec60:	dc04      	bgt.n	800ec6c <__hexnan+0x64>
 800ec62:	462a      	mov	r2, r5
 800ec64:	4649      	mov	r1, r9
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7ff ffa8 	bl	800ebbc <L_shift>
 800ec6c:	4544      	cmp	r4, r8
 800ec6e:	d950      	bls.n	800ed12 <__hexnan+0x10a>
 800ec70:	2300      	movs	r3, #0
 800ec72:	f1a4 0904 	sub.w	r9, r4, #4
 800ec76:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ec7e:	464c      	mov	r4, r9
 800ec80:	461d      	mov	r5, r3
 800ec82:	9903      	ldr	r1, [sp, #12]
 800ec84:	e7d7      	b.n	800ec36 <__hexnan+0x2e>
 800ec86:	2a29      	cmp	r2, #41	; 0x29
 800ec88:	d155      	bne.n	800ed36 <__hexnan+0x12e>
 800ec8a:	3102      	adds	r1, #2
 800ec8c:	f8ca 1000 	str.w	r1, [sl]
 800ec90:	f1bb 0f00 	cmp.w	fp, #0
 800ec94:	d04f      	beq.n	800ed36 <__hexnan+0x12e>
 800ec96:	454c      	cmp	r4, r9
 800ec98:	d206      	bcs.n	800eca8 <__hexnan+0xa0>
 800ec9a:	2d07      	cmp	r5, #7
 800ec9c:	dc04      	bgt.n	800eca8 <__hexnan+0xa0>
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4649      	mov	r1, r9
 800eca2:	4620      	mov	r0, r4
 800eca4:	f7ff ff8a 	bl	800ebbc <L_shift>
 800eca8:	4544      	cmp	r4, r8
 800ecaa:	d934      	bls.n	800ed16 <__hexnan+0x10e>
 800ecac:	f1a8 0204 	sub.w	r2, r8, #4
 800ecb0:	4623      	mov	r3, r4
 800ecb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecba:	429f      	cmp	r7, r3
 800ecbc:	d2f9      	bcs.n	800ecb2 <__hexnan+0xaa>
 800ecbe:	1b3b      	subs	r3, r7, r4
 800ecc0:	f023 0303 	bic.w	r3, r3, #3
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	3e03      	subs	r6, #3
 800ecc8:	3401      	adds	r4, #1
 800ecca:	42a6      	cmp	r6, r4
 800eccc:	bf38      	it	cc
 800ecce:	2304      	movcc	r3, #4
 800ecd0:	4443      	add	r3, r8
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f843 2b04 	str.w	r2, [r3], #4
 800ecd8:	429f      	cmp	r7, r3
 800ecda:	d2fb      	bcs.n	800ecd4 <__hexnan+0xcc>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	b91b      	cbnz	r3, 800ece8 <__hexnan+0xe0>
 800ece0:	4547      	cmp	r7, r8
 800ece2:	d126      	bne.n	800ed32 <__hexnan+0x12a>
 800ece4:	2301      	movs	r3, #1
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	2005      	movs	r0, #5
 800ecea:	e025      	b.n	800ed38 <__hexnan+0x130>
 800ecec:	3501      	adds	r5, #1
 800ecee:	2d08      	cmp	r5, #8
 800ecf0:	f10b 0b01 	add.w	fp, fp, #1
 800ecf4:	dd06      	ble.n	800ed04 <__hexnan+0xfc>
 800ecf6:	4544      	cmp	r4, r8
 800ecf8:	d9c3      	bls.n	800ec82 <__hexnan+0x7a>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed00:	2501      	movs	r5, #1
 800ed02:	3c04      	subs	r4, #4
 800ed04:	6822      	ldr	r2, [r4, #0]
 800ed06:	f000 000f 	and.w	r0, r0, #15
 800ed0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ed0e:	6020      	str	r0, [r4, #0]
 800ed10:	e7b7      	b.n	800ec82 <__hexnan+0x7a>
 800ed12:	2508      	movs	r5, #8
 800ed14:	e7b5      	b.n	800ec82 <__hexnan+0x7a>
 800ed16:	9b01      	ldr	r3, [sp, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d0df      	beq.n	800ecdc <__hexnan+0xd4>
 800ed1c:	f1c3 0320 	rsb	r3, r3, #32
 800ed20:	f04f 32ff 	mov.w	r2, #4294967295
 800ed24:	40da      	lsrs	r2, r3
 800ed26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ed2a:	4013      	ands	r3, r2
 800ed2c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ed30:	e7d4      	b.n	800ecdc <__hexnan+0xd4>
 800ed32:	3f04      	subs	r7, #4
 800ed34:	e7d2      	b.n	800ecdc <__hexnan+0xd4>
 800ed36:	2004      	movs	r0, #4
 800ed38:	b007      	add	sp, #28
 800ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed3e <__ascii_mbtowc>:
 800ed3e:	b082      	sub	sp, #8
 800ed40:	b901      	cbnz	r1, 800ed44 <__ascii_mbtowc+0x6>
 800ed42:	a901      	add	r1, sp, #4
 800ed44:	b142      	cbz	r2, 800ed58 <__ascii_mbtowc+0x1a>
 800ed46:	b14b      	cbz	r3, 800ed5c <__ascii_mbtowc+0x1e>
 800ed48:	7813      	ldrb	r3, [r2, #0]
 800ed4a:	600b      	str	r3, [r1, #0]
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	1e10      	subs	r0, r2, #0
 800ed50:	bf18      	it	ne
 800ed52:	2001      	movne	r0, #1
 800ed54:	b002      	add	sp, #8
 800ed56:	4770      	bx	lr
 800ed58:	4610      	mov	r0, r2
 800ed5a:	e7fb      	b.n	800ed54 <__ascii_mbtowc+0x16>
 800ed5c:	f06f 0001 	mvn.w	r0, #1
 800ed60:	e7f8      	b.n	800ed54 <__ascii_mbtowc+0x16>

0800ed62 <_realloc_r>:
 800ed62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed66:	4680      	mov	r8, r0
 800ed68:	4614      	mov	r4, r2
 800ed6a:	460e      	mov	r6, r1
 800ed6c:	b921      	cbnz	r1, 800ed78 <_realloc_r+0x16>
 800ed6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed72:	4611      	mov	r1, r2
 800ed74:	f7fd bc56 	b.w	800c624 <_malloc_r>
 800ed78:	b92a      	cbnz	r2, 800ed86 <_realloc_r+0x24>
 800ed7a:	f7fd fbdf 	bl	800c53c <_free_r>
 800ed7e:	4625      	mov	r5, r4
 800ed80:	4628      	mov	r0, r5
 800ed82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed86:	f000 f8c6 	bl	800ef16 <_malloc_usable_size_r>
 800ed8a:	4284      	cmp	r4, r0
 800ed8c:	4607      	mov	r7, r0
 800ed8e:	d802      	bhi.n	800ed96 <_realloc_r+0x34>
 800ed90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed94:	d812      	bhi.n	800edbc <_realloc_r+0x5a>
 800ed96:	4621      	mov	r1, r4
 800ed98:	4640      	mov	r0, r8
 800ed9a:	f7fd fc43 	bl	800c624 <_malloc_r>
 800ed9e:	4605      	mov	r5, r0
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d0ed      	beq.n	800ed80 <_realloc_r+0x1e>
 800eda4:	42bc      	cmp	r4, r7
 800eda6:	4622      	mov	r2, r4
 800eda8:	4631      	mov	r1, r6
 800edaa:	bf28      	it	cs
 800edac:	463a      	movcs	r2, r7
 800edae:	f7ff fc25 	bl	800e5fc <memcpy>
 800edb2:	4631      	mov	r1, r6
 800edb4:	4640      	mov	r0, r8
 800edb6:	f7fd fbc1 	bl	800c53c <_free_r>
 800edba:	e7e1      	b.n	800ed80 <_realloc_r+0x1e>
 800edbc:	4635      	mov	r5, r6
 800edbe:	e7df      	b.n	800ed80 <_realloc_r+0x1e>

0800edc0 <__ascii_wctomb>:
 800edc0:	b149      	cbz	r1, 800edd6 <__ascii_wctomb+0x16>
 800edc2:	2aff      	cmp	r2, #255	; 0xff
 800edc4:	bf85      	ittet	hi
 800edc6:	238a      	movhi	r3, #138	; 0x8a
 800edc8:	6003      	strhi	r3, [r0, #0]
 800edca:	700a      	strbls	r2, [r1, #0]
 800edcc:	f04f 30ff 	movhi.w	r0, #4294967295
 800edd0:	bf98      	it	ls
 800edd2:	2001      	movls	r0, #1
 800edd4:	4770      	bx	lr
 800edd6:	4608      	mov	r0, r1
 800edd8:	4770      	bx	lr
	...

0800eddc <fiprintf>:
 800eddc:	b40e      	push	{r1, r2, r3}
 800edde:	b503      	push	{r0, r1, lr}
 800ede0:	4601      	mov	r1, r0
 800ede2:	ab03      	add	r3, sp, #12
 800ede4:	4805      	ldr	r0, [pc, #20]	; (800edfc <fiprintf+0x20>)
 800ede6:	f853 2b04 	ldr.w	r2, [r3], #4
 800edea:	6800      	ldr	r0, [r0, #0]
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	f7ff f96b 	bl	800e0c8 <_vfiprintf_r>
 800edf2:	b002      	add	sp, #8
 800edf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edf8:	b003      	add	sp, #12
 800edfa:	4770      	bx	lr
 800edfc:	20000164 	.word	0x20000164

0800ee00 <__swhatbuf_r>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	460c      	mov	r4, r1
 800ee04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee08:	2900      	cmp	r1, #0
 800ee0a:	b096      	sub	sp, #88	; 0x58
 800ee0c:	4615      	mov	r5, r2
 800ee0e:	461e      	mov	r6, r3
 800ee10:	da0d      	bge.n	800ee2e <__swhatbuf_r+0x2e>
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ee18:	f04f 0100 	mov.w	r1, #0
 800ee1c:	bf0c      	ite	eq
 800ee1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ee22:	2340      	movne	r3, #64	; 0x40
 800ee24:	2000      	movs	r0, #0
 800ee26:	6031      	str	r1, [r6, #0]
 800ee28:	602b      	str	r3, [r5, #0]
 800ee2a:	b016      	add	sp, #88	; 0x58
 800ee2c:	bd70      	pop	{r4, r5, r6, pc}
 800ee2e:	466a      	mov	r2, sp
 800ee30:	f000 f848 	bl	800eec4 <_fstat_r>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	dbec      	blt.n	800ee12 <__swhatbuf_r+0x12>
 800ee38:	9901      	ldr	r1, [sp, #4]
 800ee3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ee3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ee42:	4259      	negs	r1, r3
 800ee44:	4159      	adcs	r1, r3
 800ee46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee4a:	e7eb      	b.n	800ee24 <__swhatbuf_r+0x24>

0800ee4c <__smakebuf_r>:
 800ee4c:	898b      	ldrh	r3, [r1, #12]
 800ee4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee50:	079d      	lsls	r5, r3, #30
 800ee52:	4606      	mov	r6, r0
 800ee54:	460c      	mov	r4, r1
 800ee56:	d507      	bpl.n	800ee68 <__smakebuf_r+0x1c>
 800ee58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	6123      	str	r3, [r4, #16]
 800ee60:	2301      	movs	r3, #1
 800ee62:	6163      	str	r3, [r4, #20]
 800ee64:	b002      	add	sp, #8
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	ab01      	add	r3, sp, #4
 800ee6a:	466a      	mov	r2, sp
 800ee6c:	f7ff ffc8 	bl	800ee00 <__swhatbuf_r>
 800ee70:	9900      	ldr	r1, [sp, #0]
 800ee72:	4605      	mov	r5, r0
 800ee74:	4630      	mov	r0, r6
 800ee76:	f7fd fbd5 	bl	800c624 <_malloc_r>
 800ee7a:	b948      	cbnz	r0, 800ee90 <__smakebuf_r+0x44>
 800ee7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee80:	059a      	lsls	r2, r3, #22
 800ee82:	d4ef      	bmi.n	800ee64 <__smakebuf_r+0x18>
 800ee84:	f023 0303 	bic.w	r3, r3, #3
 800ee88:	f043 0302 	orr.w	r3, r3, #2
 800ee8c:	81a3      	strh	r3, [r4, #12]
 800ee8e:	e7e3      	b.n	800ee58 <__smakebuf_r+0xc>
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	6020      	str	r0, [r4, #0]
 800ee94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee98:	81a3      	strh	r3, [r4, #12]
 800ee9a:	9b00      	ldr	r3, [sp, #0]
 800ee9c:	6163      	str	r3, [r4, #20]
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	6120      	str	r0, [r4, #16]
 800eea2:	b15b      	cbz	r3, 800eebc <__smakebuf_r+0x70>
 800eea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f000 f81d 	bl	800eee8 <_isatty_r>
 800eeae:	b128      	cbz	r0, 800eebc <__smakebuf_r+0x70>
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	f023 0303 	bic.w	r3, r3, #3
 800eeb6:	f043 0301 	orr.w	r3, r3, #1
 800eeba:	81a3      	strh	r3, [r4, #12]
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	431d      	orrs	r5, r3
 800eec0:	81a5      	strh	r5, [r4, #12]
 800eec2:	e7cf      	b.n	800ee64 <__smakebuf_r+0x18>

0800eec4 <_fstat_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	4d07      	ldr	r5, [pc, #28]	; (800eee4 <_fstat_r+0x20>)
 800eec8:	2300      	movs	r3, #0
 800eeca:	4604      	mov	r4, r0
 800eecc:	4608      	mov	r0, r1
 800eece:	4611      	mov	r1, r2
 800eed0:	602b      	str	r3, [r5, #0]
 800eed2:	f7f2 fd50 	bl	8001976 <_fstat>
 800eed6:	1c43      	adds	r3, r0, #1
 800eed8:	d102      	bne.n	800eee0 <_fstat_r+0x1c>
 800eeda:	682b      	ldr	r3, [r5, #0]
 800eedc:	b103      	cbz	r3, 800eee0 <_fstat_r+0x1c>
 800eede:	6023      	str	r3, [r4, #0]
 800eee0:	bd38      	pop	{r3, r4, r5, pc}
 800eee2:	bf00      	nop
 800eee4:	2000218c 	.word	0x2000218c

0800eee8 <_isatty_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4d06      	ldr	r5, [pc, #24]	; (800ef04 <_isatty_r+0x1c>)
 800eeec:	2300      	movs	r3, #0
 800eeee:	4604      	mov	r4, r0
 800eef0:	4608      	mov	r0, r1
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	f7f2 fd4f 	bl	8001996 <_isatty>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_isatty_r+0x1a>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_isatty_r+0x1a>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	2000218c 	.word	0x2000218c

0800ef08 <abort>:
 800ef08:	b508      	push	{r3, lr}
 800ef0a:	2006      	movs	r0, #6
 800ef0c:	f000 f834 	bl	800ef78 <raise>
 800ef10:	2001      	movs	r0, #1
 800ef12:	f7f2 fcfd 	bl	8001910 <_exit>

0800ef16 <_malloc_usable_size_r>:
 800ef16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef1a:	1f18      	subs	r0, r3, #4
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	bfbc      	itt	lt
 800ef20:	580b      	ldrlt	r3, [r1, r0]
 800ef22:	18c0      	addlt	r0, r0, r3
 800ef24:	4770      	bx	lr

0800ef26 <_raise_r>:
 800ef26:	291f      	cmp	r1, #31
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	460d      	mov	r5, r1
 800ef2e:	d904      	bls.n	800ef3a <_raise_r+0x14>
 800ef30:	2316      	movs	r3, #22
 800ef32:	6003      	str	r3, [r0, #0]
 800ef34:	f04f 30ff 	mov.w	r0, #4294967295
 800ef38:	bd38      	pop	{r3, r4, r5, pc}
 800ef3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ef3c:	b112      	cbz	r2, 800ef44 <_raise_r+0x1e>
 800ef3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef42:	b94b      	cbnz	r3, 800ef58 <_raise_r+0x32>
 800ef44:	4620      	mov	r0, r4
 800ef46:	f000 f831 	bl	800efac <_getpid_r>
 800ef4a:	462a      	mov	r2, r5
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	4620      	mov	r0, r4
 800ef50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef54:	f000 b818 	b.w	800ef88 <_kill_r>
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d00a      	beq.n	800ef72 <_raise_r+0x4c>
 800ef5c:	1c59      	adds	r1, r3, #1
 800ef5e:	d103      	bne.n	800ef68 <_raise_r+0x42>
 800ef60:	2316      	movs	r3, #22
 800ef62:	6003      	str	r3, [r0, #0]
 800ef64:	2001      	movs	r0, #1
 800ef66:	e7e7      	b.n	800ef38 <_raise_r+0x12>
 800ef68:	2400      	movs	r4, #0
 800ef6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef6e:	4628      	mov	r0, r5
 800ef70:	4798      	blx	r3
 800ef72:	2000      	movs	r0, #0
 800ef74:	e7e0      	b.n	800ef38 <_raise_r+0x12>
	...

0800ef78 <raise>:
 800ef78:	4b02      	ldr	r3, [pc, #8]	; (800ef84 <raise+0xc>)
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	6818      	ldr	r0, [r3, #0]
 800ef7e:	f7ff bfd2 	b.w	800ef26 <_raise_r>
 800ef82:	bf00      	nop
 800ef84:	20000164 	.word	0x20000164

0800ef88 <_kill_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4d07      	ldr	r5, [pc, #28]	; (800efa8 <_kill_r+0x20>)
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4604      	mov	r4, r0
 800ef90:	4608      	mov	r0, r1
 800ef92:	4611      	mov	r1, r2
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	f7f2 fcab 	bl	80018f0 <_kill>
 800ef9a:	1c43      	adds	r3, r0, #1
 800ef9c:	d102      	bne.n	800efa4 <_kill_r+0x1c>
 800ef9e:	682b      	ldr	r3, [r5, #0]
 800efa0:	b103      	cbz	r3, 800efa4 <_kill_r+0x1c>
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	bd38      	pop	{r3, r4, r5, pc}
 800efa6:	bf00      	nop
 800efa8:	2000218c 	.word	0x2000218c

0800efac <_getpid_r>:
 800efac:	f7f2 bc98 	b.w	80018e0 <_getpid>

0800efb0 <_init>:
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	bf00      	nop
 800efb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb6:	bc08      	pop	{r3}
 800efb8:	469e      	mov	lr, r3
 800efba:	4770      	bx	lr

0800efbc <_fini>:
 800efbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efbe:	bf00      	nop
 800efc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc2:	bc08      	pop	{r3}
 800efc4:	469e      	mov	lr, r3
 800efc6:	4770      	bx	lr
