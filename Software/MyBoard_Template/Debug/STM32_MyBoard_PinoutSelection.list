
STM32_MyBoard_PinoutSelection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009064  08009064  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800906c  0800906c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  2000010c  08009180  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20001e80  08009180  00021e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001baa3  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045a7  00000000  00000000  0003bc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  000401d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001170  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a7ed  00000000  00000000  00042a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1dc  00000000  00000000  0006d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2ee0  00000000  00000000  0008c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e38  00000000  00000000  0017f2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fb0 	.word	0x08008fb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08008fb0 	.word	0x08008fb0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x60>)
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MX_CAN1_Init+0x64>)
 80004dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_CAN1_Init+0x60>)
 80004e0:	2220      	movs	r2, #32
 80004e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MX_CAN1_Init+0x60>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_CAN1_Init+0x60>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x60>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x60>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x60>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x60>)
 8000522:	f000 fc5b 	bl	8000ddc <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800052c:	f000 fa08 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000128 	.word	0x20000128
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <HAL_CAN_MspInit+0x7c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d128      	bne.n	80005b0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_CAN_MspInit+0x80>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <HAL_CAN_MspInit+0x80>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_CAN_MspInit+0x80>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_CAN_MspInit+0x80>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_CAN_MspInit+0x80>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_CAN_MspInit+0x80>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800058e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_CAN_MspInit+0x84>)
 80005ac:	f000 fe24 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40006400 	.word	0x40006400
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <MX_GPIO_Init+0x118>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a3f      	ldr	r2, [pc, #252]	; (80006dc <MX_GPIO_Init+0x118>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <MX_GPIO_Init+0x118>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <MX_GPIO_Init+0x118>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a39      	ldr	r2, [pc, #228]	; (80006dc <MX_GPIO_Init+0x118>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_GPIO_Init+0x118>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_GPIO_Init+0x118>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a33      	ldr	r2, [pc, #204]	; (80006dc <MX_GPIO_Init+0x118>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <MX_GPIO_Init+0x118>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0x118>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_GPIO_Init+0x118>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0x118>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_RESET_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2111      	movs	r1, #17
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f000 ff83 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4824      	ldr	r0, [pc, #144]	; (80006e0 <MX_GPIO_Init+0x11c>)
 800064e:	f000 ff7d 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PUSHBUTTON_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	481f      	ldr	r0, [pc, #124]	; (80006e4 <MX_GPIO_Init+0x120>)
 8000668:	f000 fdc6 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FLASH_RESET_Pin|FLASH_CS_Pin;
 800066c:	2311      	movs	r3, #17
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fdb7 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480f      	ldr	r0, [pc, #60]	; (80006e0 <MX_GPIO_Init+0x11c>)
 80006a4:	f000 fda8 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80006a8:	2320      	movs	r3, #32
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <MX_GPIO_Init+0x11c>)
 80006be:	f000 fd9b 	bl	80011f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2017      	movs	r0, #23
 80006c8:	f000 fd5f 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006cc:	2017      	movs	r0, #23
 80006ce:	f000 fd78 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	48000400 	.word	0x48000400
 80006e4:	48000800 	.word	0x48000800

080006e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_I2C1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_I2C1_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <MX_I2C1_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_I2C1_Init+0x74>)
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <MX_I2C1_Init+0x74>)
 8000724:	f000 ff67 	bl	80015f6 <HAL_I2C_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800072e:	f000 f907 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_I2C1_Init+0x74>)
 8000736:	f000 fff9 	bl	800172c <HAL_I2CEx_ConfigAnalogFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 f8fe 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_I2C1_Init+0x74>)
 8000748:	f001 f83b 	bl	80017c2 <HAL_I2CEx_ConfigDigitalFilter>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f8f5 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000150 	.word	0x20000150
 8000760:	40005400 	.word	0x40005400
 8000764:	10909cec 	.word	0x10909cec

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0ac      	sub	sp, #176	; 0xb0
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2288      	movs	r2, #136	; 0x88
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f008 fbe5 	bl	8008f58 <memset>
  if(i2cHandle->Instance==I2C1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a21      	ldr	r2, [pc, #132]	; (8000818 <HAL_I2C_MspInit+0xb0>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d13a      	bne.n	800080e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800079c:	2300      	movs	r3, #0
 800079e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 f93f 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007b0:	f000 f8c6 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_I2C_MspInit+0xb4>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <HAL_I2C_MspInit+0xb4>)
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_I2C_MspInit+0xb4>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007cc:	23c0      	movs	r3, #192	; 0xc0
 80007ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	2312      	movs	r3, #18
 80007d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e4:	2304      	movs	r3, #4
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_I2C_MspInit+0xb8>)
 80007f2:	f000 fd01 	bl	80011f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_I2C_MspInit+0xb4>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_I2C_MspInit+0xb4>)
 80007fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000800:	6593      	str	r3, [r2, #88]	; 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_I2C_MspInit+0xb4>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800080e:	bf00      	nop
 8000810:	37b0      	adds	r7, #176	; 0xb0
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40005400 	.word	0x40005400
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fa3e 	bl	8000caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f825 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f7ff fec7 	bl	80005c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000836:	f7ff ff57 	bl	80006e8 <MX_I2C1_Init>
  MX_CAN1_Init();
 800083a:	f7ff fe4b 	bl	80004d4 <MX_CAN1_Init>
  MX_QUADSPI_Init();
 800083e:	f000 f885 	bl	800094c <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000842:	f000 f97d 	bl	8000b40 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000846:	f007 fd2b 	bl	80082a0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char* data = "Hello from USB\n";
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <main+0x50>)
 800084c:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fcba 	bl	80001c8 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f007 fdde 	bl	800841c <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <main+0x54>)
 8000866:	f000 fe89 	bl	800157c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f000 fa91 	bl	8000d94 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000872:	e7ec      	b.n	800084e <main+0x2a>
 8000874:	08008fc8 	.word	0x08008fc8
 8000878:	48000400 	.word	0x48000400

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	; 0x58
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2244      	movs	r2, #68	; 0x44
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fb64 	bl	8008f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a2:	f002 f99f 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008ac:	f000 f848 	bl	8000940 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b0:	f002 f97a 	bl	8002ba8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <SystemClock_Config+0xc0>)
 80008b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <SystemClock_Config+0xc0>)
 80008bc:	f023 0318 	bic.w	r3, r3, #24
 80008c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008c4:	2314      	movs	r3, #20
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008dc:	2301      	movs	r3, #1
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008e4:	2328      	movs	r3, #40	; 0x28
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e8:	2307      	movs	r3, #7
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fa95 	bl	8002e28 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000904:	f000 f81c 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2303      	movs	r3, #3
 800090e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2104      	movs	r1, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fe5d 	bl	80035e0 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800092c:	f000 f808 	bl	8000940 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000930:	f003 fb64 	bl	8003ffc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000934:	bf00      	nop
 8000936:	3758      	adds	r7, #88	; 0x58
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_QUADSPI_Init+0x48>)
 8000954:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800095e:	2201      	movs	r2, #1
 8000960:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800096a:	2201      	movs	r2, #1
 800096c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800097c:	f002 f998 	bl	8002cb0 <HAL_QSPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000986:	f7ff ffdb 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001a4 	.word	0x200001a4
 8000994:	a0001000 	.word	0xa0001000

08000998 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <HAL_QSPI_MspInit+0xb8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d145      	bne.n	8000a46 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6513      	str	r3, [r2, #80]	; 0x50
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_QSPI_MspInit+0xbc>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a12:	230a      	movs	r3, #10
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fbea 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000a24:	f640 4303 	movw	r3, #3075	; 0xc03
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a36:	230a      	movs	r3, #10
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_QSPI_MspInit+0xc0>)
 8000a42:	f000 fbd9 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	a0001000 	.word	0xa0001000
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f930 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8000afc:	2020      	movs	r0, #32
 8000afe:	f000 fd57 	bl	80015b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <OTG_FS_IRQHandler+0x10>)
 8000b0e:	f000 fff7 	bl	8001b00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20001754 	.word	0x20001754

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART2_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b84:	f003 fc1c 	bl	80043c0 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f7ff fed7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001e8 	.word	0x200001e8
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ac      	sub	sp, #176	; 0xb0
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9c9 	bl	8008f58 <memset>
  if(uartHandle->Instance==USART2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_UART_MspInit+0xb0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d13b      	bne.n	8000c48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 ff23 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be8:	f7ff feaa 	bl	8000940 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c34:	2307      	movs	r3, #7
 8000c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 fad8 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c48:	bf00      	nop
 8000c4a:	37b0      	adds	r7, #176	; 0xb0
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40021000 	.word	0x40021000

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ff5e 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f008 f96f 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fdcb 	bl	8000824 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000c9c:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 8000ca0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000ca4:	20001e80 	.word	0x20001e80

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 fa5d 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f80e 	bl	8000cdc <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fec6 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d023      	beq.n	8000d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fa69 	bl	80011de <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d809      	bhi.n	8000d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 fa33 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_InitTick+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000270 	.word	0x20000270

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000270 	.word	0x20000270

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0ed      	b.n	8000fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fb9e 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff ffb4 	bl	8000d7c <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e16:	e012      	b.n	8000e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e18:	f7ff ffb0 	bl	8000d7c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d90b      	bls.n	8000e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2205      	movs	r2, #5
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0c5      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0e5      	beq.n	8000e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0202 	bic.w	r2, r2, #2
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff ff8e 	bl	8000d7c <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e64:	f7ff ff8a 	bl	8000d7c <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d90b      	bls.n	8000e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2205      	movs	r2, #5
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e09f      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e1b      	ldrb	r3, [r3, #24]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7e5b      	ldrb	r3, [r3, #25]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e9b      	ldrb	r3, [r3, #26]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0220 	bic.w	r2, r2, #32
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7edb      	ldrb	r3, [r3, #27]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0210 	bic.w	r2, r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0210 	orr.w	r2, r2, #16
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f1b      	ldrb	r3, [r3, #28]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f5b      	ldrb	r3, [r3, #29]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	ea42 0103 	orr.w	r1, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	e17f      	b.n	8001508 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8171 	beq.w	8001502 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d118      	bne.n	80012d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	6939      	ldr	r1, [r7, #16]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ac 	beq.w	8001502 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6613      	str	r3, [r2, #96]	; 0x60
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c2:	4a5a      	ldr	r2, [pc, #360]	; (800152c <HAL_GPIO_Init+0x334>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x242>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x338>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x33c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x340>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x236>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_GPIO_Init+0x344>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x232>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_GPIO_Init+0x348>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_GPIO_Init+0x34c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x22a>
 800141e:	2306      	movs	r3, #6
 8001420:	e00c      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001422:	2307      	movs	r3, #7
 8001424:	e00a      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001426:	2305      	movs	r3, #5
 8001428:	e008      	b.n	800143c <HAL_GPIO_Init+0x244>
 800142a:	2304      	movs	r3, #4
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x244>
 800142e:	2303      	movs	r3, #3
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x244>
 800143a:	2300      	movs	r3, #0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800144c:	4937      	ldr	r1, [pc, #220]	; (800152c <HAL_GPIO_Init+0x334>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_GPIO_Init+0x350>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <HAL_GPIO_Init+0x350>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_GPIO_Init+0x350>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae78 	bne.w	8001208 <HAL_GPIO_Init+0x10>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000
 8001530:	48000400 	.word	0x48000400
 8001534:	48000800 	.word	0x48000800
 8001538:	48000c00 	.word	0x48000c00
 800153c:	48001000 	.word	0x48001000
 8001540:	48001400 	.word	0x48001400
 8001544:	48001800 	.word	0x48001800
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e002      	b.n	8001570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43d9      	mvns	r1, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	400b      	ands	r3, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f806 	bl	80015e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e08d      	b.n	8001724 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff f8a3 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2224      	movs	r2, #36	; 0x24
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001646:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001656:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	e006      	b.n	800167e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800167c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d108      	bne.n	8001698 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e007      	b.n	80016a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69d9      	ldr	r1, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b20      	cmp	r3, #32
 8001740:	d138      	bne.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800174c:	2302      	movs	r3, #2
 800174e:	e032      	b.n	80017b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	; 0x24
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800177e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d139      	bne.n	800184c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e033      	b.n	800184e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2224      	movs	r2, #36	; 0x24
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001814:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185c:	b08f      	sub	sp, #60	; 0x3c
 800185e:	af0a      	add	r7, sp, #40	; 0x28
 8001860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e116      	b.n	8001a9a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f006 ff22 	bl	80086d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fb7d 	bl	8004faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	687e      	ldr	r6, [r7, #4]
 80018b8:	466d      	mov	r5, sp
 80018ba:	f106 0410 	add.w	r4, r6, #16
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ce:	1d33      	adds	r3, r6, #4
 80018d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f003 fa8f 	bl	8004df6 <USB_CoreInit>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0d7      	b.n	8001a9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fb6b 	bl	8004fcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e04a      	b.n	8001992 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	333d      	adds	r3, #61	; 0x3d
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	b298      	uxth	r0, r3
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3356      	adds	r3, #86	; 0x56
 8001938:	4602      	mov	r2, r0
 800193a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3340      	adds	r3, #64	; 0x40
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3344      	adds	r3, #68	; 0x44
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3348      	adds	r3, #72	; 0x48
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	334c      	adds	r3, #76	; 0x4c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3af      	bcc.n	80018fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e044      	b.n	8001a2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3b5      	bcc.n	80019a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	687e      	ldr	r6, [r7, #4]
 8001a3e:	466d      	mov	r5, sp
 8001a40:	f106 0410 	add.w	r4, r6, #16
 8001a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a50:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a54:	1d33      	adds	r3, r6, #4
 8001a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a58:	6838      	ldr	r0, [r7, #0]
 8001a5a:	f003 fb03 	bl	8005064 <USB_DevInit>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e014      	b.n	8001a9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f001 f869 	bl	8002b60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fab1 	bl	8005ffa <USB_DevDisconnect>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_PCD_Start+0x1c>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e01c      	b.n	8001af8 <HAL_PCD_Start+0x56>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fa52 	bl	8004f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 fa65 	bl	8005fb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b08d      	sub	sp, #52	; 0x34
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fb23 	bl	8006162 <USB_GetMode>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 847e 	bne.w	8002420 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fa87 	bl	800603c <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8474 	beq.w	800241e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fa74 	bl	800603c <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f002 0202 	and.w	r2, r2, #2
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fa62 	bl	800603c <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d161      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0210 	bic.w	r2, r2, #16
 8001b90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	0c5b      	lsrs	r3, r3, #17
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d124      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d035      	beq.n	8001c36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6a38      	ldr	r0, [r7, #32]
 8001bde:	f004 f899 	bl	8005d14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	441a      	add	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c00:	441a      	add	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	e016      	b.n	8001c36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	0c5b      	lsrs	r3, r3, #17
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d110      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6a38      	ldr	r0, [r7, #32]
 8001c20:	f004 f878 	bl	8005d14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c30:	441a      	add	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0210 	orr.w	r2, r2, #16
 8001c44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 f9f6 	bl	800603c <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c5a:	f040 80a7 	bne.w	8001dac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 f9fb 	bl	8006062 <USB_ReadDevAllOutEpInterrupt>
 8001c6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c6e:	e099      	b.n	8001da4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 808e 	beq.w	8001d98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fa1f 	bl	80060ca <USB_ReadDevOutEPInterrupt>
 8001c8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fe7d 	bl	80029ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2308      	movs	r3, #8
 8001ccc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 feb9 	bl	8002a48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cec:	461a      	mov	r2, r3
 8001cee:	2310      	movs	r3, #16
 8001cf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d030      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d109      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	78db      	ldrb	r3, [r3, #3]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f006 fe16 	bl	8008978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d74:	461a      	mov	r2, r3
 8001d76:	2320      	movs	r3, #32
 8001d78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d90:	461a      	mov	r2, r3
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f af62 	bne.w	8001c70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 f943 	bl	800603c <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc0:	f040 80a4 	bne.w	8001f0c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 f964 	bl	8006096 <USB_ReadDevAllInEpInterrupt>
 8001dce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dd4:	e096      	b.n	8001f04 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 808b 	beq.w	8001ef8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f98a 	bl	8006106 <USB_ReadDevInEPInterrupt>
 8001df2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d020      	beq.n	8001e40 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	2201      	movs	r2, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69f9      	ldr	r1, [r7, #28]
 8001e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e1e:	4013      	ands	r3, r2
 8001e20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 fd07 	bl	800884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e56:	461a      	mov	r2, r3
 8001e58:	2308      	movs	r3, #8
 8001e5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e72:	461a      	mov	r2, r3
 8001e74:	2310      	movs	r3, #16
 8001e76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d023      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea0:	6a38      	ldr	r0, [r7, #32]
 8001ea2:	f003 fa21 	bl	80052e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3338      	adds	r3, #56	; 0x38
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	78db      	ldrb	r3, [r3, #3]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f006 fd64 	bl	800899c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fcd2 	bl	800289c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3301      	adds	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f47f af65 	bne.w	8001dd6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 f893 	bl	800603c <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f20:	d122      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f006 ff98 	bl	8008e80 <HAL_PCDEx_LPM_Callback>
 8001f50:	e002      	b.n	8001f58 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f006 fce8 	bl	8008928 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f865 	bl	800603c <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7c:	d112      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 fca4 	bl	80088dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 f847 	bl	800603c <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fb8:	d121      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001fc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f006 ff45 	bl	8008e80 <HAL_PCDEx_LPM_Callback>
 8001ff6:	e002      	b.n	8001ffe <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f006 fc6f 	bl	80088dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 f81a 	bl	800603c <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	f040 80b5 	bne.w	8002180 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2110      	movs	r1, #16
 8002030:	4618      	mov	r0, r3
 8002032:	f003 f959 	bl	80052e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203a:	e046      	b.n	80020ca <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002048:	461a      	mov	r2, r3
 800204a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800204e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	440a      	add	r2, r1
 8002066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800206a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800206e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002082:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002094:	0151      	lsls	r1, r2, #5
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	440a      	add	r2, r1
 800209a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800209e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	3301      	adds	r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3b3      	bcc.n	800203c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d016      	beq.n	800211e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002100:	f043 030b 	orr.w	r3, r3, #11
 8002104:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002116:	f043 030b 	orr.w	r3, r3, #11
 800211a:	6453      	str	r3, [r2, #68]	; 0x44
 800211c:	e015      	b.n	800214a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002130:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002134:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002144:	f043 030b 	orr.w	r3, r3, #11
 8002148:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002158:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800215c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f004 f82a 	bl	80061c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800217e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 ff59 	bl	800603c <USB_ReadInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002194:	d124      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 ffef 	bl	800617e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 f91c 	bl	80053e2 <USB_GetDevSpeed>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681c      	ldr	r4, [r3, #0]
 80021b6:	f001 fb9f 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 80021ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f002 fe43 	bl	8004e50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f006 fb67 	bl	800889e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 ff29 	bl	800603c <USB_ReadInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d10a      	bne.n	800220a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f006 fb44 	bl	8008882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 0208 	and.w	r2, r2, #8
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 ff14 	bl	800603c <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d122      	bne.n	8002264 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800222a:	2301      	movs	r3, #1
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	e014      	b.n	800225a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 faf3 	bl	800283a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	3301      	adds	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	429a      	cmp	r2, r3
 8002262:	d3e5      	bcc.n	8002230 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fee7 	bl	800603c <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002278:	d13b      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227a:	2301      	movs	r3, #1
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	e02b      	b.n	80022d8 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3340      	adds	r3, #64	; 0x40
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d115      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da12      	bge.n	80022d2 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333f      	adds	r3, #63	; 0x3f
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fab4 	bl	800283a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3ce      	bcc.n	8002280 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fea0 	bl	800603c <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d155      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e045      	b.n	800239a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12e      	bne.n	8002394 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002336:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	da2b      	bge.n	8002394 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002348:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800234c:	429a      	cmp	r2, r3
 800234e:	d121      	bne.n	8002394 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002390:	6053      	str	r3, [r2, #4]
            break;
 8002392:	e007      	b.n	80023a4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	3301      	adds	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3b4      	bcc.n	800230e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fe3f 	bl	800603c <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d10a      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f006 faf8 	bl	80089c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fe29 	bl	800603c <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d115      	bne.n	8002420 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f006 fae8 	bl	80089dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	e000      	b.n	8002420 <HAL_PCD_IRQHandler+0x920>
      return;
 800241e:	bf00      	nop
    }
  }
}
 8002420:	3734      	adds	r7, #52	; 0x34
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}

08002426 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_SetAddress+0x1a>
 800243c:	2302      	movs	r3, #2
 800243e:	e013      	b.n	8002468 <HAL_PCD_SetAddress+0x42>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd87 	bl	8005f6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	460b      	mov	r3, r1
 8002484:	803b      	strh	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800248e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da0f      	bge.n	80024b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3338      	adds	r3, #56	; 0x38
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	3304      	adds	r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	705a      	strb	r2, [r3, #1]
 80024b4:	e00f      	b.n	80024d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024e2:	883a      	ldrh	r2, [r7, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	78ba      	ldrb	r2, [r7, #2]
 80024ec:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002500:	78bb      	ldrb	r3, [r7, #2]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d102      	bne.n	800250c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_PCD_EP_Open+0xaa>
 8002516:	2302      	movs	r3, #2
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_Open+0xc8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ff79 	bl	8005420 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002536:	7afb      	ldrb	r3, [r7, #11]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da0f      	bge.n	8002574 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 020f 	and.w	r2, r3, #15
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3338      	adds	r3, #56	; 0x38
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
 8002572:	e00f      	b.n	8002594 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_PCD_EP_Close+0x6e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e00e      	b.n	80025cc <HAL_PCD_EP_Close+0x8c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 ffb7 	bl	8005530 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	460b      	mov	r3, r1
 80025e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	b2da      	uxtb	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f85d 	bl	80056e8 <USB_EPStartXfer>

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3338      	adds	r3, #56	; 0x38
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f814 	bl	80056e8 <USB_EPStartXfer>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d901      	bls.n	80026e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e04e      	b.n	8002786 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da0f      	bge.n	8002710 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	3338      	adds	r3, #56	; 0x38
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	705a      	strb	r2, [r3, #1]
 800270e:	e00d      	b.n	800272c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_PCD_EP_SetStall+0x82>
 8002748:	2302      	movs	r3, #2
 800274a:	e01c      	b.n	8002786 <HAL_PCD_EP_SetStall+0xbc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fb32 	bl	8005dc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f003 fd24 	bl	80061c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d901      	bls.n	80027ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e042      	b.n	8002832 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da0f      	bge.n	80027d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3338      	adds	r3, #56	; 0x38
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	705a      	strb	r2, [r3, #1]
 80027d2:	e00f      	b.n	80027f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_PCD_EP_ClrStall+0x86>
 8002810:	2302      	movs	r3, #2
 8002812:	e00e      	b.n	8002832 <HAL_PCD_EP_ClrStall+0xa4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fb3c 	bl	8005ea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da0c      	bge.n	8002868 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	3338      	adds	r3, #56	; 0x38
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e00c      	b.n	8002882 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 020f 	and.w	r2, r3, #15
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68f9      	ldr	r1, [r7, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f003 f95f 	bl	8005b4c <USB_EPStopXfer>
 800288e:	4603      	mov	r3, r0
 8002890:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002892:	7afb      	ldrb	r3, [r7, #11]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3338      	adds	r3, #56	; 0x38
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d901      	bls.n	80028d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e067      	b.n	80029a4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d902      	bls.n	80028f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3303      	adds	r3, #3
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028f8:	e026      	b.n	8002948 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3303      	adds	r3, #3
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68d9      	ldr	r1, [r3, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	b29b      	uxth	r3, r3
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f003 f9b8 	bl	8005ca0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	441a      	add	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	441a      	add	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	429a      	cmp	r2, r3
 800295c:	d809      	bhi.n	8002972 <PCD_WriteEmptyTxFifo+0xd6>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002966:	429a      	cmp	r2, r3
 8002968:	d203      	bcs.n	8002972 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1c3      	bne.n	80028fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	d811      	bhi.n	80029a2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	2201      	movs	r2, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	43db      	mvns	r3, r3
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800299e:	4013      	ands	r3, r2
 80029a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	333c      	adds	r3, #60	; 0x3c
 80029c4:	3304      	adds	r3, #4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <PCD_EP_OutXfrComplete_int+0x98>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d124      	bne.n	8002a2c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fe:	6093      	str	r3, [r2, #8]
 8002a00:	e01a      	b.n	8002a38 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f005 fef7 	bl	8008818 <HAL_PCD_DataOutStageCallback>
 8002a2a:	e005      	b.n	8002a38 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f005 fef0 	bl	8008818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	4f54310a 	.word	0x4f54310a

08002a48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	333c      	adds	r3, #60	; 0x3c
 8002a60:	3304      	adds	r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <PCD_EP_OutSetupPacket_int+0x64>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d90e      	bls.n	8002a9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f005 fea9 	bl	80087f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	4f54300a 	.word	0x4f54300a

08002ab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	4613      	mov	r3, r2
 8002abe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ace:	883b      	ldrh	r3, [r7, #0]
 8002ad0:	0419      	lsls	r1, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e028      	b.n	8002b30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e00d      	b.n	8002b0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	3340      	adds	r3, #64	; 0x40
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4413      	add	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3ec      	bcc.n	8002af2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b18:	883b      	ldrh	r3, [r7, #0]
 8002b1a:	0418      	lsls	r0, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4302      	orrs	r2, r0
 8002b28:	3340      	adds	r3, #64	; 0x40
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	f043 0303 	orr.w	r3, r3, #3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d130      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d038      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9b      	lsrs	r3, r3, #18
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c28:	e002      	b.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d102      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f2      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d110      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e00f      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d007      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6053      	str	r3, [r2, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40007000 	.word	0x40007000

08002cb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7fe f860 	bl	8000d7c <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e063      	b.n	8002d90 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fd fe5b 	bl	8000998 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002ce2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f858 	bl	8002d9c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2120      	movs	r1, #32
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f850 	bl	8002db8 <QSPI_WaitFlagStateUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d131      	bne.n	8002d86 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f023 0310 	bic.w	r3, r3, #16
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6852      	ldr	r2, [r2, #4]
 8002d34:	0611      	lsls	r1, r2, #24
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_QSPI_Init+0xe8>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6912      	ldr	r2, [r2, #16]
 8002d52:	0411      	lsls	r1, r2, #16
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6952      	ldr	r2, [r2, #20]
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6992      	ldr	r2, [r2, #24]
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	ffe0f8fe 	.word	0xffe0f8fe

08002d9c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002dc8:	e01a      	b.n	8002e00 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d016      	beq.n	8002e00 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fd ffd3 	bl	8000d7c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2204      	movs	r2, #4
 8002dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e00e      	b.n	8002e1e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1d6      	bne.n	8002dca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e3ca      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b97      	ldr	r3, [pc, #604]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e44:	4b94      	ldr	r3, [pc, #592]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80e4 	beq.w	8003024 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4a>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	f040 808b 	bne.w	8002f80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 8087 	bne.w	8002f80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e3a2      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x7c>
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCC_OscConfig+0x88>
 8002ea4:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d223      	bcs.n	8002efc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fd55 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e383      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f043 0308 	orr.w	r3, r3, #8
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	496d      	ldr	r1, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	4968      	ldr	r1, [pc, #416]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
 8002efa:	e025      	b.n	8002f48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4960      	ldr	r1, [pc, #384]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	495b      	ldr	r1, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fd15 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e343      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f48:	f000 fc4a 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	4950      	ldr	r1, [pc, #320]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_RCC_OscConfig+0x278>)
 8002f66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f68:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd feb5 	bl	8000cdc <HAL_InitTick>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d052      	beq.n	8003022 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	e327      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d032      	beq.n	8002fee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f88:	4b43      	ldr	r3, [pc, #268]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f94:	f7fd fef2 	bl	8000d7c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9c:	f7fd feee 	bl	8000d7c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e310      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a36      	ldr	r2, [pc, #216]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4931      	ldr	r1, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	492c      	ldr	r1, [pc, #176]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	e01a      	b.n	8003024 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ffa:	f7fd febf 	bl	8000d7c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003002:	f7fd febb 	bl	8000d7c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2dd      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x1da>
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003022:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d074      	beq.n	800311a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b08      	cmp	r3, #8
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x21a>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d10e      	bne.n	800305a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d10b      	bne.n	800305a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d064      	beq.n	8003118 <HAL_RCC_OscConfig+0x2f0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d160      	bne.n	8003118 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e2ba      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x24a>
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e026      	b.n	80030c0 <HAL_RCC_OscConfig+0x298>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307a:	d115      	bne.n	80030a8 <HAL_RCC_OscConfig+0x280>
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a05      	ldr	r2, [pc, #20]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a02      	ldr	r2, [pc, #8]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x298>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	0800901c 	.word	0x0800901c
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000004 	.word	0x20000004
 80030a8:	4ba0      	ldr	r3, [pc, #640]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a9f      	ldr	r2, [pc, #636]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b9d      	ldr	r3, [pc, #628]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a9c      	ldr	r2, [pc, #624]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fd fe58 	bl	8000d7c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fd fe54 	bl	8000d7c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e276      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e2:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x2a8>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fe44 	bl	8000d7c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fd fe40 	bl	8000d7c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e262      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d0>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d060      	beq.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x310>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d119      	bne.n	8003166 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d116      	bne.n	8003166 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003138:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x328>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e23f      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	4973      	ldr	r1, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003164:	e040      	b.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd fdff 	bl	8000d7c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fd fdfb 	bl	8000d7c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e21d      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	495f      	ldr	r1, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e018      	b.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5c      	ldr	r2, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fd fddb 	bl	8000d7c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fd fdd7 	bl	8000d7c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1f9      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03c      	beq.n	800326e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01c      	beq.n	8003236 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fc:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003202:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd fdb6 	bl	8000d7c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7fd fdb2 	bl	8000d7c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1d4      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ef      	beq.n	8003214 <HAL_RCC_OscConfig+0x3ec>
 8003234:	e01b      	b.n	800326e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323c:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fd fd99 	bl	8000d7c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7fd fd95 	bl	8000d7c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1b7      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ef      	bne.n	800324e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80a6 	beq.w	80033c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	4a26      	ldr	r2, [pc, #152]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	6593      	str	r3, [r2, #88]	; 0x58
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_OscConfig+0x508>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d118      	bne.n	80032e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCC_OscConfig+0x508>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_RCC_OscConfig+0x508>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c0:	f7fd fd5c 	bl	8000d7c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fd58 	bl	8000d7c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e17a      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_RCC_OscConfig+0x508>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <HAL_RCC_OscConfig+0x4d8>
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a0d      	ldr	r2, [pc, #52]	; (800332c <HAL_RCC_OscConfig+0x504>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fe:	e029      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d115      	bne.n	8003334 <HAL_RCC_OscConfig+0x50c>
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <HAL_RCC_OscConfig+0x504>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x504>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003328:	e014      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	4b9c      	ldr	r3, [pc, #624]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a9b      	ldr	r2, [pc, #620]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003344:	4b98      	ldr	r3, [pc, #608]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	4a97      	ldr	r2, [pc, #604]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d016      	beq.n	800338a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd fd0e 	bl	8000d7c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	e00a      	b.n	800337a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fd fd0a 	bl	8000d7c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e12a      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337a:	4b8b      	ldr	r3, [pc, #556]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ed      	beq.n	8003364 <HAL_RCC_OscConfig+0x53c>
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd fcf7 	bl	8000d7c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fd fcf3 	bl	8000d7c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e113      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a8:	4b7f      	ldr	r3, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ed      	bne.n	8003392 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	4a79      	ldr	r2, [pc, #484]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80fe 	beq.w	80035ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	f040 80d0 	bne.w	800357c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033dc:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d130      	bne.n	8003452 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	3b01      	subs	r3, #1
 80033fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d127      	bne.n	8003452 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d11f      	bne.n	8003452 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800341c:	2a07      	cmp	r2, #7
 800341e:	bf14      	ite	ne
 8003420:	2201      	movne	r2, #1
 8003422:	2200      	moveq	r2, #0
 8003424:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d109      	bne.n	8003452 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d06e      	beq.n	8003530 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d069      	beq.n	800352c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0ad      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800347a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003480:	f7fd fc7c 	bl	8000d7c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd fc78 	bl	8000d7c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e09a      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a6:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCC_OscConfig+0x784>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034b6:	3a01      	subs	r2, #1
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c0:	0212      	lsls	r2, r2, #8
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034c8:	0852      	lsrs	r2, r2, #1
 80034ca:	3a01      	subs	r2, #1
 80034cc:	0552      	lsls	r2, r2, #21
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034d4:	0852      	lsrs	r2, r2, #1
 80034d6:	3a01      	subs	r2, #1
 80034d8:	0652      	lsls	r2, r2, #25
 80034da:	4311      	orrs	r1, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034e0:	0912      	lsrs	r2, r2, #4
 80034e2:	0452      	lsls	r2, r2, #17
 80034e4:	430a      	orrs	r2, r1
 80034e6:	4930      	ldr	r1, [pc, #192]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034ec:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 80034fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003504:	f7fd fc3a 	bl	8000d7c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd fc36 	bl	8000d7c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e058      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352a:	e050      	b.n	80035ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04f      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d148      	bne.n	80035ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003554:	f7fd fc12 	bl	8000d7c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7fd fc0e 	bl	8000d7c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e030      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x734>
 800357a:	e028      	b.n	80035ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d023      	beq.n	80035ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_RCC_OscConfig+0x780>)
 8003588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd fbf5 	bl	8000d7c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003594:	e00c      	b.n	80035b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd fbf1 	bl	8000d7c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d905      	bls.n	80035b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_OscConfig+0x7b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ec      	bne.n	8003596 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_OscConfig+0x7b0>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4905      	ldr	r1, [pc, #20]	; (80035d8 <HAL_RCC_OscConfig+0x7b0>)
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_OscConfig+0x7b4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60cb      	str	r3, [r1, #12]
 80035c8:	e001      	b.n	80035ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	feeefffc 	.word	0xfeeefffc

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0e7      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b75      	ldr	r3, [pc, #468]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b72      	ldr	r3, [pc, #456]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4970      	ldr	r1, [pc, #448]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cf      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d010      	beq.n	8003652 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363c:	429a      	cmp	r2, r3
 800363e:	d908      	bls.n	8003652 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4960      	ldr	r1, [pc, #384]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04c      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0a6      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e09a      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003696:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e08e      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a6:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e086      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4943      	ldr	r1, [pc, #268]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd fb58 	bl	8000d7c <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fd fb54 	bl	8000d7c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e06e      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	492b      	ldr	r1, [pc, #172]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d210      	bcs.n	8003756 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0207 	bic.w	r2, r3, #7
 800373c:	4923      	ldr	r1, [pc, #140]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003744:	4b21      	ldr	r3, [pc, #132]	; (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e036      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4918      	ldr	r1, [pc, #96]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4910      	ldr	r1, [pc, #64]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003794:	f000 f824 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	490b      	ldr	r1, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1f4>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1fc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fd fa8f 	bl	8000cdc <HAL_InitTick>
 80037be:	4603      	mov	r3, r0
 80037c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037c2:	7afb      	ldrb	r3, [r7, #11]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	0800901c 	.word	0x0800901c
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x34>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d121      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11e      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e005      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800383c:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d102      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e004      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d101      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d134      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0xa6>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d003      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0xac>
 8003884:	e005      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003888:	617b      	str	r3, [r7, #20]
      break;
 800388a:	e005      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800388e:	617b      	str	r3, [r7, #20]
      break;
 8003890:	e002      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	617b      	str	r3, [r7, #20]
      break;
 8003896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	3301      	adds	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	fb03 f202 	mul.w	r2, r3, r2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	0e5b      	lsrs	r3, r3, #25
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	3301      	adds	r3, #1
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038d8:	69bb      	ldr	r3, [r7, #24]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08009034 	.word	0x08009034
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	017d7840 	.word	0x017d7840

080038f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	0800902c 	.word	0x0800902c

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003940:	f7ff ffda 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0adb      	lsrs	r3, r3, #11
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	0800902c 	.word	0x0800902c

08003968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003980:	f7ff f922 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8003984:	6178      	str	r0, [r7, #20]
 8003986:	e014      	b.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a0:	f7ff f912 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 80039a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d10b      	bne.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d919      	bls.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2ba0      	cmp	r3, #160	; 0xa0
 80039c4:	d902      	bls.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c6:	2302      	movs	r3, #2
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e013      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039cc:	2301      	movs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e010      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d902      	bls.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039d8:	2303      	movs	r3, #3
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e00a      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d102      	bne.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e4:	2302      	movs	r3, #2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e004      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b70      	cmp	r3, #112	; 0x70
 80039ee:	d101      	bne.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 0207 	bic.w	r2, r3, #7
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40022000 	.word	0x40022000

08003a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a30:	2300      	movs	r3, #0
 8003a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d041      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a52:	d824      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5e:	d81e      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d010      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a6a:	e018      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a6c:	4b86      	ldr	r3, [pc, #536]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a85      	ldr	r2, [pc, #532]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a78:	e015      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 facb 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8a:	e00c      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3320      	adds	r3, #32
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fbb6 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aba:	4973      	ldr	r1, [pc, #460]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac2:	e001      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d041      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003adc:	d02a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ade:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ae2:	d824      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aee:	d81e      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afa:	e018      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afc:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a61      	ldr	r2, [pc, #388]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa83 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb6e 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	74fb      	strb	r3, [r7, #19]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b3c:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4a:	494f      	ldr	r1, [pc, #316]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a0 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba8:	f7fd f8e8 	bl	8000d7c <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fd f8e4 	bl	8000d7c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d15c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a20      	ldr	r2, [pc, #128]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd f8a3 	bl	8000d7c <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd f89f 	bl	8000d7c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ec      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c7e:	e009      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c94:	7c7b      	ldrb	r3, [r7, #17]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b9e      	ldr	r3, [pc, #632]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4a9d      	ldr	r2, [pc, #628]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb2:	4b98      	ldr	r3, [pc, #608]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f023 0203 	bic.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	4994      	ldr	r1, [pc, #592]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 020c 	bic.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	498c      	ldr	r1, [pc, #560]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf6:	4b87      	ldr	r3, [pc, #540]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	4983      	ldr	r1, [pc, #524]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d18:	4b7e      	ldr	r3, [pc, #504]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	497b      	ldr	r1, [pc, #492]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3a:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	4972      	ldr	r1, [pc, #456]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5c:	4b6d      	ldr	r3, [pc, #436]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	496a      	ldr	r1, [pc, #424]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7e:	4b65      	ldr	r3, [pc, #404]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	4961      	ldr	r1, [pc, #388]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da0:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	4959      	ldr	r1, [pc, #356]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	4950      	ldr	r1, [pc, #320]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de4:	4b4b      	ldr	r3, [pc, #300]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	4948      	ldr	r1, [pc, #288]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e06:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	493f      	ldr	r1, [pc, #252]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d028      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e28:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	4937      	ldr	r1, [pc, #220]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e46:	d106      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e011      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f8d8 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e86:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	491f      	ldr	r1, [pc, #124]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb0:	60d3      	str	r3, [r2, #12]
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f8a9 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	4908      	ldr	r1, [pc, #32]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f02:	d109      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e014      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f877 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f56:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f854 	bl	800401c <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
 8003f82:	e011      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3320      	adds	r3, #32
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f935 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fee:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000

0800401c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402a:	4b75      	ldr	r3, [pc, #468]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004036:	4b72      	ldr	r3, [pc, #456]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d10d      	bne.n	8004062 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
       ||
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
       ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d047      	beq.n	80040f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	e044      	b.n	80040f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d018      	beq.n	80040a2 <RCCEx_PLLSAI1_Config+0x86>
 8004070:	2b03      	cmp	r3, #3
 8004072:	d825      	bhi.n	80040c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004074:	2b01      	cmp	r3, #1
 8004076:	d002      	beq.n	800407e <RCCEx_PLLSAI1_Config+0x62>
 8004078:	2b02      	cmp	r3, #2
 800407a:	d009      	beq.n	8004090 <RCCEx_PLLSAI1_Config+0x74>
 800407c:	e020      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800407e:	4b60      	ldr	r3, [pc, #384]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11d      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408e:	e01a      	b.n	80040c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004090:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d116      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a0:	e013      	b.n	80040ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040be:	e006      	b.n	80040ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e004      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040d6:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	430b      	orrs	r3, r1
 80040ec:	4944      	ldr	r1, [pc, #272]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d17d      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040f8:	4b41      	ldr	r3, [pc, #260]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a40      	ldr	r2, [pc, #256]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fc fe3a 	bl	8000d7c <HAL_GetTick>
 8004108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800410a:	e009      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800410c:	f7fc fe36 	bl	8000d7c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
        break;
 800411e:	e005      	b.n	800412c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004120:	4b37      	ldr	r3, [pc, #220]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ef      	bne.n	800410c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d160      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004138:	4b31      	ldr	r3, [pc, #196]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6892      	ldr	r2, [r2, #8]
 8004148:	0211      	lsls	r1, r2, #8
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	0912      	lsrs	r2, r2, #4
 8004150:	0452      	lsls	r2, r2, #17
 8004152:	430a      	orrs	r2, r1
 8004154:	492a      	ldr	r1, [pc, #168]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]
 800415a:	e027      	b.n	80041ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d112      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800416a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	0211      	lsls	r1, r2, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6912      	ldr	r2, [r2, #16]
 8004178:	0852      	lsrs	r2, r2, #1
 800417a:	3a01      	subs	r2, #1
 800417c:	0552      	lsls	r2, r2, #21
 800417e:	430a      	orrs	r2, r1
 8004180:	491f      	ldr	r1, [pc, #124]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]
 8004186:	e011      	b.n	80041ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004190:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6892      	ldr	r2, [r2, #8]
 8004198:	0211      	lsls	r1, r2, #8
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6952      	ldr	r2, [r2, #20]
 800419e:	0852      	lsrs	r2, r2, #1
 80041a0:	3a01      	subs	r2, #1
 80041a2:	0652      	lsls	r2, r2, #25
 80041a4:	430a      	orrs	r2, r1
 80041a6:	4916      	ldr	r1, [pc, #88]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fc fde0 	bl	8000d7c <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041be:	e009      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c0:	f7fc fddc 	bl	8000d7c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d902      	bls.n	80041d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	73fb      	strb	r3, [r7, #15]
          break;
 80041d2:	e005      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	4904      	ldr	r1, [pc, #16]	; (8004200 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000

08004204 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800421e:	4b67      	ldr	r3, [pc, #412]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d10d      	bne.n	800424a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
       ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004236:	4b61      	ldr	r3, [pc, #388]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
       ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d047      	beq.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e044      	b.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d018      	beq.n	800428a <RCCEx_PLLSAI2_Config+0x86>
 8004258:	2b03      	cmp	r3, #3
 800425a:	d825      	bhi.n	80042a8 <RCCEx_PLLSAI2_Config+0xa4>
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <RCCEx_PLLSAI2_Config+0x62>
 8004260:	2b02      	cmp	r3, #2
 8004262:	d009      	beq.n	8004278 <RCCEx_PLLSAI2_Config+0x74>
 8004264:	e020      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004266:	4b55      	ldr	r3, [pc, #340]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e01a      	b.n	80042ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004278:	4b50      	ldr	r3, [pc, #320]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e013      	b.n	80042b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428a:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a6:	e006      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e004      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042be:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	430b      	orrs	r3, r1
 80042d4:	4939      	ldr	r1, [pc, #228]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d167      	bne.n	80043b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a35      	ldr	r2, [pc, #212]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fc fd46 	bl	8000d7c <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f4:	f7fc fd42 	bl	8000d7c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
        break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ef      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d14a      	bne.n	80043b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
 8004330:	0211      	lsls	r1, r2, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	0912      	lsrs	r2, r2, #4
 8004338:	0452      	lsls	r2, r2, #17
 800433a:	430a      	orrs	r2, r1
 800433c:	491f      	ldr	r1, [pc, #124]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	614b      	str	r3, [r1, #20]
 8004342:	e011      	b.n	8004368 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800434c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	0211      	lsls	r1, r2, #8
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6912      	ldr	r2, [r2, #16]
 800435a:	0852      	lsrs	r2, r2, #1
 800435c:	3a01      	subs	r2, #1
 800435e:	0652      	lsls	r2, r2, #25
 8004360:	430a      	orrs	r2, r1
 8004362:	4916      	ldr	r1, [pc, #88]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004372:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fc fd02 	bl	8000d7c <HAL_GetTick>
 8004378:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800437a:	e009      	b.n	8004390 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800437c:	f7fc fcfe 	bl	8000d7c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d902      	bls.n	8004390 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	73fb      	strb	r3, [r7, #15]
          break;
 800438e:	e005      	b.n	800439c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ef      	beq.n	800437c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	4904      	ldr	r1, [pc, #16]	; (80043bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e040      	b.n	8004454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc fbdc 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fae0 	bl	80049cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f825 	bl	800445c <UART_SetConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e01b      	b.n	8004454 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800442a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800443a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fb5f 	bl	8004b10 <UART_CheckIdleState>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b08a      	sub	sp, #40	; 0x28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4ba4      	ldr	r3, [pc, #656]	; (800471c <UART_SetConfig+0x2c0>)
 800448c:	4013      	ands	r3, r2
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	430b      	orrs	r3, r1
 8004496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a99      	ldr	r2, [pc, #612]	; (8004720 <UART_SetConfig+0x2c4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4313      	orrs	r3, r2
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a90      	ldr	r2, [pc, #576]	; (8004724 <UART_SetConfig+0x2c8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d126      	bne.n	8004534 <UART_SetConfig+0xd8>
 80044e6:	4b90      	ldr	r3, [pc, #576]	; (8004728 <UART_SetConfig+0x2cc>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0xd0>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0xa0>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451d 	.word	0x0800451d
 8004504:	08004515 	.word	0x08004515
 8004508:	08004525 	.word	0x08004525
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e116      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e112      	b.n	8004742 <UART_SetConfig+0x2e6>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e10e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e10a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e106      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7c      	ldr	r2, [pc, #496]	; (800472c <UART_SetConfig+0x2d0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d138      	bne.n	80045b0 <UART_SetConfig+0x154>
 800453e:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <UART_SetConfig+0x2cc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d82d      	bhi.n	80045a8 <UART_SetConfig+0x14c>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0xf8>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004589 	.word	0x08004589
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045a9 	.word	0x080045a9
 8004564:	08004599 	.word	0x08004599
 8004568:	080045a9 	.word	0x080045a9
 800456c:	080045a9 	.word	0x080045a9
 8004570:	080045a9 	.word	0x080045a9
 8004574:	08004591 	.word	0x08004591
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045a1 	.word	0x080045a1
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e0d8      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e0d4      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e0d0      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e0cc      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e0c8      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <UART_SetConfig+0x2d4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d125      	bne.n	8004606 <UART_SetConfig+0x1aa>
 80045ba:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <UART_SetConfig+0x2cc>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d016      	beq.n	80045f6 <UART_SetConfig+0x19a>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d818      	bhi.n	80045fe <UART_SetConfig+0x1a2>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d00a      	beq.n	80045e6 <UART_SetConfig+0x18a>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d814      	bhi.n	80045fe <UART_SetConfig+0x1a2>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <UART_SetConfig+0x182>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d008      	beq.n	80045ee <UART_SetConfig+0x192>
 80045dc:	e00f      	b.n	80045fe <UART_SetConfig+0x1a2>
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e4:	e0ad      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045e6:	2302      	movs	r3, #2
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ec:	e0a9      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045ee:	2304      	movs	r3, #4
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f4:	e0a5      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045f6:	2308      	movs	r3, #8
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fc:	e0a1      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045fe:	2310      	movs	r3, #16
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004604:	e09d      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <UART_SetConfig+0x2d8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d125      	bne.n	800465c <UART_SetConfig+0x200>
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <UART_SetConfig+0x2cc>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d016      	beq.n	800464c <UART_SetConfig+0x1f0>
 800461e:	2bc0      	cmp	r3, #192	; 0xc0
 8004620:	d818      	bhi.n	8004654 <UART_SetConfig+0x1f8>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d00a      	beq.n	800463c <UART_SetConfig+0x1e0>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d814      	bhi.n	8004654 <UART_SetConfig+0x1f8>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0x1d8>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d008      	beq.n	8004644 <UART_SetConfig+0x1e8>
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x1f8>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e082      	b.n	8004742 <UART_SetConfig+0x2e6>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e07e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e07a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e076      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e072      	b.n	8004742 <UART_SetConfig+0x2e6>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a35      	ldr	r2, [pc, #212]	; (8004738 <UART_SetConfig+0x2dc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12a      	bne.n	80046bc <UART_SetConfig+0x260>
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004674:	d01a      	beq.n	80046ac <UART_SetConfig+0x250>
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d81b      	bhi.n	80046b4 <UART_SetConfig+0x258>
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x240>
 8004682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004686:	d815      	bhi.n	80046b4 <UART_SetConfig+0x258>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <UART_SetConfig+0x238>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d008      	beq.n	80046a4 <UART_SetConfig+0x248>
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x258>
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e052      	b.n	8004742 <UART_SetConfig+0x2e6>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e04e      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e04a      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e046      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e042      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <UART_SetConfig+0x2c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d13a      	bne.n	800473c <UART_SetConfig+0x2e0>
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <UART_SetConfig+0x2cc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d4:	d01a      	beq.n	800470c <UART_SetConfig+0x2b0>
 80046d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046da:	d81b      	bhi.n	8004714 <UART_SetConfig+0x2b8>
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d00c      	beq.n	80046fc <UART_SetConfig+0x2a0>
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d815      	bhi.n	8004714 <UART_SetConfig+0x2b8>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <UART_SetConfig+0x298>
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d008      	beq.n	8004704 <UART_SetConfig+0x2a8>
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x2b8>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e022      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e01e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e01a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e016      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e012      	b.n	8004742 <UART_SetConfig+0x2e6>
 800471c:	efff69f3 	.word	0xefff69f3
 8004720:	40008000 	.word	0x40008000
 8004724:	40013800 	.word	0x40013800
 8004728:	40021000 	.word	0x40021000
 800472c:	40004400 	.word	0x40004400
 8004730:	40004800 	.word	0x40004800
 8004734:	40004c00 	.word	0x40004c00
 8004738:	40005000 	.word	0x40005000
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a9f      	ldr	r2, [pc, #636]	; (80049c4 <UART_SetConfig+0x568>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d17a      	bne.n	8004842 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004750:	2b08      	cmp	r3, #8
 8004752:	d824      	bhi.n	800479e <UART_SetConfig+0x342>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x300>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004781 	.word	0x08004781
 8004760:	0800479f 	.word	0x0800479f
 8004764:	08004789 	.word	0x08004789
 8004768:	0800479f 	.word	0x0800479f
 800476c:	0800478f 	.word	0x0800478f
 8004770:	0800479f 	.word	0x0800479f
 8004774:	0800479f 	.word	0x0800479f
 8004778:	0800479f 	.word	0x0800479f
 800477c:	08004797 	.word	0x08004797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff f8c6 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004784:	61f8      	str	r0, [r7, #28]
        break;
 8004786:	e010      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004788:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <UART_SetConfig+0x56c>)
 800478a:	61fb      	str	r3, [r7, #28]
        break;
 800478c:	e00d      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478e:	f7ff f827 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004792:	61f8      	str	r0, [r7, #28]
        break;
 8004794:	e009      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	61fb      	str	r3, [r7, #28]
        break;
 800479c:	e005      	b.n	80047aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80fb 	beq.w	80049a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d305      	bcc.n	80047ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d903      	bls.n	80047d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d4:	e0e8      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2200      	movs	r2, #0
 80047da:	461c      	mov	r4, r3
 80047dc:	4615      	mov	r5, r2
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	022b      	lsls	r3, r5, #8
 80047e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047ec:	0222      	lsls	r2, r4, #8
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	6849      	ldr	r1, [r1, #4]
 80047f2:	0849      	lsrs	r1, r1, #1
 80047f4:	2000      	movs	r0, #0
 80047f6:	4688      	mov	r8, r1
 80047f8:	4681      	mov	r9, r0
 80047fa:	eb12 0a08 	adds.w	sl, r2, r8
 80047fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004810:	4650      	mov	r0, sl
 8004812:	4659      	mov	r1, fp
 8004814:	f7fb fce0 	bl	80001d8 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d308      	bcc.n	800483a <UART_SetConfig+0x3de>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d204      	bcs.n	800483a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e0b6      	b.n	80049a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004840:	e0b2      	b.n	80049a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484a:	d15e      	bne.n	800490a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800484c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004850:	2b08      	cmp	r3, #8
 8004852:	d828      	bhi.n	80048a6 <UART_SetConfig+0x44a>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0x400>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	08004889 	.word	0x08004889
 8004864:	08004891 	.word	0x08004891
 8004868:	080048a7 	.word	0x080048a7
 800486c:	08004897 	.word	0x08004897
 8004870:	080048a7 	.word	0x080048a7
 8004874:	080048a7 	.word	0x080048a7
 8004878:	080048a7 	.word	0x080048a7
 800487c:	0800489f 	.word	0x0800489f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7ff f846 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004884:	61f8      	str	r0, [r7, #28]
        break;
 8004886:	e014      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7ff f858 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 800488c:	61f8      	str	r0, [r7, #28]
        break;
 800488e:	e010      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004890:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <UART_SetConfig+0x56c>)
 8004892:	61fb      	str	r3, [r7, #28]
        break;
 8004894:	e00d      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004896:	f7fe ffa3 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800489a:	61f8      	str	r0, [r7, #28]
        break;
 800489c:	e009      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	61fb      	str	r3, [r7, #28]
        break;
 80048a4:	e005      	b.n	80048b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d077      	beq.n	80049a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	005a      	lsls	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d916      	bls.n	8004902 <UART_SetConfig+0x4a6>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d212      	bcs.n	8004902 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f023 030f 	bic.w	r3, r3, #15
 80048e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	8afa      	ldrh	r2, [r7, #22]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e052      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004908:	e04e      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800490e:	2b08      	cmp	r3, #8
 8004910:	d827      	bhi.n	8004962 <UART_SetConfig+0x506>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x4bc>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe ffe8 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004940:	61f8      	str	r0, [r7, #28]
        break;
 8004942:	e014      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe fffa 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e010      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <UART_SetConfig+0x56c>)
 800494e:	61fb      	str	r3, [r7, #28]
        break;
 8004950:	e00d      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fe ff45 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004956:	61f8      	str	r0, [r7, #28]
        break;
 8004958:	e009      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61fb      	str	r3, [r7, #28]
        break;
 8004960:	e005      	b.n	800496e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800496c:	bf00      	nop
    }

    if (pclk != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	085a      	lsrs	r2, r3, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	441a      	add	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d909      	bls.n	80049a2 <UART_SetConfig+0x546>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d205      	bcs.n	80049a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e002      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c2:	bf00      	nop
 80049c4:	40008000 	.word	0x40008000
 80049c8:	00f42400 	.word	0x00f42400

080049cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d10a      	bne.n	8004ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b098      	sub	sp, #96	; 0x60
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b20:	f7fc f92c 	bl	8000d7c <HAL_GetTick>
 8004b24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d12e      	bne.n	8004b92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f88c 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d021      	beq.n	8004b92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e062      	b.n	8004c58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d149      	bne.n	8004c34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f856 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03c      	beq.n	8004c34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e6      	bne.n	8004bba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	61fa      	str	r2, [r7, #28]
 8004c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	69b9      	ldr	r1, [r7, #24]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e011      	b.n	8004c58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3758      	adds	r7, #88	; 0x58
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	e049      	b.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d045      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fc f87f 	bl	8000d7c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e048      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d031      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d110      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f838 	bl	8004d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e029      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	d111      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f81e 	bl	8004d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e00f      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d0a6      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b095      	sub	sp, #84	; 0x54
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
 8004d56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e6      	bne.n	8004d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d118      	bne.n	8004dd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e6      	bne.n	8004da4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dea:	bf00      	nop
 8004dec:	3754      	adds	r7, #84	; 0x54
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df6:	b084      	sub	sp, #16
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	f107 001c 	add.w	r0, r7, #28
 8004e04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fa1d 	bl	8006254 <USB_CoreReset>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e30:	e005      	b.n	8004e3e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e4a:	b004      	add	sp, #16
 8004e4c:	4770      	bx	lr
	...

08004e50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d165      	bne.n	8004f30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <USB_SetTurnaroundTime+0x110>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d906      	bls.n	8004e7a <USB_SetTurnaroundTime+0x2a>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a3d      	ldr	r2, [pc, #244]	; (8004f64 <USB_SetTurnaroundTime+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d202      	bcs.n	8004e7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e74:	230f      	movs	r3, #15
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e05c      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a39      	ldr	r2, [pc, #228]	; (8004f64 <USB_SetTurnaroundTime+0x114>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d306      	bcc.n	8004e90 <USB_SetTurnaroundTime+0x40>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <USB_SetTurnaroundTime+0x118>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d202      	bcs.n	8004e90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e8a:	230e      	movs	r3, #14
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e051      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a35      	ldr	r2, [pc, #212]	; (8004f68 <USB_SetTurnaroundTime+0x118>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d306      	bcc.n	8004ea6 <USB_SetTurnaroundTime+0x56>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a34      	ldr	r2, [pc, #208]	; (8004f6c <USB_SetTurnaroundTime+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d202      	bcs.n	8004ea6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ea0:	230d      	movs	r3, #13
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e046      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <USB_SetTurnaroundTime+0x11c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d306      	bcc.n	8004ebc <USB_SetTurnaroundTime+0x6c>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <USB_SetTurnaroundTime+0x120>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e03b      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <USB_SetTurnaroundTime+0x120>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d906      	bls.n	8004ed2 <USB_SetTurnaroundTime+0x82>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <USB_SetTurnaroundTime+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d802      	bhi.n	8004ed2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ecc:	230b      	movs	r3, #11
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e030      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <USB_SetTurnaroundTime+0x124>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d906      	bls.n	8004ee8 <USB_SetTurnaroundTime+0x98>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <USB_SetTurnaroundTime+0x128>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e025      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <USB_SetTurnaroundTime+0x128>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d906      	bls.n	8004efe <USB_SetTurnaroundTime+0xae>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <USB_SetTurnaroundTime+0x12c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d202      	bcs.n	8004efe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ef8:	2309      	movs	r3, #9
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e01a      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <USB_SetTurnaroundTime+0x12c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d306      	bcc.n	8004f14 <USB_SetTurnaroundTime+0xc4>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <USB_SetTurnaroundTime+0x130>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d802      	bhi.n	8004f14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f0e:	2308      	movs	r3, #8
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e00f      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <USB_SetTurnaroundTime+0x130>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d906      	bls.n	8004f2a <USB_SetTurnaroundTime+0xda>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <USB_SetTurnaroundTime+0x134>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d202      	bcs.n	8004f2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f24:	2307      	movs	r3, #7
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e004      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f2a:	2306      	movs	r3, #6
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e001      	b.n	8004f34 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f30:	2309      	movs	r3, #9
 8004f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00d8acbf 	.word	0x00d8acbf
 8004f64:	00e4e1c0 	.word	0x00e4e1c0
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	01067380 	.word	0x01067380
 8004f70:	011a499f 	.word	0x011a499f
 8004f74:	01312cff 	.word	0x01312cff
 8004f78:	014ca43f 	.word	0x014ca43f
 8004f7c:	016e3600 	.word	0x016e3600
 8004f80:	01a6ab1f 	.word	0x01a6ab1f
 8004f84:	01e84800 	.word	0x01e84800

08004f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d115      	bne.n	800501a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fb feca 	bl	8000d94 <HAL_Delay>
      ms++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 f8ab 	bl	8006162 <USB_GetMode>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d01e      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b31      	cmp	r3, #49	; 0x31
 8005016:	d9f0      	bls.n	8004ffa <USB_SetCurrentMode+0x2e>
 8005018:	e01a      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800502c:	2001      	movs	r0, #1
 800502e:	f7fb feb1 	bl	8000d94 <HAL_Delay>
      ms++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 f892 	bl	8006162 <USB_GetMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b31      	cmp	r3, #49	; 0x31
 8005048:	d9f0      	bls.n	800502c <USB_SetCurrentMode+0x60>
 800504a:	e001      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e005      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b32      	cmp	r3, #50	; 0x32
 8005054:	d101      	bne.n	800505a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005064:	b084      	sub	sp, #16
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e009      	b.n	8005098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3340      	adds	r3, #64	; 0x40
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0e      	cmp	r3, #14
 800509c:	d9f2      	bls.n	8005084 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11c      	bne.n	80050de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f043 0302 	orr.w	r3, r3, #2
 80050b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e005      	b.n	80050ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050f6:	2103      	movs	r1, #3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f959 	bl	80053b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050fe:	2110      	movs	r1, #16
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8f1 	bl	80052e8 <USB_FlushTxFifo>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f91d 	bl	8005350 <USB_FlushRxFifo>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e043      	b.n	80051d2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005160:	d118      	bne.n	8005194 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	e013      	b.n	80051a6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e008      	b.n	80051a6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3301      	adds	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3b7      	bcc.n	800514a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e043      	b.n	8005268 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f6:	d118      	bne.n	800522a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e013      	b.n	800523c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e008      	b.n	800523c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	429a      	cmp	r2, r3
 800526e:	d3b7      	bcc.n	80051e0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f043 0210 	orr.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <USB_DevInit+0x280>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f043 0208 	orr.w	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052de:	b004      	add	sp, #16
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	803c3800 	.word	0x803c3800

080052e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <USB_FlushTxFifo+0x64>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e01b      	b.n	8005340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	daf2      	bge.n	80052f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	019b      	lsls	r3, r3, #6
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4a08      	ldr	r2, [pc, #32]	; (800534c <USB_FlushTxFifo+0x64>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e006      	b.n	8005340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b20      	cmp	r3, #32
 800533c:	d0f0      	beq.n	8005320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	00030d40 	.word	0x00030d40

08005350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a11      	ldr	r2, [pc, #68]	; (80053ac <USB_FlushRxFifo+0x5c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e018      	b.n	80053a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	daf2      	bge.n	800535c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2210      	movs	r2, #16
 800537e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <USB_FlushRxFifo+0x5c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e006      	b.n	80053a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d0f0      	beq.n	8005380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	00030d40 	.word	0x00030d40

080053b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b087      	sub	sp, #28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d002      	beq.n	8005408 <USB_GetDevSpeed+0x26>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b06      	cmp	r3, #6
 8005406:	d102      	bne.n	800540e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
 800540c:	e001      	b.n	8005412 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800540e:	230f      	movs	r3, #15
 8005410:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d13a      	bne.n	80054b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d155      	bne.n	8005520 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	791b      	ldrb	r3, [r3, #4]
 800548e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005490:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	059b      	lsls	r3, r3, #22
 8005496:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005498:	4313      	orrs	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e036      	b.n	8005520 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11a      	bne.n	8005520 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	791b      	ldrb	r3, [r3, #4]
 8005504:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005506:	430b      	orrs	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d161      	bne.n	8005610 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005562:	d11f      	bne.n	80055a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005582:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c4:	4013      	ands	r3, r2
 80055c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f303 	lsl.w	r3, r1, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4013      	ands	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	440b      	add	r3, r1
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	4619      	mov	r1, r3
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <USB_DeactivateEndpoint+0x1b0>)
 800560a:	4013      	ands	r3, r2
 800560c:	600b      	str	r3, [r1, #0]
 800560e:	e060      	b.n	80056d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005626:	d11f      	bne.n	8005668 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005646:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005666:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	43db      	mvns	r3, r3
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005688:	4013      	ands	r3, r2
 800568a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	43db      	mvns	r3, r3
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ac:	4013      	ands	r3, r2
 80056ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0159      	lsls	r1, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	440b      	add	r3, r1
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	4619      	mov	r1, r3
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <USB_DeactivateEndpoint+0x1b4>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	ec337800 	.word	0xec337800
 80056e4:	eff37800 	.word	0xeff37800

080056e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 8128 	bne.w	8005956 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d132      	bne.n	8005774 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576c:	0cdb      	lsrs	r3, r3, #19
 800576e:	04db      	lsls	r3, r3, #19
 8005770:	6113      	str	r3, [r2, #16]
 8005772:	e092      	b.n	800589a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	0cdb      	lsrs	r3, r3, #19
 8005790:	04db      	lsls	r3, r3, #19
 8005792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11a      	bne.n	80057f4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d903      	bls.n	80057d2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057f0:	6113      	str	r3, [r2, #16]
 80057f2:	e01b      	b.n	800582c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6919      	ldr	r1, [r3, #16]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	440b      	add	r3, r1
 800580c:	1e59      	subs	r1, r3, #1
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	fbb1 f3f3 	udiv	r3, r1, r3
 8005816:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005818:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <USB_EPStartXfer+0x368>)
 800581a:	400b      	ands	r3, r1
 800581c:	6939      	ldr	r1, [r7, #16]
 800581e:	0148      	lsls	r0, r1, #5
 8005820:	6979      	ldr	r1, [r7, #20]
 8005822:	4401      	add	r1, r0
 8005824:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005828:	4313      	orrs	r3, r2
 800582a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	6939      	ldr	r1, [r7, #16]
 8005844:	0148      	lsls	r0, r1, #5
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	4401      	add	r1, r0
 800584a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d11f      	bne.n	800589a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005898:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d015      	beq.n	80058ee <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8139 	beq.w	8005b3e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4313      	orrs	r3, r2
 80058ea:	634b      	str	r3, [r1, #52]	; 0x34
 80058ec:	e127      	b.n	8005b3e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e00f      	b.n	8005940 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68d9      	ldr	r1, [r3, #12]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	b29b      	uxth	r3, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9a6 	bl	8005ca0 <USB_WritePacket>
 8005954:	e0f3      	b.n	8005b3e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	0cdb      	lsrs	r3, r3, #19
 8005972:	04db      	lsls	r3, r3, #19
 8005974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005998:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d12f      	bne.n	8005a00 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	0148      	lsls	r0, r1, #5
 80059d2:	6979      	ldr	r1, [r7, #20]
 80059d4:	4401      	add	r1, r0
 80059d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059da:	4313      	orrs	r3, r2
 80059dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fc:	6113      	str	r3, [r2, #16]
 80059fe:	e061      	b.n	8005ac4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d125      	bne.n	8005a54 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1e:	6939      	ldr	r1, [r7, #16]
 8005a20:	0148      	lsls	r0, r1, #5
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	4401      	add	r1, r0
 8005a26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a4c:	6113      	str	r3, [r2, #16]
 8005a4e:	e039      	b.n	8005ac4 <USB_EPStartXfer+0x3dc>
 8005a50:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	1e5a      	subs	r2, r3, #1
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	89fa      	ldrh	r2, [r7, #14]
 8005a70:	fb03 f202 	mul.w	r2, r3, r2
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	89fb      	ldrh	r3, [r7, #14]
 8005a88:	04d9      	lsls	r1, r3, #19
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <USB_EPStartXfer+0x460>)
 8005a8c:	400b      	ands	r3, r1
 8005a8e:	6939      	ldr	r1, [r7, #16]
 8005a90:	0148      	lsls	r0, r1, #5
 8005a92:	6979      	ldr	r1, [r7, #20]
 8005a94:	4401      	add	r1, r0
 8005a96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	6939      	ldr	r1, [r7, #16]
 8005ab6:	0148      	lsls	r0, r1, #5
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	4401      	add	r1, r0
 8005abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	791b      	ldrb	r3, [r3, #4]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d128      	bne.n	8005b1e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d110      	bne.n	8005afe <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e00f      	b.n	8005b1e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	1ff80000 	.word	0x1ff80000

08005b4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d14a      	bne.n	8005c00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b82:	f040 8086 	bne.w	8005c92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	7812      	ldrb	r2, [r2, #0]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d902      	bls.n	8005be4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
          break;
 8005be2:	e056      	b.n	8005c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfc:	d0e7      	beq.n	8005bce <USB_EPStopXfer+0x82>
 8005bfe:	e048      	b.n	8005c92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c18:	d13b      	bne.n	8005c92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d902      	bls.n	8005c78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	75fb      	strb	r3, [r7, #23]
          break;
 8005c76:	e00c      	b.n	8005c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c90:	d0e7      	beq.n	8005c62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	460b      	mov	r3, r1
 8005cb0:	71fb      	strb	r3, [r7, #7]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005cbe:	88bb      	ldrh	r3, [r7, #4]
 8005cc0:	3303      	adds	r3, #3
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e018      	b.n	8005cfe <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	031a      	lsls	r2, r3, #12
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd8:	461a      	mov	r2, r3
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d3e2      	bcc.n	8005ccc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3724      	adds	r7, #36	; 0x24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b08b      	sub	sp, #44	; 0x2c
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e014      	b.n	8005d6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	3301      	adds	r3, #1
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	3301      	adds	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	3301      	adds	r3, #1
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3e6      	bcc.n	8005d40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d72:	8bfb      	ldrh	r3, [r7, #30]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01e      	beq.n	8005db6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d82:	461a      	mov	r2, r3
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	3301      	adds	r3, #1
 8005da2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	3301      	adds	r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005daa:	8bfb      	ldrh	r3, [r7, #30]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005db0:	8bfb      	ldrh	r3, [r7, #30]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ea      	bne.n	8005d8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	372c      	adds	r7, #44	; 0x2c
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d12c      	bne.n	8005e3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	db12      	blt.n	8005e18 <USB_EPSetStall+0x54>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00f      	beq.n	8005e18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e02b      	b.n	8005e92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db12      	blt.n	8005e72 <USB_EPSetStall+0xae>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00f      	beq.n	8005e72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d128      	bne.n	8005f0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	791b      	ldrb	r3, [r3, #4]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d003      	beq.n	8005eec <USB_EPClearStall+0x4c>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d138      	bne.n	8005f5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e027      	b.n	8005f5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d003      	beq.n	8005f3e <USB_EPClearStall+0x9e>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d10f      	bne.n	8005f5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f023 0302 	bic.w	r3, r3, #2
 8005fea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	0c1b      	lsrs	r3, r3, #16
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	b29b      	uxth	r3, r3
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	4013      	ands	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f8:	68bb      	ldr	r3, [r7, #8]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006106:	b480      	push	{r7}
 8006108:	b087      	sub	sp, #28
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006128:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	01db      	lsls	r3, r3, #7
 8006138:	b2db      	uxtb	r3, r3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006154:	68bb      	ldr	r3, [r7, #8]
}
 8006156:	4618      	mov	r0, r3
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0301 	and.w	r3, r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	333c      	adds	r3, #60	; 0x3c
 80061d6:	3304      	adds	r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <USB_EP0_OutStart+0x8c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d90a      	bls.n	80061fa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f4:	d101      	bne.n	80061fa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e024      	b.n	8006244 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	461a      	mov	r2, r3
 8006202:	2300      	movs	r3, #0
 8006204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006228:	f043 0318 	orr.w	r3, r3, #24
 800622c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006240:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	4f54300a 	.word	0x4f54300a

08006254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4a13      	ldr	r2, [pc, #76]	; (80062b8 <USB_CoreReset+0x64>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e01b      	b.n	80062aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	daf2      	bge.n	8006260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f043 0201 	orr.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <USB_CoreReset+0x64>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e006      	b.n	80062aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d0f0      	beq.n	800628a <USB_CoreReset+0x36>

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	00030d40 	.word	0x00030d40

080062bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062cc:	f002 fe26 	bl	8008f1c <USBD_static_malloc>
 80062d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32b0      	adds	r2, #176	; 0xb0
 80062e2:	2100      	movs	r1, #0
 80062e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062e8:	2302      	movs	r3, #2
 80062ea:	e0d4      	b.n	8006496 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80062f0:	2100      	movs	r1, #0
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f002 fe30 	bl	8008f58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32b0      	adds	r2, #176	; 0xb0
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32b0      	adds	r2, #176	; 0xb0
 8006312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7c1b      	ldrb	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d138      	bne.n	8006396 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006324:	4b5e      	ldr	r3, [pc, #376]	; (80064a0 <USBD_CDC_Init+0x1e4>)
 8006326:	7819      	ldrb	r1, [r3, #0]
 8006328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800632c:	2202      	movs	r2, #2
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f002 fbe0 	bl	8008af4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006334:	4b5a      	ldr	r3, [pc, #360]	; (80064a0 <USBD_CDC_Init+0x1e4>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3324      	adds	r3, #36	; 0x24
 800634a:	2201      	movs	r2, #1
 800634c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800634e:	4b55      	ldr	r3, [pc, #340]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 8006350:	7819      	ldrb	r1, [r3, #0]
 8006352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006356:	2202      	movs	r2, #2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 fbcb 	bl	8008af4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800635e:	4b51      	ldr	r3, [pc, #324]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f003 020f 	and.w	r2, r3, #15
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006376:	2201      	movs	r2, #1
 8006378:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <USBD_CDC_Init+0x1ec>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	3326      	adds	r3, #38	; 0x26
 8006390:	2210      	movs	r2, #16
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e035      	b.n	8006402 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006396:	4b42      	ldr	r3, [pc, #264]	; (80064a0 <USBD_CDC_Init+0x1e4>)
 8006398:	7819      	ldrb	r1, [r3, #0]
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	2202      	movs	r2, #2
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f002 fba8 	bl	8008af4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063a4:	4b3e      	ldr	r3, [pc, #248]	; (80064a0 <USBD_CDC_Init+0x1e4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	3324      	adds	r3, #36	; 0x24
 80063ba:	2201      	movs	r2, #1
 80063bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063be:	4b39      	ldr	r3, [pc, #228]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 80063c0:	7819      	ldrb	r1, [r3, #0]
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	2202      	movs	r2, #2
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 fb94 	bl	8008af4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063cc:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063e4:	2201      	movs	r2, #1
 80063e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063e8:	4b2f      	ldr	r3, [pc, #188]	; (80064a8 <USBD_CDC_Init+0x1ec>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	3326      	adds	r3, #38	; 0x26
 80063fe:	2210      	movs	r2, #16
 8006400:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006402:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <USBD_CDC_Init+0x1ec>)
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	2308      	movs	r3, #8
 8006408:	2203      	movs	r2, #3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f002 fb72 	bl	8008af4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <USBD_CDC_Init+0x1ec>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3324      	adds	r3, #36	; 0x24
 8006426:	2201      	movs	r2, #1
 8006428:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	33b0      	adds	r3, #176	; 0xb0
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006460:	2302      	movs	r3, #2
 8006462:	e018      	b.n	8006496 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1b      	ldrb	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800646c:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 800646e:	7819      	ldrb	r1, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f002 fcb4 	bl	8008de8 <USBD_LL_PrepareReceive>
 8006480:	e008      	b.n	8006494 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <USBD_CDC_Init+0x1e8>)
 8006484:	7819      	ldrb	r1, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f002 fcaa 	bl	8008de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000093 	.word	0x20000093
 80064a4:	20000094 	.word	0x20000094
 80064a8:	20000095 	.word	0x20000095

080064ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80064b8:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <USBD_CDC_DeInit+0xf8>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f002 fb56 	bl	8008b70 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80064c4:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <USBD_CDC_DeInit+0xf8>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	3324      	adds	r3, #36	; 0x24
 80064da:	2200      	movs	r2, #0
 80064dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064de:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <USBD_CDC_DeInit+0xfc>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f002 fb43 	bl	8008b70 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064ea:	4b2f      	ldr	r3, [pc, #188]	; (80065a8 <USBD_CDC_DeInit+0xfc>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006502:	2200      	movs	r2, #0
 8006504:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006506:	4b29      	ldr	r3, [pc, #164]	; (80065ac <USBD_CDC_DeInit+0x100>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f002 fb2f 	bl	8008b70 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <USBD_CDC_DeInit+0x100>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 020f 	and.w	r2, r3, #15
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	3324      	adds	r3, #36	; 0x24
 8006528:	2200      	movs	r2, #0
 800652a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <USBD_CDC_DeInit+0x100>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3326      	adds	r3, #38	; 0x26
 8006542:	2200      	movs	r2, #0
 8006544:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	32b0      	adds	r2, #176	; 0xb0
 8006550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01f      	beq.n	8006598 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	33b0      	adds	r3, #176	; 0xb0
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	32b0      	adds	r2, #176	; 0xb0
 8006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657a:	4618      	mov	r0, r3
 800657c:	f002 fcdc 	bl	8008f38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	32b0      	adds	r2, #176	; 0xb0
 800658a:	2100      	movs	r1, #0
 800658c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000093 	.word	0x20000093
 80065a8:	20000094 	.word	0x20000094
 80065ac:	20000095 	.word	0x20000095

080065b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	; 0xb0
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	e0bf      	b.n	8006760 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d050      	beq.n	800668e <USBD_CDC_Setup+0xde>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	f040 80af 	bne.w	8006750 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	88db      	ldrh	r3, [r3, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d03a      	beq.n	8006670 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	da1b      	bge.n	800663c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	33b0      	adds	r3, #176	; 0xb0
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800661a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	88d2      	ldrh	r2, [r2, #6]
 8006620:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	88db      	ldrh	r3, [r3, #6]
 8006626:	2b07      	cmp	r3, #7
 8006628:	bf28      	it	cs
 800662a:	2307      	movcs	r3, #7
 800662c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	89fa      	ldrh	r2, [r7, #14]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fdb3 	bl	80081a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800663a:	e090      	b.n	800675e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	785a      	ldrb	r2, [r3, #1]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	88db      	ldrh	r3, [r3, #6]
 800664a:	2b3f      	cmp	r3, #63	; 0x3f
 800664c:	d803      	bhi.n	8006656 <USBD_CDC_Setup+0xa6>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	88db      	ldrh	r3, [r3, #6]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	e000      	b.n	8006658 <USBD_CDC_Setup+0xa8>
 8006656:	2240      	movs	r2, #64	; 0x40
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800665e:	6939      	ldr	r1, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006666:	461a      	mov	r2, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fdc5 	bl	80081f8 <USBD_CtlPrepareRx>
      break;
 800666e:	e076      	b.n	800675e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	33b0      	adds	r3, #176	; 0xb0
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	7850      	ldrb	r0, [r2, #1]
 8006686:	2200      	movs	r2, #0
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	4798      	blx	r3
      break;
 800668c:	e067      	b.n	800675e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b0b      	cmp	r3, #11
 8006694:	d851      	bhi.n	800673a <USBD_CDC_Setup+0x18a>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <USBD_CDC_Setup+0xec>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	08006749 	.word	0x08006749
 80066a4:	0800673b 	.word	0x0800673b
 80066a8:	0800673b 	.word	0x0800673b
 80066ac:	0800673b 	.word	0x0800673b
 80066b0:	0800673b 	.word	0x0800673b
 80066b4:	0800673b 	.word	0x0800673b
 80066b8:	0800673b 	.word	0x0800673b
 80066bc:	0800673b 	.word	0x0800673b
 80066c0:	0800673b 	.word	0x0800673b
 80066c4:	080066f7 	.word	0x080066f7
 80066c8:	08006721 	.word	0x08006721
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d107      	bne.n	80066e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066d8:	f107 030a 	add.w	r3, r7, #10
 80066dc:	2202      	movs	r2, #2
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fd5d 	bl	80081a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066e6:	e032      	b.n	800674e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fce7 	bl	80080be <USBD_CtlError>
            ret = USBD_FAIL;
 80066f0:	2303      	movs	r3, #3
 80066f2:	75fb      	strb	r3, [r7, #23]
          break;
 80066f4:	e02b      	b.n	800674e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d107      	bne.n	8006712 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006702:	f107 030d 	add.w	r3, r7, #13
 8006706:	2201      	movs	r2, #1
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fd48 	bl	80081a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006710:	e01d      	b.n	800674e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fcd2 	bl	80080be <USBD_CtlError>
            ret = USBD_FAIL;
 800671a:	2303      	movs	r3, #3
 800671c:	75fb      	strb	r3, [r7, #23]
          break;
 800671e:	e016      	b.n	800674e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d00f      	beq.n	800674c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fcc5 	bl	80080be <USBD_CtlError>
            ret = USBD_FAIL;
 8006734:	2303      	movs	r3, #3
 8006736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006738:	e008      	b.n	800674c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fcbe 	bl	80080be <USBD_CtlError>
          ret = USBD_FAIL;
 8006742:	2303      	movs	r3, #3
 8006744:	75fb      	strb	r3, [r7, #23]
          break;
 8006746:	e002      	b.n	800674e <USBD_CDC_Setup+0x19e>
          break;
 8006748:	bf00      	nop
 800674a:	e008      	b.n	800675e <USBD_CDC_Setup+0x1ae>
          break;
 800674c:	bf00      	nop
      }
      break;
 800674e:	e006      	b.n	800675e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fcb3 	bl	80080be <USBD_CtlError>
      ret = USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	75fb      	strb	r3, [r7, #23]
      break;
 800675c:	bf00      	nop
  }

  return (uint8_t)ret;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800677a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32b0      	adds	r2, #176	; 0xb0
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	e065      	b.n	800685e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	32b0      	adds	r2, #176	; 0xb0
 800679c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3318      	adds	r3, #24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02f      	beq.n	800681c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	3318      	adds	r3, #24
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	f003 010f 	and.w	r1, r3, #15
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	460b      	mov	r3, r1
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	440b      	add	r3, r1
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4403      	add	r3, r0
 80067e4:	3344      	adds	r3, #68	; 0x44
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d112      	bne.n	800681c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	f003 020f 	and.w	r2, r3, #15
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3318      	adds	r3, #24
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800680e:	78f9      	ldrb	r1, [r7, #3]
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f002 faaf 	bl	8008d78 <USBD_LL_Transmit>
 800681a:	e01f      	b.n	800685c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	33b0      	adds	r3, #176	; 0xb0
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	33b0      	adds	r3, #176	; 0xb0
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	32b0      	adds	r2, #176	; 0xb0
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32b0      	adds	r2, #176	; 0xb0
 800688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	e01a      	b.n	80068ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fadb 	bl	8008e58 <USBD_LL_GetRxDataSize>
 80068a2:	4602      	mov	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	33b0      	adds	r3, #176	; 0xb0
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068c8:	4611      	mov	r1, r2
 80068ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32b0      	adds	r2, #176	; 0xb0
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e025      	b.n	8006944 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	33b0      	adds	r3, #176	; 0xb0
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <USBD_CDC_EP0_RxReady+0x6c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006912:	2bff      	cmp	r3, #255	; 0xff
 8006914:	d015      	beq.n	8006942 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	33b0      	adds	r3, #176	; 0xb0
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800692e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006936:	b292      	uxth	r2, r2
 8006938:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006954:	2182      	movs	r1, #130	; 0x82
 8006956:	4818      	ldr	r0, [pc, #96]	; (80069b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006958:	f000 fd4f 	bl	80073fa <USBD_GetEpDesc>
 800695c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800695e:	2101      	movs	r1, #1
 8006960:	4815      	ldr	r0, [pc, #84]	; (80069b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006962:	f000 fd4a 	bl	80073fa <USBD_GetEpDesc>
 8006966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006968:	2181      	movs	r1, #129	; 0x81
 800696a:	4813      	ldr	r0, [pc, #76]	; (80069b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800696c:	f000 fd45 	bl	80073fa <USBD_GetEpDesc>
 8006970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2210      	movs	r2, #16
 800697c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2200      	movs	r2, #0
 8006988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698c:	711a      	strb	r2, [r3, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a0:	711a      	strb	r2, [r3, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2243      	movs	r2, #67	; 0x43
 80069aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000050 	.word	0x20000050

080069bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069c4:	2182      	movs	r1, #130	; 0x82
 80069c6:	4818      	ldr	r0, [pc, #96]	; (8006a28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069c8:	f000 fd17 	bl	80073fa <USBD_GetEpDesc>
 80069cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069ce:	2101      	movs	r1, #1
 80069d0:	4815      	ldr	r0, [pc, #84]	; (8006a28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069d2:	f000 fd12 	bl	80073fa <USBD_GetEpDesc>
 80069d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069d8:	2181      	movs	r1, #129	; 0x81
 80069da:	4813      	ldr	r0, [pc, #76]	; (8006a28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069dc:	f000 fd0d 	bl	80073fa <USBD_GetEpDesc>
 80069e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2210      	movs	r2, #16
 80069ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2200      	movs	r2, #0
 80069f8:	711a      	strb	r2, [r3, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f042 0202 	orr.w	r2, r2, #2
 8006a00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	711a      	strb	r2, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f042 0202 	orr.w	r2, r2, #2
 8006a14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2243      	movs	r2, #67	; 0x43
 8006a1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a1c:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000050 	.word	0x20000050

08006a2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a34:	2182      	movs	r1, #130	; 0x82
 8006a36:	4818      	ldr	r0, [pc, #96]	; (8006a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a38:	f000 fcdf 	bl	80073fa <USBD_GetEpDesc>
 8006a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a3e:	2101      	movs	r1, #1
 8006a40:	4815      	ldr	r0, [pc, #84]	; (8006a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a42:	f000 fcda 	bl	80073fa <USBD_GetEpDesc>
 8006a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a48:	2181      	movs	r1, #129	; 0x81
 8006a4a:	4813      	ldr	r0, [pc, #76]	; (8006a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a4c:	f000 fcd5 	bl	80073fa <USBD_GetEpDesc>
 8006a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a6c:	711a      	strb	r2, [r3, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a80:	711a      	strb	r2, [r3, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2243      	movs	r2, #67	; 0x43
 8006a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000050 	.word	0x20000050

08006a9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	220a      	movs	r2, #10
 8006aa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aaa:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	2000000c 	.word	0x2000000c

08006abc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e009      	b.n	8006ae4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	33b0      	adds	r3, #176	; 0xb0
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	32b0      	adds	r2, #176	; 0xb0
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e008      	b.n	8006b28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	32b0      	adds	r2, #176	; 0xb0
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e004      	b.n	8006b62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32b0      	adds	r2, #176	; 0xb0
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e025      	b.n	8006be2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11f      	bne.n	8006be0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ba8:	4b10      	ldr	r3, [pc, #64]	; (8006bec <USBD_CDC_TransmitPacket+0x7c>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4403      	add	r3, r0
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <USBD_CDC_TransmitPacket+0x7c>)
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f002 f8ce 	bl	8008d78 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000093 	.word	0x20000093

08006bf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32b0      	adds	r2, #176	; 0xb0
 8006c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32b0      	adds	r2, #176	; 0xb0
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e018      	b.n	8006c50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7c1b      	ldrb	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <USBD_CDC_ReceivePacket+0x68>)
 8006c28:	7819      	ldrb	r1, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 f8d7 	bl	8008de8 <USBD_LL_PrepareReceive>
 8006c3a:	e008      	b.n	8006c4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <USBD_CDC_ReceivePacket+0x68>)
 8006c3e:	7819      	ldrb	r1, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c46:	2340      	movs	r3, #64	; 0x40
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 f8cd 	bl	8008de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20000094 	.word	0x20000094

08006c5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e01f      	b.n	8006cb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	79fa      	ldrb	r2, [r7, #7]
 8006ca6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f001 fea5 	bl	80089f8 <USBD_LL_Init>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e025      	b.n	8006d20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	32ae      	adds	r2, #174	; 0xae
 8006ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00f      	beq.n	8006d10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32ae      	adds	r2, #174	; 0xae
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	f107 020e 	add.w	r2, r7, #14
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	4602      	mov	r2, r0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fead 	bl	8008a90 <USBD_LL_Start>
 8006d36:	4603      	mov	r3, r0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	4611      	mov	r1, r2
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 f938 	bl	800804a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006de8:	461a      	mov	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d01a      	beq.n	8006e34 <USBD_LL_SetupStage+0x72>
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d822      	bhi.n	8006e48 <USBD_LL_SetupStage+0x86>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <USBD_LL_SetupStage+0x4a>
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d00a      	beq.n	8006e20 <USBD_LL_SetupStage+0x5e>
 8006e0a:	e01d      	b.n	8006e48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb65 	bl	80074e4 <USBD_StdDevReq>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1e:	e020      	b.n	8006e62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fbcd 	bl	80075c8 <USBD_StdItfReq>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73fb      	strb	r3, [r7, #15]
      break;
 8006e32:	e016      	b.n	8006e62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc2f 	bl	80076a0 <USBD_StdEPReq>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
      break;
 8006e46:	e00c      	b.n	8006e62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fec0 	bl	8008bdc <USBD_LL_StallEP>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e60:	bf00      	nop
  }

  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	460b      	mov	r3, r1
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d16e      	bne.n	8006f62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	f040 8098 	bne.w	8006fc8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d913      	bls.n	8006ecc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bf28      	it	cs
 8006ebe:	4613      	movcs	r3, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f001 f9b4 	bl	8008232 <USBD_CtlContinueRx>
 8006eca:	e07d      	b.n	8006fc8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d014      	beq.n	8006f04 <USBD_LL_DataOutStage+0x98>
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d81d      	bhi.n	8006f1a <USBD_LL_DataOutStage+0xae>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <USBD_LL_DataOutStage+0x7c>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d003      	beq.n	8006eee <USBD_LL_DataOutStage+0x82>
 8006ee6:	e018      	b.n	8006f1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75bb      	strb	r3, [r7, #22]
            break;
 8006eec:	e018      	b.n	8006f20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa64 	bl	80073c6 <USBD_CoreFindIF>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75bb      	strb	r3, [r7, #22]
            break;
 8006f02:	e00d      	b.n	8006f20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fa66 	bl	80073e0 <USBD_CoreFindEP>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75bb      	strb	r3, [r7, #22]
            break;
 8006f18:	e002      	b.n	8006f20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f20:	7dbb      	ldrb	r3, [r7, #22]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d119      	bne.n	8006f5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d113      	bne.n	8006f5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f32:	7dba      	ldrb	r2, [r7, #22]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	32ae      	adds	r2, #174	; 0xae
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f42:	7dba      	ldrb	r2, [r7, #22]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f4a:	7dba      	ldrb	r2, [r7, #22]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	32ae      	adds	r2, #174	; 0xae
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f001 f97a 	bl	8008254 <USBD_CtlSendStatus>
 8006f60:	e032      	b.n	8006fc8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa37 	bl	80073e0 <USBD_CoreFindEP>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f76:	7dbb      	ldrb	r3, [r7, #22]
 8006f78:	2bff      	cmp	r3, #255	; 0xff
 8006f7a:	d025      	beq.n	8006fc8 <USBD_LL_DataOutStage+0x15c>
 8006f7c:	7dbb      	ldrb	r3, [r7, #22]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d122      	bne.n	8006fc8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d117      	bne.n	8006fbe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f8e:	7dba      	ldrb	r2, [r7, #22]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	32ae      	adds	r2, #174	; 0xae
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006fa6:	7dba      	ldrb	r2, [r7, #22]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	32ae      	adds	r2, #174	; 0xae
 8006fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	7afa      	ldrb	r2, [r7, #11]
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	4798      	blx	r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	e000      	b.n	8006fca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d16f      	bne.n	80070c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3314      	adds	r3, #20
 8006fea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d15a      	bne.n	80070ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d914      	bls.n	800702c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	461a      	mov	r2, r3
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f001 f8dc 	bl	80081d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f001 fedf 	bl	8008de8 <USBD_LL_PrepareReceive>
 800702a:	e03f      	b.n	80070ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	d11c      	bne.n	8007072 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007040:	429a      	cmp	r2, r3
 8007042:	d316      	bcc.n	8007072 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800704e:	429a      	cmp	r2, r3
 8007050:	d20f      	bcs.n	8007072 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f001 f8bd 	bl	80081d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f001 febc 	bl	8008de8 <USBD_LL_PrepareReceive>
 8007070:	e01c      	b.n	80070ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b03      	cmp	r3, #3
 800707c:	d10f      	bne.n	800709e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800709e:	2180      	movs	r1, #128	; 0x80
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f001 fd9b 	bl	8008bdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f001 f8e7 	bl	800827a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d03a      	beq.n	800712c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff fe42 	bl	8006d40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070c4:	e032      	b.n	800712c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f985 	bl	80073e0 <USBD_CoreFindEP>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	2bff      	cmp	r3, #255	; 0xff
 80070de:	d025      	beq.n	800712c <USBD_LL_DataInStage+0x15a>
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d122      	bne.n	800712c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d11c      	bne.n	800712c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070f2:	7dfa      	ldrb	r2, [r7, #23]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	32ae      	adds	r2, #174	; 0xae
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d014      	beq.n	800712c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007102:	7dfa      	ldrb	r2, [r7, #23]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800710a:	7dfa      	ldrb	r2, [r7, #23]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	32ae      	adds	r2, #174	; 0xae
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	7afa      	ldrb	r2, [r7, #11]
 8007118:	4611      	mov	r1, r2
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007122:	7dbb      	ldrb	r3, [r7, #22]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007128:	7dbb      	ldrb	r3, [r7, #22]
 800712a:	e000      	b.n	800712e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d014      	beq.n	800719c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00e      	beq.n	800719c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6852      	ldr	r2, [r2, #4]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	4611      	mov	r1, r2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	2200      	movs	r2, #0
 80071a0:	2100      	movs	r1, #0
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fca6 	bl	8008af4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2240      	movs	r2, #64	; 0x40
 80071b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b8:	2340      	movs	r3, #64	; 0x40
 80071ba:	2200      	movs	r2, #0
 80071bc:	2180      	movs	r1, #128	; 0x80
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fc98 	bl	8008af4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2240      	movs	r2, #64	; 0x40
 80071ce:	621a      	str	r2, [r3, #32]

  return ret;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b04      	cmp	r3, #4
 800720c:	d006      	beq.n	800721c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	b2da      	uxtb	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2204      	movs	r2, #4
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b04      	cmp	r3, #4
 8007244:	d106      	bne.n	8007254 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800724c:	b2da      	uxtb	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b03      	cmp	r3, #3
 8007274:	d110      	bne.n	8007298 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	; 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e01c      	b.n	80072fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d115      	bne.n	80072fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32ae      	adds	r2, #174	; 0xae
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	; 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	4611      	mov	r1, r2
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32ae      	adds	r2, #174	; 0xae
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007324:	2303      	movs	r3, #3
 8007326:	e01c      	b.n	8007362 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b03      	cmp	r3, #3
 8007332:	d115      	bne.n	8007360 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32ae      	adds	r2, #174	; 0xae
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32ae      	adds	r2, #174	; 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	4611      	mov	r1, r2
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00e      	beq.n	80073bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6852      	ldr	r2, [r2, #4]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	4611      	mov	r1, r2
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073b8:	2303      	movs	r3, #3
 80073ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	429a      	cmp	r2, r3
 8007420:	d920      	bls.n	8007464 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800742a:	e013      	b.n	8007454 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800742c:	f107 030a 	add.w	r3, r7, #10
 8007430:	4619      	mov	r1, r3
 8007432:	6978      	ldr	r0, [r7, #20]
 8007434:	f000 f81b 	bl	800746e <USBD_GetNextDesc>
 8007438:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b05      	cmp	r3, #5
 8007440:	d108      	bne.n	8007454 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	429a      	cmp	r2, r3
 800744e:	d008      	beq.n	8007462 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	885b      	ldrh	r3, [r3, #2]
 8007458:	b29a      	uxth	r2, r3
 800745a:	897b      	ldrh	r3, [r7, #10]
 800745c:	429a      	cmp	r2, r3
 800745e:	d8e5      	bhi.n	800742c <USBD_GetEpDesc+0x32>
 8007460:	e000      	b.n	8007464 <USBD_GetEpDesc+0x6a>
          break;
 8007462:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007464:	693b      	ldr	r3, [r7, #16]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	881a      	ldrh	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	4413      	add	r3, r2
 8007488:	b29a      	uxth	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4413      	add	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	3301      	adds	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074c6:	8a3b      	ldrh	r3, [r7, #16]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	b21a      	sxth	r2, r3
 80074cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074d6:	89fb      	ldrh	r3, [r7, #14]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d005      	beq.n	800750a <USBD_StdDevReq+0x26>
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d857      	bhi.n	80075b2 <USBD_StdDevReq+0xce>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <USBD_StdDevReq+0x42>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d153      	bne.n	80075b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	32ae      	adds	r2, #174	; 0xae
 8007514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e04a      	b.n	80075bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b09      	cmp	r3, #9
 800752c:	d83b      	bhi.n	80075a6 <USBD_StdDevReq+0xc2>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USBD_StdDevReq+0x50>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007589 	.word	0x08007589
 8007538:	0800759d 	.word	0x0800759d
 800753c:	080075a7 	.word	0x080075a7
 8007540:	08007593 	.word	0x08007593
 8007544:	080075a7 	.word	0x080075a7
 8007548:	08007567 	.word	0x08007567
 800754c:	0800755d 	.word	0x0800755d
 8007550:	080075a7 	.word	0x080075a7
 8007554:	0800757f 	.word	0x0800757f
 8007558:	08007571 	.word	0x08007571
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa3c 	bl	80079dc <USBD_GetDescriptor>
          break;
 8007564:	e024      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fbcb 	bl	8007d04 <USBD_SetAddress>
          break;
 800756e:	e01f      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fc0a 	bl	8007d8c <USBD_SetConfig>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]
          break;
 800757c:	e018      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fcad 	bl	8007ee0 <USBD_GetConfig>
          break;
 8007586:	e013      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fcde 	bl	8007f4c <USBD_GetStatus>
          break;
 8007590:	e00e      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fd0d 	bl	8007fb4 <USBD_SetFeature>
          break;
 800759a:	e009      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd31 	bl	8008006 <USBD_ClrFeature>
          break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd88 	bl	80080be <USBD_CtlError>
          break;
 80075ae:	bf00      	nop
      }
      break;
 80075b0:	e004      	b.n	80075bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fd82 	bl	80080be <USBD_CtlError>
      break;
 80075ba:	bf00      	nop
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop

080075c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d005      	beq.n	80075ee <USBD_StdItfReq+0x26>
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d852      	bhi.n	800768c <USBD_StdItfReq+0xc4>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <USBD_StdItfReq+0x26>
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d14e      	bne.n	800768c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d840      	bhi.n	800767e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	889b      	ldrh	r3, [r3, #4]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b01      	cmp	r3, #1
 8007604:	d836      	bhi.n	8007674 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	889b      	ldrh	r3, [r3, #4]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fed9 	bl	80073c6 <USBD_CoreFindIF>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2bff      	cmp	r3, #255	; 0xff
 800761c:	d01d      	beq.n	800765a <USBD_StdItfReq+0x92>
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11a      	bne.n	800765a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007624:	7bba      	ldrb	r2, [r7, #14]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32ae      	adds	r2, #174	; 0xae
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007634:	7bba      	ldrb	r2, [r7, #14]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800763c:	7bba      	ldrb	r2, [r7, #14]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32ae      	adds	r2, #174	; 0xae
 8007642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007652:	e004      	b.n	800765e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007658:	e001      	b.n	800765e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800765a:	2303      	movs	r3, #3
 800765c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	88db      	ldrh	r3, [r3, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d110      	bne.n	8007688 <USBD_StdItfReq+0xc0>
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10d      	bne.n	8007688 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fdf1 	bl	8008254 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007672:	e009      	b.n	8007688 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fd21 	bl	80080be <USBD_CtlError>
          break;
 800767c:	e004      	b.n	8007688 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fd1c 	bl	80080be <USBD_CtlError>
          break;
 8007686:	e000      	b.n	800768a <USBD_StdItfReq+0xc2>
          break;
 8007688:	bf00      	nop
      }
      break;
 800768a:	e004      	b.n	8007696 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fd15 	bl	80080be <USBD_CtlError>
      break;
 8007694:	bf00      	nop
  }

  return ret;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076bc:	2b40      	cmp	r3, #64	; 0x40
 80076be:	d007      	beq.n	80076d0 <USBD_StdEPReq+0x30>
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	f200 817f 	bhi.w	80079c4 <USBD_StdEPReq+0x324>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d02a      	beq.n	8007720 <USBD_StdEPReq+0x80>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	f040 817a 	bne.w	80079c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fe83 	bl	80073e0 <USBD_CoreFindEP>
 80076da:	4603      	mov	r3, r0
 80076dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076de:	7b7b      	ldrb	r3, [r7, #13]
 80076e0:	2bff      	cmp	r3, #255	; 0xff
 80076e2:	f000 8174 	beq.w	80079ce <USBD_StdEPReq+0x32e>
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 8170 	bne.w	80079ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076ee:	7b7a      	ldrb	r2, [r7, #13]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076f6:	7b7a      	ldrb	r2, [r7, #13]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	32ae      	adds	r2, #174	; 0xae
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8163 	beq.w	80079ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007708:	7b7a      	ldrb	r2, [r7, #13]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	32ae      	adds	r2, #174	; 0xae
 800770e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800771e:	e156      	b.n	80079ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d008      	beq.n	800773a <USBD_StdEPReq+0x9a>
 8007728:	2b03      	cmp	r3, #3
 800772a:	f300 8145 	bgt.w	80079b8 <USBD_StdEPReq+0x318>
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 809b 	beq.w	800786a <USBD_StdEPReq+0x1ca>
 8007734:	2b01      	cmp	r3, #1
 8007736:	d03c      	beq.n	80077b2 <USBD_StdEPReq+0x112>
 8007738:	e13e      	b.n	80079b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d002      	beq.n	800774c <USBD_StdEPReq+0xac>
 8007746:	2b03      	cmp	r3, #3
 8007748:	d016      	beq.n	8007778 <USBD_StdEPReq+0xd8>
 800774a:	e02c      	b.n	80077a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <USBD_StdEPReq+0xce>
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d00a      	beq.n	800776e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fa3d 	bl	8008bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007762:	2180      	movs	r1, #128	; 0x80
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fa39 	bl	8008bdc <USBD_LL_StallEP>
 800776a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800776c:	e020      	b.n	80077b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fca4 	bl	80080be <USBD_CtlError>
              break;
 8007776:	e01b      	b.n	80077b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10e      	bne.n	800779e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <USBD_StdEPReq+0xfe>
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b80      	cmp	r3, #128	; 0x80
 800778a:	d008      	beq.n	800779e <USBD_StdEPReq+0xfe>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	88db      	ldrh	r3, [r3, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fa1f 	bl	8008bdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fd58 	bl	8008254 <USBD_CtlSendStatus>

              break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc88 	bl	80080be <USBD_CtlError>
              break;
 80077ae:	bf00      	nop
          }
          break;
 80077b0:	e107      	b.n	80079c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d002      	beq.n	80077c4 <USBD_StdEPReq+0x124>
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d016      	beq.n	80077f0 <USBD_StdEPReq+0x150>
 80077c2:	e04b      	b.n	800785c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <USBD_StdEPReq+0x146>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b80      	cmp	r3, #128	; 0x80
 80077ce:	d00a      	beq.n	80077e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fa01 	bl	8008bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077da:	2180      	movs	r1, #128	; 0x80
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f9fd 	bl	8008bdc <USBD_LL_StallEP>
 80077e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e4:	e040      	b.n	8007868 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc68 	bl	80080be <USBD_CtlError>
              break;
 80077ee:	e03b      	b.n	8007868 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	885b      	ldrh	r3, [r3, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d136      	bne.n	8007866 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fa1e 	bl	8008c48 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fd21 	bl	8008254 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fde2 	bl	80073e0 <USBD_CoreFindEP>
 800781c:	4603      	mov	r3, r0
 800781e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007820:	7b7b      	ldrb	r3, [r7, #13]
 8007822:	2bff      	cmp	r3, #255	; 0xff
 8007824:	d01f      	beq.n	8007866 <USBD_StdEPReq+0x1c6>
 8007826:	7b7b      	ldrb	r3, [r7, #13]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d11c      	bne.n	8007866 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800782c:	7b7a      	ldrb	r2, [r7, #13]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007834:	7b7a      	ldrb	r2, [r7, #13]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32ae      	adds	r2, #174	; 0xae
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d010      	beq.n	8007866 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007844:	7b7a      	ldrb	r2, [r7, #13]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32ae      	adds	r2, #174	; 0xae
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
 8007856:	4603      	mov	r3, r0
 8007858:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800785a:	e004      	b.n	8007866 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc2d 	bl	80080be <USBD_CtlError>
              break;
 8007864:	e000      	b.n	8007868 <USBD_StdEPReq+0x1c8>
              break;
 8007866:	bf00      	nop
          }
          break;
 8007868:	e0ab      	b.n	80079c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d002      	beq.n	800787c <USBD_StdEPReq+0x1dc>
 8007876:	2b03      	cmp	r3, #3
 8007878:	d032      	beq.n	80078e0 <USBD_StdEPReq+0x240>
 800787a:	e097      	b.n	80079ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <USBD_StdEPReq+0x1f2>
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d004      	beq.n	8007892 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc17 	bl	80080be <USBD_CtlError>
                break;
 8007890:	e091      	b.n	80079b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da0b      	bge.n	80078b2 <USBD_StdEPReq+0x212>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	3310      	adds	r3, #16
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	3304      	adds	r3, #4
 80078b0:	e00b      	b.n	80078ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	4413      	add	r3, r2
 80078c8:	3304      	adds	r3, #4
 80078ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2202      	movs	r2, #2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fc61 	bl	80081a0 <USBD_CtlSendData>
              break;
 80078de:	e06a      	b.n	80079b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da11      	bge.n	800790c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	f003 020f 	and.w	r2, r3, #15
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	3324      	adds	r3, #36	; 0x24
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d117      	bne.n	8007932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fbda 	bl	80080be <USBD_CtlError>
                  break;
 800790a:	e054      	b.n	80079b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fbc7 	bl	80080be <USBD_CtlError>
                  break;
 8007930:	e041      	b.n	80079b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	da0b      	bge.n	8007952 <USBD_StdEPReq+0x2b2>
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	3310      	adds	r3, #16
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	e00b      	b.n	800796a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <USBD_StdEPReq+0x2d8>
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d103      	bne.n	8007980 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e00e      	b.n	800799e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 f995 	bl	8008cb4 <USBD_LL_IsStallEP>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e002      	b.n	800799e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2202      	movs	r2, #2
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fbfb 	bl	80081a0 <USBD_CtlSendData>
              break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fb85 	bl	80080be <USBD_CtlError>
              break;
 80079b4:	bf00      	nop
          }
          break;
 80079b6:	e004      	b.n	80079c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fb7f 	bl	80080be <USBD_CtlError>
          break;
 80079c0:	bf00      	nop
      }
      break;
 80079c2:	e005      	b.n	80079d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fb79 	bl	80080be <USBD_CtlError>
      break;
 80079cc:	e000      	b.n	80079d0 <USBD_StdEPReq+0x330>
      break;
 80079ce:	bf00      	nop
  }

  return ret;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b0e      	cmp	r3, #14
 80079fe:	f200 8152 	bhi.w	8007ca6 <USBD_GetDescriptor+0x2ca>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <USBD_GetDescriptor+0x2c>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	08007a91 	.word	0x08007a91
 8007a10:	08007ad1 	.word	0x08007ad1
 8007a14:	08007ca7 	.word	0x08007ca7
 8007a18:	08007ca7 	.word	0x08007ca7
 8007a1c:	08007c47 	.word	0x08007c47
 8007a20:	08007c73 	.word	0x08007c73
 8007a24:	08007ca7 	.word	0x08007ca7
 8007a28:	08007ca7 	.word	0x08007ca7
 8007a2c:	08007ca7 	.word	0x08007ca7
 8007a30:	08007ca7 	.word	0x08007ca7
 8007a34:	08007ca7 	.word	0x08007ca7
 8007a38:	08007ca7 	.word	0x08007ca7
 8007a3c:	08007ca7 	.word	0x08007ca7
 8007a40:	08007a45 	.word	0x08007a45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a66:	e126      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fb27 	bl	80080be <USBD_CtlError>
        err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
      break;
 8007a76:	e11e      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
      break;
 8007a8e:	e112      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10d      	bne.n	8007ab4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f107 0208 	add.w	r2, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	2202      	movs	r2, #2
 8007ab0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ab2:	e100      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	f107 0208 	add.w	r2, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e0f2      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	f200 80ac 	bhi.w	8007c34 <USBD_GetDescriptor+0x258>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <USBD_GetDescriptor+0x108>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007afd 	.word	0x08007afd
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b65 	.word	0x08007b65
 8007af0:	08007b99 	.word	0x08007b99
 8007af4:	08007bcd 	.word	0x08007bcd
 8007af8:	08007c01 	.word	0x08007c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 0108 	add.w	r1, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1e:	e091      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 facb 	bl	80080be <USBD_CtlError>
            err++;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2e:	e089      	b.n	8007c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	7c12      	ldrb	r2, [r2, #16]
 8007b48:	f107 0108 	add.w	r1, r7, #8
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b52:	e077      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fab1 	bl	80080be <USBD_CtlError>
            err++;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	72fb      	strb	r3, [r7, #11]
          break;
 8007b62:	e06f      	b.n	8007c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b86:	e05d      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa97 	bl	80080be <USBD_CtlError>
            err++;
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	3301      	adds	r3, #1
 8007b94:	72fb      	strb	r3, [r7, #11]
          break;
 8007b96:	e055      	b.n	8007c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 0108 	add.w	r1, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bba:	e043      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa7d 	bl	80080be <USBD_CtlError>
            err++;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bca:	e03b      	b.n	8007c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bee:	e029      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa63 	bl	80080be <USBD_CtlError>
            err++;
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfe:	e021      	b.n	8007c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	7c12      	ldrb	r2, [r2, #16]
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c22:	e00f      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa49 	bl	80080be <USBD_CtlError>
            err++;
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	72fb      	strb	r3, [r7, #11]
          break;
 8007c32:	e007      	b.n	8007c44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa41 	bl	80080be <USBD_CtlError>
          err++;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c42:	bf00      	nop
      }
      break;
 8007c44:	e037      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7c1b      	ldrb	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	f107 0208 	add.w	r2, r7, #8
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4798      	blx	r3
 8007c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c60:	e029      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa2a 	bl	80080be <USBD_CtlError>
        err++;
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c70:	e021      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10d      	bne.n	8007c96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	f107 0208 	add.w	r2, r7, #8
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
 8007c8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	2207      	movs	r2, #7
 8007c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c94:	e00f      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa10 	bl	80080be <USBD_CtlError>
        err++;
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca4:	e007      	b.n	8007cb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa08 	bl	80080be <USBD_CtlError>
      err++;
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb4:	bf00      	nop
  }

  if (err != 0U)
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11e      	bne.n	8007cfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	88db      	ldrh	r3, [r3, #6]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d016      	beq.n	8007cf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007cc4:	893b      	ldrh	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00e      	beq.n	8007ce8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	88da      	ldrh	r2, [r3, #6]
 8007cce:	893b      	ldrh	r3, [r7, #8]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bf28      	it	cs
 8007cd4:	4613      	movcs	r3, r2
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cda:	893b      	ldrh	r3, [r7, #8]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa5d 	bl	80081a0 <USBD_CtlSendData>
 8007ce6:	e009      	b.n	8007cfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9e7 	bl	80080be <USBD_CtlError>
 8007cf0:	e004      	b.n	8007cfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 faae 	bl	8008254 <USBD_CtlSendStatus>
 8007cf8:	e000      	b.n	8007cfc <USBD_GetDescriptor+0x320>
    return;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop

08007d04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	889b      	ldrh	r3, [r3, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d131      	bne.n	8007d7a <USBD_SetAddress+0x76>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d12d      	bne.n	8007d7a <USBD_SetAddress+0x76>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	2b7f      	cmp	r3, #127	; 0x7f
 8007d24:	d829      	bhi.n	8007d7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d104      	bne.n	8007d48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9bc 	bl	80080be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	e01d      	b.n	8007d84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7bfa      	ldrb	r2, [r7, #15]
 8007d4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 ffd9 	bl	8008d0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa7a 	bl	8008254 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6e:	e009      	b.n	8007d84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d78:	e004      	b.n	8007d84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f99e 	bl	80080be <USBD_CtlError>
  }
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	4b4e      	ldr	r3, [pc, #312]	; (8007edc <USBD_SetConfig+0x150>)
 8007da2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007da4:	4b4d      	ldr	r3, [pc, #308]	; (8007edc <USBD_SetConfig+0x150>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d905      	bls.n	8007db8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f985 	bl	80080be <USBD_CtlError>
    return USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e08c      	b.n	8007ed2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d002      	beq.n	8007dca <USBD_SetConfig+0x3e>
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d029      	beq.n	8007e1c <USBD_SetConfig+0x90>
 8007dc8:	e075      	b.n	8007eb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dca:	4b44      	ldr	r3, [pc, #272]	; (8007edc <USBD_SetConfig+0x150>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d020      	beq.n	8007e14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dd2:	4b42      	ldr	r3, [pc, #264]	; (8007edc <USBD_SetConfig+0x150>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ddc:	4b3f      	ldr	r3, [pc, #252]	; (8007edc <USBD_SetConfig+0x150>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fe ffb7 	bl	8006d56 <USBD_SetClassConfig>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f962 	bl	80080be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e02:	e065      	b.n	8007ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa25 	bl	8008254 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e12:	e05d      	b.n	8007ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa1d 	bl	8008254 <USBD_CtlSendStatus>
      break;
 8007e1a:	e059      	b.n	8007ed0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e1c:	4b2f      	ldr	r3, [pc, #188]	; (8007edc <USBD_SetConfig+0x150>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d112      	bne.n	8007e4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	; (8007edc <USBD_SetConfig+0x150>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e36:	4b29      	ldr	r3, [pc, #164]	; (8007edc <USBD_SetConfig+0x150>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe ffa6 	bl	8006d8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa06 	bl	8008254 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e48:	e042      	b.n	8007ed0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <USBD_SetConfig+0x150>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d02a      	beq.n	8007eae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fe ff94 	bl	8006d8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <USBD_SetConfig+0x150>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <USBD_SetConfig+0x150>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fe ff6d 	bl	8006d56 <USBD_SetClassConfig>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00f      	beq.n	8007ea6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f918 	bl	80080be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fe ff79 	bl	8006d8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ea4:	e014      	b.n	8007ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f9d4 	bl	8008254 <USBD_CtlSendStatus>
      break;
 8007eac:	e010      	b.n	8007ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f9d0 	bl	8008254 <USBD_CtlSendStatus>
      break;
 8007eb4:	e00c      	b.n	8007ed0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f900 	bl	80080be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ebe:	4b07      	ldr	r3, [pc, #28]	; (8007edc <USBD_SetConfig+0x150>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fe ff62 	bl	8006d8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ece:	bf00      	nop
  }

  return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000274 	.word	0x20000274

08007ee0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	88db      	ldrh	r3, [r3, #6]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d004      	beq.n	8007efc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f8e2 	bl	80080be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007efa:	e023      	b.n	8007f44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	dc02      	bgt.n	8007f0e <USBD_GetConfig+0x2e>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc03      	bgt.n	8007f14 <USBD_GetConfig+0x34>
 8007f0c:	e015      	b.n	8007f3a <USBD_GetConfig+0x5a>
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d00b      	beq.n	8007f2a <USBD_GetConfig+0x4a>
 8007f12:	e012      	b.n	8007f3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f93c 	bl	80081a0 <USBD_CtlSendData>
        break;
 8007f28:	e00c      	b.n	8007f44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f934 	bl	80081a0 <USBD_CtlSendData>
        break;
 8007f38:	e004      	b.n	8007f44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f8be 	bl	80080be <USBD_CtlError>
        break;
 8007f42:	bf00      	nop
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d81e      	bhi.n	8007fa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d004      	beq.n	8007f76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f8a5 	bl	80080be <USBD_CtlError>
        break;
 8007f74:	e01a      	b.n	8007fac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f043 0202 	orr.w	r2, r3, #2
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	330c      	adds	r3, #12
 8007f96:	2202      	movs	r2, #2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f900 	bl	80081a0 <USBD_CtlSendData>
      break;
 8007fa0:	e004      	b.n	8007fac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f88a 	bl	80080be <USBD_CtlError>
      break;
 8007faa:	bf00      	nop
  }
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d107      	bne.n	8007fd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f940 	bl	8008254 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fd4:	e013      	b.n	8007ffe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d10b      	bne.n	8007ff6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	0a1b      	lsrs	r3, r3, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f930 	bl	8008254 <USBD_CtlSendStatus>
}
 8007ff4:	e003      	b.n	8007ffe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f860 	bl	80080be <USBD_CtlError>
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008016:	b2db      	uxtb	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	2b02      	cmp	r3, #2
 800801c:	d80b      	bhi.n	8008036 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	885b      	ldrh	r3, [r3, #2]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d10c      	bne.n	8008040 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f910 	bl	8008254 <USBD_CtlSendStatus>
      }
      break;
 8008034:	e004      	b.n	8008040 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f840 	bl	80080be <USBD_CtlError>
      break;
 800803e:	e000      	b.n	8008042 <USBD_ClrFeature+0x3c>
      break;
 8008040:	bf00      	nop
  }
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3301      	adds	r3, #1
 8008072:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7ff fa17 	bl	80074a8 <SWAPBYTE>
 800807a:	4603      	mov	r3, r0
 800807c:	461a      	mov	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff fa0a 	bl	80074a8 <SWAPBYTE>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff f9fd 	bl	80074a8 <SWAPBYTE>
 80080ae:	4603      	mov	r3, r0
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	80da      	strh	r2, [r3, #6]
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd86 	bl	8008bdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fd82 	bl	8008bdc <USBD_LL_StallEP>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d036      	beq.n	8008164 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f000 f836 	bl	800816c <USBD_GetLen>
 8008100:	4603      	mov	r3, r0
 8008102:	3301      	adds	r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	4413      	add	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	701a      	strb	r2, [r3, #0]
  idx++;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	3301      	adds	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	2203      	movs	r2, #3
 8008128:	701a      	strb	r2, [r3, #0]
  idx++;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	3301      	adds	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008130:	e013      	b.n	800815a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	4413      	add	r3, r2
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	7812      	ldrb	r2, [r2, #0]
 800813c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3301      	adds	r3, #1
 8008142:	613b      	str	r3, [r7, #16]
    idx++;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	3301      	adds	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	4413      	add	r3, r2
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
    idx++;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	3301      	adds	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e7      	bne.n	8008132 <USBD_GetString+0x52>
 8008162:	e000      	b.n	8008166 <USBD_GetString+0x86>
    return;
 8008164:	bf00      	nop
  }
}
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800817c:	e005      	b.n	800818a <USBD_GetLen+0x1e>
  {
    len++;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	3301      	adds	r3, #1
 8008182:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3301      	adds	r3, #1
 8008188:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f5      	bne.n	800817e <USBD_GetLen+0x12>
  }

  return len;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	2100      	movs	r1, #0
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fdd6 	bl	8008d78 <USBD_LL_Transmit>

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	2100      	movs	r1, #0
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 fdc5 	bl	8008d78 <USBD_LL_Transmit>

  return USBD_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2203      	movs	r2, #3
 8008208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	2100      	movs	r1, #0
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fde0 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fdcf 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2204      	movs	r2, #4
 8008260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008264:	2300      	movs	r3, #0
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fd84 	bl	8008d78 <USBD_LL_Transmit>

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2205      	movs	r2, #5
 8008286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800828a:	2300      	movs	r3, #0
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fda9 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082a4:	2200      	movs	r2, #0
 80082a6:	4912      	ldr	r1, [pc, #72]	; (80082f0 <MX_USB_DEVICE_Init+0x50>)
 80082a8:	4812      	ldr	r0, [pc, #72]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082aa:	f7fe fcd7 	bl	8006c5c <USBD_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082b4:	f7f8 fb44 	bl	8000940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082b8:	490f      	ldr	r1, [pc, #60]	; (80082f8 <MX_USB_DEVICE_Init+0x58>)
 80082ba:	480e      	ldr	r0, [pc, #56]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082bc:	f7fe fcfe 	bl	8006cbc <USBD_RegisterClass>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082c6:	f7f8 fb3b 	bl	8000940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ca:	490c      	ldr	r1, [pc, #48]	; (80082fc <MX_USB_DEVICE_Init+0x5c>)
 80082cc:	4809      	ldr	r0, [pc, #36]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe fbf5 	bl	8006abc <USBD_CDC_RegisterInterface>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082d8:	f7f8 fb32 	bl	8000940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082de:	f7fe fd23 	bl	8006d28 <USBD_Start>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082e8:	f7f8 fb2a 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082ec:	bf00      	nop
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	200000ac 	.word	0x200000ac
 80082f4:	20000278 	.word	0x20000278
 80082f8:	20000018 	.word	0x20000018
 80082fc:	20000098 	.word	0x20000098

08008300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	4905      	ldr	r1, [pc, #20]	; (800831c <CDC_Init_FS+0x1c>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <CDC_Init_FS+0x20>)
 800830a:	f7fe fbf1 	bl	8006af0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800830e:	4905      	ldr	r1, [pc, #20]	; (8008324 <CDC_Init_FS+0x24>)
 8008310:	4803      	ldr	r0, [pc, #12]	; (8008320 <CDC_Init_FS+0x20>)
 8008312:	f7fe fc0f 	bl	8006b34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000d54 	.word	0x20000d54
 8008320:	20000278 	.word	0x20000278
 8008324:	20000554 	.word	0x20000554

08008328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800832c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800832e:	4618      	mov	r0, r3
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
 8008344:	4613      	mov	r3, r2
 8008346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	2b23      	cmp	r3, #35	; 0x23
 800834c:	d84a      	bhi.n	80083e4 <CDC_Control_FS+0xac>
 800834e:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <CDC_Control_FS+0x1c>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	080083e5 	.word	0x080083e5
 8008358:	080083e5 	.word	0x080083e5
 800835c:	080083e5 	.word	0x080083e5
 8008360:	080083e5 	.word	0x080083e5
 8008364:	080083e5 	.word	0x080083e5
 8008368:	080083e5 	.word	0x080083e5
 800836c:	080083e5 	.word	0x080083e5
 8008370:	080083e5 	.word	0x080083e5
 8008374:	080083e5 	.word	0x080083e5
 8008378:	080083e5 	.word	0x080083e5
 800837c:	080083e5 	.word	0x080083e5
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083e5 	.word	0x080083e5
 8008388:	080083e5 	.word	0x080083e5
 800838c:	080083e5 	.word	0x080083e5
 8008390:	080083e5 	.word	0x080083e5
 8008394:	080083e5 	.word	0x080083e5
 8008398:	080083e5 	.word	0x080083e5
 800839c:	080083e5 	.word	0x080083e5
 80083a0:	080083e5 	.word	0x080083e5
 80083a4:	080083e5 	.word	0x080083e5
 80083a8:	080083e5 	.word	0x080083e5
 80083ac:	080083e5 	.word	0x080083e5
 80083b0:	080083e5 	.word	0x080083e5
 80083b4:	080083e5 	.word	0x080083e5
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	080083e5 	.word	0x080083e5
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083e5 	.word	0x080083e5
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083e5 	.word	0x080083e5
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083e5 	.word	0x080083e5
 80083dc:	080083e5 	.word	0x080083e5
 80083e0:	080083e5 	.word	0x080083e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083e4:	bf00      	nop
  }

  return (USBD_OK);
 80083e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4805      	ldr	r0, [pc, #20]	; (8008418 <CDC_Receive_FS+0x24>)
 8008402:	f7fe fb97 	bl	8006b34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008406:	4804      	ldr	r0, [pc, #16]	; (8008418 <CDC_Receive_FS+0x24>)
 8008408:	f7fe fbf2 	bl	8006bf0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800840c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000278 	.word	0x20000278

0800841c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <CDC_Transmit_FS+0x48>)
 800842e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008432:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800843e:	2301      	movs	r3, #1
 8008440:	e00b      	b.n	800845a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	461a      	mov	r2, r3
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4806      	ldr	r0, [pc, #24]	; (8008464 <CDC_Transmit_FS+0x48>)
 800844a:	f7fe fb51 	bl	8006af0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800844e:	4805      	ldr	r0, [pc, #20]	; (8008464 <CDC_Transmit_FS+0x48>)
 8008450:	f7fe fb8e 	bl	8006b70 <USBD_CDC_TransmitPacket>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000278 	.word	0x20000278

08008468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800847a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800847e:	4618      	mov	r0, r3
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2212      	movs	r2, #18
 800849c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	200000cc 	.word	0x200000cc

080084b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2204      	movs	r2, #4
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	200000ec 	.word	0x200000ec

080084d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4907      	ldr	r1, [pc, #28]	; (8008508 <USBD_FS_ProductStrDescriptor+0x34>)
 80084ea:	4808      	ldr	r0, [pc, #32]	; (800850c <USBD_FS_ProductStrDescriptor+0x38>)
 80084ec:	f7ff fdf8 	bl	80080e0 <USBD_GetString>
 80084f0:	e004      	b.n	80084fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4904      	ldr	r1, [pc, #16]	; (8008508 <USBD_FS_ProductStrDescriptor+0x34>)
 80084f6:	4805      	ldr	r0, [pc, #20]	; (800850c <USBD_FS_ProductStrDescriptor+0x38>)
 80084f8:	f7ff fdf2 	bl	80080e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001554 	.word	0x20001554
 800850c:	08008fd8 	.word	0x08008fd8

08008510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	4904      	ldr	r1, [pc, #16]	; (8008530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008520:	4804      	ldr	r0, [pc, #16]	; (8008534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008522:	f7ff fddd 	bl	80080e0 <USBD_GetString>
  return USBD_StrDesc;
 8008526:	4b02      	ldr	r3, [pc, #8]	; (8008530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20001554 	.word	0x20001554
 8008534:	08008fec 	.word	0x08008fec

08008538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	221a      	movs	r2, #26
 8008548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800854a:	f000 f855 	bl	80085f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800854e:	4b02      	ldr	r3, [pc, #8]	; (8008558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	200000f0 	.word	0x200000f0

0800855c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4907      	ldr	r1, [pc, #28]	; (8008590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008572:	4808      	ldr	r0, [pc, #32]	; (8008594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008574:	f7ff fdb4 	bl	80080e0 <USBD_GetString>
 8008578:	e004      	b.n	8008584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800857e:	4805      	ldr	r0, [pc, #20]	; (8008594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008580:	f7ff fdae 	bl	80080e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008584:	4b02      	ldr	r3, [pc, #8]	; (8008590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20001554 	.word	0x20001554
 8008594:	08009000 	.word	0x08009000

08008598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	6039      	str	r1, [r7, #0]
 80085a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4907      	ldr	r1, [pc, #28]	; (80085cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ae:	4808      	ldr	r0, [pc, #32]	; (80085d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085b0:	f7ff fd96 	bl	80080e0 <USBD_GetString>
 80085b4:	e004      	b.n	80085c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4904      	ldr	r1, [pc, #16]	; (80085cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ba:	4805      	ldr	r0, [pc, #20]	; (80085d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085bc:	f7ff fd90 	bl	80080e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20001554 	.word	0x20001554
 80085d0:	0800900c 	.word	0x0800900c

080085d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	220c      	movs	r2, #12
 80085e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	200000e0 	.word	0x200000e0

080085f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085fe:	4b0f      	ldr	r3, [pc, #60]	; (800863c <Get_SerialNum+0x44>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008604:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <Get_SerialNum+0x48>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800860a:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <Get_SerialNum+0x4c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800861e:	2208      	movs	r2, #8
 8008620:	4909      	ldr	r1, [pc, #36]	; (8008648 <Get_SerialNum+0x50>)
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f814 	bl	8008650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008628:	2204      	movs	r2, #4
 800862a:	4908      	ldr	r1, [pc, #32]	; (800864c <Get_SerialNum+0x54>)
 800862c:	68b8      	ldr	r0, [r7, #8]
 800862e:	f000 f80f 	bl	8008650 <IntToUnicode>
  }
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	1fff7590 	.word	0x1fff7590
 8008640:	1fff7594 	.word	0x1fff7594
 8008644:	1fff7598 	.word	0x1fff7598
 8008648:	200000f2 	.word	0x200000f2
 800864c:	20000102 	.word	0x20000102

08008650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
 8008666:	e027      	b.n	80086b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	0f1b      	lsrs	r3, r3, #28
 800866c:	2b09      	cmp	r3, #9
 800866e:	d80b      	bhi.n	8008688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	b2da      	uxtb	r2, r3
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4619      	mov	r1, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	440b      	add	r3, r1
 8008680:	3230      	adds	r2, #48	; 0x30
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	e00a      	b.n	800869e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	0f1b      	lsrs	r3, r3, #28
 800868c:	b2da      	uxtb	r2, r3
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	4619      	mov	r1, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	440b      	add	r3, r1
 8008698:	3237      	adds	r2, #55	; 0x37
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	3301      	adds	r3, #1
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4413      	add	r3, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	3301      	adds	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
 80086b8:	7dfa      	ldrb	r2, [r7, #23]
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d3d3      	bcc.n	8008668 <IntToUnicode+0x18>
  }
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b0ac      	sub	sp, #176	; 0xb0
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086e8:	f107 0314 	add.w	r3, r7, #20
 80086ec:	2288      	movs	r2, #136	; 0x88
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fc31 	bl	8008f58 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fe:	d173      	bne.n	80087e8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008704:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008706:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800870a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800870e:	2301      	movs	r3, #1
 8008710:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008716:	2318      	movs	r3, #24
 8008718:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800871a:	2307      	movs	r3, #7
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800871e:	2302      	movs	r3, #2
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008722:	2302      	movs	r3, #2
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008726:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	4618      	mov	r0, r3
 8008732:	f7fb f979 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800873c:	f7f8 f900 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008740:	4b2b      	ldr	r3, [pc, #172]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 8008742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008744:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800874c:	4b28      	ldr	r3, [pc, #160]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 800874e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008758:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800875c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008760:	2302      	movs	r3, #2
 8008762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876c:	2303      	movs	r3, #3
 800876e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008772:	230a      	movs	r3, #10
 8008774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800877c:	4619      	mov	r1, r3
 800877e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008782:	f7f8 fd39 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 800878c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d114      	bne.n	80087d4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ae:	4a10      	ldr	r2, [pc, #64]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6593      	str	r3, [r2, #88]	; 0x58
 80087b6:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80087c2:	f7fa fa65 	bl	8002c90 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c6:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <HAL_PCD_MspInit+0x120>)
 80087cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087d0:	6593      	str	r3, [r2, #88]	; 0x58
 80087d2:	e001      	b.n	80087d8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80087d4:	f7fa fa5c 	bl	8002c90 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	2043      	movs	r0, #67	; 0x43
 80087de:	f7f8 fcd4 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087e2:	2043      	movs	r0, #67	; 0x43
 80087e4:	f7f8 fced 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087e8:	bf00      	nop
 80087ea:	37b0      	adds	r7, #176	; 0xb0
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40021000 	.word	0x40021000

080087f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe fad9 	bl	8006dc2 <USBD_LL_SetupStage>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fb13 	bl	8006e6c <USBD_LL_DataOutStage>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3348      	adds	r3, #72	; 0x48
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	4619      	mov	r1, r3
 8008876:	f7fe fbac 	bl	8006fd2 <USBD_LL_DataInStage>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fce6 	bl	8007262 <USBD_LL_SOF>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d001      	beq.n	80088b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088b2:	f7f8 f845 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088bc:	7bfa      	ldrb	r2, [r7, #15]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fc8a 	bl	80071da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fc32 	bl	8007136 <USBD_LL_Reset>
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fc79 	bl	80071fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <HAL_PCD_SuspendCallback+0x48>)
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	4a03      	ldr	r2, [pc, #12]	; (8008924 <HAL_PCD_SuspendCallback+0x48>)
 8008916:	f043 0306 	orr.w	r3, r3, #6
 800891a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	e000ed00 	.word	0xe000ed00

08008928 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008942:	f023 0301 	bic.w	r3, r3, #1
 8008946:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008950:	4b08      	ldr	r3, [pc, #32]	; (8008974 <HAL_PCD_ResumeCallback+0x4c>)
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	4a07      	ldr	r2, [pc, #28]	; (8008974 <HAL_PCD_ResumeCallback+0x4c>)
 8008956:	f023 0306 	bic.w	r3, r3, #6
 800895a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800895c:	f000 faf6 	bl	8008f4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fc63 	bl	8007232 <USBD_LL_Resume>
}
 800896c:	bf00      	nop
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	e000ed00 	.word	0xe000ed00

08008978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fcb9 	bl	8007306 <USBD_LL_IsoOUTIncomplete>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fc75 	bl	80072a2 <USBD_LL_IsoINIncomplete>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fccb 	bl	800736a <USBD_LL_DevConnected>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fcc8 	bl	8007380 <USBD_LL_DevDisconnected>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d13c      	bne.n	8008a82 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a08:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a18:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a22:	2206      	movs	r2, #6
 8008a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a26:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a28:	2202      	movs	r2, #2
 8008a2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a2c:	4b17      	ldr	r3, [pc, #92]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a2e:	2202      	movs	r2, #2
 8008a30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a32:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a38:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a50:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a56:	480d      	ldr	r0, [pc, #52]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a58:	f7f8 feff 	bl	800185a <HAL_PCD_Init>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a62:	f7f7 ff6d 	bl	8000940 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	4808      	ldr	r0, [pc, #32]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a6a:	f7fa f868 	bl	8002b3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a6e:	2240      	movs	r2, #64	; 0x40
 8008a70:	2100      	movs	r1, #0
 8008a72:	4806      	ldr	r0, [pc, #24]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a74:	f7fa f81c 	bl	8002ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a78:	2280      	movs	r2, #128	; 0x80
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	4803      	ldr	r0, [pc, #12]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a7e:	f7fa f817 	bl	8002ab0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20001754 	.word	0x20001754

08008a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f8 fffb 	bl	8001aa2 <HAL_PCD_Start>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d816      	bhi.n	8008ae4 <USBD_LL_Start+0x54>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_LL_Start+0x2c>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008ad3 	.word	0x08008ad3
 8008ac4:	08008ad9 	.word	0x08008ad9
 8008ac8:	08008adf 	.word	0x08008adf
    case HAL_OK :
      usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e00b      	b.n	8008aea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e008      	b.n	8008aea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e005      	b.n	8008aea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	e002      	b.n	8008aea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	bf00      	nop
  }
  return usb_status;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	70fb      	strb	r3, [r7, #3]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70bb      	strb	r3, [r7, #2]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b1c:	78bb      	ldrb	r3, [r7, #2]
 8008b1e:	883a      	ldrh	r2, [r7, #0]
 8008b20:	78f9      	ldrb	r1, [r7, #3]
 8008b22:	f7f9 fca5 	bl	8002470 <HAL_PCD_EP_Open>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBD_LL_OpenEP+0x6c>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBD_LL_OpenEP+0x44>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
    case HAL_OK :
      usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f9 fcd6 	bl	8002540 <HAL_PCD_EP_Close>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d816      	bhi.n	8008bcc <USBD_LL_CloseEP+0x5c>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBD_LL_CloseEP+0x34>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bbb 	.word	0x08008bbb
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc7 	.word	0x08008bc7
    case HAL_OK :
      usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb8:	e00b      	b.n	8008bd2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbe:	e008      	b.n	8008bd2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc4:	e005      	b.n	8008bd2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bca:	e002      	b.n	8008bd2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	bf00      	nop
  }
  return usb_status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f9 fd65 	bl	80026ca <HAL_PCD_EP_SetStall>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d816      	bhi.n	8008c38 <USBD_LL_StallEP+0x5c>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBD_LL_StallEP+0x34>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c27 	.word	0x08008c27
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c33 	.word	0x08008c33
    case HAL_OK :
      usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e00b      	b.n	8008c3e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e008      	b.n	8008c3e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e005      	b.n	8008c3e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e002      	b.n	8008c3e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	bf00      	nop
  }
  return usb_status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f9 fd91 	bl	800278e <HAL_PCD_EP_ClrStall>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d816      	bhi.n	8008ca4 <USBD_LL_ClearStallEP+0x5c>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_LL_ClearStallEP+0x34>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c93 	.word	0x08008c93
 8008c84:	08008c99 	.word	0x08008c99
 8008c88:	08008c9f 	.word	0x08008c9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e00b      	b.n	8008caa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e008      	b.n	8008caa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e005      	b.n	8008caa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e002      	b.n	8008caa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	bf00      	nop
  }
  return usb_status;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da0b      	bge.n	8008ce8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	333e      	adds	r3, #62	; 0x3e
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	e00b      	b.n	8008d00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008cfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7f9 fb7b 	bl	8002426 <HAL_PCD_SetAddress>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d816      	bhi.n	8008d68 <USBD_LL_SetUSBAddress+0x5c>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <USBD_LL_SetUSBAddress+0x34>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d57 	.word	0x08008d57
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d63 	.word	0x08008d63
    case HAL_OK :
      usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e00b      	b.n	8008d6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d56:	2303      	movs	r3, #3
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e008      	b.n	8008d6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e005      	b.n	8008d6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e002      	b.n	8008d6e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	bf00      	nop
  }
  return usb_status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	460b      	mov	r3, r1
 8008d86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d96:	7af9      	ldrb	r1, [r7, #11]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f7f9 fc64 	bl	8002668 <HAL_PCD_EP_Transmit>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008da4:	7dbb      	ldrb	r3, [r7, #22]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d816      	bhi.n	8008dd8 <USBD_LL_Transmit+0x60>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_LL_Transmit+0x38>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dd3 	.word	0x08008dd3
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75fb      	strb	r3, [r7, #23]
    break;
 8008dc4:	e00b      	b.n	8008dde <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	75fb      	strb	r3, [r7, #23]
    break;
 8008dca:	e008      	b.n	8008dde <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
    break;
 8008dd0:	e005      	b.n	8008dde <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8008dd6:	e002      	b.n	8008dde <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	75fb      	strb	r3, [r7, #23]
    break;
 8008ddc:	bf00      	nop
  }
  return usb_status;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	460b      	mov	r3, r1
 8008df6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e06:	7af9      	ldrb	r1, [r7, #11]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	f7f9 fbe2 	bl	80025d4 <HAL_PCD_EP_Receive>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008e14:	7dbb      	ldrb	r3, [r7, #22]
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d816      	bhi.n	8008e48 <USBD_LL_PrepareReceive+0x60>
 8008e1a:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <USBD_LL_PrepareReceive+0x38>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e37 	.word	0x08008e37
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e43 	.word	0x08008e43
    case HAL_OK :
      usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75fb      	strb	r3, [r7, #23]
    break;
 8008e34:	e00b      	b.n	8008e4e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	75fb      	strb	r3, [r7, #23]
    break;
 8008e3a:	e008      	b.n	8008e4e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
    break;
 8008e40:	e005      	b.n	8008e4e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e42:	2303      	movs	r3, #3
 8008e44:	75fb      	strb	r3, [r7, #23]
    break;
 8008e46:	e002      	b.n	8008e4e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	75fb      	strb	r3, [r7, #23]
    break;
 8008e4c:	bf00      	nop
  }
  return usb_status;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f9 fbe2 	bl	8002638 <HAL_PCD_EP_GetRxCount>
 8008e74:	4603      	mov	r3, r0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <HAL_PCDEx_LPM_Callback+0x18>
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d01f      	beq.n	8008ed6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e96:	e03b      	b.n	8008f10 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ea0:	f000 f854 	bl	8008f4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	4a1b      	ldr	r2, [pc, #108]	; (8008f18 <HAL_PCDEx_LPM_Callback+0x98>)
 8008eaa:	f023 0306 	bic.w	r3, r3, #6
 8008eae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f9af 	bl	8007232 <USBD_LL_Resume>
    break;
 8008ed4:	e01c      	b.n	8008f10 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6812      	ldr	r2, [r2, #0]
 8008ee4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe f980 	bl	80071fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f08:	f043 0306 	orr.w	r3, r3, #6
 8008f0c:	6113      	str	r3, [r2, #16]
    break;
 8008f0e:	bf00      	nop
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	e000ed00 	.word	0xe000ed00

08008f1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f24:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <USBD_static_malloc+0x18>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20001c60 	.word	0x20001c60

08008f38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008f50:	f7f7 fc94 	bl	800087c <SystemClock_Config>
}
 8008f54:	bf00      	nop
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <memset>:
 8008f58:	4402      	add	r2, r0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d100      	bne.n	8008f62 <memset+0xa>
 8008f60:	4770      	bx	lr
 8008f62:	f803 1b01 	strb.w	r1, [r3], #1
 8008f66:	e7f9      	b.n	8008f5c <memset+0x4>

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	; (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	; (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	; (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	; (8008fac <__libc_init_array+0x44>)
 8008f7c:	f000 f818 	bl	8008fb0 <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	0800906c 	.word	0x0800906c
 8008fa4:	0800906c 	.word	0x0800906c
 8008fa8:	0800906c 	.word	0x0800906c
 8008fac:	08009070 	.word	0x08009070

08008fb0 <_init>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr

08008fbc <_fini>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr
